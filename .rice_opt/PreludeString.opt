Prog "PreludeString" ["PreludeBase","PreludeCompare","PreludeNum","PreludeList"] [] [Func ("Prelude","unlines") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [2] (Let [(3,Comb (FuncPartCall 3) ("Prelude","unlines#P0") [])] (Let [(4,Comb (FuncPartCall 1) ("Prelude","concatMap#P2") [])] (Comb FuncCall ("Prelude","build_fold") [Var 3,Var 4,Var 2])))),Func ("Prelude","unlines#P0") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb ConsCall ("StringConst","\n") [])] (Let [(6,Comb FuncCall ("Prelude","foldr") [Var 2,Var 4,Var 5])] (Comb FuncCall ("Prelude","foldr") [Var 2,Var 6,Var 3])))),Func ("Prelude","getChar") 0 Public (TCons ("Prelude","IO") [TCons ("Prelude","Char") []]) (External "Prelude.getChar"),Func ("Prelude","showError") 1 Public (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","IOError") [3]) (Let [(4,Comb (FuncPartCall 2) ("Prelude","showError#P1") [Var 3])] (Comb FuncCall ("Prelude","build") [Var 4])),Branch (Pattern ("Prelude","UserError") [5]) (Let [(6,Comb (FuncPartCall 2) ("Prelude","showError#P2") [Var 5])] (Comb FuncCall ("Prelude","build") [Var 6])),Branch (Pattern ("Prelude","FailError") [7]) (Let [(8,Comb (FuncPartCall 2) ("Prelude","showError#P3") [Var 7])] (Comb FuncCall ("Prelude","build") [Var 8])),Branch (Pattern ("Prelude","NondetError") [9]) (Let [(10,Comb (FuncPartCall 2) ("Prelude","showError#P4") [Var 9])] (Comb FuncCall ("Prelude","build") [Var 10]))])),Func ("Prelude","showError#P4") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","foldr") [Var 3,Var 4,Var 2])] (Let [(6,Comb ConsCall ("StringConst","nondet error: ") [])] (Comb FuncCall ("Prelude","foldr") [Var 3,Var 5,Var 6])))),Func ("Prelude","showError#P3") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","foldr") [Var 3,Var 4,Var 2])] (Let [(6,Comb ConsCall ("StringConst","fail error: ") [])] (Comb FuncCall ("Prelude","foldr") [Var 3,Var 5,Var 6])))),Func ("Prelude","showError#P2") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","foldr") [Var 3,Var 4,Var 2])] (Let [(6,Comb ConsCall ("StringConst","user error: ") [])] (Comb FuncCall ("Prelude","foldr") [Var 3,Var 5,Var 6])))),Func ("Prelude","showError#P1") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","foldr") [Var 3,Var 4,Var 2])] (Let [(6,Comb ConsCall ("StringConst","i/o error: ") [])] (Comb FuncCall ("Prelude","foldr") [Var 3,Var 5,Var 6])))),Func ("Prelude","isSpace") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [2] (Let [(3,Comb (FuncPartCall 2) ("Prelude","isSpace#P6") [Var 2])] (Let [(4,Comb ConsCall ("Prelude","False") [])] (Let [(5,Comb ConsCall ("StringConst"," \t\n\r\f\v") [])] (Let [(-6,Comb FuncCall ("Prelude","foldr") [Var 3,Var 4,Var 5])] (Case Flex (Var (-6)) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","False") []) (Let [(7,Comb FuncCall ("Prelude","ord") [Var 2])] (Let [(8,Comb (FuncPartCall 2) ("Prelude","isSpace#P5") [Var 7])] (Let [(9,Comb ConsCall ("Prelude","False") [])] (Let [(10,Comb ConsCall ("","int") [Lit (Intc 160)])] (Let [(11,Comb ConsCall ("","int") [Lit (Intc 5760)])] (Let [(12,Comb ConsCall ("","int") [Lit (Intc 6158)])] (Let [(13,Comb ConsCall ("","int") [Lit (Intc 8192)])] (Let [(14,Comb ConsCall ("","int") [Lit (Intc 8239)])] (Let [(15,Comb ConsCall ("","int") [Lit (Intc 8287)])] (Let [(16,Comb ConsCall ("","int") [Lit (Intc 12288)])] (Let [(17,Comb ConsCall ("Prelude","[]") [])] (Let [(18,Comb ConsCall ("Prelude",":") [Var 16,Var 17])] (Let [(19,Comb ConsCall ("Prelude",":") [Var 15,Var 18])] (Let [(20,Comb ConsCall ("Prelude",":") [Var 14,Var 19])] (Let [(21,Comb ConsCall ("Prelude",":") [Var 13,Var 20])] (Let [(22,Comb ConsCall ("Prelude",":") [Var 12,Var 21])] (Let [(23,Comb ConsCall ("Prelude",":") [Var 11,Var 22])] (Let [(24,Comb ConsCall ("Prelude",":") [Var 10,Var 23])] (Comb FuncCall ("Prelude","foldr") [Var 8,Var 9,Var 24])))))))))))))))))))])))))),Func ("Prelude","isSpace#P6") 3 Public (TVar 0) (Rule [2,3,4] (Case Rigid (Var 2) [Branch (Pattern ("","char") [5]) (Case Rigid (Var 3) [Branch (Pattern ("","char") [6]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 5,Var 6]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","False") []) (Var 4)])])])),Func ("Prelude","isSpace#P5") 3 Public (TVar 0) (Rule [2,3,4] (Case Rigid (Var 2) [Branch (Pattern ("","int") [5]) (Case Rigid (Var 3) [Branch (Pattern ("","int") [6]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqInt") [Var 5,Var 6]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","False") []) (Var 4)])])])),Func ("Prelude","lex_lexString_build") 1 Public (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,,)") [3,4,5]) (Let [(6,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 3,Var 4])] (Let [(7,Comb FuncCall ("Prelude","build") [Var 6])] (Comb ConsCall ("Prelude","(,)") [Var 7,Var 5])))])),Func ("Prelude","lex_lexPMExp_sgn") 3 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])))) (Rule [2,3,-4] (Case Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [5,6]) (Let [(7,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 3,Var 5])] (Let [(8,Comb FuncCall ("Prelude","build") [Var 7])] (Let [(9,Comb ConsCall ("Prelude",":") [Var 2,Var 8])] (Comb ConsCall ("Prelude","(,)") [Var 9,Var 6]))))])),Func ("Prelude","makeTriple") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 2]) (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]))) (Rule [2,-3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude","(,,)") [Var 2,Var 4,Var 5])])),Func ("Prelude","lex_lexFracExp_dot") 1 Public (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,,)") [3,4,5]) (Let [(6,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 3,Var 4])] (Let [(7,Comb FuncCall ("Prelude","build") [Var 6])] (Let [(8,Comb ConsCall ("","char") [Lit (Charc '.')])] (Let [(9,Comb ConsCall ("Prelude",":") [Var 8,Var 7])] (Comb ConsCall ("Prelude","(,)") [Var 9,Var 5])))))])),Func ("Prelude","lex_isSym") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [2] (Let [(3,Comb (FuncPartCall 2) ("Prelude","lex_isSym#P7") [Var 2])] (Let [(4,Comb ConsCall ("Prelude","False") [])] (Let [(5,Comb ConsCall ("StringConst","!@#$&+./<=?\\^|:~") [])] (Comb FuncCall ("Prelude","foldr") [Var 3,Var 4,Var 5]))))),Func ("Prelude","lex_isSym#P7") 3 Public (TVar 0) (Rule [2,3,4] (Case Rigid (Var 2) [Branch (Pattern ("","char") [5]) (Case Rigid (Var 3) [Branch (Pattern ("","char") [6]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 5,Var 6]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","False") []) (Var 4)])])])),Func ("Prelude","lex_isSingle") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [2] (Let [(3,Comb (FuncPartCall 2) ("Prelude","lex_isSingle#P8") [Var 2])] (Let [(4,Comb ConsCall ("Prelude","False") [])] (Let [(5,Comb ConsCall ("StringConst",",;()[]{}_") [])] (Comb FuncCall ("Prelude","foldr") [Var 3,Var 4,Var 5]))))),Func ("Prelude","lex_isSingle#P8") 3 Public (TVar 0) (Rule [2,3,4] (Case Rigid (Var 2) [Branch (Pattern ("","char") [5]) (Case Rigid (Var 3) [Branch (Pattern ("","char") [6]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 5,Var 6]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","False") []) (Var 4)])])])),Func ("Prelude","lex_else_frac") 3 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TVar 1]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TVar 1])))) (Rule [2,3,-4] (Case Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [5,6]) (Let [(7,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 3,Var 5])] (Let [(8,Comb FuncCall ("Prelude","build") [Var 7])] (Let [(9,Comb ConsCall ("Prelude",":") [Var 2,Var 8])] (Comb ConsCall ("Prelude","(,)") [Var 9,Var 6]))))])),Func ("Prelude","lex_lexDoubleQuote") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TVar 0])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Let [(5,Comb ConsCall ("","char") [Lit (Charc '"')])] (Let [(6,Comb ConsCall ("Prelude",":") [Var 5,Var 3])] (Comb ConsCall ("Prelude","(,)") [Var 6,Var 4])))])),Func ("Prelude","lex_filterSingleQuote") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","Bool") [])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Var 5) [Branch (Pattern ("","char") [7]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 7,Lit (Charc '\'')]),Branch (Pattern ("Prelude","True") []) (Let [(8,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [])] (Let [(9,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char") [])] (Let [(10,Comb ConsCall ("Prelude","_Dict#Eq") [Var 8,Var 9])] (Let [(11,Comb ConsCall ("StringConst","'") [])] (Let [(-12,Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Var 10,Var 3,Var 11])] (Case Flex (Var (-12)) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])])))))),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])])])])])),Func ("Prelude","lex_lexSingleQuote") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Let [(5,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude","(,)") [Var 3,Var 5])),Branch (Pattern ("Prelude",":") [6,7]) (Let [(8,Comb (FuncPartCall 2) ("Prelude","lex_lexSingleQuote#P9") [Var 3])] (Let [(9,Comb FuncCall ("Prelude","build") [Var 8])] (Let [(10,Comb ConsCall ("Prelude",":") [Var 6,Var 9])] (Comb ConsCall ("Prelude","(,)") [Var 10,Var 7]))))])])),Func ("Prelude","lex_lexSingleQuote#P9") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb ConsCall ("StringConst","'") [])] (Let [(6,Comb FuncCall ("Prelude","foldr") [Var 3,Var 4,Var 5])] (Comb FuncCall ("Prelude","foldr") [Var 3,Var 6,Var 2])))),Func ("Prelude","lexLitChar_lexPrefix") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TVar 1]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TVar 1]))) (Rule [2,-3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Let [(6,Comb ConsCall ("Prelude",":") [Var 2,Var 4])] (Comb ConsCall ("Prelude","(,)") [Var 6,Var 5]))])),Func ("Prelude","lexLitChar_isAt") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") [])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude",":") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("","char") [5]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Lit (Charc '@'),Var 5]),Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 5,Lit (Charc '_')]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])])])])),Func ("Prelude","lexLitChar_runEsc_6") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [-2,3] (Case Rigid (Var 2) [Branch (Pattern ("","char") [4]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 4,Lit (Charc '^')]),Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Var 5) [Branch (Pattern ("","char") [7]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Lit (Charc '@'),Var 7]),Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 7,Lit (Charc '_')]),Branch (Pattern ("Prelude","True") []) (Let [(8,Comb ConsCall ("","char") [Lit (Charc '^')])] (Let [(9,Comb ConsCall ("","char") [Var 4])] (Let [(10,Comb ConsCall ("Prelude","[]") [])] (Let [(11,Comb ConsCall ("Prelude",":") [Var 9,Var 10])] (Let [(12,Comb ConsCall ("Prelude",":") [Var 8,Var 11])] (Let [(13,Comb ConsCall ("","char") [Var 7])] (Let [(14,Comb ConsCall ("Prelude",":") [Var 13,Var 6])] (Let [(15,Comb ConsCall ("Prelude","(,)") [Var 12,Var 14])] (Let [(16,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 15,Var 16])))))))))),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])])),Func ("Prelude","showList") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Show") [3,4,5]) (Var 5)])),Func ("Prelude","showsPrec") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Show") [3,4,5]) (Var 4)])),Func ("Prelude","show") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Show") [3,4,5]) (Var 3)])),Func ("Prelude","_def#showsPrec#Prelude.Show") 4 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","show") [Var 2])] (Let [(7,Comb FuncCall ("Prelude","apply") [Var 6,Var 4])] (Let [(8,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 7,Var 5])] (Comb FuncCall ("Prelude","build") [Var 8]))))),Func ("Prelude","isOctDigit") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("","char") [3]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Lit (Charc '0'),Var 3]),Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 3,Lit (Charc '7')]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])])])),Func ("Prelude","isBinDigit") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("","char") [3]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Lit (Charc '0'),Var 3]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 3,Lit (Charc '1')])])])),Func ("Prelude","isDigit") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("","char") [3]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Lit (Charc '0'),Var 3]),Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 3,Lit (Charc '9')]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])])])),Func ("Prelude","isHexDigit") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("","char") [3]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Lit (Charc '0'),Var 3]),Branch (Pattern ("Prelude","True") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 3,Lit (Charc '9')]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","False") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Lit (Charc 'A'),Var 3]),Branch (Pattern ("Prelude","True") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 3,Lit (Charc 'F')]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","False") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Lit (Charc 'a'),Var 3]),Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 3,Lit (Charc 'f')]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])])]),Branch (Pattern ("Prelude","False") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Lit (Charc 'a'),Var 3]),Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 3,Lit (Charc 'f')]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])])])]),Branch (Pattern ("Prelude","False") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Lit (Charc 'A'),Var 3]),Branch (Pattern ("Prelude","True") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 3,Lit (Charc 'F')]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","False") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Lit (Charc 'a'),Var 3]),Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 3,Lit (Charc 'f')]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])])]),Branch (Pattern ("Prelude","False") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Lit (Charc 'a'),Var 3]),Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 3,Lit (Charc 'f')]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])])])])])),Func ("Prelude","lexLitChar_isCharName") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("","char") [3]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Lit (Charc 'A'),Var 3]),Branch (Pattern ("Prelude","True") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 3,Lit (Charc 'Z')]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","False") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Lit (Charc '0'),Var 3]),Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 3,Lit (Charc '9')]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])])]),Branch (Pattern ("Prelude","False") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Lit (Charc '0'),Var 3]),Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 3,Lit (Charc '9')]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])])])])),Func ("Prelude","lexLitChar_runEsc_5") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [-2,3] (Case Rigid (Var 2) [Branch (Pattern ("","char") [4]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Lit (Charc 'A'),Var 4]),Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 4,Lit (Charc 'Z')]),Branch (Pattern ("Prelude","True") []) (Let [(5,Comb (FuncPartCall 1) ("Prelude","lexLitChar_isCharName") [])] (Let [(6,Comb ConsCall ("","char") [Var 4])] (Let [(7,Comb ConsCall ("Prelude",":") [Var 6,Var 3])] (Let [(8,Comb FuncCall ("Prelude","span") [Var 5,Var 7])] (Let [(9,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 8,Var 9])))))),Branch (Pattern ("Prelude","False") []) (Let [(10,Comb ConsCall ("","char") [Var 4])] (Comb FuncCall ("Prelude","lexLitChar_runEsc_6") [Var 10,Var 3]))]),Branch (Pattern ("Prelude","False") []) (Let [(11,Comb ConsCall ("","char") [Var 4])] (Comb FuncCall ("Prelude","lexLitChar_runEsc_6") [Var 11,Var 3]))])])),Func ("Prelude","lexLitChar_runEsc_4") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [-2,3] (Case Rigid (Var 2) [Branch (Pattern ("","char") [4]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Lit (Charc '0'),Var 4]),Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 4,Lit (Charc '9')]),Branch (Pattern ("Prelude","True") []) (Let [(5,Comb (FuncPartCall 1) ("Prelude","isDigit") [])] (Let [(6,Comb ConsCall ("","char") [Var 4])] (Let [(7,Comb ConsCall ("Prelude",":") [Var 6,Var 3])] (Let [(8,Comb FuncCall ("Prelude","span") [Var 5,Var 7])] (Let [(9,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 8,Var 9])))))),Branch (Pattern ("Prelude","False") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Lit (Charc 'A'),Var 4]),Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 4,Lit (Charc 'Z')]),Branch (Pattern ("Prelude","True") []) (Let [(10,Comb (FuncPartCall 1) ("Prelude","lexLitChar_isCharName") [])] (Let [(11,Comb ConsCall ("","char") [Var 4])] (Let [(12,Comb ConsCall ("Prelude",":") [Var 11,Var 3])] (Let [(13,Comb FuncCall ("Prelude","span") [Var 10,Var 12])] (Let [(14,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 13,Var 14])))))),Branch (Pattern ("Prelude","False") []) (Let [(15,Comb ConsCall ("","char") [Var 4])] (Comb FuncCall ("Prelude","lexLitChar_runEsc_6") [Var 15,Var 3]))]),Branch (Pattern ("Prelude","False") []) (Let [(16,Comb ConsCall ("","char") [Var 4])] (Comb FuncCall ("Prelude","lexLitChar_runEsc_6") [Var 16,Var 3]))])]),Branch (Pattern ("Prelude","False") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Lit (Charc 'A'),Var 4]),Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 4,Lit (Charc 'Z')]),Branch (Pattern ("Prelude","True") []) (Let [(17,Comb (FuncPartCall 1) ("Prelude","lexLitChar_isCharName") [])] (Let [(18,Comb ConsCall ("","char") [Var 4])] (Let [(19,Comb ConsCall ("Prelude",":") [Var 18,Var 3])] (Let [(20,Comb FuncCall ("Prelude","span") [Var 17,Var 19])] (Let [(21,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 20,Var 21])))))),Branch (Pattern ("Prelude","False") []) (Let [(22,Comb ConsCall ("","char") [Var 4])] (Comb FuncCall ("Prelude","lexLitChar_runEsc_6") [Var 22,Var 3]))]),Branch (Pattern ("Prelude","False") []) (Let [(23,Comb ConsCall ("","char") [Var 4])] (Comb FuncCall ("Prelude","lexLitChar_runEsc_6") [Var 23,Var 3]))])])])),Func ("Prelude","lexLitChar_runEsc_3") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [-2,3] (Case Rigid (Var 2) [Branch (Pattern ("","char") [4]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 4,Lit (Charc 'x')]),Branch (Pattern ("Prelude","True") []) (Let [(5,Comb (FuncPartCall 1) ("Prelude","isHexDigit") [])] (Let [(6,Comb FuncCall ("Prelude","span") [Var 5,Var 3])] (Let [(7,Comb ConsCall ("","char") [Lit (Charc 'x')])] (Let [(8,Comb FuncCall ("Prelude","lexLitChar_lexPrefix") [Var 7,Var 6])] (Let [(9,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 8,Var 9])))))),Branch (Pattern ("Prelude","False") []) (Let [(10,Comb ConsCall ("","char") [Var 4])] (Comb FuncCall ("Prelude","lexLitChar_runEsc_4") [Var 10,Var 3]))])])),Func ("Prelude","lexLitChar_runEsc_2") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [-2,3] (Case Rigid (Var 2) [Branch (Pattern ("","char") [4]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 4,Lit (Charc 'o')]),Branch (Pattern ("Prelude","True") []) (Let [(5,Comb (FuncPartCall 1) ("Prelude","isOctDigit") [])] (Let [(6,Comb FuncCall ("Prelude","span") [Var 5,Var 3])] (Let [(7,Comb ConsCall ("","char") [Lit (Charc 'o')])] (Let [(8,Comb FuncCall ("Prelude","lexLitChar_lexPrefix") [Var 7,Var 6])] (Let [(9,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 8,Var 9])))))),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 4,Lit (Charc 'x')]),Branch (Pattern ("Prelude","True") []) (Let [(10,Comb (FuncPartCall 1) ("Prelude","isHexDigit") [])] (Let [(11,Comb FuncCall ("Prelude","span") [Var 10,Var 3])] (Let [(12,Comb ConsCall ("","char") [Lit (Charc 'x')])] (Let [(13,Comb FuncCall ("Prelude","lexLitChar_lexPrefix") [Var 12,Var 11])] (Let [(14,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 13,Var 14])))))),Branch (Pattern ("Prelude","False") []) (Let [(15,Comb ConsCall ("","char") [Var 4])] (Comb FuncCall ("Prelude","lexLitChar_runEsc_4") [Var 15,Var 3]))])])])),Func ("Prelude","lexLitChar_runEsc_1") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [-2,3] (Case Rigid (Var 2) [Branch (Pattern ("","char") [4]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 4,Lit (Charc 'b')]),Branch (Pattern ("Prelude","True") []) (Let [(5,Comb (FuncPartCall 1) ("Prelude","isBinDigit") [])] (Let [(6,Comb FuncCall ("Prelude","span") [Var 5,Var 3])] (Let [(7,Comb ConsCall ("","char") [Lit (Charc 'b')])] (Let [(8,Comb FuncCall ("Prelude","lexLitChar_lexPrefix") [Var 7,Var 6])] (Let [(9,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 8,Var 9])))))),Branch (Pattern ("Prelude","False") []) (Let [(10,Comb ConsCall ("","char") [Var 4])] (Comb FuncCall ("Prelude","lexLitChar_runEsc_2") [Var 10,Var 3]))])])),Func ("Prelude","lexLitChar_runEsc") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [2,3] (Let [(4,Comb (FuncPartCall 2) ("Prelude","lexLitChar_runEsc#P10") [Var 2])] (Let [(5,Comb ConsCall ("Prelude","False") [])] (Let [(6,Comb ConsCall ("StringConst","afnrtv\\\"'") [])] (Let [(-7,Comb FuncCall ("Prelude","foldr") [Var 4,Var 5,Var 6])] (Case Rigid (Var (-7)) [Branch (Pattern ("Prelude","True") []) (Let [(8,Comb ConsCall ("Prelude","[]") [])] (Let [(9,Comb ConsCall ("Prelude",":") [Var 2,Var 8])] (Let [(10,Comb ConsCall ("Prelude","(,)") [Var 9,Var 3])] (Let [(11,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 10,Var 11]))))),Branch (Pattern ("Prelude","False") []) (Case Rigid (Var 2) [Branch (Pattern ("","char") [12]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 12,Lit (Charc 'b')]),Branch (Pattern ("Prelude","True") []) (Let [(13,Comb (FuncPartCall 1) ("Prelude","isBinDigit") [])] (Let [(14,Comb FuncCall ("Prelude","span") [Var 13,Var 3])] (Let [(15,Comb ConsCall ("","char") [Lit (Charc 'b')])] (Let [(16,Comb FuncCall ("Prelude","lexLitChar_lexPrefix") [Var 15,Var 14])] (Let [(17,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 16,Var 17])))))),Branch (Pattern ("Prelude","False") []) (Let [(18,Comb ConsCall ("","char") [Var 12])] (Comb FuncCall ("Prelude","lexLitChar_runEsc_2") [Var 18,Var 3]))])])])))))),Func ("Prelude","lexLitChar_runEsc#P10") 3 Public (TVar 0) (Rule [2,3,4] (Case Rigid (Var 2) [Branch (Pattern ("","char") [5]) (Case Rigid (Var 3) [Branch (Pattern ("","char") [6]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 5,Var 6]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","False") []) (Var 4)])])])),Func ("Prelude","lexLitChar_lexEsc") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("Prelude","lexLitChar_runEsc") [Var 3,Var 4]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])])),Func ("Prelude","lexLitChar") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("","char") [5]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 5,Lit (Charc '\\')]),Branch (Pattern ("Prelude","True") []) (Let [(6,Comb FuncCall ("Prelude","lexLitChar#A0") [Var 4])] (Let [(7,Comb (FuncPartCall 3) ("Prelude","lexLitChar#P11") [])] (Let [(8,Comb (FuncPartCall 1) ("Prelude","id") [])] (Comb FuncCall ("Prelude","build_fold") [Var 7,Var 8,Var 6])))),Branch (Pattern ("Prelude","False") []) (Let [(9,Comb ConsCall ("","char") [Var 5])] (Let [(10,Comb ConsCall ("Prelude","[]") [])] (Let [(11,Comb ConsCall ("Prelude",":") [Var 9,Var 10])] (Let [(12,Comb ConsCall ("Prelude","(,)") [Var 11,Var 4])] (Let [(13,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 12,Var 13]))))))])])])),Func ("Prelude","lexLitChar#A0") 1 Public (TVar 0) (Rule [2] (Case Rigid (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("Prelude","lexLitChar_runEsc") [Var 3,Var 4]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])])),Func ("Prelude","lexLitChar#P11") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb ConsCall ("","char") [Lit (Charc '\\')])] (Let [(6,Comb FuncCall ("Prelude","lexLitChar_lexPrefix") [Var 5,Var 3])] (Comb FuncCall ("Prelude","apply") [Var 2,Var 6,Var 4])))),Func ("Prelude","lex_lexStrItem") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("","char") [5]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 5,Lit (Charc '\\')]),Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Var 6) [Branch (Pattern ("","char") [8]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 8,Lit (Charc '&')]),Branch (Pattern ("Prelude","True") []) (Let [(9,Comb ConsCall ("StringConst","\\&") [])] (Let [(10,Comb ConsCall ("Prelude","(,)") [Var 9,Var 7])] (Let [(11,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 10,Var 11])))),Branch (Pattern ("Prelude","False") []) (Let [(12,Comb ConsCall ("","char") [Var 8])] (Let [(-13,Comb FuncCall ("Prelude","isSpace") [Var 12])] (Case Rigid (Var (-13)) [Branch (Pattern ("Prelude","True") []) (Let [(14,Comb (FuncPartCall 1) ("Prelude","isSpace") [])] (Let [(-15,Comb FuncCall ("Prelude","dropWhile") [Var 14,Var 7])] (Case Rigid (Var (-15)) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Var 16) [Branch (Pattern ("","char") [18]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 18,Lit (Charc '\\')]),Branch (Pattern ("Prelude","True") []) (Let [(19,Comb ConsCall ("StringConst","\\&") [])] (Let [(20,Comb ConsCall ("Prelude","(,)") [Var 19,Var 17])] (Let [(21,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 20,Var 21])))),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])]))),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 5,Lit (Charc '\\')]),Branch (Pattern ("Prelude","True") []) (Let [(22,Comb ConsCall ("","char") [Var 8])] (Let [(23,Comb FuncCall ("Prelude","lexLitChar_runEsc") [Var 22,Var 7])] (Let [(24,Comb (FuncPartCall 3) ("Prelude","lex_lexStrItem#P12") [])] (Let [(25,Comb (FuncPartCall 1) ("Prelude","id") [])] (Comb FuncCall ("Prelude","build_fold") [Var 24,Var 25,Var 23]))))),Branch (Pattern ("Prelude","False") []) (Let [(26,Comb ConsCall ("","char") [Var 5])] (Let [(27,Comb ConsCall ("Prelude","[]") [])] (Let [(28,Comb ConsCall ("Prelude",":") [Var 26,Var 27])] (Let [(29,Comb ConsCall ("","char") [Var 8])] (Let [(30,Comb ConsCall ("Prelude",":") [Var 29,Var 7])] (Let [(31,Comb ConsCall ("Prelude","(,)") [Var 28,Var 30])] (Let [(32,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 31,Var 32]))))))))])])))])]),Branch (Pattern ("Prelude","[]") []) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 5,Lit (Charc '\\')]),Branch (Pattern ("Prelude","True") []) (Let [(33,Comb (FuncPartCall 3) ("Prelude","lex_lexStrItem#P13") [])] (Let [(34,Comb (FuncPartCall 1) ("Prelude","id") [])] (Let [(35,Comb ConsCall ("Prelude","[]") [])] (Comb FuncCall ("Prelude","build_fold") [Var 33,Var 34,Var 35])))),Branch (Pattern ("Prelude","False") []) (Let [(36,Comb ConsCall ("","char") [Var 5])] (Let [(37,Comb ConsCall ("Prelude","[]") [])] (Let [(38,Comb ConsCall ("Prelude",":") [Var 36,Var 37])] (Let [(39,Comb ConsCall ("Prelude","[]") [])] (Let [(40,Comb ConsCall ("Prelude","(,)") [Var 38,Var 39])] (Let [(41,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 40,Var 41])))))))])]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 5,Lit (Charc '\\')]),Branch (Pattern ("Prelude","True") []) (Let [(42,Comb FuncCall ("Prelude","lex_lexStrItem#A1") [Var 4])] (Let [(43,Comb (FuncPartCall 3) ("Prelude","lex_lexStrItem#P14") [])] (Let [(44,Comb (FuncPartCall 1) ("Prelude","id") [])] (Comb FuncCall ("Prelude","build_fold") [Var 43,Var 44,Var 42])))),Branch (Pattern ("Prelude","False") []) (Let [(45,Comb ConsCall ("","char") [Var 5])] (Let [(46,Comb ConsCall ("Prelude","[]") [])] (Let [(47,Comb ConsCall ("Prelude",":") [Var 45,Var 46])] (Let [(48,Comb ConsCall ("Prelude","(,)") [Var 47,Var 4])] (Let [(49,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 48,Var 49]))))))])])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])])),Func ("Prelude","lex_lexStrItem#A1") 1 Public (TVar 0) (Rule [2] (Case Rigid (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("Prelude","lexLitChar_runEsc") [Var 3,Var 4]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])])),Func ("Prelude","lex_lexStrItem#P14") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb ConsCall ("","char") [Lit (Charc '\\')])] (Let [(6,Comb FuncCall ("Prelude","lexLitChar_lexPrefix") [Var 5,Var 3])] (Comb FuncCall ("Prelude","apply") [Var 2,Var 6,Var 4])))),Func ("Prelude","lex_lexStrItem#P13") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb ConsCall ("","char") [Lit (Charc '\\')])] (Let [(6,Comb FuncCall ("Prelude","lexLitChar_lexPrefix") [Var 5,Var 3])] (Comb FuncCall ("Prelude","apply") [Var 2,Var 6,Var 4])))),Func ("Prelude","lex_lexStrItem#P12") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb ConsCall ("","char") [Lit (Charc '\\')])] (Let [(6,Comb FuncCall ("Prelude","lexLitChar_lexPrefix") [Var 5,Var 3])] (Comb FuncCall ("Prelude","apply") [Var 2,Var 6,Var 4])))),Func ("Prelude","lex_lexString_string") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Let [(5,Comb FuncCall ("Prelude","lex_lexString") [Var 4])] (Let [(6,Comb (FuncPartCall 3) ("Prelude","lex_lexString_string#P15") [Var 3])] (Let [(7,Comb (FuncPartCall 1) ("Prelude","id") [])] (Comb FuncCall ("Prelude","build_fold") [Var 6,Var 7,Var 5]))))])),Func ("Prelude","lex_lexString_string#P15") 4 Public (TVar 0) (Rule [2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","makeTriple") [Var 2,Var 4])] (Comb FuncCall ("Prelude","apply") [Var 3,Var 6,Var 5]))),Func ("Prelude","isAlphaNum") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("","char") [3]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Lit (Charc 'A'),Var 3]),Branch (Pattern ("Prelude","True") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 3,Lit (Charc 'Z')]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","False") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Lit (Charc 'a'),Var 3]),Branch (Pattern ("Prelude","True") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 3,Lit (Charc 'z')]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","False") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Lit (Charc '0'),Var 3]),Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 3,Lit (Charc '9')]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])])]),Branch (Pattern ("Prelude","False") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Lit (Charc '0'),Var 3]),Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 3,Lit (Charc '9')]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])])])]),Branch (Pattern ("Prelude","False") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Lit (Charc 'a'),Var 3]),Branch (Pattern ("Prelude","True") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 3,Lit (Charc 'z')]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","False") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Lit (Charc '0'),Var 3]),Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 3,Lit (Charc '9')]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])])]),Branch (Pattern ("Prelude","False") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Lit (Charc '0'),Var 3]),Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 3,Lit (Charc '9')]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])])])])])),Func ("Prelude","lex_isIdChar") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [-2] (Let [(-3,Comb FuncCall ("Prelude","isAlphaNum") [Var 2])] (Case Flex (Var (-3)) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","False") []) (Let [(4,Comb (FuncPartCall 2) ("Prelude","lex_isIdChar#P16") [Var 2])] (Let [(5,Comb ConsCall ("Prelude","False") [])] (Let [(6,Comb ConsCall ("StringConst","_'") [])] (Comb FuncCall ("Prelude","foldr") [Var 4,Var 5,Var 6]))))]))),Func ("Prelude","lex_isIdChar#P16") 3 Public (TVar 0) (Rule [2,3,4] (Case Rigid (Var 2) [Branch (Pattern ("","char") [5]) (Case Rigid (Var 3) [Branch (Pattern ("","char") [6]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 5,Var 6]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","False") []) (Var 4)])])])),Func ("Prelude","nonNull._#lambda452") 2 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [-2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Let [(8,Comb ConsCall ("Prelude",":") [Var 6,Var 7])] (Let [(9,Comb ConsCall ("Prelude","(,)") [Var 8,Var 5])] (Comb ConsCall ("Prelude",":") [Var 9,Var 3]))),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Prelude","lexDigits") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [2] (Let [(3,Comb (FuncPartCall 1) ("Prelude","isDigit") [])] (Let [(4,Comb FuncCall ("Prelude","span") [Var 3,Var 2])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","nonNull._#lambda452") [])] (Let [(6,Comb ConsCall ("Prelude","[]") [])] (Let [(7,Comb ConsCall ("Prelude","[]") [])] (Let [(8,Comb ConsCall ("Prelude",":") [Var 4,Var 7])] (Comb FuncCall ("Prelude","foldr") [Var 5,Var 6,Var 8])))))))),Func ("Prelude","lex_lexPMExp") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [2,-3] (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("","char") [6]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 6,Lit (Charc '+')]),Branch (Pattern ("Prelude","True") []) (Let [(7,Comb (FuncPartCall 1) ("Prelude","isDigit") [])] (Let [(8,Comb FuncCall ("Prelude","span") [Var 7,Var 5])] (Let [(9,Comb (FuncPartCall 2) ("Prelude","nonNull._#lambda452") [])] (Let [(10,Comb ConsCall ("Prelude","[]") [])] (Let [(11,Comb ConsCall ("Prelude","[]") [])] (Let [(12,Comb ConsCall ("Prelude",":") [Var 8,Var 11])] (Let [(13,Comb FuncCall ("Prelude","foldr") [Var 9,Var 10,Var 12])] (Let [(14,Comb (FuncPartCall 3) ("Prelude","lex_lexPMExp#P17") [Var 2])] (Let [(15,Comb (FuncPartCall 1) ("Prelude","id") [])] (Comb FuncCall ("Prelude","build_fold") [Var 14,Var 15,Var 13])))))))))),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 6,Lit (Charc '-')]),Branch (Pattern ("Prelude","True") []) (Let [(16,Comb (FuncPartCall 1) ("Prelude","isDigit") [])] (Let [(17,Comb FuncCall ("Prelude","span") [Var 16,Var 5])] (Let [(18,Comb (FuncPartCall 2) ("Prelude","nonNull._#lambda452") [])] (Let [(19,Comb ConsCall ("Prelude","[]") [])] (Let [(20,Comb ConsCall ("Prelude","[]") [])] (Let [(21,Comb ConsCall ("Prelude",":") [Var 17,Var 20])] (Let [(22,Comb FuncCall ("Prelude","foldr") [Var 18,Var 19,Var 21])] (Let [(23,Comb (FuncPartCall 3) ("Prelude","lex_lexPMExp#P18") [Var 2])] (Let [(24,Comb (FuncPartCall 1) ("Prelude","id") [])] (Comb FuncCall ("Prelude","build_fold") [Var 23,Var 24,Var 22])))))))))),Branch (Pattern ("Prelude","False") []) (Let [(25,Comb (FuncPartCall 1) ("Prelude","isDigit") [])] (Let [(26,Comb ConsCall ("","char") [Var 6])] (Let [(27,Comb ConsCall ("Prelude",":") [Var 26,Var 5])] (Let [(28,Comb FuncCall ("Prelude","span") [Var 25,Var 27])] (Let [(29,Comb (FuncPartCall 2) ("Prelude","nonNull._#lambda452") [])] (Let [(30,Comb ConsCall ("Prelude","[]") [])] (Let [(31,Comb ConsCall ("Prelude","[]") [])] (Let [(32,Comb ConsCall ("Prelude",":") [Var 28,Var 31])] (Let [(33,Comb FuncCall ("Prelude","foldr") [Var 29,Var 30,Var 32])] (Let [(34,Comb (FuncPartCall 3) ("Prelude","lex_lexPMExp#P19") [Var 2])] (Let [(35,Comb (FuncPartCall 1) ("Prelude","id") [])] (Comb FuncCall ("Prelude","build_fold") [Var 34,Var 35,Var 33]))))))))))))])])]),Branch (Pattern ("Prelude","[]") []) (Let [(36,Comb (FuncPartCall 1) ("Prelude","isDigit") [])] (Let [(37,Comb ConsCall ("Prelude","[]") [])] (Let [(38,Comb FuncCall ("Prelude","span") [Var 36,Var 37])] (Let [(39,Comb (FuncPartCall 2) ("Prelude","nonNull._#lambda452") [])] (Let [(40,Comb ConsCall ("Prelude","[]") [])] (Let [(41,Comb ConsCall ("Prelude","[]") [])] (Let [(42,Comb ConsCall ("Prelude",":") [Var 38,Var 41])] (Let [(43,Comb FuncCall ("Prelude","foldr") [Var 39,Var 40,Var 42])] (Let [(44,Comb (FuncPartCall 3) ("Prelude","lex_lexPMExp#P20") [Var 2])] (Let [(45,Comb (FuncPartCall 1) ("Prelude","id") [])] (Comb FuncCall ("Prelude","build_fold") [Var 44,Var 45,Var 43])))))))))))])),Func ("Prelude","lex_lexPMExp#P20") 4 Public (TVar 0) (Rule [2,3,4,5] (Let [(6,Comb ConsCall ("Prelude","[]") [])] (Let [(7,Comb FuncCall ("Prelude","lex_lexPMExp_sgn") [Var 2,Var 6,Var 4])] (Comb FuncCall ("Prelude","apply") [Var 3,Var 7,Var 5])))),Func ("Prelude","lex_lexPMExp#P19") 4 Public (TVar 0) (Rule [2,3,4,5] (Let [(6,Comb ConsCall ("Prelude","[]") [])] (Let [(7,Comb FuncCall ("Prelude","lex_lexPMExp_sgn") [Var 2,Var 6,Var 4])] (Comb FuncCall ("Prelude","apply") [Var 3,Var 7,Var 5])))),Func ("Prelude","lex_lexPMExp#P18") 4 Public (TVar 0) (Rule [2,3,4,5] (Let [(6,Comb ConsCall ("StringConst","-") [])] (Let [(7,Comb FuncCall ("Prelude","lex_lexPMExp_sgn") [Var 2,Var 6,Var 4])] (Comb FuncCall ("Prelude","apply") [Var 3,Var 7,Var 5])))),Func ("Prelude","lex_lexPMExp#P17") 4 Public (TVar 0) (Rule [2,3,4,5] (Let [(6,Comb ConsCall ("StringConst","+") [])] (Let [(7,Comb FuncCall ("Prelude","lex_lexPMExp_sgn") [Var 2,Var 6,Var 4])] (Comb FuncCall ("Prelude","apply") [Var 3,Var 7,Var 5])))),Func ("Prelude","lex_lexExp") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("","char") [5]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 5,Lit (Charc 'e')]),Branch (Pattern ("Prelude","True") []) (Let [(6,Comb ConsCall ("","char") [Var 5])] (Comb FuncCall ("Prelude","lex_lexPMExp") [Var 6,Var 4])),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 5,Lit (Charc 'E')]),Branch (Pattern ("Prelude","True") []) (Let [(7,Comb ConsCall ("","char") [Var 5])] (Comb FuncCall ("Prelude","lex_lexPMExp") [Var 7,Var 4])),Branch (Pattern ("Prelude","False") []) (Let [(8,Comb ConsCall ("Prelude","[]") [])] (Let [(9,Comb ConsCall ("","char") [Var 5])] (Let [(10,Comb ConsCall ("Prelude",":") [Var 9,Var 4])] (Let [(11,Comb ConsCall ("Prelude","(,)") [Var 8,Var 10])] (Let [(12,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 11,Var 12]))))))])])]),Branch (Pattern ("Prelude","[]") []) (Let [(13,Comb ConsCall ("Prelude","[]") [])] (Let [(14,Comb ConsCall ("Prelude","[]") [])] (Let [(15,Comb ConsCall ("Prelude","(,)") [Var 13,Var 14])] (Let [(16,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 15,Var 16])))))])),Func ("Prelude","lex_lexFracExp_exp") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Let [(5,Comb FuncCall ("Prelude","lex_lexExp") [Var 4])] (Let [(6,Comb (FuncPartCall 3) ("Prelude","lex_lexFracExp_exp#P21") [Var 3])] (Let [(7,Comb (FuncPartCall 1) ("Prelude","id") [])] (Comb FuncCall ("Prelude","build_fold") [Var 6,Var 7,Var 5]))))])),Func ("Prelude","lex_lexFracExp_exp#P21") 4 Public (TVar 0) (Rule [2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","makeTriple") [Var 2,Var 4])] (Comb FuncCall ("Prelude","apply") [Var 3,Var 6,Var 5]))),Func ("Prelude","lex_lexFracExp") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("","char") [5]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 5,Lit (Charc '.')]),Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Var 6) [Branch (Pattern ("","char") [8]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Lit (Charc '0'),Var 8]),Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 8,Lit (Charc '9')]),Branch (Pattern ("Prelude","True") []) (Let [(9,Comb ConsCall ("","char") [Var 8])] (Let [(10,Comb ConsCall ("Prelude",":") [Var 9,Var 7])] (Let [(11,Comb FuncCall ("Prelude","lexDigits") [Var 10])] (Let [(12,Comb (FuncPartCall 3) ("Prelude","lex_lexFracExp#P22") [])] (Let [(13,Comb (FuncPartCall 1) ("Prelude","lex_lexFracExp#P23") [])] (Comb FuncCall ("Prelude","build_fold") [Var 12,Var 13,Var 11])))))),Branch (Pattern ("Prelude","False") []) (Let [(14,Comb ConsCall ("","char") [Var 5])] (Let [(15,Comb ConsCall ("","char") [Var 8])] (Let [(16,Comb ConsCall ("Prelude",":") [Var 15,Var 7])] (Let [(17,Comb ConsCall ("Prelude",":") [Var 14,Var 16])] (Comb FuncCall ("Prelude","lex_lexExp") [Var 17])))))]),Branch (Pattern ("Prelude","False") []) (Let [(18,Comb ConsCall ("","char") [Var 5])] (Let [(19,Comb ConsCall ("","char") [Var 8])] (Let [(20,Comb ConsCall ("Prelude",":") [Var 19,Var 7])] (Let [(21,Comb ConsCall ("Prelude",":") [Var 18,Var 20])] (Comb FuncCall ("Prelude","lex_lexExp") [Var 21])))))])]),Branch (Pattern ("Prelude","[]") []) (Let [(22,Comb ConsCall ("","char") [Var 5])] (Let [(23,Comb ConsCall ("Prelude","[]") [])] (Let [(24,Comb ConsCall ("Prelude",":") [Var 22,Var 23])] (Comb FuncCall ("Prelude","lex_lexExp") [Var 24]))))]),Branch (Pattern ("Prelude","False") []) (Let [(25,Comb ConsCall ("","char") [Var 5])] (Let [(26,Comb ConsCall ("Prelude",":") [Var 25,Var 4])] (Comb FuncCall ("Prelude","lex_lexExp") [Var 26])))])]),Branch (Pattern ("Prelude","[]") []) (Let [(27,Comb ConsCall ("Prelude","[]") [])] (Comb FuncCall ("Prelude","lex_lexExp") [Var 27]))])),Func ("Prelude","lex_lexFracExp#P23") 1 Public (TVar 0) (Rule [2] (Var 2)),Func ("Prelude","lex_lexFracExp#P22") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","lex_lexFracExp_exp") [Var 3])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","lex_lexFracExp#P22#P24") [Var 2])] (Comb FuncCall ("Prelude","foldr") [Var 6,Var 4,Var 5])))),Func ("Prelude","lex_lexFracExp#P22#P24") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","lex_lexFracExp_dot") [Var 3])] (Comb FuncCall ("Prelude","apply") [Var 2,Var 5,Var 4]))),Func ("Prelude","lex") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","[]") []) (Let [(3,Comb ConsCall ("Prelude","[]") [])] (Let [(4,Comb ConsCall ("Prelude","[]") [])] (Let [(5,Comb ConsCall ("Prelude","(,)") [Var 3,Var 4])] (Let [(6,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 5,Var 6]))))),Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Var 7) [Branch (Pattern ("","char") [9]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 9,Lit (Charc '\'')]),Branch (Pattern ("Prelude","True") []) (Let [(10,Comb FuncCall ("Prelude","lexLitChar") [Var 8])] (Let [(11,Comb (FuncPartCall 3) ("Prelude","lex#P25") [])] (Let [(12,Comb (FuncPartCall 1) ("Prelude","lex#P26") [])] (Comb FuncCall ("Prelude","build_fold") [Var 11,Var 12,Var 10])))),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 9,Lit (Charc '"')]),Branch (Pattern ("Prelude","True") []) (Let [(13,Comb FuncCall ("Prelude","lex_lexString") [Var 8])] (Let [(14,Comb (FuncPartCall 3) ("Prelude","lex#P27") [])] (Let [(15,Comb (FuncPartCall 1) ("Prelude","id") [])] (Comb FuncCall ("Prelude","build_fold") [Var 14,Var 15,Var 13])))),Branch (Pattern ("Prelude","False") []) (Let [(16,Comb ConsCall ("","char") [Var 9])] (Comb FuncCall ("Prelude","lex_else") [Var 16,Var 8]))])])])])),Func ("Prelude","lex#P27") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","lex_lexDoubleQuote") [Var 3])] (Comb FuncCall ("Prelude","apply") [Var 2,Var 5,Var 4]))),Func ("Prelude","lex#P26") 1 Public (TVar 0) (Rule [2] (Var 2)),Func ("Prelude","lex#P25") 3 Public (TVar 0) (Rule [2,3,4] (Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case Rigid (Var 6) [Branch (Pattern ("Prelude","[]") []) (Var 4),Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Var 7) [Branch (Pattern ("","char") [9]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 9,Lit (Charc '\'')]),Branch (Pattern ("Prelude","True") []) (Let [(10,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [])] (Let [(11,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char") [])] (Let [(12,Comb ConsCall ("Prelude","_Dict#Eq") [Var 10,Var 11])] (Let [(13,Comb ConsCall ("StringConst","'") [])] (Let [(-14,Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Var 12,Var 5,Var 13])] (Case Flex (Var (-14)) [Branch (Pattern ("Prelude","True") []) (Var 4),Branch (Pattern ("Prelude","False") []) (Let [(15,Comb (FuncPartCall 2) ("Prelude","lex#P25#P28") [Var 5])] (Let [(16,Comb FuncCall ("Prelude","build") [Var 15])] (Let [(17,Comb ConsCall ("","char") [Var 9])] (Let [(18,Comb ConsCall ("Prelude",":") [Var 17,Var 16])] (Let [(19,Comb ConsCall ("Prelude","(,)") [Var 18,Var 8])] (Comb FuncCall ("Prelude","apply") [Var 2,Var 19,Var 4]))))))])))))),Branch (Pattern ("Prelude","False") []) (Var 4)])])])])),Func ("Prelude","lex#P25#P28") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb ConsCall ("StringConst","'") [])] (Let [(6,Comb FuncCall ("Prelude","foldr") [Var 3,Var 4,Var 5])] (Comb FuncCall ("Prelude","foldr") [Var 3,Var 6,Var 2])))),Func ("Prelude","showChar") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,3] (Comb ConsCall ("Prelude",":") [Var 2,Var 3])),Func ("Prelude","showParen") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [-2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","True") []) (Comb (FuncPartCall 1) ("Prelude","showParen#P29") [Var 3]),Branch (Pattern ("Prelude","False") []) (Var 3)])),Func ("Prelude","showParen#P29") 2 Public (TVar 0) (Rule [2,3] (Let [(4,Comb ConsCall ("","char") [Lit (Charc ')')])] (Let [(5,Comb ConsCall ("Prelude",":") [Var 4,Var 3])] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 2,Var 5])] (Let [(7,Comb ConsCall ("","char") [Lit (Charc '(')])] (Comb ConsCall ("Prelude",":") [Var 7,Var 6])))))),Func ("Prelude","showSigned") 4 Public (FuncType (TCons ("Prelude","_Dict#Real") [TVar 0]) (FuncType (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","showSigned#A5") [Var 2])] (Let [(7,Comb FuncCall ("Prelude","<") [Var 6])] (Let [(8,Comb FuncCall ("Prelude","showSigned#A4") [Var 2])] (Let [(9,Comb FuncCall ("Prelude","fromInt") [Var 8])] (Let [(10,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(11,Comb FuncCall ("Prelude","apply") [Var 9,Var 10])] (Let [(12,Comb FuncCall ("Prelude","apply") [Var 7,Var 5,Var 11])] (Case Rigid (Var 12) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 4) [Branch (Pattern ("","int") [13]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Var 13,Lit (Intc 6)]),Branch (Pattern ("Prelude","True") []) (Let [(14,Comb FuncCall ("Prelude","showSigned#A2") [Var 2])] (Let [(15,Comb FuncCall ("Prelude","negate") [Var 14])] (Let [(16,Comb FuncCall ("Prelude","apply") [Var 15,Var 5])] (Let [(17,Comb FuncCall ("Prelude","apply") [Var 3,Var 16])] (Comb (FuncPartCall 1) ("Prelude","showSigned#P30") [Var 17]))))),Branch (Pattern ("Prelude","False") []) (Let [(18,Comb FuncCall ("Prelude","showSigned#A3") [Var 2])] (Let [(19,Comb FuncCall ("Prelude","negate") [Var 18])] (Let [(20,Comb FuncCall ("Prelude","apply") [Var 19,Var 5])] (Let [(21,Comb FuncCall ("Prelude","apply") [Var 3,Var 20])] (Comb (FuncPartCall 1) ("Prelude","showSigned#P31") [Var 21])))))])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","apply") [Var 3,Var 5])]))))))))),Func ("Prelude","showSigned#A5") 1 Public (TVar 0) (Rule [2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Real") [3,4]) (Var 4)])),Func ("Prelude","showSigned#A4") 1 Public (TVar 0) (Rule [2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Real") [3,4]) (Var 3)])),Func ("Prelude","showSigned#A3") 1 Public (TVar 0) (Rule [2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Real") [3,4]) (Var 3)])),Func ("Prelude","showSigned#A2") 1 Public (TVar 0) (Rule [2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Real") [3,4]) (Var 3)])),Func ("Prelude","showSigned#P31") 2 Public (TVar 0) (Rule [2,3] (Let [(4,Comb ConsCall ("","char") [Lit (Charc ')')])] (Let [(5,Comb ConsCall ("Prelude",":") [Var 4,Var 3])] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 2,Var 5])] (Let [(7,Comb ConsCall ("","char") [Lit (Charc '(')])] (Let [(8,Comb ConsCall ("","char") [Lit (Charc '-')])] (Let [(9,Comb ConsCall ("Prelude",":") [Var 8,Var 6])] (Comb ConsCall ("Prelude",":") [Var 7,Var 9])))))))),Func ("Prelude","showSigned#P30") 2 Public (TVar 0) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","apply") [Var 2,Var 3])] (Let [(5,Comb ConsCall ("","char") [Lit (Charc '-')])] (Comb ConsCall ("Prelude",":") [Var 5,Var 4])))),Func ("Prelude","showString") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [-2,3] (Let [(4,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Comb FuncCall ("Prelude","foldr") [Var 4,Var 3,Var 2]))),Func ("Prelude","shows") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2] (Let [(3,Comb FuncCall ("Prelude","showsPrec") [Var 2])] (Let [(4,Comb ConsCall ("","int") [Lit (Intc 0)])] (Comb FuncCall ("Prelude","apply") [Var 3,Var 4])))),Func ("Prelude","showList'#P32") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","foldr") [Var 3,Var 4,Var 2])] (Let [(6,Comb ConsCall ("StringConst","[]") [])] (Comb FuncCall ("Prelude","foldr") [Var 3,Var 5,Var 6])))),Func ("Prelude","prim_show") 1 Private (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (External "Prelude.prim_show"),Func ("Prelude","unwords._#lambda282") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,3] (Let [(4,Comb (FuncPartCall 2) ("Prelude","unwords._#lambda282#P33") [Var 2,Var 3])] (Comb FuncCall ("Prelude","build") [Var 4]))),Func ("Prelude","unwords._#lambda282#P33") 4 Public (TVar 0) (Rule [2,3,4,5] (Let [(6,Comb ConsCall ("","char") [Lit (Charc ' ')])] (Let [(7,Comb ConsCall ("Prelude",":") [Var 6,Var 3])] (Let [(8,Comb FuncCall ("Prelude","foldr") [Var 4,Var 5,Var 7])] (Comb FuncCall ("Prelude","foldr") [Var 4,Var 8,Var 2]))))),Func ("Prelude","unwords") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [2] (Let [(3,Comb (FuncPartCall 2) ("Prelude","null_fold") [])] (Let [(4,Comb ConsCall ("Prelude","True") [])] (Let [(-5,Comb FuncCall ("Prelude","foldr") [Var 3,Var 4,Var 2])] (Case Rigid (Var (-5)) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Let [(6,Comb (FuncPartCall 2) ("Prelude","unwords._#lambda282") [])] (Comb FuncCall ("Prelude","foldr1") [Var 6,Var 2]))]))))),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Either") 4 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [2,3,-4,-5] (Case Flex (Var 5) [Branch (Pattern ("Prelude","Left") [6]) (Case Rigid (Var 4) [Branch (Pattern ("","int") [7]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Var 7,Lit (Intc 10)]),Branch (Pattern ("Prelude","True") []) (Let [(8,Comb FuncCall ("Prelude","showsPrec") [Var 2])] (Let [(9,Comb ConsCall ("","int") [Lit (Intc 11)])] (Let [(10,Comb FuncCall ("Prelude","apply") [Var 8,Var 9,Var 6])] (Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Either#P34") [Var 10])))),Branch (Pattern ("Prelude","False") []) (Let [(11,Comb FuncCall ("Prelude","showsPrec") [Var 2])] (Let [(12,Comb ConsCall ("","int") [Lit (Intc 11)])] (Let [(13,Comb FuncCall ("Prelude","apply") [Var 11,Var 12,Var 6])] (Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Either#P35") [Var 13]))))])]),Branch (Pattern ("Prelude","Right") [14]) (Case Rigid (Var 4) [Branch (Pattern ("","int") [15]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Var 15,Lit (Intc 10)]),Branch (Pattern ("Prelude","True") []) (Let [(16,Comb FuncCall ("Prelude","showsPrec") [Var 3])] (Let [(17,Comb ConsCall ("","int") [Lit (Intc 11)])] (Let [(18,Comb FuncCall ("Prelude","apply") [Var 16,Var 17,Var 14])] (Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Either#P36") [Var 18])))),Branch (Pattern ("Prelude","False") []) (Let [(19,Comb FuncCall ("Prelude","showsPrec") [Var 3])] (Let [(20,Comb ConsCall ("","int") [Lit (Intc 11)])] (Let [(21,Comb FuncCall ("Prelude","apply") [Var 19,Var 20,Var 14])] (Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Either#P37") [Var 21]))))])])])),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Either#P37") 2 Public (TVar 0) (Rule [2,3] (Let [(4,Comb ConsCall ("","char") [Lit (Charc ')')])] (Let [(5,Comb ConsCall ("Prelude",":") [Var 4,Var 3])] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 2,Var 5])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Let [(8,Comb ConsCall ("StringConst","Right ") [])] (Let [(9,Comb FuncCall ("Prelude","foldr") [Var 7,Var 6,Var 8])] (Let [(10,Comb ConsCall ("","char") [Lit (Charc '(')])] (Comb ConsCall ("Prelude",":") [Var 10,Var 9]))))))))),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Either#P36") 2 Public (TVar 0) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","apply") [Var 2,Var 3])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Let [(6,Comb ConsCall ("StringConst","Right ") [])] (Comb FuncCall ("Prelude","foldr") [Var 5,Var 4,Var 6]))))),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Either#P35") 2 Public (TVar 0) (Rule [2,3] (Let [(4,Comb ConsCall ("","char") [Lit (Charc ')')])] (Let [(5,Comb ConsCall ("Prelude",":") [Var 4,Var 3])] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 2,Var 5])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Let [(8,Comb ConsCall ("StringConst","Left ") [])] (Let [(9,Comb FuncCall ("Prelude","foldr") [Var 7,Var 6,Var 8])] (Let [(10,Comb ConsCall ("","char") [Lit (Charc '(')])] (Comb ConsCall ("Prelude",":") [Var 10,Var 9]))))))))),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Either#P34") 2 Public (TVar 0) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","apply") [Var 2,Var 3])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Let [(6,Comb ConsCall ("StringConst","Left ") [])] (Comb FuncCall ("Prelude","foldr") [Var 5,Var 4,Var 6]))))),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Maybe") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [2,3,-4] (Case Flex (Var 4) [Branch (Pattern ("Prelude","Nothing") []) (Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Maybe#P38") []),Branch (Pattern ("Prelude","Just") [5]) (Case Rigid (Var 3) [Branch (Pattern ("","int") [6]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Var 6,Lit (Intc 10)]),Branch (Pattern ("Prelude","True") []) (Let [(7,Comb FuncCall ("Prelude","showsPrec") [Var 2])] (Let [(8,Comb ConsCall ("","int") [Lit (Intc 11)])] (Let [(9,Comb FuncCall ("Prelude","apply") [Var 7,Var 8,Var 5])] (Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Maybe#P39") [Var 9])))),Branch (Pattern ("Prelude","False") []) (Let [(10,Comb FuncCall ("Prelude","showsPrec") [Var 2])] (Let [(11,Comb ConsCall ("","int") [Lit (Intc 11)])] (Let [(12,Comb FuncCall ("Prelude","apply") [Var 10,Var 11,Var 5])] (Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Maybe#P40") [Var 12]))))])])])),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Maybe#P40") 2 Public (TVar 0) (Rule [2,3] (Let [(4,Comb ConsCall ("","char") [Lit (Charc ')')])] (Let [(5,Comb ConsCall ("Prelude",":") [Var 4,Var 3])] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 2,Var 5])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Let [(8,Comb ConsCall ("StringConst","Just ") [])] (Let [(9,Comb FuncCall ("Prelude","foldr") [Var 7,Var 6,Var 8])] (Let [(10,Comb ConsCall ("","char") [Lit (Charc '(')])] (Comb ConsCall ("Prelude",":") [Var 10,Var 9]))))))))),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Maybe#P39") 2 Public (TVar 0) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","apply") [Var 2,Var 3])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Let [(6,Comb ConsCall ("StringConst","Just ") [])] (Comb FuncCall ("Prelude","foldr") [Var 5,Var 4,Var 6]))))),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Maybe#P38") 1 Public (TVar 0) (Rule [2] (Let [(3,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Let [(4,Comb ConsCall ("StringConst","Nothing") [])] (Comb FuncCall ("Prelude","foldr") [Var 3,Var 2,Var 4])))),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Ordering") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,-3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","LT") []) (Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Ordering#P41") []),Branch (Pattern ("Prelude","EQ") []) (Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Ordering#P42") []),Branch (Pattern ("Prelude","GT") []) (Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Ordering#P43") [])])),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Ordering#P43") 1 Public (TVar 0) (Rule [2] (Let [(3,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Let [(4,Comb ConsCall ("StringConst","GT") [])] (Comb FuncCall ("Prelude","foldr") [Var 3,Var 2,Var 4])))),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Ordering#P42") 1 Public (TVar 0) (Rule [2] (Let [(3,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Let [(4,Comb ConsCall ("StringConst","EQ") [])] (Comb FuncCall ("Prelude","foldr") [Var 3,Var 2,Var 4])))),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Ordering#P41") 1 Public (TVar 0) (Rule [2] (Let [(3,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Let [(4,Comb ConsCall ("StringConst","LT") [])] (Comb FuncCall ("Prelude","foldr") [Var 3,Var 2,Var 4])))),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Bool") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,-3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","False") []) (Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Bool#P44") []),Branch (Pattern ("Prelude","True") []) (Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Bool#P45") [])])),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Bool#P45") 1 Public (TVar 0) (Rule [2] (Let [(3,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Let [(4,Comb ConsCall ("StringConst","True") [])] (Comb FuncCall ("Prelude","foldr") [Var 3,Var 2,Var 4])))),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Bool#P44") 1 Public (TVar 0) (Rule [2] (Let [(3,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Let [(4,Comb ConsCall ("StringConst","False") [])] (Comb FuncCall ("Prelude","foldr") [Var 3,Var 2,Var 4])))),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","_inst#Prelude.Real#Prelude.Float") [])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Float#P46") [])] (Comb FuncCall ("Prelude","showSigned") [Var 4,Var 5,Var 2,Var 3])))),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Float#P46") 2 Public (TVar 0) (Rule [2,3] (Let [(4,Comb (FuncPartCall 1) ("Prelude","prim_show") [])] (Let [(5,Comb FuncCall ("Prelude","$##") [Var 4,Var 2])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Comb FuncCall ("Prelude","foldr") [Var 6,Var 3,Var 5]))))),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","_inst#Prelude.Real#Prelude.Int") [])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Int#P47") [])] (Comb FuncCall ("Prelude","showSigned") [Var 4,Var 5,Var 2,Var 3])))),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Int#P47") 2 Public (TVar 0) (Rule [2,3] (Let [(4,Comb (FuncPartCall 1) ("Prelude","prim_show") [])] (Let [(5,Comb FuncCall ("Prelude","$##") [Var 4,Var 2])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Comb FuncCall ("Prelude","foldr") [Var 6,Var 3,Var 5]))))),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2] (Let [(3,Comb (FuncPartCall 2) ("Prelude","null_fold") [])] (Let [(4,Comb ConsCall ("Prelude","True") [])] (Let [(-5,Comb FuncCall ("Prelude","foldr") [Var 3,Var 4,Var 2])] (Case Rigid (Var (-5)) [Branch (Pattern ("Prelude","True") []) (Comb (FuncPartCall 1) ("Prelude","_impl#showList#Prelude.Show#Prelude.Char#P48") []),Branch (Pattern ("Prelude","False") []) (Let [(6,Comb (FuncPartCall 1) ("Prelude","prim_show") [])] (Let [(7,Comb FuncCall ("Prelude","$##") [Var 6,Var 2])] (Comb (FuncPartCall 1) ("Prelude","showString") [Var 7])))]))))),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Char#P48") 1 Public (TVar 0) (Rule [2] (Let [(3,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Let [(4,Comb ConsCall ("StringConst","\"\"") [])] (Comb FuncCall ("Prelude","foldr") [Var 3,Var 2,Var 4])))),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Char") 3 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,4] (Let [(5,Comb (FuncPartCall 1) ("Prelude","prim_show") [])] (Let [(6,Comb FuncCall ("Prelude","$##") [Var 5,Var 3])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Comb FuncCall ("Prelude","foldr") [Var 7,Var 4,Var 6]))))),Func ("Prelude","_impl#showsPrec#Prelude.Show#[]") 2 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [-2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Show") [4,5,6]) (Var 6)])),Func ("Prelude","_def#showList#Prelude.Show") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,-3,4] (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Let [(5,Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show#P49") [Var 4])] (Comb FuncCall ("Prelude","build") [Var 5])),Branch (Pattern ("Prelude",":") [6,7]) (Let [(8,Comb FuncCall ("Prelude","showsPrec") [Var 2])] (Let [(9,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(10,Comb FuncCall ("Prelude","apply") [Var 8,Var 9])] (Let [(11,Comb FuncCall ("Prelude","showList'.showl.429") [Var 4,Var 10,Var 7])] (Let [(12,Comb FuncCall ("Prelude","apply") [Var 10,Var 6,Var 11])] (Let [(13,Comb ConsCall ("","char") [Lit (Charc '[')])] (Comb ConsCall ("Prelude",":") [Var 13,Var 12])))))))])),Func ("Prelude","_def#showList#Prelude.Show#P49") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","foldr") [Var 3,Var 4,Var 2])] (Let [(6,Comb ConsCall ("StringConst","[]") [])] (Comb FuncCall ("Prelude","foldr") [Var 3,Var 5,Var 6])))),Func ("Prelude","_def#show#Prelude.Show") 2 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","showsPrec") [Var 2])] (Let [(5,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 4,Var 5])] (Let [(7,Comb ConsCall ("Prelude","[]") [])] (Comb FuncCall ("Prelude","apply") [Var 6,Var 3,Var 7])))))),Func ("Prelude","_inst#Prelude.Show#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","Either") [TVar 0,TVar 1]]))) (Rule [2,3] (Let [(4,Comb (FuncPartCall 1) ("Prelude","_impl#show#Prelude.Show#Prelude.Either") [Var 2,Var 3])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#showList#Prelude.Show#Prelude.Either") [Var 2,Var 3])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Either") [Var 2,Var 3])] (Comb ConsCall ("Prelude","_Dict#Show") [Var 4,Var 6,Var 5]))))),Func ("Prelude","_inst#Prelude.Show#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","Maybe") [TVar 0]])) (Rule [2] (Let [(3,Comb (FuncPartCall 1) ("Prelude","_impl#show#Prelude.Show#Prelude.Maybe") [Var 2])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#showList#Prelude.Show#Prelude.Maybe") [Var 2])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Maybe") [Var 2])] (Comb ConsCall ("Prelude","_Dict#Show") [Var 3,Var 5,Var 4]))))),Func ("Prelude","_inst#Prelude.Show#Prelude.Ordering") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","Ordering") []]) (Rule [] (Let [(2,Comb (FuncPartCall 1) ("Prelude","_impl#show#Prelude.Show#Prelude.Ordering") [])] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#showList#Prelude.Show#Prelude.Ordering") [])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Ordering") [])] (Comb ConsCall ("Prelude","_Dict#Show") [Var 2,Var 4,Var 3]))))),Func ("Prelude","_inst#Prelude.Show#Prelude.Bool") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","Bool") []]) (Rule [] (Let [(2,Comb (FuncPartCall 1) ("Prelude","_impl#show#Prelude.Show#Prelude.Bool") [])] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#showList#Prelude.Show#Prelude.Bool") [])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Bool") [])] (Comb ConsCall ("Prelude","_Dict#Show") [Var 2,Var 4,Var 3]))))),Func ("Prelude","_inst#Prelude.Show#Prelude.Float") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","Float") []]) (Rule [] (Let [(2,Comb (FuncPartCall 1) ("Prelude","_impl#show#Prelude.Show#Prelude.Float") [])] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#showList#Prelude.Show#Prelude.Float") [])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Float") [])] (Comb ConsCall ("Prelude","_Dict#Show") [Var 2,Var 4,Var 3]))))),Func ("Prelude","_inst#Prelude.Show#Prelude.Int") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","Int") []]) (Rule [] (Let [(2,Comb (FuncPartCall 1) ("Prelude","_impl#show#Prelude.Show#Prelude.Int") [])] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#showList#Prelude.Show#Prelude.Int") [])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Int") [])] (Comb ConsCall ("Prelude","_Dict#Show") [Var 2,Var 4,Var 3]))))),Func ("Prelude","_impl#show#Prelude.Show#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [2] (Let [(3,Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Char") [])] (Let [(4,Comb FuncCall ("Prelude","showsPrec") [Var 3])] (Let [(5,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 4,Var 5])] (Let [(7,Comb ConsCall ("Prelude","[]") [])] (Comb FuncCall ("Prelude","apply") [Var 6,Var 2,Var 7]))))))),Func ("Prelude","_inst#Prelude.Show#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","[]") [TVar 0]])) (Rule [2] (Let [(3,Comb (FuncPartCall 1) ("Prelude","_impl#show#Prelude.Show#[]") [Var 2])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#showList#Prelude.Show#[]") [Var 2])] (Let [(5,Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Var 2])] (Comb ConsCall ("Prelude","_Dict#Show") [Var 3,Var 5,Var 4]))))),Func ("Prelude","words") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [-2] (Let [(3,Comb (FuncPartCall 1) ("Prelude","isSpace") [])] (Let [(4,Comb FuncCall ("Prelude","dropWhile") [Var 3,Var 2])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char") [])] (Let [(7,Comb ConsCall ("Prelude","_Dict#Eq") [Var 5,Var 6])] (Let [(8,Comb ConsCall ("Prelude","[]") [])] (Let [(-9,Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Var 7,Var 4,Var 8])] (Case Rigid (Var (-9)) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Let [(10,Comb (FuncPartCall 1) ("Prelude","words#P50") [])] (Let [(-11,Comb FuncCall ("Prelude","span") [Var 10,Var 4])] (Case Rigid (Var (-11)) [Branch (Pattern ("Prelude","(,)") [12,13]) (Let [(14,Comb FuncCall ("Prelude","words") [Var 13])] (Comb ConsCall ("Prelude",":") [Var 12,Var 14]))])))]))))))))),Func ("Prelude","words#P50") 1 Public (TVar 0) (Rule [2] (Let [(-3,Comb FuncCall ("Prelude","isSpace") [Var 2])] (Case Flex (Var (-3)) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])]))),Func ("Prelude","splitline") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Let [(3,Comb ConsCall ("Prelude","[]") [])] (Let [(4,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude","(,)") [Var 3,Var 4]))),Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Var 5) [Branch (Pattern ("","char") [7]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 7,Lit (Charc '\n')]),Branch (Pattern ("Prelude","True") []) (Let [(8,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude","(,)") [Var 8,Var 6])),Branch (Pattern ("Prelude","False") []) (Let [(-9,Comb FuncCall ("Prelude","splitline") [Var 6])] (Case Rigid (Var (-9)) [Branch (Pattern ("Prelude","(,)") [10,11]) (Let [(12,Comb ConsCall ("","char") [Var 7])] (Let [(13,Comb ConsCall ("Prelude",":") [Var 12,Var 10])] (Comb ConsCall ("Prelude","(,)") [Var 13,Var 11])))]))])])])),Func ("Prelude","lines") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Let [(5,Comb ConsCall ("Prelude",":") [Var 3,Var 4])] (Let [(-6,Comb FuncCall ("Prelude","splitline") [Var 5])] (Case Rigid (Var (-6)) [Branch (Pattern ("Prelude","(,)") [7,8]) (Let [(9,Comb FuncCall ("Prelude","lines") [Var 8])] (Comb ConsCall ("Prelude",":") [Var 7,Var 9]))])))])),Func ("Prelude","lex_lexString") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("","char") [5]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 5,Lit (Charc '"')]),Branch (Pattern ("Prelude","True") []) (Let [(6,Comb ConsCall ("StringConst","\"") [])] (Let [(7,Comb ConsCall ("Prelude","(,)") [Var 6,Var 4])] (Let [(8,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 7,Var 8])))),Branch (Pattern ("Prelude","False") []) (Let [(9,Comb ConsCall ("","char") [Var 5])] (Let [(10,Comb ConsCall ("Prelude",":") [Var 9,Var 4])] (Let [(11,Comb FuncCall ("Prelude","lex_lexStrItem") [Var 10])] (Let [(12,Comb (FuncPartCall 3) ("Prelude","lex_lexString#P51") [])] (Let [(13,Comb (FuncPartCall 1) ("Prelude","lex_lexString#P52") [])] (Comb FuncCall ("Prelude","build_fold") [Var 12,Var 13,Var 11]))))))])]),Branch (Pattern ("Prelude","[]") []) (Let [(14,Comb ConsCall ("Prelude","[]") [])] (Let [(15,Comb FuncCall ("Prelude","lex_lexStrItem") [Var 14])] (Let [(16,Comb (FuncPartCall 3) ("Prelude","lex_lexString#P53") [])] (Let [(17,Comb (FuncPartCall 1) ("Prelude","lex_lexString#P54") [])] (Comb FuncCall ("Prelude","build_fold") [Var 16,Var 17,Var 15])))))])),Func ("Prelude","lex_lexString#P54") 1 Public (TVar 0) (Rule [2] (Var 2)),Func ("Prelude","lex_lexString#P53") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","lex_lexString_string") [Var 3])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","lex_lexString#P53#P55") [Var 2])] (Comb FuncCall ("Prelude","foldr") [Var 6,Var 4,Var 5])))),Func ("Prelude","lex_lexString#P53#P55") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","lex_lexString_build") [Var 3])] (Comb FuncCall ("Prelude","apply") [Var 2,Var 5,Var 4]))),Func ("Prelude","lex_lexString#P52") 1 Public (TVar 0) (Rule [2] (Var 2)),Func ("Prelude","lex_lexString#P51") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","lex_lexString_string") [Var 3])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","lex_lexString#P51#P56") [Var 2])] (Comb FuncCall ("Prelude","foldr") [Var 6,Var 4,Var 5])))),Func ("Prelude","lex_lexString#P51#P56") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","lex_lexString_build") [Var 3])] (Comb FuncCall ("Prelude","apply") [Var 2,Var 5,Var 4]))),Func ("Prelude","lex_else") 2 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [2,3] (Let [(-4,Comb FuncCall ("Prelude","isSpace") [Var 2])] (Case Rigid (Var (-4)) [Branch (Pattern ("Prelude","True") []) (Let [(5,Comb (FuncPartCall 1) ("Prelude","isSpace") [])] (Let [(6,Comb FuncCall ("Prelude","dropWhile") [Var 5,Var 3])] (Comb FuncCall ("Prelude","lex") [Var 6]))),Branch (Pattern ("Prelude","False") []) (Let [(7,Comb (FuncPartCall 2) ("Prelude","lex_else#P62") [Var 2])] (Let [(8,Comb ConsCall ("Prelude","False") [])] (Let [(9,Comb ConsCall ("StringConst",",;()[]{}_") [])] (Let [(-10,Comb FuncCall ("Prelude","foldr") [Var 7,Var 8,Var 9])] (Case Rigid (Var (-10)) [Branch (Pattern ("Prelude","True") []) (Let [(11,Comb ConsCall ("Prelude","[]") [])] (Let [(12,Comb ConsCall ("Prelude",":") [Var 2,Var 11])] (Let [(13,Comb ConsCall ("Prelude","(,)") [Var 12,Var 3])] (Let [(14,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 13,Var 14]))))),Branch (Pattern ("Prelude","False") []) (Let [(15,Comb (FuncPartCall 2) ("Prelude","lex_else#P61") [Var 2])] (Let [(16,Comb ConsCall ("Prelude","False") [])] (Let [(17,Comb ConsCall ("StringConst","!@#$&+./<=?\\^|:~") [])] (Let [(-18,Comb FuncCall ("Prelude","foldr") [Var 15,Var 16,Var 17])] (Case Rigid (Var (-18)) [Branch (Pattern ("Prelude","True") []) (Let [(19,Comb (FuncPartCall 1) ("Prelude","lex_isSym") [])] (Let [(-20,Comb FuncCall ("Prelude","span") [Var 19,Var 3])] (Case Rigid (Var (-20)) [Branch (Pattern ("Prelude","(,)") [21,22]) (Let [(23,Comb ConsCall ("Prelude",":") [Var 2,Var 21])] (Let [(24,Comb ConsCall ("Prelude","(,)") [Var 23,Var 22])] (Let [(25,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 24,Var 25]))))]))),Branch (Pattern ("Prelude","False") []) (Case Rigid (Var 2) [Branch (Pattern ("","char") [26]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Lit (Charc 'A'),Var 26]),Branch (Pattern ("Prelude","True") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 26,Lit (Charc 'Z')]),Branch (Pattern ("Prelude","True") []) (Let [(27,Comb (FuncPartCall 1) ("Prelude","lex_isSym") [])] (Let [(-28,Comb FuncCall ("Prelude","span") [Var 27,Var 3])] (Case Rigid (Var (-28)) [Branch (Pattern ("Prelude","(,)") [29,30]) (Let [(31,Comb ConsCall ("","char") [Var 26])] (Let [(32,Comb ConsCall ("Prelude",":") [Var 31,Var 29])] (Let [(33,Comb ConsCall ("Prelude","(,)") [Var 32,Var 30])] (Let [(34,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 33,Var 34])))))]))),Branch (Pattern ("Prelude","False") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Lit (Charc 'a'),Var 26]),Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 26,Lit (Charc 'z')]),Branch (Pattern ("Prelude","True") []) (Let [(35,Comb (FuncPartCall 1) ("Prelude","lex_isSym") [])] (Let [(-36,Comb FuncCall ("Prelude","span") [Var 35,Var 3])] (Case Rigid (Var (-36)) [Branch (Pattern ("Prelude","(,)") [37,38]) (Let [(39,Comb ConsCall ("","char") [Var 26])] (Let [(40,Comb ConsCall ("Prelude",":") [Var 39,Var 37])] (Let [(41,Comb ConsCall ("Prelude","(,)") [Var 40,Var 38])] (Let [(42,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 41,Var 42])))))]))),Branch (Pattern ("Prelude","False") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Lit (Charc '0'),Var 26]),Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 26,Lit (Charc '9')]),Branch (Pattern ("Prelude","True") []) (Let [(43,Comb (FuncPartCall 1) ("Prelude","isDigit") [])] (Let [(-44,Comb FuncCall ("Prelude","span") [Var 43,Var 3])] (Case Rigid (Var (-44)) [Branch (Pattern ("Prelude","(,)") [45,46]) (Let [(47,Comb FuncCall ("Prelude","lex_lexFracExp") [Var 46])] (Let [(48,Comb (FuncPartCall 3) ("Prelude","lex_else#P57") [Var 26,Var 45])] (Let [(49,Comb (FuncPartCall 1) ("Prelude","id") [])] (Comb FuncCall ("Prelude","build_fold") [Var 48,Var 49,Var 47]))))]))),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])]),Branch (Pattern ("Prelude","False") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Lit (Charc '0'),Var 26]),Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 26,Lit (Charc '9')]),Branch (Pattern ("Prelude","True") []) (Let [(50,Comb (FuncPartCall 1) ("Prelude","isDigit") [])] (Let [(-51,Comb FuncCall ("Prelude","span") [Var 50,Var 3])] (Case Rigid (Var (-51)) [Branch (Pattern ("Prelude","(,)") [52,53]) (Let [(54,Comb FuncCall ("Prelude","lex_lexFracExp") [Var 53])] (Let [(55,Comb (FuncPartCall 3) ("Prelude","lex_else#P58") [Var 26,Var 52])] (Let [(56,Comb (FuncPartCall 1) ("Prelude","id") [])] (Comb FuncCall ("Prelude","build_fold") [Var 55,Var 56,Var 54]))))]))),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])])]),Branch (Pattern ("Prelude","False") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Lit (Charc 'a'),Var 26]),Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 26,Lit (Charc 'z')]),Branch (Pattern ("Prelude","True") []) (Let [(57,Comb (FuncPartCall 1) ("Prelude","lex_isSym") [])] (Let [(-58,Comb FuncCall ("Prelude","span") [Var 57,Var 3])] (Case Rigid (Var (-58)) [Branch (Pattern ("Prelude","(,)") [59,60]) (Let [(61,Comb ConsCall ("","char") [Var 26])] (Let [(62,Comb ConsCall ("Prelude",":") [Var 61,Var 59])] (Let [(63,Comb ConsCall ("Prelude","(,)") [Var 62,Var 60])] (Let [(64,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 63,Var 64])))))]))),Branch (Pattern ("Prelude","False") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Lit (Charc '0'),Var 26]),Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 26,Lit (Charc '9')]),Branch (Pattern ("Prelude","True") []) (Let [(65,Comb (FuncPartCall 1) ("Prelude","isDigit") [])] (Let [(-66,Comb FuncCall ("Prelude","span") [Var 65,Var 3])] (Case Rigid (Var (-66)) [Branch (Pattern ("Prelude","(,)") [67,68]) (Let [(69,Comb FuncCall ("Prelude","lex_lexFracExp") [Var 68])] (Let [(70,Comb (FuncPartCall 3) ("Prelude","lex_else#P59") [Var 26,Var 67])] (Let [(71,Comb (FuncPartCall 1) ("Prelude","id") [])] (Comb FuncCall ("Prelude","build_fold") [Var 70,Var 71,Var 69]))))]))),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])]),Branch (Pattern ("Prelude","False") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Lit (Charc '0'),Var 26]),Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 26,Lit (Charc '9')]),Branch (Pattern ("Prelude","True") []) (Let [(72,Comb (FuncPartCall 1) ("Prelude","isDigit") [])] (Let [(-73,Comb FuncCall ("Prelude","span") [Var 72,Var 3])] (Case Rigid (Var (-73)) [Branch (Pattern ("Prelude","(,)") [74,75]) (Let [(76,Comb FuncCall ("Prelude","lex_lexFracExp") [Var 75])] (Let [(77,Comb (FuncPartCall 3) ("Prelude","lex_else#P60") [Var 26,Var 74])] (Let [(78,Comb (FuncPartCall 1) ("Prelude","id") [])] (Comb FuncCall ("Prelude","build_fold") [Var 77,Var 78,Var 76]))))]))),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])])])])])))))])))))]))),Func ("Prelude","lex_else#P62") 3 Public (TVar 0) (Rule [2,3,4] (Case Rigid (Var 2) [Branch (Pattern ("","char") [5]) (Case Rigid (Var 3) [Branch (Pattern ("","char") [6]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 5,Var 6]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","False") []) (Var 4)])])])),Func ("Prelude","lex_else#P61") 3 Public (TVar 0) (Rule [2,3,4] (Case Rigid (Var 2) [Branch (Pattern ("","char") [5]) (Case Rigid (Var 3) [Branch (Pattern ("","char") [6]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 5,Var 6]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","False") []) (Var 4)])])])),Func ("Prelude","lex_else#P60") 5 Public (TVar 0) (Rule [2,3,4,5,6] (Let [(7,Comb ConsCall ("","char") [Var 2])] (Let [(8,Comb FuncCall ("Prelude","lex_else_frac") [Var 7,Var 3,Var 5])] (Comb FuncCall ("Prelude","apply") [Var 4,Var 8,Var 6])))),Func ("Prelude","lex_else#P59") 5 Public (TVar 0) (Rule [2,3,4,5,6] (Let [(7,Comb ConsCall ("","char") [Var 2])] (Let [(8,Comb FuncCall ("Prelude","lex_else_frac") [Var 7,Var 3,Var 5])] (Comb FuncCall ("Prelude","apply") [Var 4,Var 8,Var 6])))),Func ("Prelude","lex_else#P58") 5 Public (TVar 0) (Rule [2,3,4,5,6] (Let [(7,Comb ConsCall ("","char") [Var 2])] (Let [(8,Comb FuncCall ("Prelude","lex_else_frac") [Var 7,Var 3,Var 5])] (Comb FuncCall ("Prelude","apply") [Var 4,Var 8,Var 6])))),Func ("Prelude","lex_else#P57") 5 Public (TVar 0) (Rule [2,3,4,5,6] (Let [(7,Comb ConsCall ("","char") [Var 2])] (Let [(8,Comb FuncCall ("Prelude","lex_else_frac") [Var 7,Var 3,Var 5])] (Comb FuncCall ("Prelude","apply") [Var 4,Var 8,Var 6])))),Func ("Prelude","showList'.showl.429") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,-4] (Case Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Let [(5,Comb ConsCall ("","char") [Lit (Charc ']')])] (Comb ConsCall ("Prelude",":") [Var 5,Var 2])),Branch (Pattern ("Prelude",":") [6,7]) (Let [(8,Comb FuncCall ("Prelude","showList'.showl.429") [Var 2,Var 3,Var 7])] (Let [(9,Comb FuncCall ("Prelude","apply") [Var 3,Var 6,Var 8])] (Let [(10,Comb ConsCall ("","char") [Lit (Charc ',')])] (Comb ConsCall ("Prelude",":") [Var 10,Var 9]))))])),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Either") 4 Private (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Either") [TVar 0,TVar 1]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [2,3,4,5] (Case Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Let [(6,Comb (FuncPartCall 2) ("Prelude","_impl#showList#Prelude.Show#Prelude.Either#P63") [Var 5])] (Comb FuncCall ("Prelude","build") [Var 6])),Branch (Pattern ("Prelude",":") [7,8]) (Let [(9,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(10,Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Either") [Var 2,Var 3,Var 9])] (Let [(11,Comb FuncCall ("Prelude","showList'.showl.429") [Var 5,Var 10,Var 8])] (Let [(12,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(13,Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Either") [Var 2,Var 3,Var 12,Var 7])] (Let [(14,Comb FuncCall ("Prelude","apply") [Var 13,Var 11])] (Let [(15,Comb ConsCall ("","char") [Lit (Charc '[')])] (Comb ConsCall ("Prelude",":") [Var 15,Var 14]))))))))])),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Either#P63") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","foldr") [Var 3,Var 4,Var 2])] (Let [(6,Comb ConsCall ("StringConst","[]") [])] (Comb FuncCall ("Prelude","foldr") [Var 3,Var 5,Var 6])))),Func ("Prelude","_impl#show#Prelude.Show#Prelude.Either") 3 Private (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,4] (Let [(5,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(6,Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Either") [Var 2,Var 3,Var 5,Var 4])] (Let [(7,Comb ConsCall ("Prelude","[]") [])] (Comb FuncCall ("Prelude","apply") [Var 6,Var 7]))))),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Maybe") 3 Private (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Maybe") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,4] (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#showList#Prelude.Show#Prelude.Maybe#P64") [Var 4])] (Comb FuncCall ("Prelude","build") [Var 5])),Branch (Pattern ("Prelude",":") [6,7]) (Let [(8,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(9,Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Maybe") [Var 2,Var 8])] (Let [(10,Comb FuncCall ("Prelude","showList'.showl.429") [Var 4,Var 9,Var 7])] (Let [(11,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(12,Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Maybe") [Var 2,Var 11,Var 6])] (Let [(13,Comb FuncCall ("Prelude","apply") [Var 12,Var 10])] (Let [(14,Comb ConsCall ("","char") [Lit (Charc '[')])] (Comb ConsCall ("Prelude",":") [Var 14,Var 13]))))))))])),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Maybe#P64") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","foldr") [Var 3,Var 4,Var 2])] (Let [(6,Comb ConsCall ("StringConst","[]") [])] (Comb FuncCall ("Prelude","foldr") [Var 3,Var 5,Var 6])))),Func ("Prelude","_impl#show#Prelude.Show#Prelude.Maybe") 2 Private (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,3] (Let [(4,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(5,Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Maybe") [Var 2,Var 4,Var 3])] (Let [(6,Comb ConsCall ("Prelude","[]") [])] (Comb FuncCall ("Prelude","apply") [Var 5,Var 6]))))),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Ordering") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Ordering") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#showList#Prelude.Show#Prelude.Ordering#P65") [Var 3])] (Comb FuncCall ("Prelude","build") [Var 4])),Branch (Pattern ("Prelude",":") [5,6]) (Let [(7,Comb (FuncPartCall 1) ("Prelude","_impl#showList#Prelude.Show#Prelude.Ordering#P66") [])] (Let [(8,Comb FuncCall ("Prelude","showList'.showl.429") [Var 3,Var 7,Var 6])] (Let [(9,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(10,Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Ordering") [Var 9,Var 5])] (Let [(11,Comb FuncCall ("Prelude","apply") [Var 10,Var 8])] (Let [(12,Comb ConsCall ("","char") [Lit (Charc '[')])] (Comb ConsCall ("Prelude",":") [Var 12,Var 11])))))))])),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Ordering#P66") 1 Public (TVar 0) (Rule [2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","LT") []) (Comb (FuncPartCall 1) ("Prelude","_impl#showList#Prelude.Show#Prelude.Ordering#P66#P67") []),Branch (Pattern ("Prelude","EQ") []) (Comb (FuncPartCall 1) ("Prelude","_impl#showList#Prelude.Show#Prelude.Ordering#P66#P68") []),Branch (Pattern ("Prelude","GT") []) (Comb (FuncPartCall 1) ("Prelude","_impl#showList#Prelude.Show#Prelude.Ordering#P66#P69") [])])),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Ordering#P66#P69") 1 Public (TVar 0) (Rule [2] (Let [(3,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Let [(4,Comb ConsCall ("StringConst","GT") [])] (Comb FuncCall ("Prelude","foldr") [Var 3,Var 2,Var 4])))),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Ordering#P66#P68") 1 Public (TVar 0) (Rule [2] (Let [(3,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Let [(4,Comb ConsCall ("StringConst","EQ") [])] (Comb FuncCall ("Prelude","foldr") [Var 3,Var 2,Var 4])))),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Ordering#P66#P67") 1 Public (TVar 0) (Rule [2] (Let [(3,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Let [(4,Comb ConsCall ("StringConst","LT") [])] (Comb FuncCall ("Prelude","foldr") [Var 3,Var 2,Var 4])))),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Ordering#P65") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","foldr") [Var 3,Var 4,Var 2])] (Let [(6,Comb ConsCall ("StringConst","[]") [])] (Comb FuncCall ("Prelude","foldr") [Var 3,Var 5,Var 6])))),Func ("Prelude","_impl#show#Prelude.Show#Prelude.Ordering") 1 Private (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [2] (Let [(3,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(4,Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Ordering") [Var 3,Var 2])] (Let [(5,Comb ConsCall ("Prelude","[]") [])] (Comb FuncCall ("Prelude","apply") [Var 4,Var 5]))))),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Bool") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#showList#Prelude.Show#Prelude.Bool#P70") [Var 3])] (Comb FuncCall ("Prelude","build") [Var 4])),Branch (Pattern ("Prelude",":") [5,6]) (Let [(7,Comb (FuncPartCall 1) ("Prelude","_impl#showList#Prelude.Show#Prelude.Bool#P71") [])] (Let [(8,Comb FuncCall ("Prelude","showList'.showl.429") [Var 3,Var 7,Var 6])] (Let [(9,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(10,Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Bool") [Var 9,Var 5])] (Let [(11,Comb FuncCall ("Prelude","apply") [Var 10,Var 8])] (Let [(12,Comb ConsCall ("","char") [Lit (Charc '[')])] (Comb ConsCall ("Prelude",":") [Var 12,Var 11])))))))])),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Bool#P71") 1 Public (TVar 0) (Rule [2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","False") []) (Comb (FuncPartCall 1) ("Prelude","_impl#showList#Prelude.Show#Prelude.Bool#P71#P72") []),Branch (Pattern ("Prelude","True") []) (Comb (FuncPartCall 1) ("Prelude","_impl#showList#Prelude.Show#Prelude.Bool#P71#P73") [])])),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Bool#P71#P73") 1 Public (TVar 0) (Rule [2] (Let [(3,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Let [(4,Comb ConsCall ("StringConst","True") [])] (Comb FuncCall ("Prelude","foldr") [Var 3,Var 2,Var 4])))),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Bool#P71#P72") 1 Public (TVar 0) (Rule [2] (Let [(3,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Let [(4,Comb ConsCall ("StringConst","False") [])] (Comb FuncCall ("Prelude","foldr") [Var 3,Var 2,Var 4])))),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Bool#P70") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","foldr") [Var 3,Var 4,Var 2])] (Let [(6,Comb ConsCall ("StringConst","[]") [])] (Comb FuncCall ("Prelude","foldr") [Var 3,Var 5,Var 6])))),Func ("Prelude","_impl#show#Prelude.Show#Prelude.Bool") 1 Private (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [2] (Let [(3,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(4,Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Bool") [Var 3,Var 2])] (Let [(5,Comb ConsCall ("Prelude","[]") [])] (Comb FuncCall ("Prelude","apply") [Var 4,Var 5]))))),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Float") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Float") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#showList#Prelude.Show#Prelude.Float#P74") [Var 3])] (Comb FuncCall ("Prelude","build") [Var 4])),Branch (Pattern ("Prelude",":") [5,6]) (Let [(7,Comb (FuncPartCall 1) ("Prelude","_impl#showList#Prelude.Show#Prelude.Float#P76") [])] (Let [(8,Comb FuncCall ("Prelude","showList'.showl.429") [Var 3,Var 7,Var 6])] (Let [(9,Comb FuncCall ("Prelude","_inst#Prelude.Real#Prelude.Float") [])] (Let [(10,Comb (FuncPartCall 2) ("Prelude","_impl#showList#Prelude.Show#Prelude.Float#P75") [])] (Let [(11,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(12,Comb FuncCall ("Prelude","showSigned") [Var 9,Var 10,Var 11,Var 5])] (Let [(13,Comb FuncCall ("Prelude","apply") [Var 12,Var 8])] (Let [(14,Comb ConsCall ("","char") [Lit (Charc '[')])] (Comb ConsCall ("Prelude",":") [Var 14,Var 13])))))))))])),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Float#P76") 1 Public (TVar 0) (Rule [2] (Let [(3,Comb FuncCall ("Prelude","_inst#Prelude.Real#Prelude.Float") [])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#showList#Prelude.Show#Prelude.Float#P76#P77") [])] (Let [(5,Comb ConsCall ("","int") [Lit (Intc 0)])] (Comb FuncCall ("Prelude","showSigned") [Var 3,Var 4,Var 5,Var 2]))))),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Float#P76#P77") 2 Public (TVar 0) (Rule [2,3] (Let [(4,Comb (FuncPartCall 1) ("Prelude","prim_show") [])] (Let [(5,Comb FuncCall ("Prelude","$##") [Var 4,Var 2])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Comb FuncCall ("Prelude","foldr") [Var 6,Var 3,Var 5]))))),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Float#P75") 2 Public (TVar 0) (Rule [2,3] (Let [(4,Comb (FuncPartCall 1) ("Prelude","prim_show") [])] (Let [(5,Comb FuncCall ("Prelude","$##") [Var 4,Var 2])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Comb FuncCall ("Prelude","foldr") [Var 6,Var 3,Var 5]))))),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Float#P74") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","foldr") [Var 3,Var 4,Var 2])] (Let [(6,Comb ConsCall ("StringConst","[]") [])] (Comb FuncCall ("Prelude","foldr") [Var 3,Var 5,Var 6])))),Func ("Prelude","_impl#show#Prelude.Show#Prelude.Float") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [2] (Let [(3,Comb FuncCall ("Prelude","_inst#Prelude.Real#Prelude.Float") [])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#show#Prelude.Show#Prelude.Float#P78") [])] (Let [(5,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(6,Comb FuncCall ("Prelude","showSigned") [Var 3,Var 4,Var 5,Var 2])] (Let [(7,Comb ConsCall ("Prelude","[]") [])] (Comb FuncCall ("Prelude","apply") [Var 6,Var 7]))))))),Func ("Prelude","_impl#show#Prelude.Show#Prelude.Float#P78") 2 Public (TVar 0) (Rule [2,3] (Let [(4,Comb (FuncPartCall 1) ("Prelude","prim_show") [])] (Let [(5,Comb FuncCall ("Prelude","$##") [Var 4,Var 2])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Comb FuncCall ("Prelude","foldr") [Var 6,Var 3,Var 5]))))),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Int") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#showList#Prelude.Show#Prelude.Int#P79") [Var 3])] (Comb FuncCall ("Prelude","build") [Var 4])),Branch (Pattern ("Prelude",":") [5,6]) (Let [(7,Comb (FuncPartCall 1) ("Prelude","_impl#showList#Prelude.Show#Prelude.Int#P81") [])] (Let [(8,Comb FuncCall ("Prelude","showList'.showl.429") [Var 3,Var 7,Var 6])] (Let [(9,Comb FuncCall ("Prelude","_inst#Prelude.Real#Prelude.Int") [])] (Let [(10,Comb (FuncPartCall 2) ("Prelude","_impl#showList#Prelude.Show#Prelude.Int#P80") [])] (Let [(11,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(12,Comb FuncCall ("Prelude","showSigned") [Var 9,Var 10,Var 11,Var 5])] (Let [(13,Comb FuncCall ("Prelude","apply") [Var 12,Var 8])] (Let [(14,Comb ConsCall ("","char") [Lit (Charc '[')])] (Comb ConsCall ("Prelude",":") [Var 14,Var 13])))))))))])),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Int#P81") 1 Public (TVar 0) (Rule [2] (Let [(3,Comb FuncCall ("Prelude","_inst#Prelude.Real#Prelude.Int") [])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#showList#Prelude.Show#Prelude.Int#P81#P82") [])] (Let [(5,Comb ConsCall ("","int") [Lit (Intc 0)])] (Comb FuncCall ("Prelude","showSigned") [Var 3,Var 4,Var 5,Var 2]))))),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Int#P81#P82") 2 Public (TVar 0) (Rule [2,3] (Let [(4,Comb (FuncPartCall 1) ("Prelude","prim_show") [])] (Let [(5,Comb FuncCall ("Prelude","$##") [Var 4,Var 2])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Comb FuncCall ("Prelude","foldr") [Var 6,Var 3,Var 5]))))),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Int#P80") 2 Public (TVar 0) (Rule [2,3] (Let [(4,Comb (FuncPartCall 1) ("Prelude","prim_show") [])] (Let [(5,Comb FuncCall ("Prelude","$##") [Var 4,Var 2])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Comb FuncCall ("Prelude","foldr") [Var 6,Var 3,Var 5]))))),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Int#P79") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","foldr") [Var 3,Var 4,Var 2])] (Let [(6,Comb ConsCall ("StringConst","[]") [])] (Comb FuncCall ("Prelude","foldr") [Var 3,Var 5,Var 6])))),Func ("Prelude","_impl#show#Prelude.Show#Prelude.Int") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [2] (Let [(3,Comb FuncCall ("Prelude","_inst#Prelude.Real#Prelude.Int") [])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#show#Prelude.Show#Prelude.Int#P83") [])] (Let [(5,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(6,Comb FuncCall ("Prelude","showSigned") [Var 3,Var 4,Var 5,Var 2])] (Let [(7,Comb ConsCall ("Prelude","[]") [])] (Comb FuncCall ("Prelude","apply") [Var 6,Var 7]))))))),Func ("Prelude","_impl#show#Prelude.Show#Prelude.Int#P83") 2 Public (TVar 0) (Rule [2,3] (Let [(4,Comb (FuncPartCall 1) ("Prelude","prim_show") [])] (Let [(5,Comb FuncCall ("Prelude","$##") [Var 4,Var 2])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Comb FuncCall ("Prelude","foldr") [Var 6,Var 3,Var 5]))))),Func ("Prelude","_inst#Prelude.Show#Prelude.Char") 0 Private (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","Char") []]) (Rule [] (Let [(2,Comb (FuncPartCall 1) ("Prelude","_impl#show#Prelude.Show#Prelude.Char") [])] (Let [(3,Comb (FuncPartCall 3) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Char") [])] (Let [(4,Comb (FuncPartCall 1) ("Prelude","_impl#showList#Prelude.Show#Prelude.Char") [])] (Comb ConsCall ("Prelude","_Dict#Show") [Var 2,Var 3,Var 4]))))),Func ("Prelude","_impl#showList#Prelude.Show#[]") 3 Private (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,4] (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#showList#Prelude.Show#[]#P84") [Var 4])] (Comb FuncCall ("Prelude","build") [Var 5])),Branch (Pattern ("Prelude",":") [6,7]) (Let [(8,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(9,Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Var 2,Var 8])] (Let [(10,Comb FuncCall ("Prelude","showList'.showl.429") [Var 4,Var 9,Var 7])] (Let [(11,Comb FuncCall ("Prelude","apply") [Var 9,Var 6,Var 10])] (Let [(12,Comb ConsCall ("","char") [Lit (Charc '[')])] (Comb ConsCall ("Prelude",":") [Var 12,Var 11]))))))])),Func ("Prelude","_impl#showList#Prelude.Show#[]#P84") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","foldr") [Var 3,Var 4,Var 2])] (Let [(6,Comb ConsCall ("StringConst","[]") [])] (Comb FuncCall ("Prelude","foldr") [Var 3,Var 5,Var 6])))),Func ("Prelude","_impl#show#Prelude.Show#[]") 2 Private (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,3] (Let [(4,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(5,Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Var 2,Var 4])] (Let [(6,Comb ConsCall ("Prelude","[]") [])] (Comb FuncCall ("Prelude","apply") [Var 5,Var 3,Var 6])))))] []