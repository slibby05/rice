apply_under_small
SOLUTION: int(2)

chrOrd
SOLUTION: Prelude.:(char(b), Prelude.:(char(c), Prelude.:(char(d), Prelude.:(char(E), Prelude.:(char(F), Prelude.:(char(G), Prelude.:(char(1), Prelude.:(char(2), Prelude.:(char(3), Prelude.[])))))))))

coin
SOLUTION: int(0)
SOLUTION: int(2)

fib
SOLUTION: int(196418)
SOLUTION: int(1)

free_arith_fail
Error: free variable used in primitive operation

Prelude.+$(free, apply(Prelude.+(Prelude._Dict#Num(Prelude._impl#+#Prelude.Num#Prelude.Int(*, *), Prelude._impl#-#Prelude.Num#Prelude.Int(*, *), Prelude._impl#*#Prelude.Num#Prelude.Int(*, *), Prelude._impl#negate#Prelude.Num#Prelude.Int(*), Prelude._impl#abs#Prelude.Num#Prelude.Int(*), Prelude._impl#signum#Prelude.Num#Prelude.Int(*), Prelude._impl#fromInt#Prelude.Num#Prelude.Int(*))): apply(Prelude.fromInt(Prelude._Dict#Num(Prelude._impl#+#Prelude.Num#Prelude.Int(*, *), Prelude._impl#-#Prelude.Num#Prelude.Int(*, *), Prelude._impl#*#Prelude.Num#Prelude.Int(*, *), Prelude._impl#negate#Prelude.Num#Prelude.Int(*), Prelude._impl#abs#Prelude.Num#Prelude.Int(*), Prelude._impl#signum#Prelude.Num#Prelude.Int(*), Prelude._impl#fromInt#Prelude.Num#Prelude.Int(*))): int(2)), int(3)))

free_bool
SOLUTION: int(2)

hamming
SOLUTION: Prelude.:(int(1), Prelude.:(int(2), Prelude.:(int(3), Prelude.:(int(4), Prelude.:(int(5), Prelude.:(int(6), Prelude.:(int(8), Prelude.:(int(9), Prelude.[]))))))))

imp
SOLUTION: float(8.000000)

indexOf
Error: =:= not implemented
Prelude.=:=(Prelude.:(int(1), Prelude.:(int(2), Prelude.:(int(4), Prelude.:(int(8), Prelude.:(int(16), Prelude.[]))))), Prelude.++(free, Prelude.++(Prelude.:(int(4), Prelude.[]), Prelude.unknown)))

insert
SOLUTION: Prelude.:(int(1), Prelude.:(int(2), Prelude.:(int(3), Prelude.:(int(4), Prelude.[]))))
SOLUTION: Prelude.:(int(2), Prelude.:(int(1), Prelude.:(int(3), Prelude.:(int(4), Prelude.[]))))
SOLUTION: Prelude.:(int(2), Prelude.:(int(3), Prelude.:(int(1), Prelude.:(int(4), Prelude.[]))))
SOLUTION: Prelude.:(int(2), Prelude.:(int(3), Prelude.:(int(4), Prelude.:(int(1), Prelude.[]))))

instance
SOLUTION: Prelude.True

letrec
SOLUTION: Prelude.:(int(1), Prelude.:(int(2), Prelude.:(int(4), Prelude.:(int(8), Prelude.:(int(16), Prelude.[])))))

list_build
SOLUTION: Prelude.:(int(-2), Prelude.:(int(-1), Prelude.:(int(0), Prelude.:(int(1), Prelude.:(int(2), Prelude.[])))))

loop

mod

mutual_recursion
SOLUTION: Prelude.:(int(2), Prelude.:(int(3), Prelude.:(int(2), Prelude.:(int(3), Prelude.:(int(2), Prelude.:(int(3), Prelude.:(int(2), Prelude.:(int(3), Prelude.:(int(2), Prelude.:(int(3), Prelude.[]))))))))))

nd
SOLUTION: int(0)
SOLUTION: int(1)
SOLUTION: int(1)
SOLUTION: int(2)

ndtest
SOLUTION: Prelude.True
Error: =:= not implemented
Prelude.=:=(int?(1), int(1))

newtype
SOLUTION: Prelude.False

ordTest
SOLUTION: Prelude.(,)(Prelude.False, Prelude.True)

perm
SOLUTION: Prelude.:(int(1), Prelude.:(int(2), Prelude.:(int(3), Prelude.:(int(4), Prelude.:(int(5), Prelude.:(int(6), Prelude.:(int(7), Prelude.:(int(8), Prelude.[]))))))))
...
SOLUTION: Prelude.:(int(8), Prelude.:(int(7), Prelude.:(int(6), Prelude.:(int(5), Prelude.:(int(4), Prelude.:(int(3), Prelude.:(int(2), Prelude.:(int(1), Prelude.[]))))))))

poker
Error: =:= not implemented
Prelude.=:=(poker.testYes, Prelude.++(free, Prelude.++(Prelude.:(Prelude.unknown, Prelude.[]), free)))

recursion
SOLUTION: Prelude.:(int(1), Prelude.:(int(1), Prelude.:(int(1), Prelude.:(int(1), Prelude.:(int(1), Prelude.[])))))

share
SOLUTION: Prelude.True
SOLUTION: Prelude.False
SOLUTION: Prelude.False
SOLUTION: Prelude.False
SOLUTION: Prelude.False
SOLUTION: Prelude.True

showTest
SOLUTION: Prelude.:(char(R), Prelude.:(char(e), Prelude.:(char(d), Prelude.:(char(G), Prelude.:(char(r), Prelude.:(char(e), Prelude.:(char(e), Prelude.:(char(n), Prelude.[]))))))))

sort
SOLUTION: Prelude.:(int(1), Prelude.:(int(2), Prelude.:(int(3), Prelude.:(int(4), Prelude.:(int(5), Prelude.:(int(6), Prelude.:(int(7), Prelude.:(int(8), Prelude.:(int(9), Prelude.:(int(10), Prelude.:(int(11), Prelude.:(int(12), Prelude.:(int(13), Prelude.:(int(14), Prelude.[]))))))))))))))

take3
SOLUTION: int(3)
SOLUTION: int(4)
