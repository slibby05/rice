interface let where {
import Prelude;
coin 0 :: Prelude.Num a => a;
f 1 :: [(a, a)] -> [a];
g 2 :: Prelude.Num a => a -> a -> (a, a);
main 0 :: Prelude.Bool;
shared 0 :: Prelude.Num a => (a, a);
unshar 0 :: (Prelude.Num a, Prelude.Num b) => (a, b);
hiding class Prelude.Num a;
hiding data Prelude.Bool;
instance Prelude.Num Prelude.Float {
  fromInt 1;
  signum 1;
  abs 1;
  negate 1;
  (*) 2;
  (-) 2;
  (+) 2
} {-# MODULE Prelude #-};
instance Prelude.Num Prelude.Int {
  fromInt 1;
  signum 1;
  abs 1;
  negate 1;
  (*) 2;
  (-) 2;
  (+) 2
} {-# MODULE Prelude #-};
hiding data Prelude.Float;
hiding data Prelude.Int
}