Prog "order_case" ["Prelude"] [] [Func ("order_case","f") 2 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 1],TCons ("Prelude","[]") [TVar 2]]) (TVar 0))) (Rule [1,2] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude","[]") []) (Case Rigid (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 10)]),Branch (Pattern ("Prelude",":") [5,6]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 20)])]),Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [9,10]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 20)]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 30)])])])])),Func ("order_case","main") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (TVar 0)) (Rule [1] (Comb FuncCall ("order_case","f") [Var 1,Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Intc 1),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]]))] []