Prog "PreludeCompare" ["PreludeBase"] [] [Func ("Prelude","<") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Ord") [3,4,5,6,7,8,9,10]) (Var 7)])),Func ("Prelude",">") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Ord") [3,4,5,6,7,8,9,10]) (Var 8)])),Func ("Prelude","min") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Ord") [3,4,5,6,7,8,9,10]) (Var 9)])),Func ("Prelude","max") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Ord") [3,4,5,6,7,8,9,10]) (Var 10)])),Func ("Prelude","_impl#max#Prelude.Ord#Prelude.Bool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [-2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","False") []) (Var 3)])),Func ("Prelude","_impl#min#Prelude.Ord#Prelude.Bool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [-2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])])),Func ("Prelude","_impl#>#Prelude.Ord#Prelude.Bool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [2,-3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Var 2)])),Func ("Prelude","_impl#<#Prelude.Ord#Prelude.Bool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [-2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Var 3)])),Func ("Prelude","_impl#>=#Prelude.Ord#Prelude.Bool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [2,-3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])])),Func ("Prelude","_impl#<=#Prelude.Ord#Prelude.Bool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [-2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])])),Func ("Prelude","_impl#compare#Prelude.Ord#Prelude.Bool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Ordering") []))) (Rule [-2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","True") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","EQ") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","GT") [])]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","LT") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","EQ") [])])])),Func ("Prelude","_impl#max#Prelude.Ord#Prelude.Char") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Char") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","char") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","char") [5]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 4,Var 5]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("","char") [Var 5]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("","char") [Var 4])])])])),Func ("Prelude","_impl#min#Prelude.Ord#Prelude.Char") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Char") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","char") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","char") [5]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 4,Var 5]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("","char") [Var 4]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("","char") [Var 5])])])])),Func ("Prelude","_impl#>#Prelude.Ord#Prelude.Char") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","char") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","char") [5]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 4,Var 5]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])])])])),Func ("Prelude","_impl#<#Prelude.Ord#Prelude.Char") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [-2,-3] (Case Rigid (Var 3) [Branch (Pattern ("","char") [4]) (Case Rigid (Var 2) [Branch (Pattern ("","char") [5]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 4,Var 5]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])])])])),Func ("Prelude","_impl#>=#Prelude.Ord#Prelude.Char") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [-2,-3] (Case Rigid (Var 3) [Branch (Pattern ("","char") [4]) (Case Rigid (Var 2) [Branch (Pattern ("","char") [5]) (Comb FuncCall ("Prelude","primLtEqChar") [Var 4,Var 5])])])),Func ("Prelude","_impl#<=#Prelude.Ord#Prelude.Char") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","char") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","char") [5]) (Comb FuncCall ("Prelude","primLtEqChar") [Var 4,Var 5])])])),Func ("Prelude","_impl#compare#Prelude.Ord#Prelude.Char") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Ordering") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","char") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","char") [5]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 4,Var 5]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","EQ") []),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 4,Var 5]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","LT") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","GT") [])])])])])),Func ("Prelude","_impl#max#Prelude.Ord#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","float") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","float") [5]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqFloat") [Var 4,Var 5]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("","float") [Var 5]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("","float") [Var 4])])])])),Func ("Prelude","_impl#min#Prelude.Ord#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","float") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","float") [5]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqFloat") [Var 4,Var 5]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("","float") [Var 4]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("","float") [Var 5])])])])),Func ("Prelude","_impl#>#Prelude.Ord#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","float") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","float") [5]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqFloat") [Var 4,Var 5]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])])])])),Func ("Prelude","_impl#<#Prelude.Ord#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [-2,-3] (Case Rigid (Var 3) [Branch (Pattern ("","float") [4]) (Case Rigid (Var 2) [Branch (Pattern ("","float") [5]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqFloat") [Var 4,Var 5]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])])])])),Func ("Prelude","_impl#>=#Prelude.Ord#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [-2,-3] (Case Rigid (Var 3) [Branch (Pattern ("","float") [4]) (Case Rigid (Var 2) [Branch (Pattern ("","float") [5]) (Comb FuncCall ("Prelude","primLtEqFloat") [Var 4,Var 5])])])),Func ("Prelude","_impl#<=#Prelude.Ord#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","float") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","float") [5]) (Comb FuncCall ("Prelude","primLtEqFloat") [Var 4,Var 5])])])),Func ("Prelude","_impl#compare#Prelude.Ord#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Ordering") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","float") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","float") [5]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqFloat") [Var 4,Var 5]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","EQ") []),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqFloat") [Var 4,Var 5]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","LT") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","GT") [])])])])])),Func ("Prelude","_impl#max#Prelude.Ord#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","int") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","int") [5]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Var 4,Var 5]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("","int") [Var 5]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("","int") [Var 4])])])])),Func ("Prelude","_impl#min#Prelude.Ord#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","int") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","int") [5]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Var 4,Var 5]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("","int") [Var 4]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("","int") [Var 5])])])])),Func ("Prelude","_impl#>#Prelude.Ord#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","int") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","int") [5]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Var 4,Var 5]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])])])])),Func ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [-2,-3] (Case Rigid (Var 3) [Branch (Pattern ("","int") [4]) (Case Rigid (Var 2) [Branch (Pattern ("","int") [5]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Var 4,Var 5]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])])])])),Func ("Prelude","_impl#>=#Prelude.Ord#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [-2,-3] (Case Rigid (Var 3) [Branch (Pattern ("","int") [4]) (Case Rigid (Var 2) [Branch (Pattern ("","int") [5]) (Comb FuncCall ("Prelude","primLtEqInt") [Var 4,Var 5])])])),Func ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","int") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","int") [5]) (Comb FuncCall ("Prelude","primLtEqInt") [Var 4,Var 5])])])),Func ("Prelude","_impl#compare#Prelude.Ord#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Ordering") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","int") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","int") [5]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqInt") [Var 4,Var 5]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","EQ") []),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Var 4,Var 5]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","LT") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","GT") [])])])])])),Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","char") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","char") [5]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 4,Var 5]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])])])])),Func ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","char") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","char") [5]) (Comb FuncCall ("Prelude","primEqChar") [Var 4,Var 5])])])),Func ("Prelude","_inst#Prelude.Eq#Prelude.Char") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","Char") []]) (Rule [] (Let [(2,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [])] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char") [])] (Comb ConsCall ("Prelude","_Dict#Eq") [Var 2,Var 3])))),Func ("Prelude","_inst#Prelude.Ord#Prelude.Char") 0 Public (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","Char") []]) (Rule [] (Let [(2,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [])] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char") [])] (Let [(4,Comb ConsCall ("Prelude","_Dict#Eq") [Var 2,Var 3])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#compare#Prelude.Ord#Prelude.Char") [])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#Prelude.Char") [])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","_impl#>=#Prelude.Ord#Prelude.Char") [])] (Let [(8,Comb (FuncPartCall 2) ("Prelude","_impl#<#Prelude.Ord#Prelude.Char") [])] (Let [(9,Comb (FuncPartCall 2) ("Prelude","_impl#>#Prelude.Ord#Prelude.Char") [])] (Let [(10,Comb (FuncPartCall 2) ("Prelude","_impl#min#Prelude.Ord#Prelude.Char") [])] (Let [(11,Comb (FuncPartCall 2) ("Prelude","_impl#max#Prelude.Ord#Prelude.Char") [])] (Comb ConsCall ("Prelude","_Dict#Ord") [Var 4,Var 5,Var 6,Var 7,Var 8,Var 9,Var 10,Var 11])))))))))))),Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","float") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","float") [5]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqFloat") [Var 4,Var 5]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])])])])),Func ("Prelude","_impl#==#Prelude.Eq#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","float") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","float") [5]) (Comb FuncCall ("Prelude","primEqFloat") [Var 4,Var 5])])])),Func ("Prelude","_inst#Prelude.Eq#Prelude.Float") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","Float") []]) (Rule [] (Let [(2,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Float") [])] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#Prelude.Float") [])] (Comb ConsCall ("Prelude","_Dict#Eq") [Var 2,Var 3])))),Func ("Prelude","_inst#Prelude.Ord#Prelude.Float") 0 Public (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","Float") []]) (Rule [] (Let [(2,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Float") [])] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#Prelude.Float") [])] (Let [(4,Comb ConsCall ("Prelude","_Dict#Eq") [Var 2,Var 3])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#compare#Prelude.Ord#Prelude.Float") [])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#Prelude.Float") [])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","_impl#>=#Prelude.Ord#Prelude.Float") [])] (Let [(8,Comb (FuncPartCall 2) ("Prelude","_impl#<#Prelude.Ord#Prelude.Float") [])] (Let [(9,Comb (FuncPartCall 2) ("Prelude","_impl#>#Prelude.Ord#Prelude.Float") [])] (Let [(10,Comb (FuncPartCall 2) ("Prelude","_impl#min#Prelude.Ord#Prelude.Float") [])] (Let [(11,Comb (FuncPartCall 2) ("Prelude","_impl#max#Prelude.Ord#Prelude.Float") [])] (Comb ConsCall ("Prelude","_Dict#Ord") [Var 4,Var 5,Var 6,Var 7,Var 8,Var 9,Var 10,Var 11])))))))))))),Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","int") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","int") [5]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqInt") [Var 4,Var 5]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])])])])),Func ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","int") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","int") [5]) (Comb FuncCall ("Prelude","primEqInt") [Var 4,Var 5])])])),Func ("Prelude","_inst#Prelude.Eq#Prelude.Int") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","Int") []]) (Rule [] (Let [(2,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") [])] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#Prelude.Int") [])] (Comb ConsCall ("Prelude","_Dict#Eq") [Var 2,Var 3])))),Func ("Prelude","_inst#Prelude.Ord#Prelude.Int") 0 Public (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","Int") []]) (Rule [] (Let [(2,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") [])] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#Prelude.Int") [])] (Let [(4,Comb ConsCall ("Prelude","_Dict#Eq") [Var 2,Var 3])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#compare#Prelude.Ord#Prelude.Int") [])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") [])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","_impl#>=#Prelude.Ord#Prelude.Int") [])] (Let [(8,Comb (FuncPartCall 2) ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [])] (Let [(9,Comb (FuncPartCall 2) ("Prelude","_impl#>#Prelude.Ord#Prelude.Int") [])] (Let [(10,Comb (FuncPartCall 2) ("Prelude","_impl#min#Prelude.Ord#Prelude.Int") [])] (Let [(11,Comb (FuncPartCall 2) ("Prelude","_impl#max#Prelude.Ord#Prelude.Int") [])] (Comb ConsCall ("Prelude","_Dict#Ord") [Var 4,Var 5,Var 6,Var 7,Var 8,Var 9,Var 10,Var 11])))))))))))),Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.Bool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [-2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","True") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])]),Branch (Pattern ("Prelude","False") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])])])),Func ("Prelude","_impl#==#Prelude.Eq#Prelude.Bool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [-2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("Prelude","_inst#Prelude.Eq#Prelude.Bool") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","Bool") []]) (Rule [] (Let [(2,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Bool") [])] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#Prelude.Bool") [])] (Comb ConsCall ("Prelude","_Dict#Eq") [Var 2,Var 3])))),Func ("Prelude","_inst#Prelude.Ord#Prelude.Bool") 0 Public (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","Bool") []]) (Rule [] (Let [(2,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Bool") [])] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#Prelude.Bool") [])] (Let [(4,Comb ConsCall ("Prelude","_Dict#Eq") [Var 2,Var 3])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#compare#Prelude.Ord#Prelude.Bool") [])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#Prelude.Bool") [])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","_impl#>=#Prelude.Ord#Prelude.Bool") [])] (Let [(8,Comb (FuncPartCall 2) ("Prelude","_impl#<#Prelude.Ord#Prelude.Bool") [])] (Let [(9,Comb (FuncPartCall 2) ("Prelude","_impl#>#Prelude.Ord#Prelude.Bool") [])] (Let [(10,Comb (FuncPartCall 2) ("Prelude","_impl#min#Prelude.Ord#Prelude.Bool") [])] (Let [(11,Comb (FuncPartCall 2) ("Prelude","_impl#max#Prelude.Ord#Prelude.Bool") [])] (Comb ConsCall ("Prelude","_Dict#Ord") [Var 4,Var 5,Var 6,Var 7,Var 8,Var 9,Var 10,Var 11])))))))))))),Func ("Prelude",">=") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Ord") [3,4,5,6,7,8,9,10]) (Var 6)])),Func ("Prelude","<=") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Ord") [3,4,5,6,7,8,9,10]) (Var 5)])),Func ("Prelude","compare") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Ordering") [])))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Ord") [3,4,5,6,7,8,9,10]) (Var 4)])),Func ("Prelude","_def#<=#Prelude.Ord") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","compare") [Var 2])] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 5,Var 3,Var 4])] (Case Rigid (Var 6) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") [])])))),Func ("Prelude","_super#Prelude.Ord#Prelude.Eq") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Ord") [3,4,5,6,7,8,9,10]) (Var 3)])),Func ("Prelude","/=") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Eq") [3,4]) (Var 4)])),Func ("Prelude","_def#==#Prelude.Eq") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","/=") [Var 2])] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 5,Var 3,Var 4])] (Case Flex (Var 6) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])])))),Func ("Prelude","==") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Eq") [3,4]) (Var 3)])),Func ("Prelude","_impl#<=#Prelude.Ord#Prelude.Either") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [2,3,-4,-5] (Case Flex (Var 4) [Branch (Pattern ("Prelude","Left") [6]) (Case Flex (Var 5) [Branch (Pattern ("Prelude","Left") [7]) (Let [(8,Comb FuncCall ("Prelude","<=") [Var 2])] (Comb FuncCall ("Prelude","apply") [Var 8,Var 6,Var 7])),Branch (Pattern ("Prelude","Right") [9]) (Comb ConsCall ("Prelude","True") [])]),Branch (Pattern ("Prelude","Right") [10]) (Case Flex (Var 5) [Branch (Pattern ("Prelude","Left") [11]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","Right") [12]) (Let [(13,Comb FuncCall ("Prelude","<=") [Var 3])] (Comb FuncCall ("Prelude","apply") [Var 13,Var 10,Var 12]))])])),Func ("Prelude","_impl#==#Prelude.Eq#Prelude.Either") 4 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [2,3,-4,-5] (Case Flex (Var 4) [Branch (Pattern ("Prelude","Left") [6]) (Case Flex (Var 5) [Branch (Pattern ("Prelude","Left") [7]) (Let [(8,Comb FuncCall ("Prelude","==") [Var 2])] (Comb FuncCall ("Prelude","apply") [Var 8,Var 6,Var 7])),Branch (Pattern ("Prelude","Right") [9]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude","Right") [10]) (Case Flex (Var 5) [Branch (Pattern ("Prelude","Left") [11]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","Right") [12]) (Let [(13,Comb FuncCall ("Prelude","==") [Var 3])] (Comb FuncCall ("Prelude","apply") [Var 13,Var 10,Var 12]))])])),Func ("Prelude","_impl#<=#Prelude.Ord#Prelude.Maybe") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [2,-3,-4] (Case Flex (Var 3) [Branch (Pattern ("Prelude","Nothing") []) (Case Flex (Var 4) [Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","Just") [5]) (Comb ConsCall ("Prelude","True") [])]),Branch (Pattern ("Prelude","Just") [6]) (Case Flex (Var 4) [Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","Just") [7]) (Let [(8,Comb FuncCall ("Prelude","<=") [Var 2])] (Comb FuncCall ("Prelude","apply") [Var 8,Var 6,Var 7]))])])),Func ("Prelude","_impl#==#Prelude.Eq#Prelude.Maybe") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [2,-3,-4] (Case Flex (Var 3) [Branch (Pattern ("Prelude","Nothing") []) (Case Flex (Var 4) [Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","Just") [5]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude","Just") [6]) (Case Flex (Var 4) [Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","Just") [7]) (Let [(8,Comb FuncCall ("Prelude","==") [Var 2])] (Comb FuncCall ("Prelude","apply") [Var 8,Var 6,Var 7]))])])),Func ("Prelude","_impl#<=#Prelude.Ord#Prelude.Ordering") 2 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Bool") []))) (Rule [-2,-3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","LT") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") [])]),Branch (Pattern ("Prelude","EQ") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") [])]),Branch (Pattern ("Prelude","GT") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("Prelude","_impl#==#Prelude.Eq#Prelude.Ordering") 2 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Bool") []))) (Rule [-2,-3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","LT") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude","EQ") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude","GT") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("Prelude","_def#max#Prelude.Ord") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude",">=") [Var 2])] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 5,Var 3,Var 4])] (Case Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Var 4)])))),Func ("Prelude","_def#min#Prelude.Ord") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","<=") [Var 2])] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 5,Var 3,Var 4])] (Case Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Var 4)])))),Func ("Prelude","_def#>#Prelude.Ord") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","<=") [Var 2])] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 5,Var 3,Var 4])] (Case Flex (Var 6) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])])))),Func ("Prelude","_def#<#Prelude.Ord") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","<=") [Var 2])] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 5,Var 3,Var 4])] (Case Flex (Var 6) [Branch (Pattern ("Prelude","True") []) (Let [(7,Comb FuncCall ("Prelude","_def#<#Prelude.Ord#A0") [Var 2])] (Let [(8,Comb FuncCall ("Prelude","/=") [Var 7])] (Comb FuncCall ("Prelude","apply") [Var 8,Var 3,Var 4]))),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])])))),Func ("Prelude","_def#<#Prelude.Ord#A0") 1 Public (TVar 0) (Rule [2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Ord") [3,4,5,6,7,8,9,10]) (Var 3)])),Func ("Prelude","_def#>=#Prelude.Ord") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","<=") [Var 2])] (Comb FuncCall ("Prelude","apply") [Var 5,Var 4,Var 3]))),Func ("Prelude","_def#compare#Prelude.Ord") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Ordering") [])))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","_def#compare#Prelude.Ord#A1") [Var 2])] (Let [(6,Comb FuncCall ("Prelude","==") [Var 5])] (Let [(7,Comb FuncCall ("Prelude","apply") [Var 6,Var 3,Var 4])] (Case Rigid (Var 7) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","EQ") []),Branch (Pattern ("Prelude","False") []) (Let [(8,Comb FuncCall ("Prelude","<=") [Var 2])] (Let [(9,Comb FuncCall ("Prelude","apply") [Var 8,Var 3,Var 4])] (Case Rigid (Var 9) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","LT") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","GT") [])])))]))))),Func ("Prelude","_def#compare#Prelude.Ord#A1") 1 Public (TVar 0) (Rule [2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Ord") [3,4,5,6,7,8,9,10]) (Var 3)])),Func ("Prelude","_def#/=#Prelude.Eq") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","==") [Var 2])] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 5,Var 3,Var 4])] (Case Flex (Var 6) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])])))),Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.Either") 4 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Either") [Var 2,Var 3])] (Let [(7,Comb FuncCall ("Prelude","==") [Var 6])] (Let [(8,Comb FuncCall ("Prelude","apply") [Var 7,Var 4,Var 5])] (Case Flex (Var 8) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])]))))),Func ("Prelude","_inst#Prelude.Ord#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","Either") [TVar 0,TVar 1]]))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 2])] (Let [(5,Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 3])] (Let [(6,Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Either") [Var 4,Var 5])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","_impl#compare#Prelude.Ord#Prelude.Either") [Var 2,Var 3])] (Let [(8,Comb (FuncPartCall 2) ("Prelude","_impl#>=#Prelude.Ord#Prelude.Either") [Var 2,Var 3])] (Let [(9,Comb (FuncPartCall 2) ("Prelude","_impl#<#Prelude.Ord#Prelude.Either") [Var 2,Var 3])] (Let [(10,Comb (FuncPartCall 2) ("Prelude","_impl#>#Prelude.Ord#Prelude.Either") [Var 2,Var 3])] (Let [(11,Comb (FuncPartCall 2) ("Prelude","_impl#min#Prelude.Ord#Prelude.Either") [Var 2,Var 3])] (Let [(12,Comb (FuncPartCall 2) ("Prelude","_impl#max#Prelude.Ord#Prelude.Either") [Var 2,Var 3])] (Let [(13,Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#Prelude.Either") [Var 2,Var 3])] (Comb ConsCall ("Prelude","_Dict#Ord") [Var 6,Var 7,Var 13,Var 8,Var 9,Var 10,Var 11,Var 12])))))))))))),Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.Maybe") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Maybe") [Var 2])] (Let [(6,Comb FuncCall ("Prelude","==") [Var 5])] (Let [(7,Comb FuncCall ("Prelude","apply") [Var 6,Var 3,Var 4])] (Case Flex (Var 7) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])]))))),Func ("Prelude","_inst#Prelude.Ord#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","Maybe") [TVar 0]])) (Rule [2] (Let [(3,Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 2])] (Let [(4,Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Maybe") [Var 3])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#compare#Prelude.Ord#Prelude.Maybe") [Var 2])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","_impl#>=#Prelude.Ord#Prelude.Maybe") [Var 2])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","_impl#<#Prelude.Ord#Prelude.Maybe") [Var 2])] (Let [(8,Comb (FuncPartCall 2) ("Prelude","_impl#>#Prelude.Ord#Prelude.Maybe") [Var 2])] (Let [(9,Comb (FuncPartCall 2) ("Prelude","_impl#min#Prelude.Ord#Prelude.Maybe") [Var 2])] (Let [(10,Comb (FuncPartCall 2) ("Prelude","_impl#max#Prelude.Ord#Prelude.Maybe") [Var 2])] (Let [(11,Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#Prelude.Maybe") [Var 2])] (Comb ConsCall ("Prelude","_Dict#Ord") [Var 4,Var 5,Var 11,Var 6,Var 7,Var 8,Var 9,Var 10]))))))))))),Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.Ordering") 2 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Bool") []))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Ordering") [])] (Let [(5,Comb FuncCall ("Prelude","==") [Var 4])] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 5,Var 2,Var 3])] (Case Flex (Var 6) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])]))))),Func ("Prelude","_inst#Prelude.Ord#Prelude.Ordering") 0 Public (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","Ordering") []]) (Rule [] (Let [(2,Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Ordering") [])] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#compare#Prelude.Ord#Prelude.Ordering") [])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#>=#Prelude.Ord#Prelude.Ordering") [])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#<#Prelude.Ord#Prelude.Ordering") [])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","_impl#>#Prelude.Ord#Prelude.Ordering") [])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","_impl#min#Prelude.Ord#Prelude.Ordering") [])] (Let [(8,Comb (FuncPartCall 2) ("Prelude","_impl#max#Prelude.Ord#Prelude.Ordering") [])] (Let [(9,Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#Prelude.Ordering") [])] (Comb ConsCall ("Prelude","_Dict#Ord") [Var 2,Var 3,Var 9,Var 4,Var 5,Var 6,Var 7,Var 8])))))))))),Func ("Prelude","_inst#Prelude.Eq#Prelude.Either") 2 Private (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","Either") [TVar 0,TVar 1]]))) (Rule [2,3] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Either") [Var 2,Var 3])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#Prelude.Either") [Var 2,Var 3])] (Comb ConsCall ("Prelude","_Dict#Eq") [Var 4,Var 5])))),Func ("Prelude","_impl#min#Prelude.Ord#Prelude.Either") 4 Private (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (TCons ("Prelude","Either") [TVar 0,TVar 1]))))) (Rule [2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Either") [Var 2,Var 3])] (Let [(7,Comb FuncCall ("Prelude","<=") [Var 6])] (Let [(8,Comb FuncCall ("Prelude","apply") [Var 7,Var 4,Var 5])] (Case Rigid (Var 8) [Branch (Pattern ("Prelude","True") []) (Var 4),Branch (Pattern ("Prelude","False") []) (Var 5)]))))),Func ("Prelude","_impl#max#Prelude.Ord#Prelude.Either") 4 Private (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (TCons ("Prelude","Either") [TVar 0,TVar 1]))))) (Rule [2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Either") [Var 2,Var 3])] (Let [(7,Comb FuncCall ("Prelude",">=") [Var 6])] (Let [(8,Comb FuncCall ("Prelude","apply") [Var 7,Var 4,Var 5])] (Case Rigid (Var 8) [Branch (Pattern ("Prelude","True") []) (Var 4),Branch (Pattern ("Prelude","False") []) (Var 5)]))))),Func ("Prelude","_impl#compare#Prelude.Ord#Prelude.Either") 4 Private (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (TCons ("Prelude","Ordering") []))))) (Rule [2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Either") [Var 2,Var 3])] (Let [(7,Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#Prelude.Either#A2") [Var 6])] (Let [(8,Comb FuncCall ("Prelude","==") [Var 7])] (Let [(9,Comb FuncCall ("Prelude","apply") [Var 8,Var 4,Var 5])] (Case Rigid (Var 9) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","EQ") []),Branch (Pattern ("Prelude","False") []) (Let [(10,Comb FuncCall ("Prelude","<=") [Var 6])] (Let [(11,Comb FuncCall ("Prelude","apply") [Var 10,Var 4,Var 5])] (Case Rigid (Var 11) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","LT") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","GT") [])])))])))))),Func ("Prelude","_impl#compare#Prelude.Ord#Prelude.Either#A2") 1 Public (TVar 0) (Rule [2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Ord") [3,4,5,6,7,8,9,10]) (Var 3)])),Func ("Prelude","_impl#>=#Prelude.Ord#Prelude.Either") 4 Private (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Either") [Var 2,Var 3])] (Let [(7,Comb FuncCall ("Prelude","<=") [Var 6])] (Comb FuncCall ("Prelude","apply") [Var 7,Var 5,Var 4])))),Func ("Prelude","_impl#>#Prelude.Ord#Prelude.Either") 4 Private (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Either") [Var 2,Var 3])] (Let [(7,Comb FuncCall ("Prelude","<=") [Var 6])] (Let [(8,Comb FuncCall ("Prelude","apply") [Var 7,Var 4,Var 5])] (Case Flex (Var 8) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])]))))),Func ("Prelude","_impl#<#Prelude.Ord#Prelude.Either") 4 Private (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Either") [Var 2,Var 3])] (Let [(7,Comb FuncCall ("Prelude","<=") [Var 6])] (Let [(8,Comb FuncCall ("Prelude","apply") [Var 7,Var 4,Var 5])] (Case Flex (Var 8) [Branch (Pattern ("Prelude","True") []) (Let [(9,Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Either#A3") [Var 6])] (Let [(10,Comb FuncCall ("Prelude","/=") [Var 9])] (Comb FuncCall ("Prelude","apply") [Var 10,Var 4,Var 5]))),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])]))))),Func ("Prelude","_impl#<#Prelude.Ord#Prelude.Either#A3") 1 Public (TVar 0) (Rule [2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Ord") [3,4,5,6,7,8,9,10]) (Var 3)])),Func ("Prelude","_inst#Prelude.Eq#Prelude.Maybe") 1 Private (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","Maybe") [TVar 0]])) (Rule [2] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Maybe") [Var 2])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#Prelude.Maybe") [Var 2])] (Comb ConsCall ("Prelude","_Dict#Eq") [Var 3,Var 4])))),Func ("Prelude","_impl#min#Prelude.Ord#Prelude.Maybe") 3 Private (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Maybe") [TVar 0])))) (Rule [2,3,4] (Case Flex (Var 3) [Branch (Pattern ("Prelude","Nothing") []) (Case Flex (Var 4) [Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("Prelude","Just") [5]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","Just") [6]) (Case Flex (Var 4) [Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("Prelude","Just") [7]) (Let [(8,Comb FuncCall ("Prelude","<=") [Var 2])] (Let [(9,Comb FuncCall ("Prelude","apply") [Var 8,Var 6,Var 7])] (Case Rigid (Var 9) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","Just") [Var 6]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Just") [Var 7])])))])])),Func ("Prelude","_impl#max#Prelude.Ord#Prelude.Maybe") 3 Private (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Maybe") [TVar 0])))) (Rule [2,3,4] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#>=#Prelude.Ord#Prelude.Maybe") [Var 2])] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 5,Var 3,Var 4])] (Case Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Var 4)])))),Func ("Prelude","_impl#compare#Prelude.Ord#Prelude.Maybe") 3 Private (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Ordering") [])))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 2])] (Let [(6,Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Maybe") [Var 5])] (Let [(7,Comb FuncCall ("Prelude","==") [Var 6])] (Let [(8,Comb FuncCall ("Prelude","apply") [Var 7,Var 3,Var 4])] (Case Rigid (Var 8) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","EQ") []),Branch (Pattern ("Prelude","False") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","Nothing") []) (Case Flex (Var 4) [Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","LT") []),Branch (Pattern ("Prelude","Just") [9]) (Comb ConsCall ("Prelude","LT") [])]),Branch (Pattern ("Prelude","Just") [10]) (Case Flex (Var 4) [Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","GT") []),Branch (Pattern ("Prelude","Just") [11]) (Let [(12,Comb FuncCall ("Prelude","<=") [Var 2])] (Let [(13,Comb FuncCall ("Prelude","apply") [Var 12,Var 10,Var 11])] (Case Rigid (Var 13) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","LT") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","GT") [])])))])])])))))),Func ("Prelude","_impl#>=#Prelude.Ord#Prelude.Maybe") 3 Private (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [2,3,4] (Case Flex (Var 4) [Branch (Pattern ("Prelude","Nothing") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","Just") [5]) (Comb ConsCall ("Prelude","True") [])]),Branch (Pattern ("Prelude","Just") [6]) (Case Flex (Var 3) [Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","Just") [7]) (Let [(8,Comb FuncCall ("Prelude","<=") [Var 2])] (Comb FuncCall ("Prelude","apply") [Var 8,Var 6,Var 7]))])])),Func ("Prelude","_impl#>#Prelude.Ord#Prelude.Maybe") 3 Private (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [2,3,4] (Case Flex (Var 3) [Branch (Pattern ("Prelude","Nothing") []) (Case Flex (Var 4) [Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","Just") [5]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude","Just") [6]) (Case Flex (Var 4) [Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","Just") [7]) (Let [(8,Comb FuncCall ("Prelude","<=") [Var 2])] (Let [(9,Comb FuncCall ("Prelude","apply") [Var 8,Var 6,Var 7])] (Case Flex (Var 9) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])])))])])),Func ("Prelude","_impl#<#Prelude.Ord#Prelude.Maybe") 3 Private (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [2,3,4] (Case Flex (Var 3) [Branch (Pattern ("Prelude","Nothing") []) (Case Flex (Var 4) [Branch (Pattern ("Prelude","Nothing") []) (Let [(5,Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 2])] (Let [(6,Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Maybe") [Var 5])] (Let [(7,Comb FuncCall ("Prelude","/=") [Var 6])] (Let [(8,Comb ConsCall ("Prelude","Nothing") [])] (Let [(9,Comb ConsCall ("Prelude","Nothing") [])] (Comb FuncCall ("Prelude","apply") [Var 7,Var 8,Var 9])))))),Branch (Pattern ("Prelude","Just") [10]) (Let [(11,Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 2])] (Let [(12,Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Maybe") [Var 11])] (Let [(13,Comb FuncCall ("Prelude","/=") [Var 12])] (Let [(14,Comb ConsCall ("Prelude","Nothing") [])] (Let [(15,Comb ConsCall ("Prelude","Just") [Var 10])] (Comb FuncCall ("Prelude","apply") [Var 13,Var 14,Var 15]))))))]),Branch (Pattern ("Prelude","Just") [16]) (Case Flex (Var 4) [Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","Just") [17]) (Let [(18,Comb FuncCall ("Prelude","<=") [Var 2])] (Let [(19,Comb FuncCall ("Prelude","apply") [Var 18,Var 16,Var 17])] (Case Flex (Var 19) [Branch (Pattern ("Prelude","True") []) (Let [(20,Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 2])] (Let [(21,Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Maybe") [Var 20])] (Let [(22,Comb FuncCall ("Prelude","/=") [Var 21])] (Let [(23,Comb ConsCall ("Prelude","Just") [Var 16])] (Let [(24,Comb ConsCall ("Prelude","Just") [Var 17])] (Comb FuncCall ("Prelude","apply") [Var 22,Var 23,Var 24])))))),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])])))])])),Func ("Prelude","_inst#Prelude.Eq#Prelude.Ordering") 0 Private (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","Ordering") []]) (Rule [] (Let [(2,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Ordering") [])] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#Prelude.Ordering") [])] (Comb ConsCall ("Prelude","_Dict#Eq") [Var 2,Var 3])))),Func ("Prelude","_impl#min#Prelude.Ord#Prelude.Ordering") 2 Private (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Ordering") []))) (Rule [2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","LT") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","LT") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","LT") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","LT") [])]),Branch (Pattern ("Prelude","EQ") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","LT") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","EQ") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","EQ") [])]),Branch (Pattern ("Prelude","GT") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","LT") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","EQ") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","GT") [])])])),Func ("Prelude","_impl#max#Prelude.Ord#Prelude.Ordering") 2 Private (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Ordering") []))) (Rule [2,3] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#>=#Prelude.Ord#Prelude.Ordering") [])] (Let [(5,Comb FuncCall ("Prelude","apply") [Var 4,Var 2,Var 3])] (Case Rigid (Var 5) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Var 3)])))),Func ("Prelude","_impl#compare#Prelude.Ord#Prelude.Ordering") 2 Private (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Ordering") []))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Ordering") [])] (Let [(5,Comb FuncCall ("Prelude","==") [Var 4])] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 5,Var 2,Var 3])] (Case Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","EQ") []),Branch (Pattern ("Prelude","False") []) (Case Flex (Var 2) [Branch (Pattern ("Prelude","LT") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","LT") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","LT") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","LT") [])]),Branch (Pattern ("Prelude","EQ") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","GT") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","LT") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","LT") [])]),Branch (Pattern ("Prelude","GT") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","GT") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","GT") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","LT") [])])])]))))),Func ("Prelude","_impl#>=#Prelude.Ord#Prelude.Ordering") 2 Private (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Bool") []))) (Rule [2,3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","LT") []) (Case Flex (Var 2) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") [])]),Branch (Pattern ("Prelude","EQ") []) (Case Flex (Var 2) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") [])]),Branch (Pattern ("Prelude","GT") []) (Case Flex (Var 2) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("Prelude","_impl#>#Prelude.Ord#Prelude.Ordering") 2 Private (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Bool") []))) (Rule [2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","LT") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude","EQ") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude","GT") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") [])])])),Func ("Prelude","_impl#<#Prelude.Ord#Prelude.Ordering") 2 Private (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Bool") []))) (Rule [2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","LT") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","LT") []) (Let [(4,Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Ordering") [])] (Let [(5,Comb FuncCall ("Prelude","/=") [Var 4])] (Let [(6,Comb ConsCall ("Prelude","LT") [])] (Let [(7,Comb ConsCall ("Prelude","LT") [])] (Comb FuncCall ("Prelude","apply") [Var 5,Var 6,Var 7]))))),Branch (Pattern ("Prelude","EQ") []) (Let [(8,Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Ordering") [])] (Let [(9,Comb FuncCall ("Prelude","/=") [Var 8])] (Let [(10,Comb ConsCall ("Prelude","LT") [])] (Let [(11,Comb ConsCall ("Prelude","EQ") [])] (Comb FuncCall ("Prelude","apply") [Var 9,Var 10,Var 11]))))),Branch (Pattern ("Prelude","GT") []) (Let [(12,Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Ordering") [])] (Let [(13,Comb FuncCall ("Prelude","/=") [Var 12])] (Let [(14,Comb ConsCall ("Prelude","LT") [])] (Let [(15,Comb ConsCall ("Prelude","GT") [])] (Comb FuncCall ("Prelude","apply") [Var 13,Var 14,Var 15])))))]),Branch (Pattern ("Prelude","EQ") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","EQ") []) (Let [(16,Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Ordering") [])] (Let [(17,Comb FuncCall ("Prelude","/=") [Var 16])] (Let [(18,Comb ConsCall ("Prelude","EQ") [])] (Let [(19,Comb ConsCall ("Prelude","EQ") [])] (Comb FuncCall ("Prelude","apply") [Var 17,Var 18,Var 19]))))),Branch (Pattern ("Prelude","GT") []) (Let [(20,Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Ordering") [])] (Let [(21,Comb FuncCall ("Prelude","/=") [Var 20])] (Let [(22,Comb ConsCall ("Prelude","EQ") [])] (Let [(23,Comb ConsCall ("Prelude","GT") [])] (Comb FuncCall ("Prelude","apply") [Var 21,Var 22,Var 23])))))]),Branch (Pattern ("Prelude","GT") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","GT") []) (Let [(24,Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Ordering") [])] (Let [(25,Comb FuncCall ("Prelude","/=") [Var 24])] (Let [(26,Comb ConsCall ("Prelude","GT") [])] (Let [(27,Comb ConsCall ("Prelude","GT") [])] (Comb FuncCall ("Prelude","apply") [Var 25,Var 26,Var 27])))))])]))] []