Prog "RegExp" ["Prelude"] [Type ("RegExp","RE") Public [0] [Cons ("RegExp","Lit") 1 Public [TVar 0],Cons ("RegExp","Alt") 2 Public [TCons ("RegExp","RE") [TVar 0],TCons ("RegExp","RE") [TVar 0]],Cons ("RegExp","Conc") 2 Public [TCons ("RegExp","RE") [TVar 0],TCons ("RegExp","RE") [TVar 0]],Cons ("RegExp","Star") 1 Public [TCons ("RegExp","RE") [TVar 0]]],Type ("RegExp","Chr") Public [] [Cons ("RegExp","A") 0 Public [],Cons ("RegExp","B") 0 Public [],Cons ("RegExp","C") 0 Public [],Cons ("RegExp","D") 0 Public [],Cons ("RegExp","E") 0 Public []]] [Func ("RegExp","abc") 0 Public (TCons ("RegExp","RE") [TCons ("RegExp","Chr") []]) (Rule [] (Var 0)),Func ("RegExp","abstar") 0 Public (TCons ("RegExp","RE") [TCons ("RegExp","Chr") []]) (Rule [] (Var 0)),Func ("RegExp","abstarc") 0 Public (TCons ("RegExp","RE") [TCons ("RegExp","Chr") []]) (Rule [] (Var 0)),Func ("RegExp","plus") 1 Public (FuncType (TCons ("RegExp","RE") [TVar 0]) (TCons ("RegExp","RE") [TVar 0])) (Rule [] (Var 0)),Func ("RegExp","sem") 2 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TCons ("RegExp","RE") [TVar 1]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0))] []