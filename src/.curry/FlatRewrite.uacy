{- AbstractCurry 2.0 -}
CurryProg "FlatRewrite"
["Prelude","Control.SetFunctions","FlatCurry.Types","List","Util"]
Nothing
 []
 []
 [CTypeSyn ("FlatRewrite","Path") Public [] (CTApply (CTCons ("Prelude","[]")) (CTCons ("Prelude","Int")))]
 [CFunc ("FlatRewrite","subexpr") 1 Public (CQualType (CContext []) (CFuncType (CTCons ("FlatCurry.Types","Expr")) (CTApply (CTApply (CTCons ("Prelude","(,)")) (CTCons ("FlatRewrite","Path"))) (CTCons ("FlatCurry.Types","Expr"))))) [CRule [CPVar (0,"e")] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","[]"))) (CVar (0,"e"))) []),CRule [CPComb ("FlatCurry.Types","Free") [CPVar (1,"_"),CPVar (2,"e")]] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Util","mapFst")) (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 0))))) (CApply (CSymbol ("FlatRewrite","subexpr")) (CVar (2,"e")))) []),CRule [CPComb ("FlatCurry.Types","Or") [CPVar (3,"e"),CPVar (4,"_")]] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Util","mapFst")) (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 0))))) (CApply (CSymbol ("FlatRewrite","subexpr")) (CVar (3,"e")))) []),CRule [CPComb ("FlatCurry.Types","Or") [CPVar (5,"_"),CPVar (6,"e")]] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Util","mapFst")) (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 1))))) (CApply (CSymbol ("FlatRewrite","subexpr")) (CVar (6,"e")))) []),CRule [CPComb ("FlatCurry.Types","Let") [CPVar (7,"_"),CPVar (8,"e")]] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Util","mapFst")) (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Prelude","negate")) (CLit (CIntc 1)))))) (CApply (CSymbol ("FlatRewrite","subexpr")) (CVar (8,"e")))) []),CRule [CPComb ("FlatCurry.Types","Typed") [CPVar (9,"e"),CPVar (10,"_")]] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Util","mapFst")) (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Prelude","negate")) (CLit (CIntc 1)))))) (CApply (CSymbol ("FlatRewrite","subexpr")) (CVar (9,"e")))) []),CRule [CPComb ("FlatCurry.Types","Case") [CPVar (11,"_"),CPVar (12,"e"),CPVar (13,"_")]] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Util","mapFst")) (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Prelude","negate")) (CLit (CIntc 1)))))) (CApply (CSymbol ("FlatRewrite","subexpr")) (CVar (12,"e")))) []),CRule [CPComb ("FlatCurry.Types","Comb") [CPVar (14,"_"),CPVar (15,"_"),CPFuncComb ("Prelude","++") [CPVar (16,"es"),CPFuncComb ("Prelude","++") [CPComb ("Prelude",":") [CPVar (17,"e"),CPComb ("Prelude","[]") []],CPVar (18,"_")]]]] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Util","mapFst")) (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Prelude","length")) (CVar (16,"es")))))) (CApply (CSymbol ("FlatRewrite","subexpr")) (CVar (17,"e")))) []),CRule [CPComb ("FlatCurry.Types","Let") [CPFuncComb ("Prelude","++") [CPVar (19,"es"),CPFuncComb ("Prelude","++") [CPComb ("Prelude",":") [CPVar (20,"e"),CPComb ("Prelude","[]") []],CPVar (21,"_")]],CPVar (22,"_")]] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Util","mapFst")) (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Prelude","length")) (CVar (19,"es")))))) (CApply (CSymbol ("FlatRewrite","subexpr")) (CApply (CSymbol ("Prelude","snd")) (CVar (20,"e"))))) []),CRule [CPComb ("FlatCurry.Types","Case") [CPVar (23,"_"),CPVar (24,"_"),CPFuncComb ("Prelude","++") [CPVar (25,"bs"),CPFuncComb ("Prelude","++") [CPComb ("Prelude",":") [CPComb ("FlatCurry.Types","Branch") [CPVar (26,"_"),CPVar (27,"e")],CPComb ("Prelude","[]") []],CPVar (28,"_")]]]] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Util","mapFst")) (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Prelude","length")) (CVar (25,"bs")))))) (CApply (CSymbol ("FlatRewrite","subexpr")) (CVar (27,"e")))) [])],
  CFunc ("FlatRewrite","replace") 3 Public (CQualType (CContext []) (CFuncType (CTCons ("FlatCurry.Types","Expr")) (CFuncType (CTCons ("FlatRewrite","Path")) (CFuncType (CTCons ("FlatCurry.Types","Expr")) (CTCons ("FlatCurry.Types","Expr")))))) [CRule [CPVar (0,"_"),CPComb ("Prelude","[]") [],CPVar (1,"w")] (CSimpleRhs (CVar (1,"w")) []),CRule [CPComb ("FlatCurry.Types","Free") [CPVar (2,"vs"),CPVar (3,"e")],CPComb ("Prelude",":") [CPLit (CIntc 0),CPVar (4,"ps")],CPVar (5,"w")] (CSimpleRhs (CApply (CApply (CSymbol ("FlatCurry.Types","Free")) (CVar (2,"vs"))) (CApply (CApply (CApply (CSymbol ("FlatRewrite","replace")) (CVar (3,"e"))) (CVar (4,"ps"))) (CVar (5,"w")))) []),CRule [CPComb ("FlatCurry.Types","Or") [CPVar (6,"e1"),CPVar (7,"e2")],CPComb ("Prelude",":") [CPLit (CIntc 0),CPVar (8,"ps")],CPVar (9,"w")] (CSimpleRhs (CApply (CApply (CSymbol ("FlatCurry.Types","Or")) (CApply (CApply (CApply (CSymbol ("FlatRewrite","replace")) (CVar (6,"e1"))) (CVar (8,"ps"))) (CVar (9,"w")))) (CVar (7,"e2"))) []),CRule [CPComb ("FlatCurry.Types","Or") [CPVar (10,"e1"),CPVar (11,"e2")],CPComb ("Prelude",":") [CPLit (CIntc 1),CPVar (12,"ps")],CPVar (13,"w")] (CSimpleRhs (CApply (CApply (CSymbol ("FlatCurry.Types","Or")) (CVar (10,"e1"))) (CApply (CApply (CApply (CSymbol ("FlatRewrite","replace")) (CVar (11,"e2"))) (CVar (12,"ps"))) (CVar (13,"w")))) []),CRule [CPComb ("FlatCurry.Types","Typed") [CPVar (14,"e"),CPVar (15,"t")],CPComb ("Prelude",":") [CPLit (CIntc (-1)),CPVar (16,"ps")],CPVar (17,"w")] (CSimpleRhs (CApply (CApply (CSymbol ("FlatCurry.Types","Typed")) (CApply (CApply (CApply (CSymbol ("FlatRewrite","replace")) (CVar (14,"e"))) (CVar (16,"ps"))) (CVar (17,"w")))) (CVar (15,"t"))) []),CRule [CPComb ("FlatCurry.Types","Comb") [CPVar (18,"t"),CPVar (19,"n"),CPFuncComb ("Prelude","++") [CPVar (20,"x"),CPFuncComb ("Prelude","++") [CPComb ("Prelude",":") [CPVar (21,"e"),CPComb ("Prelude","[]") []],CPVar (22,"y")]]],CPComb ("Prelude",":") [CPVar (23,"p"),CPVar (24,"ps")],CPVar (25,"w")] (CGuardedRhs [(CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (23,"p"))) (CApply (CSymbol ("Prelude","length")) (CVar (20,"x"))),CApply (CApply (CApply (CSymbol ("FlatCurry.Types","Comb")) (CVar (18,"t"))) (CVar (19,"n"))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (20,"x"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CSymbol ("FlatRewrite","replace")) (CVar (21,"e"))) (CVar (24,"ps"))) (CVar (25,"w")))) (CSymbol ("Prelude","[]")))) (CVar (22,"y")))))] []),CRule [CPComb ("FlatCurry.Types","Let") [CPVar (26,"bs"),CPVar (27,"e")],CPComb ("Prelude",":") [CPLit (CIntc (-1)),CPVar (28,"ps")],CPVar (29,"w")] (CSimpleRhs (CApply (CApply (CSymbol ("FlatCurry.Types","Let")) (CVar (26,"bs"))) (CApply (CApply (CApply (CSymbol ("FlatRewrite","replace")) (CVar (27,"e"))) (CVar (28,"ps"))) (CVar (29,"w")))) []),CRule [CPComb ("FlatCurry.Types","Let") [CPFuncComb ("Prelude","++") [CPVar (30,"x"),CPFuncComb ("Prelude","++") [CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPVar (31,"v"),CPVar (32,"e")],CPComb ("Prelude","[]") []],CPVar (33,"y")]],CPVar (34,"e'")],CPComb ("Prelude",":") [CPVar (35,"p"),CPVar (36,"ps")],CPVar (37,"w")] (CGuardedRhs [(CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (35,"p"))) (CApply (CSymbol ("Prelude","length")) (CVar (30,"x"))),CApply (CApply (CSymbol ("FlatCurry.Types","Let")) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (30,"x"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (31,"v"))) (CApply (CApply (CApply (CSymbol ("FlatRewrite","replace")) (CVar (32,"e"))) (CVar (36,"ps"))) (CVar (37,"w"))))) (CSymbol ("Prelude","[]")))) (CVar (33,"y"))))) (CVar (34,"e'")))] []),CRule [CPComb ("FlatCurry.Types","Case") [CPVar (38,"t"),CPVar (39,"e"),CPVar (40,"bs")],CPComb ("Prelude",":") [CPLit (CIntc (-1)),CPVar (41,"ps")],CPVar (42,"w")] (CSimpleRhs (CApply (CApply (CApply (CSymbol ("FlatCurry.Types","Case")) (CVar (38,"t"))) (CApply (CApply (CApply (CSymbol ("FlatRewrite","replace")) (CVar (39,"e"))) (CVar (41,"ps"))) (CVar (42,"w")))) (CVar (40,"bs"))) []),CRule [CPComb ("FlatCurry.Types","Case") [CPVar (43,"t"),CPVar (44,"e'"),CPFuncComb ("Prelude","++") [CPVar (45,"x"),CPFuncComb ("Prelude","++") [CPComb ("Prelude",":") [CPComb ("FlatCurry.Types","Branch") [CPVar (46,"f"),CPVar (47,"e")],CPComb ("Prelude","[]") []],CPVar (48,"y")]]],CPComb ("Prelude",":") [CPVar (49,"p"),CPVar (50,"ps")],CPVar (51,"w")] (CGuardedRhs [(CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (49,"p"))) (CApply (CSymbol ("Prelude","length")) (CVar (45,"x"))),CApply (CApply (CApply (CSymbol ("FlatCurry.Types","Case")) (CVar (43,"t"))) (CVar (44,"e'"))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (45,"x"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("FlatCurry.Types","Branch")) (CVar (46,"f"))) (CApply (CApply (CApply (CSymbol ("FlatRewrite","replace")) (CVar (47,"e"))) (CVar (50,"ps"))) (CVar (51,"w"))))) (CSymbol ("Prelude","[]")))) (CVar (48,"y")))))] [])],
  CFunc ("FlatRewrite","arbitrary") 0 Public (CQualType (CContext []) (CFuncType (CTCons ("FlatCurry.Types","Expr")) (CTCons ("FlatCurry.Types","Expr")))) [CRule [] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","snd"))) (CSymbol ("FlatRewrite","subexpr"))) [])],
  CFunc ("FlatRewrite","fix") 2 Public (CQualType (CContext []) (CFuncType (CFuncType (CTVar (0,"a")) (CTVar (0,"a"))) (CFuncType (CTVar (0,"a")) (CTVar (0,"a"))))) [CRule [CPVar (0,"f"),CPVar (1,"x")] (CSimpleRhs (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Control.SetFunctions","isEmpty")) (CVar (2,"result")))) (CVar (1,"x"))) (CApply (CApply (CSymbol ("FlatRewrite","fix")) (CVar (0,"f"))) (CApply (CSymbol ("Prelude","fst")) (CApply (CSymbol ("Control.SetFunctions","select")) (CVar (2,"result")))))) [CLocalPat (CPVar (2,"result")) (CSimpleRhs (CApply (CApply (CSymbol ("Control.SetFunctions","set1")) (CVar (0,"f"))) (CVar (1,"x"))) [])])],
  CFunc ("FlatRewrite","step") 2 Public (CQualType (CContext []) (CFuncType (CFuncType (CTCons ("FlatCurry.Types","Expr")) (CFuncType (CTCons ("FlatRewrite","Path")) (CTCons ("FlatCurry.Types","Expr")))) (CFuncType (CTCons ("FlatCurry.Types","Expr")) (CTCons ("FlatCurry.Types","Expr"))))) [CRule [CPVar (0,"reduce"),CPVar (1,"expr")] (CGuardedRhs [(CApply (CApply (CSymbol ("Prelude","&")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CApply (CSymbol ("FlatRewrite","subexpr")) (CVar (1,"expr")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (2,"p"))) (CVar (3,"y"))))) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (4,"z"))) (CApply (CApply (CVar (0,"reduce")) (CVar (3,"y"))) (CVar (2,"p")))),CApply (CApply (CApply (CSymbol ("FlatRewrite","replace")) (CVar (1,"expr"))) (CVar (2,"p"))) (CVar (4,"z")))] [CLocalVars [(2,"p"),(3,"y"),(4,"z")]])],
  CFunc ("FlatRewrite","allValues0") 1 Private (CQualType (CContext []) (CFuncType (CTVar (0,"a")) (CTApply (CTCons ("Prelude","[]")) (CTVar (0,"a"))))) [CRule [CPVar (0,"e")] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Control.SetFunctions","sortValuesBy")) (CApply (CSymbol ("Prelude","const")) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True")))))) (CApply (CSymbol ("Control.SetFunctions","set0")) (CVar (0,"e")))) [])],
  CFunc ("FlatRewrite","allValues1") 2 Private (CQualType (CContext []) (CFuncType (CFuncType (CTVar (0,"a")) (CTVar (0,"a"))) (CFuncType (CTVar (0,"a")) (CTApply (CTCons ("Prelude","[]")) (CTVar (0,"a")))))) [CRule [CPVar (0,"f"),CPVar (1,"x")] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Control.SetFunctions","sortValuesBy")) (CApply (CSymbol ("Prelude","const")) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True")))))) (CApply (CApply (CSymbol ("Control.SetFunctions","set1")) (CVar (0,"f"))) (CVar (1,"x")))) [])],
  CFunc ("FlatRewrite","withSubexpr") 1 Private (CQualType (CContext []) (CFuncType (CTCons ("FlatCurry.Types","Expr")) (CTCons ("FlatCurry.Types","Expr")))) [CRule [CPVar (0,"expr")] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude","?")) (CVar (0,"expr"))) (CApply (CApply (CSymbol ("Prelude","?")) (CApply (CApply (CApply (CSymbol ("FlatCurry.Types","Comb")) (CSymbol ("","_"))) (CSymbol ("","_"))) (CApply (CApply (CSymbol ("Prelude","++")) (CSymbol ("","_"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("FlatRewrite","withSubexpr")) (CVar (0,"expr")))) (CSymbol ("Prelude","[]")))) (CSymbol ("","_")))))) (CApply (CApply (CSymbol ("Prelude","?")) (CApply (CApply (CSymbol ("FlatCurry.Types","Let")) (CApply (CApply (CSymbol ("Prelude","++")) (CSymbol ("","_"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("","_"))) (CApply (CSymbol ("FlatRewrite","withSubexpr")) (CVar (0,"expr"))))) (CSymbol ("Prelude","[]")))) (CSymbol ("","_"))))) (CSymbol ("","_")))) (CApply (CApply (CSymbol ("Prelude","?")) (CApply (CApply (CSymbol ("FlatCurry.Types","Let")) (CSymbol ("","_"))) (CApply (CSymbol ("FlatRewrite","withSubexpr")) (CVar (0,"expr"))))) (CApply (CApply (CSymbol ("Prelude","?")) (CApply (CApply (CSymbol ("FlatCurry.Types","Free")) (CSymbol ("","_"))) (CApply (CSymbol ("FlatRewrite","withSubexpr")) (CVar (0,"expr"))))) (CApply (CApply (CSymbol ("Prelude","?")) (CApply (CApply (CSymbol ("FlatCurry.Types","Or")) (CApply (CSymbol ("FlatRewrite","withSubexpr")) (CVar (0,"expr")))) (CSymbol ("","_")))) (CApply (CApply (CSymbol ("Prelude","?")) (CApply (CApply (CSymbol ("FlatCurry.Types","Or")) (CSymbol ("","_"))) (CApply (CSymbol ("FlatRewrite","withSubexpr")) (CVar (0,"expr"))))) (CApply (CApply (CSymbol ("Prelude","?")) (CApply (CApply (CApply (CSymbol ("FlatCurry.Types","Case")) (CSymbol ("","_"))) (CSymbol ("","_"))) (CApply (CApply (CSymbol ("Prelude","++")) (CSymbol ("","_"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("FlatCurry.Types","Branch")) (CSymbol ("","_"))) (CApply (CSymbol ("FlatRewrite","withSubexpr")) (CVar (0,"expr"))))) (CSymbol ("Prelude","[]")))) (CSymbol ("","_")))))) (CApply (CApply (CSymbol ("Prelude","?")) (CApply (CApply (CApply (CSymbol ("FlatCurry.Types","Case")) (CSymbol ("","_"))) (CApply (CSymbol ("FlatRewrite","withSubexpr")) (CVar (0,"expr")))) (CSymbol ("","_")))) (CApply (CApply (CSymbol ("FlatCurry.Types","Typed")) (CApply (CSymbol ("FlatRewrite","withSubexpr")) (CVar (0,"expr")))) (CSymbol ("","_")))))))))))) [])],
  CFunc ("FlatRewrite","isVar") 1 Private (CQualType (CContext []) (CFuncType (CTCons ("FlatCurry.Types","Expr")) (CTCons ("Prelude","Int")))) [CRule [CPFuncComb ("FlatRewrite","withSubexpr") [CPComb ("FlatCurry.Types","Var") [CPVar (0,"v")]]] (CSimpleRhs (CVar (0,"v")) [])],
  CFunc ("FlatRewrite","declVar") 1 Private (CQualType (CContext []) (CFuncType (CTCons ("FlatCurry.Types","Expr")) (CTCons ("Prelude","Int")))) [CRule [CPFuncComb ("FlatRewrite","withSubexpr") [CPComb ("FlatCurry.Types","Let") [CPVar (0,"v"),CPVar (1,"_")]]] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Prelude","anyOf"))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","fst"))) (CVar (0,"v")))) []),CRule [CPFuncComb ("FlatRewrite","withSubexpr") [CPComb ("FlatCurry.Types","Free") [CPVar (2,"v"),CPVar (3,"_")]]] (CSimpleRhs (CApply (CSymbol ("Prelude","anyOf")) (CVar (2,"v"))) []),CRule [CPFuncComb ("FlatRewrite","withSubexpr") [CPComb ("FlatCurry.Types","Case") [CPVar (4,"_"),CPVar (5,"_"),CPFuncComb ("Prelude","++") [CPVar (6,"_"),CPFuncComb ("Prelude","++") [CPComb ("Prelude",":") [CPComb ("FlatCurry.Types","Branch") [CPComb ("FlatCurry.Types","Pattern") [CPVar (7,"_"),CPVar (8,"v")],CPVar (9,"_")],CPComb ("Prelude","[]") []],CPVar (10,"_")]]]]] (CSimpleRhs (CApply (CSymbol ("Prelude","anyOf")) (CVar (8,"v"))) [])],
  CFunc ("FlatRewrite","allDecls") 0 Private (CQualType (CContext []) (CFuncType (CTCons ("FlatCurry.Types","Expr")) (CTApply (CTCons ("Prelude","[]")) (CTCons ("Prelude","Int"))))) [CRule [] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("List","nub"))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Control.SetFunctions","sortValues"))) (CApply (CSymbol ("Control.SetFunctions","set1")) (CSymbol ("FlatRewrite","declVar"))))) [])],
  CFunc ("FlatRewrite","allVars") 0 Public (CQualType (CContext []) (CFuncType (CTCons ("FlatCurry.Types","Expr")) (CTApply (CTCons ("Prelude","[]")) (CTCons ("Prelude","Int"))))) [CRule [] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("List","nub"))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Control.SetFunctions","sortValues"))) (CApply (CSymbol ("Control.SetFunctions","set1")) (CSymbol ("FlatRewrite","isVar"))))) [])],
  CFunc ("FlatRewrite","freeVars") 1 Public (CQualType (CContext []) (CFuncType (CTCons ("FlatCurry.Types","Expr")) (CTApply (CTCons ("Prelude","[]")) (CTCons ("Prelude","Int"))))) [CRule [CPVar (0,"expr")] (CSimpleRhs (CApply (CApply (CSymbol ("List","\\\\")) (CApply (CSymbol ("FlatRewrite","allVars")) (CVar (0,"expr")))) (CApply (CSymbol ("FlatRewrite","allDecls")) (CVar (0,"expr")))) [])]]
 []
