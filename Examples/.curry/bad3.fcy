Prog "bad3" ["Prelude"] [] [Func ("bad3","t1") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 0]]])) (Rule [1] (Let [(2,Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 2)],Var 3]),(3,Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 3)],Var 2])] (Let [(4,Comb FuncCall ("Prelude","zip") [Var 2,Var 3])] (Comb ConsCall ("Prelude","(,)") [Var 4,Var 4])))),Func ("bad3","t2") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 0]]])) (Rule [1] (Let [(2,Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 2)],Var 3]),(3,Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 3)],Var 2])] (Let [(4,Comb FuncCall ("Prelude","zip") [Var 2,Var 3])] (Comb ConsCall ("Prelude","(,)") [Var 4,Var 4]))))] []