IProg "PreludeNum" ["PreludeBase","PreludeCompare"] [] [IFunction ("Prelude","powaux",0) 3 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2])] (ICaseCons 2 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 2 [0])] (ICaseCons 4 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 6] [IVarAssign 6 (IVarAccess 4 [0])] (IReturn (IFCall ("Prelude","powaux#worker",0) [IVar 3,IVar 5,IVar 6])))]))]))),IFunction ("Prelude","_def#+#Prelude.Num",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFPCall ("Prelude","prim_error",0) 1 []),IVarAssign 4 (ICCall ("StringConst","No instance or default method for class operation `+'",0) [])] (IReturn (IFCall ("Prelude","$##",0) [IVar 3,IVar 4])))),IFunction ("Prelude","_def#*#Prelude.Num",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFPCall ("Prelude","prim_error",0) 1 []),IVarAssign 4 (ICCall ("StringConst","No instance or default method for class operation `*'",0) [])] (IReturn (IFCall ("Prelude","$##",0) [IVar 3,IVar 4])))),IFunction ("Prelude","_def#abs#Prelude.Num",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFPCall ("Prelude","prim_error",0) 1 []),IVarAssign 4 (ICCall ("StringConst","No instance or default method for class operation `abs'",0) [])] (IReturn (IFCall ("Prelude","$##",0) [IVar 3,IVar 4])))),IFunction ("Prelude","_def#signum#Prelude.Num",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFPCall ("Prelude","prim_error",0) 1 []),IVarAssign 4 (ICCall ("StringConst","No instance or default method for class operation `signum'",0) [])] (IReturn (IFCall ("Prelude","$##",0) [IVar 3,IVar 4])))),IFunction ("Prelude","_def#fromInt#Prelude.Num",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFPCall ("Prelude","prim_error",0) 1 []),IVarAssign 4 (ICCall ("StringConst","No instance or default method for class operation `fromInt'",0) [])] (IReturn (IFCall ("Prelude","$##",0) [IVar 3,IVar 4])))),IFunction ("Prelude","_def#fromFloat#Prelude.Fractional",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFPCall ("Prelude","prim_error",0) 1 []),IVarAssign 4 (ICCall ("StringConst","No instance or default method for class operation `fromFloat'",0) [])] (IReturn (IFCall ("Prelude","$##",0) [IVar 3,IVar 4])))),IFunction ("Prelude","_def#divMod#Prelude.Integral",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFPCall ("Prelude","prim_error",0) 1 []),IVarAssign 4 (ICCall ("StringConst","No instance or default method for class operation `divMod'",0) [])] (IReturn (IFCall ("Prelude","$##",0) [IVar 3,IVar 4])))),IFunction ("Prelude","_def#quotRem#Prelude.Integral",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFPCall ("Prelude","prim_error",0) 1 []),IVarAssign 4 (ICCall ("StringConst","No instance or default method for class operation `quotRem'",0) [])] (IReturn (IFCall ("Prelude","$##",0) [IVar 3,IVar 4])))),IFunction ("Prelude","abs",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Num",0) 7 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9] [IVarAssign 9 (IVarAccess 2 [0]),IVarAssign 8 (IVarAccess 2 [1]),IVarAssign 7 (IVarAccess 2 [2]),IVarAssign 6 (IVarAccess 2 [3]),IVarAssign 5 (IVarAccess 2 [4]),IVarAssign 4 (IVarAccess 2 [5]),IVarAssign 3 (IVarAccess 2 [6])] (IReturn (IVar 7)))]))),IFunction ("Prelude","signum",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Num",0) 7 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9] [IVarAssign 9 (IVarAccess 2 [0]),IVarAssign 8 (IVarAccess 2 [1]),IVarAssign 7 (IVarAccess 2 [2]),IVarAssign 6 (IVarAccess 2 [3]),IVarAssign 5 (IVarAccess 2 [4]),IVarAssign 4 (IVarAccess 2 [5]),IVarAssign 3 (IVarAccess 2 [6])] (IReturn (IVar 8)))]))),IFunction ("Prelude","fromFloat",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Fractional",0) 4 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 6 (IVarAccess 2 [0]),IVarAssign 5 (IVarAccess 2 [1]),IVarAssign 4 (IVarAccess 2 [2]),IVarAssign 3 (IVarAccess 2 [3])] (IReturn (IVar 6)))]))),IFunction ("Prelude","_super#Prelude.Real#Prelude.Num",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Real",0) 2 (IBlock [IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0]),IVarAssign 3 (IVarAccess 2 [1])] (IReturn (IVar 3)))]))),IFunction ("Prelude","_super#Prelude.Real#Prelude.Ord",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Real",0) 2 (IBlock [IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0]),IVarAssign 3 (IVarAccess 2 [1])] (IReturn (IVar 4)))]))),IFunction ("Prelude","_super#Prelude.Integral#Prelude.Real",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Integral",0) 7 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9] [IVarAssign 9 (IVarAccess 2 [0]),IVarAssign 8 (IVarAccess 2 [1]),IVarAssign 7 (IVarAccess 2 [2]),IVarAssign 6 (IVarAccess 2 [3]),IVarAssign 5 (IVarAccess 2 [4]),IVarAssign 4 (IVarAccess 2 [5]),IVarAssign 3 (IVarAccess 2 [6])] (IReturn (IVar 3)))]))),IFunction ("Prelude","div",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Integral",0) 7 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9] [IVarAssign 9 (IVarAccess 2 [0]),IVarAssign 8 (IVarAccess 2 [1]),IVarAssign 7 (IVarAccess 2 [2]),IVarAssign 6 (IVarAccess 2 [3]),IVarAssign 5 (IVarAccess 2 [4]),IVarAssign 4 (IVarAccess 2 [5]),IVarAssign 3 (IVarAccess 2 [6])] (IReturn (IVar 4)))]))),IFunction ("Prelude","mod",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Integral",0) 7 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9] [IVarAssign 9 (IVarAccess 2 [0]),IVarAssign 8 (IVarAccess 2 [1]),IVarAssign 7 (IVarAccess 2 [2]),IVarAssign 6 (IVarAccess 2 [3]),IVarAssign 5 (IVarAccess 2 [4]),IVarAssign 4 (IVarAccess 2 [5]),IVarAssign 3 (IVarAccess 2 [6])] (IReturn (IVar 5)))]))),IFunction ("Prelude","quot",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Integral",0) 7 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9] [IVarAssign 9 (IVarAccess 2 [0]),IVarAssign 8 (IVarAccess 2 [1]),IVarAssign 7 (IVarAccess 2 [2]),IVarAssign 6 (IVarAccess 2 [3]),IVarAssign 5 (IVarAccess 2 [4]),IVarAssign 4 (IVarAccess 2 [5]),IVarAssign 3 (IVarAccess 2 [6])] (IReturn (IVar 6)))]))),IFunction ("Prelude","rem",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Integral",0) 7 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9] [IVarAssign 9 (IVarAccess 2 [0]),IVarAssign 8 (IVarAccess 2 [1]),IVarAssign 7 (IVarAccess 2 [2]),IVarAssign 6 (IVarAccess 2 [3]),IVarAssign 5 (IVarAccess 2 [4]),IVarAssign 4 (IVarAccess 2 [5]),IVarAssign 3 (IVarAccess 2 [6])] (IReturn (IVar 7)))]))),IFunction ("Prelude","_impl#fromInt#Prelude.Num#Prelude.Int",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (IReturn (IVar 2)))),IFunction ("Prelude","/.",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 5,IVarDecl 6] [IVarAssign 5 (IVarAccess 3 [0]),IVarAssign 6 (IFCall ("Prelude","primDivFloat",0) [IVar 4,IVar 5])] (IReturn (ICCall ("","float",0) [IVar 6])))]))]))),IFunction ("Prelude","*.",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 5,IVarDecl 6] [IVarAssign 5 (IVarAccess 3 [0]),IVarAssign 6 (IFCall ("Prelude","primMulFloat",0) [IVar 4,IVar 5])] (IReturn (ICCall ("","float",0) [IVar 6])))]))]))),IFunction ("Prelude","-.",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 5,IVarDecl 6] [IVarAssign 5 (IVarAccess 3 [0]),IVarAssign 6 (IFCall ("Prelude","primSubFloat",0) [IVar 4,IVar 5])] (IReturn (ICCall ("","float",0) [IVar 6])))]))]))),IFunction ("Prelude","+.",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 5,IVarDecl 6] [IVarAssign 5 (IVarAccess 3 [0]),IVarAssign 6 (IFCall ("Prelude","primAddFloat",0) [IVar 4,IVar 5])] (IReturn (ICCall ("","float",0) [IVar 6])))]))]))),IFunction ("Prelude","negateFloat",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 3,IVarDecl 4] [IVarAssign 3 (IVarAccess 2 [0]),IVarAssign 4 (IFCall ("Prelude","primNegateFloat",0) [IVar 3])] (IReturn (ICCall ("","float",0) [IVar 4])))]))),IFunction ("Prelude","rem_",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 5,IVarDecl 6] [IVarAssign 5 (IVarAccess 3 [0]),IVarAssign 6 (IFCall ("Prelude","primRemInt",0) [IVar 4,IVar 5])] (IReturn (ICCall ("","int",0) [IVar 6])))]))]))),IFunction ("Prelude","_impl#rem#Prelude.Integral#Prelude.Int",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 5,IVarDecl 6] [IVarAssign 5 (IVarAccess 3 [0]),IVarAssign 6 (IFCall ("Prelude","primRemInt",0) [IVar 4,IVar 5])] (IReturn (ICCall ("","int",0) [IVar 6])))]))]))),IFunction ("Prelude","quot_",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 5,IVarDecl 6] [IVarAssign 5 (IVarAccess 3 [0]),IVarAssign 6 (IFCall ("Prelude","primQuotInt",0) [IVar 4,IVar 5])] (IReturn (ICCall ("","int",0) [IVar 6])))]))]))),IFunction ("Prelude","_impl#quotRem#Prelude.Integral#Prelude.Int",0) 2 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1]),IVarAssign 4 (IFCall ("Prelude","quot_",0) [IVar 2,IVar 3]),IVarAssign 5 (IFCall ("Prelude","rem_",0) [IVar 2,IVar 3])] (IReturn (ICCall ("Prelude","(,)",0) [IVar 4,IVar 5])))),IFunction ("Prelude","_impl#quot#Prelude.Integral#Prelude.Int",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 5,IVarDecl 6] [IVarAssign 5 (IVarAccess 3 [0]),IVarAssign 6 (IFCall ("Prelude","primQuotInt",0) [IVar 4,IVar 5])] (IReturn (ICCall ("","int",0) [IVar 6])))]))]))),IFunction ("Prelude","mod_",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 5,IVarDecl 6] [IVarAssign 5 (IVarAccess 3 [0]),IVarAssign 6 (IFCall ("Prelude","primModInt",0) [IVar 4,IVar 5])] (IReturn (ICCall ("","int",0) [IVar 6])))]))]))),IFunction ("Prelude","_impl#mod#Prelude.Integral#Prelude.Int",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 5,IVarDecl 6] [IVarAssign 5 (IVarAccess 3 [0]),IVarAssign 6 (IFCall ("Prelude","primModInt",0) [IVar 4,IVar 5])] (IReturn (ICCall ("","int",0) [IVar 6])))]))]))),IFunction ("Prelude","div_",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 5,IVarDecl 6] [IVarAssign 5 (IVarAccess 3 [0]),IVarAssign 6 (IFCall ("Prelude","primDivInt",0) [IVar 4,IVar 5])] (IReturn (ICCall ("","int",0) [IVar 6])))]))]))),IFunction ("Prelude","_impl#divMod#Prelude.Integral#Prelude.Int",0) 2 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1]),IVarAssign 4 (IFCall ("Prelude","div_",0) [IVar 2,IVar 3]),IVarAssign 5 (IFCall ("Prelude","mod_",0) [IVar 2,IVar 3])] (IReturn (ICCall ("Prelude","(,)",0) [IVar 4,IVar 5])))),IFunction ("Prelude","_impl#div#Prelude.Integral#Prelude.Int",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 5,IVarDecl 6] [IVarAssign 5 (IVarAccess 3 [0]),IVarAssign 6 (IFCall ("Prelude","primDivInt",0) [IVar 4,IVar 5])] (IReturn (ICCall ("","int",0) [IVar 6])))]))]))),IFunction ("Prelude","halve",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 3,IVarDecl 4] [IVarAssign 3 (IVarAccess 2 [0]),IVarAssign 4 (IFCall ("Prelude","primDivInt",0) [IVar 3,ILit (IInt 2)])] (IReturn (ICCall ("","int",0) [IVar 4])))]))),IFunction ("Prelude","*$",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 5,IVarDecl 6] [IVarAssign 5 (IVarAccess 3 [0]),IVarAssign 6 (IFCall ("Prelude","primMulInt",0) [IVar 4,IVar 5])] (IReturn (ICCall ("","int",0) [IVar 6])))]))]))),IFunction ("Prelude","_impl#*#Prelude.Num#Prelude.Int",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 5,IVarDecl 6] [IVarAssign 5 (IVarAccess 3 [0]),IVarAssign 6 (IFCall ("Prelude","primMulInt",0) [IVar 4,IVar 5])] (IReturn (ICCall ("","int",0) [IVar 6])))]))]))),IFunction ("Prelude","-$",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 5,IVarDecl 6] [IVarAssign 5 (IVarAccess 3 [0]),IVarAssign 6 (IFCall ("Prelude","primSubInt",0) [IVar 4,IVar 5])] (IReturn (ICCall ("","int",0) [IVar 6])))]))]))),IFunction ("Prelude","_impl#negate#Prelude.Num#Prelude.Int",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 3,IVarDecl 4] [IVarAssign 3 (IVarAccess 2 [0]),IVarAssign 4 (IFCall ("Prelude","primSubInt",0) [ILit (IInt 0),IVar 3])] (IReturn (ICCall ("","int",0) [IVar 4])))]))),IFunction ("Prelude","_impl#signum#Prelude.Num#Prelude.Int",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 3] [IVarAssign 3 (IVarAccess 2 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqInt",0) [IVar 3,ILit (IInt 0)]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqInt",0) [IVar 3,ILit (IInt 0)]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("","int",0) [ILit (IInt 0)]))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("","int",0) [ILit (IInt (-1))])))])),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("","int",0) [ILit (IInt 1)])))]))]))),IFunction ("Prelude","_impl#abs#Prelude.Num#Prelude.Int",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 3] [IVarAssign 3 (IVarAccess 2 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqInt",0) [ILit (IInt 0),IVar 3]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IVar 2))),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 4] [IVarAssign 4 (IFCall ("Prelude","primSubInt",0) [ILit (IInt 0),IVar 3])] (IReturn (ICCall ("","int",0) [IVar 4])))]))]))),IFunction ("Prelude","_impl#-#Prelude.Num#Prelude.Int",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 5,IVarDecl 6] [IVarAssign 5 (IVarAccess 3 [0]),IVarAssign 6 (IFCall ("Prelude","primSubInt",0) [IVar 4,IVar 5])] (IReturn (ICCall ("","int",0) [IVar 6])))]))]))),IFunction ("Prelude","negate_",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 3,IVarDecl 4] [IVarAssign 3 (IVarAccess 2 [0]),IVarAssign 4 (IFCall ("Prelude","primSubInt",0) [ILit (IInt 0),IVar 3])] (IReturn (ICCall ("","int",0) [IVar 4])))]))),IFunction ("Prelude","+$",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 5,IVarDecl 6] [IVarAssign 5 (IVarAccess 3 [0]),IVarAssign 6 (IFCall ("Prelude","primAddInt",0) [IVar 4,IVar 5])] (IReturn (ICCall ("","int",0) [IVar 6])))]))]))),IFunction ("Prelude","_impl#+#Prelude.Num#Prelude.Int",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 5,IVarDecl 6] [IVarAssign 5 (IVarAccess 3 [0]),IVarAssign 6 (IFCall ("Prelude","primAddInt",0) [IVar 4,IVar 5])] (IReturn (ICCall ("","int",0) [IVar 6])))]))]))),IFunction ("Prelude","_inst#Prelude.Num#Prelude.Int",0) 0 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8] [IVarAssign 2 (IFPCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int",0) 2 []),IVarAssign 3 (IFPCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int",0) 2 []),IVarAssign 4 (IFPCall ("Prelude","_impl#*#Prelude.Num#Prelude.Int",0) 2 []),IVarAssign 5 (IFPCall ("Prelude","_impl#negate#Prelude.Num#Prelude.Int",0) 1 []),IVarAssign 6 (IFPCall ("Prelude","_impl#abs#Prelude.Num#Prelude.Int",0) 1 []),IVarAssign 7 (IFPCall ("Prelude","_impl#signum#Prelude.Num#Prelude.Int",0) 1 []),IVarAssign 8 (IFPCall ("Prelude","_impl#fromInt#Prelude.Num#Prelude.Int",0) 1 [])] (IReturn (ICCall ("Prelude","_Dict#Num",0) [IVar 2,IVar 3,IVar 4,IVar 5,IVar 6,IVar 7,IVar 8])))),IFunction ("Prelude","_inst#Prelude.Real#Prelude.Int",0) 0 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10] [IVarAssign 2 (IFCall ("Prelude","_inst#Prelude.Ord#Prelude.Int",0) []),IVarAssign 3 (IFPCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int",0) 2 []),IVarAssign 4 (IFPCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int",0) 2 []),IVarAssign 5 (IFPCall ("Prelude","_impl#*#Prelude.Num#Prelude.Int",0) 2 []),IVarAssign 6 (IFPCall ("Prelude","_impl#negate#Prelude.Num#Prelude.Int",0) 1 []),IVarAssign 7 (IFPCall ("Prelude","_impl#abs#Prelude.Num#Prelude.Int",0) 1 []),IVarAssign 8 (IFPCall ("Prelude","_impl#signum#Prelude.Num#Prelude.Int",0) 1 []),IVarAssign 9 (IFPCall ("Prelude","_impl#fromInt#Prelude.Num#Prelude.Int",0) 1 []),IVarAssign 10 (ICCall ("Prelude","_Dict#Num",0) [IVar 3,IVar 4,IVar 5,IVar 6,IVar 7,IVar 8,IVar 9])] (IReturn (ICCall ("Prelude","_Dict#Real",0) [IVar 10,IVar 2])))),IFunction ("Prelude","_inst#Prelude.Integral#Prelude.Int",0) 0 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8] [IVarAssign 2 (IFCall ("Prelude","_inst#Prelude.Real#Prelude.Int",0) []),IVarAssign 3 (IFPCall ("Prelude","_impl#div#Prelude.Integral#Prelude.Int",0) 2 []),IVarAssign 4 (IFPCall ("Prelude","_impl#mod#Prelude.Integral#Prelude.Int",0) 2 []),IVarAssign 5 (IFPCall ("Prelude","_impl#quot#Prelude.Integral#Prelude.Int",0) 2 []),IVarAssign 6 (IFPCall ("Prelude","_impl#rem#Prelude.Integral#Prelude.Int",0) 2 []),IVarAssign 7 (IFPCall ("Prelude","_impl#divMod#Prelude.Integral#Prelude.Int",0) 2 []),IVarAssign 8 (IFPCall ("Prelude","_impl#quotRem#Prelude.Integral#Prelude.Int",0) 2 [])] (IReturn (ICCall ("Prelude","_Dict#Integral",0) [IVar 2,IVar 3,IVar 4,IVar 5,IVar 6,IVar 7,IVar 8])))),IFunction ("Prelude","i2f",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 3,IVarDecl 4] [IVarAssign 3 (IVarAccess 2 [0]),IVarAssign 4 (IFCall ("Prelude","primI2F",0) [IVar 3])] (IReturn (ICCall ("","float",0) [IVar 4])))]))),IFunction ("Prelude","quotRem",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Integral",0) 7 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9] [IVarAssign 9 (IVarAccess 2 [0]),IVarAssign 8 (IVarAccess 2 [1]),IVarAssign 7 (IVarAccess 2 [2]),IVarAssign 6 (IVarAccess 2 [3]),IVarAssign 5 (IVarAccess 2 [4]),IVarAssign 4 (IVarAccess 2 [5]),IVarAssign 3 (IVarAccess 2 [6])] (IReturn (IVar 9)))]))),IFunction ("Prelude","divMod",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Integral",0) 7 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9] [IVarAssign 9 (IVarAccess 2 [0]),IVarAssign 8 (IVarAccess 2 [1]),IVarAssign 7 (IVarAccess 2 [2]),IVarAssign 6 (IVarAccess 2 [3]),IVarAssign 5 (IVarAccess 2 [4]),IVarAssign 4 (IVarAccess 2 [5]),IVarAssign 3 (IVarAccess 2 [6])] (IReturn (IVar 8)))]))),IFunction ("Prelude","recip",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Fractional",0) 4 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 6 (IVarAccess 2 [0]),IVarAssign 5 (IVarAccess 2 [1]),IVarAssign 4 (IVarAccess 2 [2]),IVarAssign 3 (IVarAccess 2 [3])] (IReturn (IVar 5)))]))),IFunction ("Prelude","/",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Fractional",0) 4 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 6 (IVarAccess 2 [0]),IVarAssign 5 (IVarAccess 2 [1]),IVarAssign 4 (IVarAccess 2 [2]),IVarAssign 3 (IVarAccess 2 [3])] (IReturn (IVar 4)))]))),IFunction ("Prelude","_super#Prelude.Fractional#Prelude.Num",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Fractional",0) 4 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 6 (IVarAccess 2 [0]),IVarAssign 5 (IVarAccess 2 [1]),IVarAssign 4 (IVarAccess 2 [2]),IVarAssign 3 (IVarAccess 2 [3])] (IReturn (IVar 3)))]))),IFunction ("Prelude","fromInt",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Num",0) 7 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9] [IVarAssign 9 (IVarAccess 2 [0]),IVarAssign 8 (IVarAccess 2 [1]),IVarAssign 7 (IVarAccess 2 [2]),IVarAssign 6 (IVarAccess 2 [3]),IVarAssign 5 (IVarAccess 2 [4]),IVarAssign 4 (IVarAccess 2 [5]),IVarAssign 3 (IVarAccess 2 [6])] (IReturn (IVar 9)))]))),IFunction ("Prelude","_def#recip#Prelude.Fractional",0) 2 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1]),IVarAssign 4 (IFCall ("Prelude","/",0) [IVar 2]),IVarAssign 5 (IFCall ("Prelude","_def#recip#Prelude.Fractional#A0",0) [IVar 2]),IVarAssign 6 (IFCall ("Prelude","fromInt",0) [IVar 5]),IVarAssign 7 (ICCall ("","int",0) [ILit (IInt 1)]),IVarAssign 8 (IFCall ("Prelude","apply",0) [IVar 6,IVar 7])] (IReturn (IFCall ("Prelude","apply",0) [IVar 4,IVar 8,IVar 3])))),IFunction ("Prelude","_def#recip#Prelude.Fractional#A0",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Fractional",0) 4 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 6 (IVarAccess 2 [0]),IVarAssign 5 (IVarAccess 2 [1]),IVarAssign 4 (IVarAccess 2 [2]),IVarAssign 3 (IVarAccess 2 [3])] (IReturn (IVar 3)))]))),IFunction ("Prelude","negate",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Num",0) 7 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9] [IVarAssign 9 (IVarAccess 2 [0]),IVarAssign 8 (IVarAccess 2 [1]),IVarAssign 7 (IVarAccess 2 [2]),IVarAssign 6 (IVarAccess 2 [3]),IVarAssign 5 (IVarAccess 2 [4]),IVarAssign 4 (IVarAccess 2 [5]),IVarAssign 3 (IVarAccess 2 [6])] (IReturn (IVar 6)))]))),IFunction ("Prelude","*",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Num",0) 7 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9] [IVarAssign 9 (IVarAccess 2 [0]),IVarAssign 8 (IVarAccess 2 [1]),IVarAssign 7 (IVarAccess 2 [2]),IVarAssign 6 (IVarAccess 2 [3]),IVarAssign 5 (IVarAccess 2 [4]),IVarAssign 4 (IVarAccess 2 [5]),IVarAssign 3 (IVarAccess 2 [6])] (IReturn (IVar 5)))]))),IFunction ("Prelude","_def#/#Prelude.Fractional",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFCall ("Prelude","_def#/#Prelude.Fractional#A1",0) [IVar 2]),IVarAssign 6 (IFCall ("Prelude","*",0) [IVar 5]),IVarAssign 7 (IFCall ("Prelude","recip",0) [IVar 2]),IVarAssign 8 (IFCall ("Prelude","apply",0) [IVar 7,IVar 4])] (IReturn (IFCall ("Prelude","apply",0) [IVar 6,IVar 3,IVar 8])))),IFunction ("Prelude","_def#/#Prelude.Fractional#A1",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Fractional",0) 4 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 6 (IVarAccess 2 [0]),IVarAssign 5 (IVarAccess 2 [1]),IVarAssign 4 (IVarAccess 2 [2]),IVarAssign 3 (IVarAccess 2 [3])] (IReturn (IVar 3)))]))),IFunction ("Prelude","-",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Num",0) 7 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9] [IVarAssign 9 (IVarAccess 2 [0]),IVarAssign 8 (IVarAccess 2 [1]),IVarAssign 7 (IVarAccess 2 [2]),IVarAssign 6 (IVarAccess 2 [3]),IVarAssign 5 (IVarAccess 2 [4]),IVarAssign 4 (IVarAccess 2 [5]),IVarAssign 3 (IVarAccess 2 [6])] (IReturn (IVar 4)))]))),IFunction ("Prelude","_def#negate#Prelude.Num",0) 2 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1]),IVarAssign 4 (IFCall ("Prelude","-",0) [IVar 2]),IVarAssign 5 (IFCall ("Prelude","fromInt",0) [IVar 2]),IVarAssign 6 (ICCall ("","int",0) [ILit (IInt 0)]),IVarAssign 7 (IFCall ("Prelude","apply",0) [IVar 5,IVar 6])] (IReturn (IFCall ("Prelude","apply",0) [IVar 4,IVar 7,IVar 3])))),IFunction ("Prelude","+",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Num",0) 7 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9] [IVarAssign 9 (IVarAccess 2 [0]),IVarAssign 8 (IVarAccess 2 [1]),IVarAssign 7 (IVarAccess 2 [2]),IVarAssign 6 (IVarAccess 2 [3]),IVarAssign 5 (IVarAccess 2 [4]),IVarAssign 4 (IVarAccess 2 [5]),IVarAssign 3 (IVarAccess 2 [6])] (IReturn (IVar 3)))]))),IFunction ("Prelude","_def#-#Prelude.Num",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFCall ("Prelude","+",0) [IVar 2]),IVarAssign 6 (IFCall ("Prelude","negate",0) [IVar 2]),IVarAssign 7 (IFCall ("Prelude","apply",0) [IVar 6,IVar 4])] (IReturn (IFCall ("Prelude","apply",0) [IVar 5,IVar 3,IVar 7])))),IFunction ("Prelude","_def#rem#Prelude.Integral",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFCall ("Prelude","quotRem",0) [IVar 2]),IVarAssign 6 (IFCall ("Prelude","apply",0) [IVar 5,IVar 3,IVar 4])] (ICaseCons 6 [IConsBranch ("Prelude","(,)",0) 2 (IBlock [IVarDecl 7,IVarDecl 8] [IVarAssign 8 (IVarAccess 6 [0]),IVarAssign 7 (IVarAccess 6 [1])] (IReturn (IVar 8)))]))),IFunction ("Prelude","_def#quot#Prelude.Integral",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFCall ("Prelude","quotRem",0) [IVar 2]),IVarAssign 6 (IFCall ("Prelude","apply",0) [IVar 5,IVar 3,IVar 4])] (ICaseCons 6 [IConsBranch ("Prelude","(,)",0) 2 (IBlock [IVarDecl 7,IVarDecl 8] [IVarAssign 8 (IVarAccess 6 [0]),IVarAssign 7 (IVarAccess 6 [1])] (IReturn (IVar 7)))]))),IFunction ("Prelude","_def#mod#Prelude.Integral",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFCall ("Prelude","divMod",0) [IVar 2]),IVarAssign 6 (IFCall ("Prelude","apply",0) [IVar 5,IVar 3,IVar 4])] (ICaseCons 6 [IConsBranch ("Prelude","(,)",0) 2 (IBlock [IVarDecl 7,IVarDecl 8] [IVarAssign 8 (IVarAccess 6 [0]),IVarAssign 7 (IVarAccess 6 [1])] (IReturn (IVar 8)))]))),IFunction ("Prelude","_def#div#Prelude.Integral",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFCall ("Prelude","divMod",0) [IVar 2]),IVarAssign 6 (IFCall ("Prelude","apply",0) [IVar 5,IVar 3,IVar 4])] (ICaseCons 6 [IConsBranch ("Prelude","(,)",0) 2 (IBlock [IVarDecl 7,IVarDecl 8] [IVarAssign 8 (IVarAccess 6 [0]),IVarAssign 7 (IVarAccess 6 [1])] (IReturn (IVar 7)))]))),IFunction ("Prelude","_impl#fromFloat#Prelude.Fractional#Prelude.Float",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (IReturn (IVar 2)))),IFunction ("Prelude","_impl#/#Prelude.Fractional#Prelude.Float",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 5,IVarDecl 6] [IVarAssign 5 (IVarAccess 3 [0]),IVarAssign 6 (IFCall ("Prelude","primDivFloat",0) [IVar 4,IVar 5])] (IReturn (ICCall ("","float",0) [IVar 6])))]))]))),IFunction ("Prelude","_impl#recip#Prelude.Fractional#Prelude.Float",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 3,IVarDecl 4] [IVarAssign 3 (IVarAccess 2 [0]),IVarAssign 4 (IFCall ("Prelude","primDivFloat",0) [ILit (IFloat 1.0),IVar 3])] (IReturn (ICCall ("","float",0) [IVar 4])))]))),IFunction ("Prelude","_impl#fromInt#Prelude.Num#Prelude.Float",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 3,IVarDecl 4] [IVarAssign 3 (IVarAccess 2 [0]),IVarAssign 4 (IFCall ("Prelude","primI2F",0) [IVar 3])] (IReturn (ICCall ("","float",0) [IVar 4])))]))),IFunction ("Prelude","_impl#negate#Prelude.Num#Prelude.Float",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 3,IVarDecl 4] [IVarAssign 3 (IVarAccess 2 [0]),IVarAssign 4 (IFCall ("Prelude","primNegateFloat",0) [IVar 3])] (IReturn (ICCall ("","float",0) [IVar 4])))]))),IFunction ("Prelude","_impl#signum#Prelude.Num#Prelude.Float",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 3] [IVarAssign 3 (IVarAccess 2 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqFloat",0) [IVar 3,ILit (IFloat 0.0)]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqFloat",0) [IVar 3,ILit (IFloat 0.0)]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("","float",0) [ILit (IFloat 0.0)]))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("","float",0) [ILit (IFloat (-1.0))])))])),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("","float",0) [ILit (IFloat 1.0)])))]))]))),IFunction ("Prelude","_impl#abs#Prelude.Num#Prelude.Float",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 3] [IVarAssign 3 (IVarAccess 2 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqFloat",0) [ILit (IFloat 0.0),IVar 3]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IVar 2))),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 4] [IVarAssign 4 (IFCall ("Prelude","primNegateFloat",0) [IVar 3])] (IReturn (ICCall ("","float",0) [IVar 4])))]))]))),IFunction ("Prelude","_impl#*#Prelude.Num#Prelude.Float",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 5,IVarDecl 6] [IVarAssign 5 (IVarAccess 3 [0]),IVarAssign 6 (IFCall ("Prelude","primMulFloat",0) [IVar 4,IVar 5])] (IReturn (ICCall ("","float",0) [IVar 6])))]))]))),IFunction ("Prelude","square",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 3,IVarDecl 4] [IVarAssign 3 (IVarAccess 2 [0]),IVarAssign 4 (IFCall ("Prelude","primMulFloat",0) [IVar 3,IVar 3])] (IReturn (ICCall ("","float",0) [IVar 4])))]))),IFunction ("Prelude","pow",0) 2 Public [1] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 3 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 3 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqInt",0) [ILit (IInt 0),IVar 4]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","powaux#worker",0) [IVar 2,ILit (IFloat 1.0),IVar 4]))),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 5,IVarDecl (-6)] [IVarAssign 5 (IFCall ("Prelude","primSubInt",0) [ILit (IInt 0),IVar 4]),IVarAssign (-6) (IFCall ("Prelude","powaux#worker",0) [IVar 2,ILit (IFloat 1.0),IVar 5])] (ICaseCons (-6) [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 7,IVarDecl 8] [IVarAssign 7 (IVarAccess (-6) [0]),IVarAssign 8 (IFCall ("Prelude","primDivFloat",0) [ILit (IFloat 1.0),IVar 7])] (IReturn (ICCall ("","float",0) [IVar 8])))]))]))]))),IFunction ("Prelude","_impl#-#Prelude.Num#Prelude.Float",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 5,IVarDecl 6] [IVarAssign 5 (IVarAccess 3 [0]),IVarAssign 6 (IFCall ("Prelude","primSubFloat",0) [IVar 4,IVar 5])] (IReturn (ICCall ("","float",0) [IVar 6])))]))]))),IFunction ("Prelude","_impl#+#Prelude.Num#Prelude.Float",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 5,IVarDecl 6] [IVarAssign 5 (IVarAccess 3 [0]),IVarAssign 6 (IFCall ("Prelude","primAddFloat",0) [IVar 4,IVar 5])] (IReturn (ICCall ("","float",0) [IVar 6])))]))]))),IFunction ("Prelude","_inst#Prelude.Num#Prelude.Float",0) 0 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8] [IVarAssign 2 (IFPCall ("Prelude","_impl#+#Prelude.Num#Prelude.Float",0) 2 []),IVarAssign 3 (IFPCall ("Prelude","_impl#-#Prelude.Num#Prelude.Float",0) 2 []),IVarAssign 4 (IFPCall ("Prelude","_impl#*#Prelude.Num#Prelude.Float",0) 2 []),IVarAssign 5 (IFPCall ("Prelude","_impl#negate#Prelude.Num#Prelude.Float",0) 1 []),IVarAssign 6 (IFPCall ("Prelude","_impl#abs#Prelude.Num#Prelude.Float",0) 1 []),IVarAssign 7 (IFPCall ("Prelude","_impl#signum#Prelude.Num#Prelude.Float",0) 1 []),IVarAssign 8 (IFPCall ("Prelude","_impl#fromInt#Prelude.Num#Prelude.Float",0) 1 [])] (IReturn (ICCall ("Prelude","_Dict#Num",0) [IVar 2,IVar 3,IVar 4,IVar 5,IVar 6,IVar 7,IVar 8])))),IFunction ("Prelude","_inst#Prelude.Real#Prelude.Float",0) 0 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10] [IVarAssign 2 (IFCall ("Prelude","_inst#Prelude.Ord#Prelude.Float",0) []),IVarAssign 3 (IFPCall ("Prelude","_impl#+#Prelude.Num#Prelude.Float",0) 2 []),IVarAssign 4 (IFPCall ("Prelude","_impl#-#Prelude.Num#Prelude.Float",0) 2 []),IVarAssign 5 (IFPCall ("Prelude","_impl#*#Prelude.Num#Prelude.Float",0) 2 []),IVarAssign 6 (IFPCall ("Prelude","_impl#negate#Prelude.Num#Prelude.Float",0) 1 []),IVarAssign 7 (IFPCall ("Prelude","_impl#abs#Prelude.Num#Prelude.Float",0) 1 []),IVarAssign 8 (IFPCall ("Prelude","_impl#signum#Prelude.Num#Prelude.Float",0) 1 []),IVarAssign 9 (IFPCall ("Prelude","_impl#fromInt#Prelude.Num#Prelude.Float",0) 1 []),IVarAssign 10 (ICCall ("Prelude","_Dict#Num",0) [IVar 3,IVar 4,IVar 5,IVar 6,IVar 7,IVar 8,IVar 9])] (IReturn (ICCall ("Prelude","_Dict#Real",0) [IVar 10,IVar 2])))),IFunction ("Prelude","_inst#Prelude.Fractional#Prelude.Float",0) 0 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10,IVarDecl 11,IVarDecl 12] [IVarAssign 2 (IFPCall ("Prelude","_impl#+#Prelude.Num#Prelude.Float",0) 2 []),IVarAssign 3 (IFPCall ("Prelude","_impl#-#Prelude.Num#Prelude.Float",0) 2 []),IVarAssign 4 (IFPCall ("Prelude","_impl#*#Prelude.Num#Prelude.Float",0) 2 []),IVarAssign 5 (IFPCall ("Prelude","_impl#negate#Prelude.Num#Prelude.Float",0) 1 []),IVarAssign 6 (IFPCall ("Prelude","_impl#abs#Prelude.Num#Prelude.Float",0) 1 []),IVarAssign 7 (IFPCall ("Prelude","_impl#signum#Prelude.Num#Prelude.Float",0) 1 []),IVarAssign 8 (IFPCall ("Prelude","_impl#fromInt#Prelude.Num#Prelude.Float",0) 1 []),IVarAssign 9 (ICCall ("Prelude","_Dict#Num",0) [IVar 2,IVar 3,IVar 4,IVar 5,IVar 6,IVar 7,IVar 8]),IVarAssign 10 (IFPCall ("Prelude","_impl#/#Prelude.Fractional#Prelude.Float",0) 2 []),IVarAssign 11 (IFPCall ("Prelude","_impl#recip#Prelude.Fractional#Prelude.Float",0) 1 []),IVarAssign 12 (IFPCall ("Prelude","_impl#fromFloat#Prelude.Fractional#Prelude.Float",0) 1 [])] (IReturn (ICCall ("Prelude","_Dict#Fractional",0) [IVar 9,IVar 10,IVar 11,IVar 12])))),IFunction ("Prelude","powaux#worker",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqInt",0) [IVar 4,ILit (IInt 0)]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("","float",0) [IVar 3]))),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 5] [IVarAssign 5 (IFCall ("Prelude","primModInt",0) [IVar 4,ILit (IInt 2)])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqInt",0) [IVar 5,ILit (IInt 1)]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (ICaseCons 2 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10] [IVarAssign 6 (IVarAccess 2 [0]),IVarAssign 7 (IFCall ("Prelude","primDivInt",0) [IVar 4,ILit (IInt 2)]),IVarAssign 8 (IFCall ("Prelude","primMulFloat",0) [IVar 3,IVar 6]),IVarAssign 9 (IFCall ("Prelude","primMulFloat",0) [IVar 6,IVar 6]),IVarAssign 10 (ICCall ("","float",0) [IVar 9])] (IReturn (IFCall ("Prelude","powaux#worker",0) [IVar 10,IVar 8,IVar 7])))])),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 11,IVarDecl 12] [IVarAssign 11 (IFCall ("Prelude","primDivInt",0) [IVar 4,ILit (IInt 2)]),IVarAssign 12 (IFCall ("Prelude","square",0) [IVar 2])] (IReturn (IFCall ("Prelude","powaux#worker",0) [IVar 12,IVar 3,IVar 11])))]))])))]