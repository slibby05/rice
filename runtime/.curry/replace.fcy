Prog "replace" ["Prelude"] [TypeSyn ("replace","RepBool") Public [] (TCons ("Prelude","Bool") []),TypeSyn ("replace","RepInt") Public [] (TCons ("Prelude","Int") []),TypeSyn ("replace","RepFloat") Public [] (TCons ("Prelude","Float") []),TypeSyn ("replace","RepChar") Public [] (TCons ("Prelude","Char") []),TypeSyn ("replace","RepList") Public [0] (TCons ("Prelude","[]") [TVar 0]),TypeSyn ("replace","RepUnit") Public [] (TCons ("Prelude","()") []),TypeSyn ("replace","RepT2") Public [0,1] (TCons ("Prelude","(,)") [TVar 0,TVar 1]),TypeSyn ("replace","RepT3") Public [0,1,2] (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]),TypeSyn ("replace","RepT4") Public [0,1,2,3] (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]),TypeSyn ("replace","RepT5") Public [0,1,2,3,4] (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]),TypeSyn ("replace","RepT6") Public [0,1,2,3,4,5] (TCons ("Prelude","(,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5]),TypeSyn ("replace","RepT7") Public [0,1,2,3,4,5,6] (TCons ("Prelude","(,,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 6,TVar 5]),Type ("replace","Maybe") Public [0] [Cons ("replace","Nothing") 0 Public [],Cons ("replace","Just") 1 Public [TVar 0]],Type ("replace","Either") Public [0,1] [Cons ("replace","Left") 1 Public [TVar 0],Cons ("replace","Right") 1 Public [TVar 1]],Type ("replace","IOError") Public [] [Cons ("replace","IOError") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("replace","UserError") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("replace","FailError") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("replace","NondetError") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]] [Func ("replace","_inst#Prelude.Num#replace.RepInt") 0 Public (TCons ("Prelude","_Dict#Num") [TCons ("replace","RepInt") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Num") [Comb (FuncPartCall 2) ("replace","_impl#+#Prelude.Num#replace.RepInt") [],Comb (FuncPartCall 2) ("replace","_impl#-#Prelude.Num#replace.RepInt") [],Comb (FuncPartCall 2) ("replace","_impl#*#Prelude.Num#replace.RepInt") [],Comb (FuncPartCall 1) ("replace","_impl#negate#Prelude.Num#replace.RepInt") [],Comb (FuncPartCall 1) ("replace","_impl#abs#Prelude.Num#replace.RepInt") [],Comb (FuncPartCall 1) ("replace","_impl#signum#Prelude.Num#replace.RepInt") [],Comb (FuncPartCall 1) ("replace","_impl#fromInt#Prelude.Num#replace.RepInt") []])),Func ("replace","_impl#+#Prelude.Num#replace.RepInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Comb FuncCall ("replace","+$") [Var 1,Var 2])),Func ("replace","_impl#-#Prelude.Num#replace.RepInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Comb FuncCall ("replace","-$") [Var 1,Var 2])),Func ("replace","_impl#*#Prelude.Num#replace.RepInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Comb FuncCall ("replace","*$") [Var 1,Var 2])),Func ("replace","_impl#negate#Prelude.Num#replace.RepInt") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Comb FuncCall ("replace","-$") [Lit (Intc 0),Var 1])),Func ("replace","_impl#abs#Prelude.Num#replace.RepInt") 1 Public (FuncType (TCons ("replace","RepInt") []) (TCons ("replace","RepInt") [])) (Rule [1] (Case Rigid (Comb FuncCall ("replace","_impl#>=#Prelude.Ord#replace.RepInt") [Var 1,Comb FuncCall ("replace","_impl#fromInt#Prelude.Num#replace.RepInt") [Lit (Intc 0)]]) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("replace","_impl#negate#Prelude.Num#replace.RepInt") [Var 1]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("replace","_impl#signum#Prelude.Num#replace.RepInt") 1 Public (FuncType (TCons ("replace","RepInt") []) (TCons ("Prelude","Int") [])) (Rule [1] (Case Rigid (Comb FuncCall ("replace","_impl#>#Prelude.Ord#replace.RepInt") [Var 1,Comb FuncCall ("replace","_impl#fromInt#Prelude.Num#replace.RepInt") [Lit (Intc 0)]]) [Branch (Pattern ("Prelude","True") []) (Lit (Intc 1)),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("replace","_impl#==#Prelude.Eq#replace.RepInt") [Var 1,Comb FuncCall ("replace","_impl#fromInt#Prelude.Num#replace.RepInt") [Lit (Intc 0)]]) [Branch (Pattern ("Prelude","True") []) (Lit (Intc 0)),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","_impl#negate#Prelude.Num#Prelude.Int") [Lit (Intc 1)]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("replace","_impl#fromInt#Prelude.Num#replace.RepInt") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Var 1)),Func ("replace","_inst#Prelude.Real#replace.RepInt") 0 Public (TCons ("Prelude","_Dict#Real") [TCons ("replace","RepInt") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Real") [Comb FuncCall ("replace","_inst#Prelude.Num#replace.RepInt") [],Comb FuncCall ("replace","_inst#Prelude.Ord#replace.RepInt") []])),Func ("replace","_inst#Prelude.Integral#replace.RepInt") 0 Public (TCons ("Prelude","_Dict#Integral") [TCons ("replace","RepInt") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Integral") [Comb FuncCall ("replace","_inst#Prelude.Real#replace.RepInt") [],Comb (FuncPartCall 2) ("replace","_impl#div#Prelude.Integral#replace.RepInt") [],Comb (FuncPartCall 2) ("replace","_impl#mod#Prelude.Integral#replace.RepInt") [],Comb (FuncPartCall 2) ("replace","_impl#quot#Prelude.Integral#replace.RepInt") [],Comb (FuncPartCall 2) ("replace","_impl#rem#Prelude.Integral#replace.RepInt") [],Comb (FuncPartCall 2) ("replace","_impl#divMod#Prelude.Integral#replace.RepInt") [],Comb (FuncPartCall 2) ("replace","_impl#quotRem#Prelude.Integral#replace.RepInt") []])),Func ("replace","_impl#div#Prelude.Integral#replace.RepInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Comb FuncCall ("replace","div_") [Var 1,Var 2])),Func ("replace","_impl#mod#Prelude.Integral#replace.RepInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Comb FuncCall ("replace","mod_") [Var 1,Var 2])),Func ("replace","_impl#quot#Prelude.Integral#replace.RepInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Comb FuncCall ("replace","quot_") [Var 1,Var 2])),Func ("replace","_impl#rem#Prelude.Integral#replace.RepInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Comb FuncCall ("replace","rem_") [Var 1,Var 2])),Func ("replace","_impl#divMod#Prelude.Integral#replace.RepInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("replace","RepInt") [],TCons ("replace","RepInt") []]))) (Rule [1,2] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("replace","div_") [Var 1,Var 2],Comb FuncCall ("replace","mod_") [Var 1,Var 2]])),Func ("replace","_impl#quotRem#Prelude.Integral#replace.RepInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("replace","RepInt") [],TCons ("replace","RepInt") []]))) (Rule [1,2] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("replace","quot_") [Var 1,Var 2],Comb FuncCall ("replace","rem_") [Var 1,Var 2]])),Func ("replace","_inst#Prelude.Eq#replace.RepBool") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("replace","RepBool") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("replace","_impl#==#Prelude.Eq#replace.RepBool") [],Comb (FuncPartCall 2) ("replace","_impl#/=#Prelude.Eq#replace.RepBool") []])),Func ("replace","_impl#==#Prelude.Eq#replace.RepBool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","||") [Var 1,Var 2]],Comb FuncCall ("Prelude","&&") [Var 1,Var 2]])),Func ("replace","_impl#/=#Prelude.Eq#replace.RepBool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","||") [Var 1,Var 2],Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","&&") [Var 1,Var 2]]])),Func ("replace","_inst#Prelude.Eq#replace.RepInt") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("replace","RepInt") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("replace","_impl#==#Prelude.Eq#replace.RepInt") [],Comb (FuncPartCall 2) ("replace","_impl#/=#Prelude.Eq#replace.RepInt") []])),Func ("replace","_impl#==#Prelude.Eq#replace.RepInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("replace","eqInt") [Var 1,Var 2])),Func ("replace","_impl#/=#Prelude.Eq#replace.RepInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","not") [Comb FuncCall ("replace","eqInt") [Var 1,Var 2]])),Func ("replace","_inst#Prelude.Eq#replace.RepFloat") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("replace","RepFloat") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("replace","_impl#==#Prelude.Eq#replace.RepFloat") [],Comb (FuncPartCall 2) ("replace","_impl#/=#Prelude.Eq#replace.RepFloat") []])),Func ("replace","_impl#==#Prelude.Eq#replace.RepFloat") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("replace","eqFloat") [Var 1,Var 2])),Func ("replace","_impl#/=#Prelude.Eq#replace.RepFloat") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","not") [Comb FuncCall ("replace","eqFloat") [Var 1,Var 2]])),Func ("replace","_inst#Prelude.Eq#replace.RepChar") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("replace","RepChar") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("replace","_impl#==#Prelude.Eq#replace.RepChar") [],Comb (FuncPartCall 2) ("replace","_impl#/=#Prelude.Eq#replace.RepChar") []])),Func ("replace","_impl#==#Prelude.Eq#replace.RepChar") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("replace","eqChar") [Var 1,Var 2])),Func ("replace","_impl#/=#Prelude.Eq#replace.RepChar") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","not") [Comb FuncCall ("replace","eqChar") [Var 1,Var 2]])),Func ("replace","_inst#Prelude.Eq#replace.RepList") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TCons ("replace","RepList") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("replace","_impl#==#Prelude.Eq#replace.RepList") [Var 1],Comb (FuncPartCall 2) ("replace","_impl#/=#Prelude.Eq#replace.RepList") [Var 1]])),Func ("replace","_impl#==#Prelude.Eq#replace.RepList") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude",":") [4,5]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude",":") [6,7]) (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude",":") [8,9]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 6],Var 8],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Var 1,Var 7,Var 9]])])])),Func ("replace","_impl#/=#Prelude.Eq#replace.RepList") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("replace","RepList") [TVar 0]) (FuncType (TCons ("replace","RepList") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","not") [Comb FuncCall ("replace","_impl#==#Prelude.Eq#replace.RepList") [Var 1,Var 2,Var 3]])),Func ("replace","_inst#Prelude.Eq#replace.RepUnit") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("replace","RepUnit") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("replace","_impl#==#Prelude.Eq#replace.RepUnit") [],Comb (FuncPartCall 2) ("replace","_impl#/=#Prelude.Eq#replace.RepUnit") []])),Func ("replace","_impl#==#Prelude.Eq#replace.RepUnit") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Case Flex (Var 2) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("replace","_impl#/=#Prelude.Eq#replace.RepUnit") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Case Flex (Var 2) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","False") [])])])),Func ("replace","_inst#Prelude.Eq#replace.RepT2") 2 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (TCons ("Prelude","_Dict#Eq") [TCons ("replace","RepT2") [TVar 0,TVar 1]]))) (Rule [1,2] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("replace","_impl#==#Prelude.Eq#replace.RepT2") [Var 1,Var 2],Comb (FuncPartCall 2) ("replace","_impl#/=#Prelude.Eq#replace.RepT2") [Var 1,Var 2]])),Func ("replace","_impl#==#Prelude.Eq#replace.RepT2") 4 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [1,2,3,4] (Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 5],Var 7],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 2],Var 6],Var 8]])])])),Func ("replace","_impl#/=#Prelude.Eq#replace.RepT2") 4 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [1,2,3,4] (Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","/=") [Var 1],Var 5],Var 7],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","/=") [Var 2],Var 6],Var 8]])])])),Func ("replace","_inst#Prelude.Eq#replace.RepT3") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (TCons ("Prelude","_Dict#Eq") [TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2]])))) (Rule [1,2,3] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("replace","_impl#==#Prelude.Eq#replace.RepT3") [Var 1,Var 2,Var 3],Comb (FuncPartCall 2) ("replace","_impl#/=#Prelude.Eq#replace.RepT3") [Var 1,Var 2,Var 3]])),Func ("replace","_impl#==#Prelude.Eq#replace.RepT3") 5 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","Bool") [])))))) (Rule [1,2,3,4,5] (Case Flex (Var 4) [Branch (Pattern ("Prelude","(,,)") [6,7,8]) (Case Flex (Var 5) [Branch (Pattern ("Prelude","(,,)") [9,10,11]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 6],Var 9],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#(,)") [Var 2,Var 3,Comb ConsCall ("Prelude","(,)") [Var 7,Var 8],Comb ConsCall ("Prelude","(,)") [Var 10,Var 11]]])])])),Func ("replace","_impl#/=#Prelude.Eq#replace.RepT3") 5 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","Bool") [])))))) (Rule [1,2,3,4,5] (Case Flex (Var 4) [Branch (Pattern ("Prelude","(,,)") [6,7,8]) (Case Flex (Var 5) [Branch (Pattern ("Prelude","(,,)") [9,10,11]) (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","/=") [Var 1],Var 6],Var 9],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#(,)") [Var 2,Var 3],Comb ConsCall ("Prelude","(,)") [Var 7,Var 8]],Comb ConsCall ("Prelude","(,)") [Var 10,Var 11]]])])])),Func ("replace","_inst#Prelude.Eq#replace.RepT4") 4 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (TCons ("Prelude","_Dict#Eq") [TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3]]))))) (Rule [1,2,3,4] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("replace","_impl#==#Prelude.Eq#replace.RepT4") [Var 1,Var 2,Var 3,Var 4],Comb (FuncPartCall 2) ("replace","_impl#/=#Prelude.Eq#replace.RepT4") [Var 1,Var 2,Var 3,Var 4]])),Func ("replace","_impl#==#Prelude.Eq#replace.RepT4") 6 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","Bool") []))))))) (Rule [1,2,3,4,5,6] (Case Flex (Var 5) [Branch (Pattern ("Prelude","(,,,)") [7,8,9,10]) (Case Flex (Var 6) [Branch (Pattern ("Prelude","(,,,)") [11,12,13,14]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 7],Var 11],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#(,,)") [Var 2,Var 3,Var 4,Comb ConsCall ("Prelude","(,,)") [Var 8,Var 9,Var 10],Comb ConsCall ("Prelude","(,,)") [Var 12,Var 13,Var 14]]])])])),Func ("replace","_impl#/=#Prelude.Eq#replace.RepT4") 6 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","Bool") []))))))) (Rule [1,2,3,4,5,6] (Case Flex (Var 5) [Branch (Pattern ("Prelude","(,,,)") [7,8,9,10]) (Case Flex (Var 6) [Branch (Pattern ("Prelude","(,,,)") [11,12,13,14]) (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","/=") [Var 1],Var 7],Var 11],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#(,,)") [Var 2,Var 3,Var 4],Comb ConsCall ("Prelude","(,,)") [Var 8,Var 9,Var 10]],Comb ConsCall ("Prelude","(,,)") [Var 12,Var 13,Var 14]]])])])),Func ("replace","_inst#Prelude.Eq#replace.RepT5") 5 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (TCons ("Prelude","_Dict#Eq") [TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]])))))) (Rule [1,2,3,4,5] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("replace","_impl#==#Prelude.Eq#replace.RepT5") [Var 1,Var 2,Var 3,Var 4,Var 5],Comb (FuncPartCall 2) ("replace","_impl#/=#Prelude.Eq#replace.RepT5") [Var 1,Var 2,Var 3,Var 4,Var 5]])),Func ("replace","_impl#==#Prelude.Eq#replace.RepT5") 7 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","Bool") [])))))))) (Rule [1,2,3,4,5,6,7] (Case Flex (Var 6) [Branch (Pattern ("Prelude","(,,,,)") [8,9,10,11,12]) (Case Flex (Var 7) [Branch (Pattern ("Prelude","(,,,,)") [13,14,15,16,17]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 8],Var 13],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#(,,,)") [Var 2,Var 3,Var 4,Var 5,Comb ConsCall ("Prelude","(,,,)") [Var 9,Var 10,Var 11,Var 12],Comb ConsCall ("Prelude","(,,,)") [Var 14,Var 15,Var 16,Var 17]]])])])),Func ("replace","_impl#/=#Prelude.Eq#replace.RepT5") 7 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","Bool") [])))))))) (Rule [1,2,3,4,5,6,7] (Case Flex (Var 6) [Branch (Pattern ("Prelude","(,,,,)") [8,9,10,11,12]) (Case Flex (Var 7) [Branch (Pattern ("Prelude","(,,,,)") [13,14,15,16,17]) (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","/=") [Var 1],Var 8],Var 13],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#(,,,)") [Var 2,Var 3,Var 4,Var 5],Comb ConsCall ("Prelude","(,,,)") [Var 9,Var 10,Var 11,Var 12]],Comb ConsCall ("Prelude","(,,,)") [Var 14,Var 15,Var 16,Var 17]]])])])),Func ("replace","_inst#Prelude.Eq#replace.RepT6") 6 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 5]) (TCons ("Prelude","_Dict#Eq") [TCons ("replace","RepT6") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5]]))))))) (Rule [1,2,3,4,5,6] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("replace","_impl#==#Prelude.Eq#replace.RepT6") [Var 1,Var 2,Var 3,Var 4,Var 5,Var 6],Comb (FuncPartCall 2) ("replace","_impl#/=#Prelude.Eq#replace.RepT6") [Var 1,Var 2,Var 3,Var 4,Var 5,Var 6]])),Func ("replace","_impl#==#Prelude.Eq#replace.RepT6") 8 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 5]) (FuncType (TCons ("Prelude","(,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5]) (FuncType (TCons ("Prelude","(,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5]) (TCons ("Prelude","Bool") []))))))))) (Rule [1,2,3,4,5,6,7,8] (Case Flex (Var 7) [Branch (Pattern ("Prelude","(,,,,,)") [9,10,11,12,13,14]) (Case Flex (Var 8) [Branch (Pattern ("Prelude","(,,,,,)") [15,16,17,18,19,20]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 9],Var 15],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#(,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6,Comb ConsCall ("Prelude","(,,,,)") [Var 10,Var 11,Var 12,Var 13,Var 14],Comb ConsCall ("Prelude","(,,,,)") [Var 16,Var 17,Var 18,Var 19,Var 20]]])])])),Func ("replace","_impl#/=#Prelude.Eq#replace.RepT6") 8 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 5]) (FuncType (TCons ("Prelude","(,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5]) (FuncType (TCons ("Prelude","(,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5]) (TCons ("Prelude","Bool") []))))))))) (Rule [1,2,3,4,5,6,7,8] (Case Flex (Var 7) [Branch (Pattern ("Prelude","(,,,,,)") [9,10,11,12,13,14]) (Case Flex (Var 8) [Branch (Pattern ("Prelude","(,,,,,)") [15,16,17,18,19,20]) (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","/=") [Var 1],Var 9],Var 15],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#(,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6],Comb ConsCall ("Prelude","(,,,,)") [Var 10,Var 11,Var 12,Var 13,Var 14]],Comb ConsCall ("Prelude","(,,,,)") [Var 16,Var 17,Var 18,Var 19,Var 20]]])])])),Func ("replace","_inst#Prelude.Eq#replace.RepT7") 7 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 5]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 6]) (TCons ("Prelude","_Dict#Eq") [TCons ("replace","RepT7") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6]])))))))) (Rule [1,2,3,4,5,6,7] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("replace","_impl#==#Prelude.Eq#replace.RepT7") [Var 1,Var 2,Var 3,Var 4,Var 5,Var 6,Var 7],Comb (FuncPartCall 2) ("replace","_impl#/=#Prelude.Eq#replace.RepT7") [Var 1,Var 2,Var 3,Var 4,Var 5,Var 6,Var 7]])),Func ("replace","_impl#==#Prelude.Eq#replace.RepT7") 9 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 5]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 6]) (FuncType (TCons ("Prelude","(,,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 6,TVar 5]) (FuncType (TCons ("Prelude","(,,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 6,TVar 5]) (TCons ("Prelude","Bool") [])))))))))) (Rule [1,2,3,4,5,6,7,8,9] (Case Flex (Var 8) [Branch (Pattern ("Prelude","(,,,,,,)") [10,11,12,13,14,15,16]) (Case Flex (Var 9) [Branch (Pattern ("Prelude","(,,,,,,)") [17,18,19,20,21,22,23]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 10],Var 17],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#(,,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 7,Var 6,Comb ConsCall ("Prelude","(,,,,,)") [Var 11,Var 12,Var 13,Var 14,Var 15,Var 16],Comb ConsCall ("Prelude","(,,,,,)") [Var 18,Var 19,Var 20,Var 21,Var 22,Var 23]]])])])),Func ("replace","_impl#/=#Prelude.Eq#replace.RepT7") 9 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 5]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 6]) (FuncType (TCons ("Prelude","(,,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 6,TVar 5]) (FuncType (TCons ("Prelude","(,,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 6,TVar 5]) (TCons ("Prelude","Bool") [])))))))))) (Rule [1,2,3,4,5,6,7,8,9] (Case Flex (Var 8) [Branch (Pattern ("Prelude","(,,,,,,)") [10,11,12,13,14,15,16]) (Case Flex (Var 9) [Branch (Pattern ("Prelude","(,,,,,,)") [17,18,19,20,21,22,23]) (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","/=") [Var 1],Var 10],Var 17],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#(,,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 7,Var 6],Comb ConsCall ("Prelude","(,,,,,)") [Var 11,Var 12,Var 13,Var 14,Var 15,Var 16]],Comb ConsCall ("Prelude","(,,,,,)") [Var 18,Var 19,Var 20,Var 21,Var 22,Var 23]]])])])),Func ("replace","_inst#Prelude.Ord#replace.RepInt") 0 Public (TCons ("Prelude","_Dict#Ord") [TCons ("replace","RepInt") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Ord") [Comb FuncCall ("replace","_inst#Prelude.Eq#replace.RepInt") [],Comb (FuncPartCall 2) ("replace","_impl#compare#Prelude.Ord#replace.RepInt") [],Comb (FuncPartCall 2) ("replace","_impl#<=#Prelude.Ord#replace.RepInt") [],Comb (FuncPartCall 2) ("replace","_impl#>=#Prelude.Ord#replace.RepInt") [],Comb (FuncPartCall 2) ("replace","_impl#<#Prelude.Ord#replace.RepInt") [],Comb (FuncPartCall 2) ("replace","_impl#>#Prelude.Ord#replace.RepInt") [],Comb (FuncPartCall 2) ("replace","_impl#min#Prelude.Ord#replace.RepInt") [],Comb (FuncPartCall 2) ("replace","_impl#max#Prelude.Ord#replace.RepInt") []])),Func ("replace","_impl#compare#Prelude.Ord#replace.RepInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Ordering") []))) (Rule [1,2] (Case Rigid (Comb FuncCall ("replace","eqInt") [Var 1,Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","EQ") []),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("replace","ltEqInt") [Var 1,Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","LT") []),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","GT") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("replace","_impl#<=#Prelude.Ord#replace.RepInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("replace","ltEqInt") [Var 1,Var 2])),Func ("replace","_impl#>=#Prelude.Ord#replace.RepInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("replace","ltEqInt") [Var 2,Var 1])),Func ("replace","_impl#<#Prelude.Ord#replace.RepInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","not") [Comb FuncCall ("replace","ltEqInt") [Var 2,Var 1]])),Func ("replace","_impl#>#Prelude.Ord#replace.RepInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","not") [Comb FuncCall ("replace","ltEqInt") [Var 1,Var 2]])),Func ("replace","_impl#min#Prelude.Ord#replace.RepInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Case Rigid (Comb FuncCall ("replace","ltEqInt") [Var 1,Var 2]) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("replace","_impl#max#Prelude.Ord#replace.RepInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Case Rigid (Comb FuncCall ("replace","ltEqInt") [Var 1,Var 2]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("replace","_inst#Prelude.Ord#replace.RepFloat") 0 Public (TCons ("Prelude","_Dict#Ord") [TCons ("replace","RepFloat") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Ord") [Comb FuncCall ("replace","_inst#Prelude.Eq#replace.RepFloat") [],Comb (FuncPartCall 2) ("replace","_impl#compare#Prelude.Ord#replace.RepFloat") [],Comb (FuncPartCall 2) ("replace","_impl#<=#Prelude.Ord#replace.RepFloat") [],Comb (FuncPartCall 2) ("replace","_impl#>=#Prelude.Ord#replace.RepFloat") [],Comb (FuncPartCall 2) ("replace","_impl#<#Prelude.Ord#replace.RepFloat") [],Comb (FuncPartCall 2) ("replace","_impl#>#Prelude.Ord#replace.RepFloat") [],Comb (FuncPartCall 2) ("replace","_impl#min#Prelude.Ord#replace.RepFloat") [],Comb (FuncPartCall 2) ("replace","_impl#max#Prelude.Ord#replace.RepFloat") []])),Func ("replace","_impl#compare#Prelude.Ord#replace.RepFloat") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Ordering") []))) (Rule [1,2] (Case Rigid (Comb FuncCall ("replace","eqFloat") [Var 1,Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","EQ") []),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("replace","ltEqFloat") [Var 1,Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","LT") []),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","GT") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("replace","_impl#<=#Prelude.Ord#replace.RepFloat") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("replace","ltEqFloat") [Var 1,Var 2])),Func ("replace","_impl#>=#Prelude.Ord#replace.RepFloat") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("replace","ltEqFloat") [Var 2,Var 1])),Func ("replace","_impl#<#Prelude.Ord#replace.RepFloat") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","not") [Comb FuncCall ("replace","ltEqFloat") [Var 2,Var 1]])),Func ("replace","_impl#>#Prelude.Ord#replace.RepFloat") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","not") [Comb FuncCall ("replace","ltEqFloat") [Var 1,Var 2]])),Func ("replace","_impl#min#Prelude.Ord#replace.RepFloat") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [1,2] (Case Rigid (Comb FuncCall ("replace","ltEqFloat") [Var 1,Var 2]) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("replace","_impl#max#Prelude.Ord#replace.RepFloat") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [1,2] (Case Rigid (Comb FuncCall ("replace","ltEqFloat") [Var 1,Var 2]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("replace","_inst#Prelude.Ord#replace.RepChar") 0 Public (TCons ("Prelude","_Dict#Ord") [TCons ("replace","RepChar") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Ord") [Comb FuncCall ("replace","_inst#Prelude.Eq#replace.RepChar") [],Comb (FuncPartCall 2) ("replace","_impl#compare#Prelude.Ord#replace.RepChar") [],Comb (FuncPartCall 2) ("replace","_impl#<=#Prelude.Ord#replace.RepChar") [],Comb (FuncPartCall 2) ("replace","_impl#>=#Prelude.Ord#replace.RepChar") [],Comb (FuncPartCall 2) ("replace","_impl#<#Prelude.Ord#replace.RepChar") [],Comb (FuncPartCall 2) ("replace","_impl#>#Prelude.Ord#replace.RepChar") [],Comb (FuncPartCall 2) ("replace","_impl#min#Prelude.Ord#replace.RepChar") [],Comb (FuncPartCall 2) ("replace","_impl#max#Prelude.Ord#replace.RepChar") []])),Func ("replace","_impl#compare#Prelude.Ord#replace.RepChar") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Ordering") []))) (Rule [1,2] (Case Rigid (Comb FuncCall ("replace","eqChar") [Var 1,Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","EQ") []),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("replace","ltEqChar") [Var 1,Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","LT") []),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","GT") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("replace","_impl#<=#Prelude.Ord#replace.RepChar") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("replace","ltEqChar") [Var 1,Var 2])),Func ("replace","_impl#>=#Prelude.Ord#replace.RepChar") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("replace","ltEqChar") [Var 2,Var 1])),Func ("replace","_impl#<#Prelude.Ord#replace.RepChar") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","not") [Comb FuncCall ("replace","ltEqChar") [Var 2,Var 1]])),Func ("replace","_impl#>#Prelude.Ord#replace.RepChar") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","not") [Comb FuncCall ("replace","ltEqChar") [Var 1,Var 2]])),Func ("replace","_impl#min#Prelude.Ord#replace.RepChar") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Char") []))) (Rule [1,2] (Case Rigid (Comb FuncCall ("replace","ltEqChar") [Var 1,Var 2]) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("replace","_impl#max#Prelude.Ord#replace.RepChar") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Char") []))) (Rule [1,2] (Case Rigid (Comb FuncCall ("replace","ltEqChar") [Var 1,Var 2]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("replace","_inst#Prelude.Ord#replace.RepList") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (TCons ("Prelude","_Dict#Ord") [TCons ("replace","RepList") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Ord") [Comb FuncCall ("replace","_inst#Prelude.Eq#replace.RepList") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 1]],Comb (FuncPartCall 2) ("replace","_impl#compare#Prelude.Ord#replace.RepList") [Var 1],Comb (FuncPartCall 2) ("replace","_impl#<=#Prelude.Ord#replace.RepList") [Var 1],Comb (FuncPartCall 2) ("replace","_impl#>=#Prelude.Ord#replace.RepList") [Var 1],Comb (FuncPartCall 2) ("replace","_impl#<#Prelude.Ord#replace.RepList") [Var 1],Comb (FuncPartCall 2) ("replace","_impl#>#Prelude.Ord#replace.RepList") [Var 1],Comb (FuncPartCall 2) ("replace","_impl#min#Prelude.Ord#replace.RepList") [Var 1],Comb (FuncPartCall 2) ("replace","_impl#max#Prelude.Ord#replace.RepList") [Var 1]])),Func ("replace","_impl#compare#Prelude.Ord#replace.RepList") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Ordering") [])))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","EQ") []),Branch (Pattern ("Prelude",":") [4,5]) (Comb ConsCall ("Prelude","LT") [])]),Branch (Pattern ("Prelude",":") [6,7]) (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","GT") []),Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 1]],Var 6],Var 8]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("replace","_impl#compare#Prelude.Ord#replace.RepList") [Var 1,Var 7,Var 9]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","compare") [Var 1],Var 6],Var 8]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("replace","_impl#<=#Prelude.Ord#replace.RepList") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("replace","RepList") [TVar 0]) (FuncType (TCons ("replace","RepList") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Case Rigid (Comb FuncCall ("replace","_impl#compare#Prelude.Ord#replace.RepList") [Var 1,Var 2,Var 3]) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") [])])),Func ("replace","_impl#>=#Prelude.Ord#replace.RepList") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("replace","RepList") [TVar 0]) (FuncType (TCons ("replace","RepList") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Case Rigid (Comb FuncCall ("replace","_impl#compare#Prelude.Ord#replace.RepList") [Var 1,Var 2,Var 3]) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") [])])),Func ("replace","_impl#<#Prelude.Ord#replace.RepList") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("replace","RepList") [TVar 0]) (FuncType (TCons ("replace","RepList") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Case Rigid (Comb FuncCall ("replace","_impl#compare#Prelude.Ord#replace.RepList") [Var 1,Var 2,Var 3]) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") [])])),Func ("replace","_impl#>#Prelude.Ord#replace.RepList") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("replace","RepList") [TVar 0]) (FuncType (TCons ("replace","RepList") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Case Rigid (Comb FuncCall ("replace","_impl#compare#Prelude.Ord#replace.RepList") [Var 1,Var 2,Var 3]) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") [])])),Func ("replace","_impl#min#Prelude.Ord#replace.RepList") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("replace","RepList") [TVar 0]) (FuncType (TCons ("replace","RepList") [TVar 0]) (TCons ("replace","RepList") [TVar 0])))) (Rule [1,2,3] (Case Rigid (Comb FuncCall ("replace","_impl#<=#Prelude.Ord#replace.RepList") [Var 1,Var 2,Var 3]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("replace","_impl#max#Prelude.Ord#replace.RepList") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("replace","RepList") [TVar 0]) (FuncType (TCons ("replace","RepList") [TVar 0]) (TCons ("replace","RepList") [TVar 0])))) (Rule [1,2,3] (Case Rigid (Comb FuncCall ("replace","_impl#<=#Prelude.Ord#replace.RepList") [Var 1,Var 2,Var 3]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("replace","_inst#Prelude.Ord#replace.RepBool") 0 Public (TCons ("Prelude","_Dict#Ord") [TCons ("replace","RepBool") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Ord") [Comb FuncCall ("replace","_inst#Prelude.Eq#replace.RepBool") [],Comb (FuncPartCall 2) ("replace","_impl#compare#Prelude.Ord#replace.RepBool") [],Comb (FuncPartCall 2) ("replace","_impl#<=#Prelude.Ord#replace.RepBool") [],Comb (FuncPartCall 2) ("replace","_impl#>=#Prelude.Ord#replace.RepBool") [],Comb (FuncPartCall 2) ("replace","_impl#<#Prelude.Ord#replace.RepBool") [],Comb (FuncPartCall 2) ("replace","_impl#>#Prelude.Ord#replace.RepBool") [],Comb (FuncPartCall 2) ("replace","_impl#min#Prelude.Ord#replace.RepBool") [],Comb (FuncPartCall 2) ("replace","_impl#max#Prelude.Ord#replace.RepBool") []])),Func ("replace","_impl#compare#Prelude.Ord#replace.RepBool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Ordering") []))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","not") [Var 1],Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","LT") []),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","not") [Var 2],Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","GT") []),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","EQ") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("replace","_impl#<=#Prelude.Ord#replace.RepBool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","not") [Var 1],Var 2])),Func ("replace","_impl#>=#Prelude.Ord#replace.RepBool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","not") [Var 2],Var 1])),Func ("replace","_impl#<#Prelude.Ord#replace.RepBool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","not") [Var 1],Var 2])),Func ("replace","_impl#>#Prelude.Ord#replace.RepBool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","not") [Var 2],Var 1])),Func ("replace","_impl#min#Prelude.Ord#replace.RepBool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","&&") [Var 1,Var 2])),Func ("replace","_impl#max#Prelude.Ord#replace.RepBool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","||") [Var 1,Var 2])),Func ("replace","_inst#Prelude.Ord#replace.RepUnit") 0 Public (TCons ("Prelude","_Dict#Ord") [TCons ("replace","RepUnit") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Ord") [Comb FuncCall ("replace","_inst#Prelude.Eq#replace.RepUnit") [],Comb FuncCall ("replace","_impl#compare#Prelude.Ord#replace.RepUnit") [],Comb (FuncPartCall 2) ("replace","_impl#<=#Prelude.Ord#replace.RepUnit") [],Comb (FuncPartCall 2) ("replace","_impl#>=#Prelude.Ord#replace.RepUnit") [],Comb (FuncPartCall 2) ("replace","_impl#<#Prelude.Ord#replace.RepUnit") [],Comb (FuncPartCall 2) ("replace","_impl#>#Prelude.Ord#replace.RepUnit") [],Comb (FuncPartCall 2) ("replace","_impl#min#Prelude.Ord#replace.RepUnit") [],Comb (FuncPartCall 2) ("replace","_impl#max#Prelude.Ord#replace.RepUnit") []])),Func ("replace","_impl#compare#Prelude.Ord#replace.RepUnit") 0 Public (FuncType (TCons ("replace","RepUnit") []) (FuncType (TCons ("replace","RepUnit") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#compare#Prelude.Ord") [Comb FuncCall ("replace","_inst#Prelude.Ord#replace.RepUnit") []])),Func ("replace","_impl#<=#Prelude.Ord#replace.RepUnit") 2 Public (FuncType (TCons ("replace","RepUnit") []) (FuncType (TCons ("replace","RepUnit") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb ConsCall ("Prelude","True") [])),Func ("replace","_impl#>=#Prelude.Ord#replace.RepUnit") 2 Public (FuncType (TCons ("replace","RepUnit") []) (FuncType (TCons ("replace","RepUnit") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb ConsCall ("Prelude","True") [])),Func ("replace","_impl#<#Prelude.Ord#replace.RepUnit") 2 Public (FuncType (TCons ("replace","RepUnit") []) (FuncType (TCons ("replace","RepUnit") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb ConsCall ("Prelude","False") [])),Func ("replace","_impl#>#Prelude.Ord#replace.RepUnit") 2 Public (FuncType (TCons ("replace","RepUnit") []) (FuncType (TCons ("replace","RepUnit") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb ConsCall ("Prelude","False") [])),Func ("replace","_impl#min#Prelude.Ord#replace.RepUnit") 2 Public (FuncType (TCons ("replace","RepUnit") []) (FuncType (TCons ("replace","RepUnit") []) (TCons ("Prelude","()") []))) (Rule [1,2] (Comb ConsCall ("Prelude","()") [])),Func ("replace","_impl#max#Prelude.Ord#replace.RepUnit") 2 Public (FuncType (TCons ("replace","RepUnit") []) (FuncType (TCons ("replace","RepUnit") []) (TCons ("Prelude","()") []))) (Rule [1,2] (Comb ConsCall ("Prelude","()") [])),Func ("replace","_inst#Prelude.Ord#replace.RepT2") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (TCons ("Prelude","_Dict#Ord") [TCons ("replace","RepT2") [TVar 0,TVar 1]]))) (Rule [1,2] (Comb ConsCall ("Prelude","_Dict#Ord") [Comb FuncCall ("replace","_inst#Prelude.Eq#replace.RepT2") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 1],Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 2]],Comb (FuncPartCall 2) ("replace","_impl#compare#Prelude.Ord#replace.RepT2") [Var 1,Var 2],Comb (FuncPartCall 2) ("replace","_impl#<=#Prelude.Ord#replace.RepT2") [Var 1,Var 2],Comb (FuncPartCall 2) ("replace","_impl#>=#Prelude.Ord#replace.RepT2") [Var 1,Var 2],Comb (FuncPartCall 2) ("replace","_impl#<#Prelude.Ord#replace.RepT2") [Var 1,Var 2],Comb (FuncPartCall 2) ("replace","_impl#>#Prelude.Ord#replace.RepT2") [Var 1,Var 2],Comb (FuncPartCall 2) ("replace","_impl#min#Prelude.Ord#replace.RepT2") [Var 1,Var 2],Comb (FuncPartCall 2) ("replace","_impl#max#Prelude.Ord#replace.RepT2") [Var 1,Var 2]])),Func ("replace","_impl#compare#Prelude.Ord#replace.RepT2") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","Ordering") []))))) (Rule [1,2,3,4] (Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","compare") [Var 1],Var 5],Var 7]) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","LT") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","GT") []),Branch (Pattern ("Prelude","EQ") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","compare") [Var 2],Var 6],Var 8])])])])),Func ("replace","_impl#<=#Prelude.Ord#replace.RepT2") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("replace","RepT2") [TVar 0,TVar 1]) (FuncType (TCons ("replace","RepT2") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [1,2,3,4] (Case Rigid (Comb FuncCall ("replace","_impl#compare#Prelude.Ord#replace.RepT2") [Var 1,Var 2,Var 3,Var 4]) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") [])])),Func ("replace","_impl#>=#Prelude.Ord#replace.RepT2") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("replace","RepT2") [TVar 0,TVar 1]) (FuncType (TCons ("replace","RepT2") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [1,2,3,4] (Case Rigid (Comb FuncCall ("replace","_impl#compare#Prelude.Ord#replace.RepT2") [Var 1,Var 2,Var 3,Var 4]) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") [])])),Func ("replace","_impl#<#Prelude.Ord#replace.RepT2") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("replace","RepT2") [TVar 0,TVar 1]) (FuncType (TCons ("replace","RepT2") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [1,2,3,4] (Case Rigid (Comb FuncCall ("replace","_impl#compare#Prelude.Ord#replace.RepT2") [Var 1,Var 2,Var 3,Var 4]) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") [])])),Func ("replace","_impl#>#Prelude.Ord#replace.RepT2") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("replace","RepT2") [TVar 0,TVar 1]) (FuncType (TCons ("replace","RepT2") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [1,2,3,4] (Case Rigid (Comb FuncCall ("replace","_impl#compare#Prelude.Ord#replace.RepT2") [Var 1,Var 2,Var 3,Var 4]) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") [])])),Func ("replace","_impl#min#Prelude.Ord#replace.RepT2") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("replace","RepT2") [TVar 0,TVar 1]) (FuncType (TCons ("replace","RepT2") [TVar 0,TVar 1]) (TCons ("replace","RepT2") [TVar 0,TVar 1]))))) (Rule [1,2,3,4] (Case Rigid (Comb FuncCall ("replace","_impl#<=#Prelude.Ord#replace.RepT2") [Var 1,Var 2,Var 3,Var 4]) [Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Var 4),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("replace","_impl#max#Prelude.Ord#replace.RepT2") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("replace","RepT2") [TVar 0,TVar 1]) (FuncType (TCons ("replace","RepT2") [TVar 0,TVar 1]) (TCons ("replace","RepT2") [TVar 0,TVar 1]))))) (Rule [1,2,3,4] (Case Rigid (Comb FuncCall ("replace","_impl#<=#Prelude.Ord#replace.RepT2") [Var 1,Var 2,Var 3,Var 4]) [Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Var 4),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("replace","_inst#Prelude.Ord#replace.RepT3") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (TCons ("Prelude","_Dict#Ord") [TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2]])))) (Rule [1,2,3] (Comb ConsCall ("Prelude","_Dict#Ord") [Comb FuncCall ("replace","_inst#Prelude.Eq#replace.RepT3") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 1],Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 2],Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 3]],Comb (FuncPartCall 2) ("replace","_impl#compare#Prelude.Ord#replace.RepT3") [Var 1,Var 2,Var 3],Comb (FuncPartCall 2) ("replace","_impl#<=#Prelude.Ord#replace.RepT3") [Var 1,Var 2,Var 3],Comb (FuncPartCall 2) ("replace","_impl#>=#Prelude.Ord#replace.RepT3") [Var 1,Var 2,Var 3],Comb (FuncPartCall 2) ("replace","_impl#<#Prelude.Ord#replace.RepT3") [Var 1,Var 2,Var 3],Comb (FuncPartCall 2) ("replace","_impl#>#Prelude.Ord#replace.RepT3") [Var 1,Var 2,Var 3],Comb (FuncPartCall 2) ("replace","_impl#min#Prelude.Ord#replace.RepT3") [Var 1,Var 2,Var 3],Comb (FuncPartCall 2) ("replace","_impl#max#Prelude.Ord#replace.RepT3") [Var 1,Var 2,Var 3]])),Func ("replace","_impl#compare#Prelude.Ord#replace.RepT3") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","Ordering") [])))))) (Rule [1,2,3,4,5] (Case Flex (Var 4) [Branch (Pattern ("Prelude","(,,)") [6,7,8]) (Case Flex (Var 5) [Branch (Pattern ("Prelude","(,,)") [9,10,11]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","compare") [Var 1],Var 6],Var 9]) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","LT") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","GT") []),Branch (Pattern ("Prelude","EQ") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,)") [Var 2,Var 3],Comb ConsCall ("Prelude","(,)") [Var 7,Var 8]],Comb ConsCall ("Prelude","(,)") [Var 10,Var 11]])])])])),Func ("replace","_impl#<=#Prelude.Ord#replace.RepT3") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","Bool") [])))))) (Rule [1,2,3,4,5] (Case Rigid (Comb FuncCall ("replace","_impl#compare#Prelude.Ord#replace.RepT3") [Var 1,Var 2,Var 3,Var 4,Var 5]) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") [])])),Func ("replace","_impl#>=#Prelude.Ord#replace.RepT3") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","Bool") [])))))) (Rule [1,2,3,4,5] (Case Rigid (Comb FuncCall ("replace","_impl#compare#Prelude.Ord#replace.RepT3") [Var 1,Var 2,Var 3,Var 4,Var 5]) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") [])])),Func ("replace","_impl#<#Prelude.Ord#replace.RepT3") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","Bool") [])))))) (Rule [1,2,3,4,5] (Case Rigid (Comb FuncCall ("replace","_impl#compare#Prelude.Ord#replace.RepT3") [Var 1,Var 2,Var 3,Var 4,Var 5]) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") [])])),Func ("replace","_impl#>#Prelude.Ord#replace.RepT3") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","Bool") [])))))) (Rule [1,2,3,4,5] (Case Rigid (Comb FuncCall ("replace","_impl#compare#Prelude.Ord#replace.RepT3") [Var 1,Var 2,Var 3,Var 4,Var 5]) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") [])])),Func ("replace","_impl#min#Prelude.Ord#replace.RepT3") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2]) (TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2])))))) (Rule [1,2,3,4,5] (Case Rigid (Comb FuncCall ("replace","_impl#<=#Prelude.Ord#replace.RepT3") [Var 1,Var 2,Var 3,Var 4,Var 5]) [Branch (Pattern ("Prelude","True") []) (Var 4),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Var 5),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("replace","_impl#max#Prelude.Ord#replace.RepT3") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2]) (TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2])))))) (Rule [1,2,3,4,5] (Case Rigid (Comb FuncCall ("replace","_impl#<=#Prelude.Ord#replace.RepT3") [Var 1,Var 2,Var 3,Var 4,Var 5]) [Branch (Pattern ("Prelude","True") []) (Var 4),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Var 5),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("replace","_inst#Prelude.Ord#replace.RepT4") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (TCons ("Prelude","_Dict#Ord") [TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3]]))))) (Rule [1,2,3,4] (Comb ConsCall ("Prelude","_Dict#Ord") [Comb FuncCall ("replace","_inst#Prelude.Eq#replace.RepT4") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 1],Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 2],Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 3],Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 4]],Comb (FuncPartCall 2) ("replace","_impl#compare#Prelude.Ord#replace.RepT4") [Var 1,Var 2,Var 3,Var 4],Comb (FuncPartCall 2) ("replace","_impl#<=#Prelude.Ord#replace.RepT4") [Var 1,Var 2,Var 3,Var 4],Comb (FuncPartCall 2) ("replace","_impl#>=#Prelude.Ord#replace.RepT4") [Var 1,Var 2,Var 3,Var 4],Comb (FuncPartCall 2) ("replace","_impl#<#Prelude.Ord#replace.RepT4") [Var 1,Var 2,Var 3,Var 4],Comb (FuncPartCall 2) ("replace","_impl#>#Prelude.Ord#replace.RepT4") [Var 1,Var 2,Var 3,Var 4],Comb (FuncPartCall 2) ("replace","_impl#min#Prelude.Ord#replace.RepT4") [Var 1,Var 2,Var 3,Var 4],Comb (FuncPartCall 2) ("replace","_impl#max#Prelude.Ord#replace.RepT4") [Var 1,Var 2,Var 3,Var 4]])),Func ("replace","_impl#compare#Prelude.Ord#replace.RepT4") 6 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","Ordering") []))))))) (Rule [1,2,3,4,5,6] (Case Flex (Var 5) [Branch (Pattern ("Prelude","(,,,)") [7,8,9,10]) (Case Flex (Var 6) [Branch (Pattern ("Prelude","(,,,)") [11,12,13,14]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","compare") [Var 1],Var 7],Var 11]) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","LT") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","GT") []),Branch (Pattern ("Prelude","EQ") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,)") [Var 2,Var 3,Var 4],Comb ConsCall ("Prelude","(,,)") [Var 8,Var 9,Var 10]],Comb ConsCall ("Prelude","(,,)") [Var 12,Var 13,Var 14]])])])])),Func ("replace","_impl#<=#Prelude.Ord#replace.RepT4") 6 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","Bool") []))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Comb FuncCall ("replace","_impl#compare#Prelude.Ord#replace.RepT4") [Var 1,Var 2,Var 3,Var 4,Var 5,Var 6]) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") [])])),Func ("replace","_impl#>=#Prelude.Ord#replace.RepT4") 6 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","Bool") []))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Comb FuncCall ("replace","_impl#compare#Prelude.Ord#replace.RepT4") [Var 1,Var 2,Var 3,Var 4,Var 5,Var 6]) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") [])])),Func ("replace","_impl#<#Prelude.Ord#replace.RepT4") 6 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","Bool") []))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Comb FuncCall ("replace","_impl#compare#Prelude.Ord#replace.RepT4") [Var 1,Var 2,Var 3,Var 4,Var 5,Var 6]) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") [])])),Func ("replace","_impl#>#Prelude.Ord#replace.RepT4") 6 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","Bool") []))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Comb FuncCall ("replace","_impl#compare#Prelude.Ord#replace.RepT4") [Var 1,Var 2,Var 3,Var 4,Var 5,Var 6]) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") [])])),Func ("replace","_impl#min#Prelude.Ord#replace.RepT4") 6 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3]))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Comb FuncCall ("replace","_impl#<=#Prelude.Ord#replace.RepT4") [Var 1,Var 2,Var 3,Var 4,Var 5,Var 6]) [Branch (Pattern ("Prelude","True") []) (Var 5),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Var 6),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("replace","_impl#max#Prelude.Ord#replace.RepT4") 6 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3]))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Comb FuncCall ("replace","_impl#<=#Prelude.Ord#replace.RepT4") [Var 1,Var 2,Var 3,Var 4,Var 5,Var 6]) [Branch (Pattern ("Prelude","True") []) (Var 5),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Var 6),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("replace","_inst#Prelude.Ord#replace.RepT5") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (TCons ("Prelude","_Dict#Ord") [TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]])))))) (Rule [1,2,3,4,5] (Comb ConsCall ("Prelude","_Dict#Ord") [Comb FuncCall ("replace","_inst#Prelude.Eq#replace.RepT5") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 1],Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 2],Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 3],Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 4],Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 5]],Comb (FuncPartCall 2) ("replace","_impl#compare#Prelude.Ord#replace.RepT5") [Var 1,Var 2,Var 3,Var 4,Var 5],Comb (FuncPartCall 2) ("replace","_impl#<=#Prelude.Ord#replace.RepT5") [Var 1,Var 2,Var 3,Var 4,Var 5],Comb (FuncPartCall 2) ("replace","_impl#>=#Prelude.Ord#replace.RepT5") [Var 1,Var 2,Var 3,Var 4,Var 5],Comb (FuncPartCall 2) ("replace","_impl#<#Prelude.Ord#replace.RepT5") [Var 1,Var 2,Var 3,Var 4,Var 5],Comb (FuncPartCall 2) ("replace","_impl#>#Prelude.Ord#replace.RepT5") [Var 1,Var 2,Var 3,Var 4,Var 5],Comb (FuncPartCall 2) ("replace","_impl#min#Prelude.Ord#replace.RepT5") [Var 1,Var 2,Var 3,Var 4,Var 5],Comb (FuncPartCall 2) ("replace","_impl#max#Prelude.Ord#replace.RepT5") [Var 1,Var 2,Var 3,Var 4,Var 5]])),Func ("replace","_impl#compare#Prelude.Ord#replace.RepT5") 7 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","Ordering") [])))))))) (Rule [1,2,3,4,5,6,7] (Case Flex (Var 6) [Branch (Pattern ("Prelude","(,,,,)") [8,9,10,11,12]) (Case Flex (Var 7) [Branch (Pattern ("Prelude","(,,,,)") [13,14,15,16,17]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","compare") [Var 1],Var 8],Var 13]) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","LT") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","GT") []),Branch (Pattern ("Prelude","EQ") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,,)") [Var 2,Var 3,Var 4,Var 5],Comb ConsCall ("Prelude","(,,,)") [Var 9,Var 10,Var 11,Var 12]],Comb ConsCall ("Prelude","(,,,)") [Var 14,Var 15,Var 16,Var 17]])])])])),Func ("replace","_impl#<=#Prelude.Ord#replace.RepT5") 7 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (FuncType (TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","Bool") [])))))))) (Rule [1,2,3,4,5,6,7] (Case Rigid (Comb FuncCall ("replace","_impl#compare#Prelude.Ord#replace.RepT5") [Var 1,Var 2,Var 3,Var 4,Var 5,Var 6,Var 7]) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") [])])),Func ("replace","_impl#>=#Prelude.Ord#replace.RepT5") 7 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (FuncType (TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","Bool") [])))))))) (Rule [1,2,3,4,5,6,7] (Case Rigid (Comb FuncCall ("replace","_impl#compare#Prelude.Ord#replace.RepT5") [Var 1,Var 2,Var 3,Var 4,Var 5,Var 6,Var 7]) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") [])])),Func ("replace","_impl#<#Prelude.Ord#replace.RepT5") 7 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (FuncType (TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","Bool") [])))))))) (Rule [1,2,3,4,5,6,7] (Case Rigid (Comb FuncCall ("replace","_impl#compare#Prelude.Ord#replace.RepT5") [Var 1,Var 2,Var 3,Var 4,Var 5,Var 6,Var 7]) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") [])])),Func ("replace","_impl#>#Prelude.Ord#replace.RepT5") 7 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (FuncType (TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","Bool") [])))))))) (Rule [1,2,3,4,5,6,7] (Case Rigid (Comb FuncCall ("replace","_impl#compare#Prelude.Ord#replace.RepT5") [Var 1,Var 2,Var 3,Var 4,Var 5,Var 6,Var 7]) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") [])])),Func ("replace","_impl#min#Prelude.Ord#replace.RepT5") 7 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (FuncType (TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4])))))))) (Rule [1,2,3,4,5,6,7] (Case Rigid (Comb FuncCall ("replace","_impl#<=#Prelude.Ord#replace.RepT5") [Var 1,Var 2,Var 3,Var 4,Var 5,Var 6,Var 7]) [Branch (Pattern ("Prelude","True") []) (Var 6),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Var 7),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("replace","_impl#max#Prelude.Ord#replace.RepT5") 7 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (FuncType (TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4])))))))) (Rule [1,2,3,4,5,6,7] (Case Rigid (Comb FuncCall ("replace","_impl#<=#Prelude.Ord#replace.RepT5") [Var 1,Var 2,Var 3,Var 4,Var 5,Var 6,Var 7]) [Branch (Pattern ("Prelude","True") []) (Var 6),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Var 7),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("replace","_inst#Prelude.Read#replace.RepUnit") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("replace","RepUnit") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 1) ("replace","_impl#readsPrec#Prelude.Read#replace.RepUnit") [],Comb FuncCall ("replace","_impl#readList#Prelude.Read#replace.RepUnit") []])),Func ("replace","_impl#readsPrec#Prelude.Read#replace.RepUnit") 1 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","RepUnit") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1] (Comb FuncCall ("Prelude","readParen") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("replace","readsUnit") []])),Func ("replace","_impl#readList#Prelude.Read#replace.RepUnit") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("replace","RepUnit") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("replace","_inst#Prelude.Read#replace.RepUnit") []])),Func ("replace","_inst#Prelude.Read#replace.RepT2") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (TCons ("Prelude","_Dict#Read") [TCons ("replace","RepT2") [TVar 0,TVar 1]]))) (Rule [1,2] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 1) ("replace","_impl#readsPrec#Prelude.Read#replace.RepT2") [Var 1,Var 2],Comb FuncCall ("replace","_impl#readList#Prelude.Read#replace.RepT2") [Var 1,Var 2]])),Func ("replace","_impl#readsPrec#Prelude.Read#replace.RepT2") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","RepT2") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3] (Comb FuncCall ("Prelude","readParen") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("replace","readsLParen") [Comb (FuncPartCall 1) ("replace","readsVal_2") [Var 1,Var 2]]])),Func ("replace","_impl#readList#Prelude.Read#replace.RepT2") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("replace","RepT2") [TVar 0,TVar 1]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("replace","_inst#Prelude.Read#replace.RepT2") [Var 1,Var 2]])),Func ("replace","_inst#Prelude.Read#replace.RepT3") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (TCons ("Prelude","_Dict#Read") [TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2]])))) (Rule [1,2,3] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 1) ("replace","_impl#readsPrec#Prelude.Read#replace.RepT3") [Var 1,Var 2,Var 3],Comb FuncCall ("replace","_impl#readList#Prelude.Read#replace.RepT3") [Var 1,Var 2,Var 3]])),Func ("replace","_impl#readsPrec#Prelude.Read#replace.RepT3") 4 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","readParen") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("replace","readsLParen") [Comb (FuncPartCall 1) ("replace","readsVal_3") [Var 1,Var 2,Var 3]]])),Func ("replace","_impl#readList#Prelude.Read#replace.RepT3") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("replace","_inst#Prelude.Read#replace.RepT3") [Var 1,Var 2,Var 3]])),Func ("replace","_inst#Prelude.Read#replace.RepT4") 4 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (TCons ("Prelude","_Dict#Read") [TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3]]))))) (Rule [1,2,3,4] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 1) ("replace","_impl#readsPrec#Prelude.Read#replace.RepT4") [Var 1,Var 2,Var 3,Var 4],Comb FuncCall ("replace","_impl#readList#Prelude.Read#replace.RepT4") [Var 1,Var 2,Var 3,Var 4]])),Func ("replace","_impl#readsPrec#Prelude.Read#replace.RepT4") 5 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude","readParen") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("replace","readsLParen") [Comb (FuncPartCall 1) ("replace","readsVal_4") [Var 1,Var 2,Var 3,Var 4]]])),Func ("replace","_impl#readList#Prelude.Read#replace.RepT4") 4 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("replace","_inst#Prelude.Read#replace.RepT4") [Var 1,Var 2,Var 3,Var 4]])),Func ("replace","_inst#Prelude.Read#replace.RepT5") 5 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 4]) (TCons ("Prelude","_Dict#Read") [TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]])))))) (Rule [1,2,3,4,5] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 1) ("replace","_impl#readsPrec#Prelude.Read#replace.RepT5") [Var 1,Var 2,Var 3,Var 4,Var 5],Comb FuncCall ("replace","_impl#readList#Prelude.Read#replace.RepT5") [Var 1,Var 2,Var 3,Var 4,Var 5]])),Func ("replace","_impl#readsPrec#Prelude.Read#replace.RepT5") 6 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 4]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [1,2,3,4,5,6] (Comb FuncCall ("Prelude","readParen") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("replace","readsLParen") [Comb (FuncPartCall 1) ("replace","readsVal_5") [Var 1,Var 2,Var 3,Var 4,Var 5]]])),Func ("replace","_impl#readList#Prelude.Read#replace.RepT5") 5 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 4]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("replace","_inst#Prelude.Read#replace.RepT5") [Var 1,Var 2,Var 3,Var 4,Var 5]])),Func ("replace","_inst#Prelude.Read#replace.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (TCons ("Prelude","_Dict#Read") [TCons ("replace","Either") [TVar 0,TVar 1]]))) (Rule [1,2] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("replace","_impl#readsPrec#Prelude.Read#replace.Either") [Var 1,Var 2],Comb FuncCall ("replace","_impl#readList#Prelude.Read#replace.Either") [Var 1,Var 2]])),Func ("replace","_impl#readsPrec#Prelude.Read#replace.Either") 4 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","Either") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 3],Comb (FuncPartCall 1) ("replace","readLeft") [Var 1]],Var 4],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 3],Comb (FuncPartCall 1) ("replace","readRight") [Var 2]],Var 4]])),Func ("replace","_impl#readList#Prelude.Read#replace.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("replace","Either") [TVar 0,TVar 1]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("replace","_inst#Prelude.Read#replace.Either") [Var 1,Var 2]])),Func ("replace","_inst#Prelude.Read#replace.RepBool") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("replace","RepBool") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("replace","_impl#readsPrec#Prelude.Read#replace.RepBool") [],Comb FuncCall ("replace","_impl#readList#Prelude.Read#replace.RepBool") []])),Func ("replace","_impl#readsPrec#Prelude.Read#replace.RepBool") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","RepBool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("replace","readTrue") []],Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("replace","readFalse") []],Var 2]])),Func ("replace","_impl#readList#Prelude.Read#replace.RepBool") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("replace","RepBool") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("replace","_inst#Prelude.Read#replace.RepBool") []])),Func ("replace","_inst#Prelude.Read#replace.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (TCons ("Prelude","_Dict#Read") [TCons ("replace","Maybe") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("replace","_impl#readsPrec#Prelude.Read#replace.Maybe") [Var 1],Comb FuncCall ("replace","_impl#readList#Prelude.Read#replace.Maybe") [Var 1]])),Func ("replace","_impl#readsPrec#Prelude.Read#replace.Maybe") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("replace","readNothing") []],Var 3],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("replace","readJust") [Var 1]],Var 3]])),Func ("replace","_impl#readList#Prelude.Read#replace.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("replace","Maybe") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("replace","_inst#Prelude.Read#replace.Maybe") [Var 1]])),Func ("replace","_inst#Prelude.Read#replace.IOError") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("replace","IOError") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("replace","_impl#readsPrec#Prelude.Read#replace.IOError") [],Comb FuncCall ("replace","_impl#readList#Prelude.Read#replace.IOError") []])),Func ("replace","_impl#readsPrec#Prelude.Read#replace.IOError") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("replace","readIOError") []],Var 2],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("replace","readUserError") []],Var 2],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("replace","readFailError") []],Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("replace","readNondetError") []],Var 2]]]])),Func ("replace","_impl#readList#Prelude.Read#replace.IOError") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("replace","IOError") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("replace","_inst#Prelude.Read#replace.IOError") []])),Func ("replace","_inst#Prelude.Show#replace.IOError") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("replace","IOError") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("replace","_impl#show#Prelude.Show#replace.IOError") [],Comb (FuncPartCall 2) ("replace","_impl#showsPrec#Prelude.Show#replace.IOError") [],Comb FuncCall ("replace","_impl#showList#Prelude.Show#replace.IOError") []])),Func ("replace","_impl#show#Prelude.Show#replace.IOError") 0 Public (FuncType (TCons ("replace","IOError") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("replace","_inst#Prelude.Show#replace.IOError") []])),Func ("replace","_impl#showsPrec#Prelude.Show#replace.IOError") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("replace","IOError") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("replace","IOError") [3]) (Case Flex (Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") [Var 1,Lit (Intc 10)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'O'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Char") [Var 3]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showChar") [Lit (Charc '(')],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'O'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Char") [Var 3],Comb (FuncPartCall 1) ("Prelude","showChar") [Lit (Charc ')')]]]])]),Branch (Pattern ("replace","FailError") [4]) (Case Flex (Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") [Var 1,Lit (Intc 10)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Char") [Var 4]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showChar") [Lit (Charc '(')],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Char") [Var 4],Comb (FuncPartCall 1) ("Prelude","showChar") [Lit (Charc ')')]]]])]),Branch (Pattern ("replace","UserError") [5]) (Case Flex (Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") [Var 1,Lit (Intc 10)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'U'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Char") [Var 5]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showChar") [Lit (Charc '(')],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'U'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Char") [Var 5],Comb (FuncPartCall 1) ("Prelude","showChar") [Lit (Charc ')')]]]])]),Branch (Pattern ("replace","NondetError") [6]) (Case Flex (Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") [Var 1,Lit (Intc 10)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Char") [Var 6]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showChar") [Lit (Charc '(')],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Char") [Var 6],Comb (FuncPartCall 1) ("Prelude","showChar") [Lit (Charc ')')]]]])])])),Func ("replace","_impl#showList#Prelude.Show#replace.IOError") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("replace","IOError") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("replace","_inst#Prelude.Show#replace.IOError") []])),Func ("replace","div_") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (External "replace.div_"),Func ("replace","mod_") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (External "replace.mod_"),Func ("replace","quot_") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (External "replace.quot_"),Func ("replace","rem_") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (External "replace.rem_"),Func ("replace","+$") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (External "replace.+$"),Func ("replace","-$") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (External "replace.-$"),Func ("replace","*$") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (External "replace.*$"),Func ("replace","eqInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (External "replace.eqInt"),Func ("replace","eqFloat") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (External "replace.eqFloat"),Func ("replace","eqChar") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (External "replace.eqChar"),Func ("replace","ltEqInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (External "replace.ltEqInt"),Func ("replace","ltEqFloat") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (External "replace.ltEqFloat"),Func ("replace","ltEqChar") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (External "replace.ltEqChar"),Func ("replace","isDigit") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (External "replace.isDigit"),Func ("replace","isAlpha") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (External "replace.isAlpha"),Func ("replace","isBinDigit") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (External "replace.isBinDigit"),Func ("replace","isHexDigit") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (External "replace.isHexDigit"),Func ("replace","isOctDigit") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (External "replace.isOctDigit"),Func ("replace","isUpper") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (External "replace.isUpper"),Func ("replace","isAlphaNum") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (External "replace.isAlphaNum"),Func ("replace","lexDigits") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (External "replace.lexDigits"),Func ("replace","cond") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TVar 0) (TVar 0))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Prelude","True") []) (Var 2)])),Func ("replace","failed") 0 Public (TVar 0) (Rule [] (Comb FuncCall ("Prelude","head") [Comb ConsCall ("Prelude","[]") []])),Func ("replace","loop") 0 Public (TVar 0) (Rule [] (Comb FuncCall ("replace","loop") [])),Func ("replace","!!") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (TVar 0))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#Prelude.Int") [],Var 2],Lit (Intc 0)]) [Branch (Pattern ("Prelude","LT") []) (Comb FuncCall ("replace","failed") []),Branch (Pattern ("Prelude","EQ") []) (Comb FuncCall ("Prelude","head") [Var 1]),Branch (Pattern ("Prelude","GT") []) (Case Rigid (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("replace","failed") []),Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("replace","!!") [Var 4,Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Var 2,Lit (Intc 1)]])])])),Func ("replace","def_Ord_LtEq") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","compare") [Var 1],Var 2],Var 3]) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") [])])),Func ("replace","c2") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("replace","RepT2") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Var 1,Var 3],Var 4])])),Func ("replace","c3") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("replace","RepT2") [TVar 1,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,,)") [Var 1,Var 5,Var 6],Var 4])])])),Func ("replace","c4") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("replace","RepT3") [TVar 1,TVar 2,TVar 3],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Flex (Var 3) [Branch (Pattern ("Prelude","(,,)") [5,6,7]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,,,)") [Var 1,Var 5,Var 6,Var 7],Var 4])])])),Func ("replace","c5") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("replace","RepT4") [TVar 1,TVar 2,TVar 3,TVar 4],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Flex (Var 3) [Branch (Pattern ("Prelude","(,,,)") [5,6,7,8]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,,,,)") [Var 1,Var 5,Var 6,Var 7,Var 8],Var 4])])])),Func ("replace","readsLParen") 2 Public (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("replace","isSpace") [],Var 2]) [Branch (Pattern ("Prelude",":") [3,4]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 3,Lit (Charc '(')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Var 1,Var 4]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])])),Func ("replace","readsVal_5") 6 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 4]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [1,2,3,4,5,6] (Comb FuncCall ("Prelude","_impl#>>=#Prelude.Monad#[]") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reads") [Var 1],Var 6],Comb (FuncPartCall 1) ("replace","readsComma_4") [Var 2,Var 3,Var 4,Var 5]])),Func ("replace","readsComma_4") 5 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","(,)") [TVar 4,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","RepT5") [TVar 4,TVar 0,TVar 1,TVar 2,TVar 3],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Flex (Var 5) [Branch (Pattern ("Prelude","(,)") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("replace","isSpace") [],Var 7]) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc ',')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("replace","c5") [Var 6],Comb FuncCall ("replace","readsVal_4") [Var 1,Var 2,Var 3,Var 4,Var 9]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])])])),Func ("replace","readsVal_4") 5 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude","_impl#>>=#Prelude.Monad#[]") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reads") [Var 1],Var 5],Comb (FuncPartCall 1) ("replace","readsComma_3") [Var 2,Var 3,Var 4]])),Func ("replace","readsComma_3") 4 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","(,)") [TVar 3,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","RepT4") [TVar 3,TVar 0,TVar 1,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("replace","isSpace") [],Var 6]) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc ',')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("replace","c4") [Var 5],Comb FuncCall ("replace","readsVal_3") [Var 1,Var 2,Var 3,Var 8]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])])])),Func ("replace","readsVal_3") 4 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","_impl#>>=#Prelude.Monad#[]") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reads") [Var 1],Var 4],Comb (FuncPartCall 1) ("replace","readsComma_2") [Var 2,Var 3]])),Func ("replace","readsComma_2") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 2,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","RepT3") [TVar 2,TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Comb FuncCall ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("replace","isSpace") [],Var 5]) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc ',')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("replace","c3") [Var 4],Comb FuncCall ("replace","readsVal_2") [Var 1,Var 2,Var 7]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])])])),Func ("replace","readsVal_2") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","RepT2") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","_impl#>>=#Prelude.Monad#[]") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reads") [Var 1],Var 3],Comb (FuncPartCall 1) ("replace","readsComma_1") [Var 2]])),Func ("replace","readsComma_1") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","RepT2") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Comb FuncCall ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("replace","isSpace") [],Var 4]) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc ',')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("replace","c2") [Var 3],Comb FuncCall ("replace","readsVal_1") [Var 1,Var 6]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])])])),Func ("replace","readsVal_1") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","_impl#>>=#Prelude.Monad#[]") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reads") [Var 1],Var 2],Comb (FuncPartCall 1) ("replace","readsRParen") []])),Func ("replace","readsRParen") 1 Public (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case Rigid (Comb FuncCall ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("replace","isSpace") [],Var 3]) [Branch (Pattern ("Prelude",":") [4,5]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 4,Lit (Charc ')')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 2,Var 5],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])])])),Func ("replace","readsUnit") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","RepUnit") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("replace","isSpace") [],Var 1]) [Branch (Pattern ("Prelude",":") [2,3]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 2,Lit (Charc '(')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("replace","isSpace") [],Var 3]) [Branch (Pattern ("Prelude",":") [4,5]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 4,Lit (Charc ')')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","()") [],Var 5],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])])),Func ("replace","readStringLiteral") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 2,Lit (Charc '"')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("replace","span") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char") [],Lit (Charc '"')],Var 3]) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc '"'),Comb FuncCall ("Prelude","++") [Var 4,Comb ConsCall ("Prelude",":") [Lit (Charc '"'),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","tail") [Var 5]],Comb ConsCall ("Prelude","[]") []])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Var 1],Comb ConsCall ("Prelude","[]") []])])])),Func ("replace","readNatLiteral") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 2,Lit (Charc '-')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [4,5]) (Let [(6,Comb FuncCall ("Prelude","ord") [Var 4])] (Case Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") [Lit (Intc 48),Var 6],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Var 6],Lit (Intc 58)]]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("replace","readNat") [Var 3,Lit (Intc 0)]) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","_impl#negate#Prelude.Num#Prelude.Int") [Var 7],Var 8],Comb ConsCall ("Prelude","[]") []])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]))]),Branch (Pattern ("Prelude","False") []) (Let [(9,Comb FuncCall ("Prelude","ord") [Var 2])] (Case Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") [Lit (Intc 48),Var 9],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Var 9],Lit (Intc 58)]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("replace","readNat") [Var 1,Lit (Intc 0)],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]))])])),Func ("replace","readNat") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Var 2,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [3,4]) (Let [(5,Comb FuncCall ("Prelude","ord") [Var 3])] (Case Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") [Lit (Intc 48),Var 5],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Var 5],Lit (Intc 58)]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("replace","readNat") [Var 4,Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Comb FuncCall ("Prelude","_impl#*#Prelude.Num#Prelude.Int") [Var 2,Lit (Intc 10)],Var 5],Lit (Intc 48)]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","(,)") [Var 2,Comb ConsCall ("Prelude",":") [Var 3,Var 4]])]))])),Func ("replace","readCharLiteral") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 2,Var 3],Comb ConsCall ("Prelude","[]") []])])),Func ("replace","readFloatLiteral") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 2,Lit (Charc '-')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("replace","readPosFloat") [Var 3]) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Case Rigid (Var 5) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","_impl#negate#Prelude.Num#Prelude.Float") [Var 6],Var 7],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [8,9]) (Comb ConsCall ("Prelude","[]") [])])])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("replace","readPosFloat") [Var 1])])])),Func ("replace","readPosFloat") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Case Rigid (Comb FuncCall ("replace","readNatLiteral") [Var 1]) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Case Rigid (Var 5) [Branch (Pattern ("Prelude","[]") []) (Case Rigid (Comb FuncCall ("replace","readDotNat") [Var 7]) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Var 8) [Branch (Pattern ("Prelude","(,)") [10,11]) (Case Rigid (Var 9) [Branch (Pattern ("Prelude","[]") []) (Case Rigid (Comb FuncCall ("replace","readENat") [Var 11]) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Var 12) [Branch (Pattern ("Prelude","(,)") [14,15]) (Case Rigid (Var 13) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","_impl#*#Prelude.Num#Prelude.Float") [Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Float") [Comb FuncCall ("Prelude","_impl#fromInt#Prelude.Num#Prelude.Float") [Var 6],Var 10],Comb FuncCall ("replace","pow") [Lit (Floatc 10.0),Var 14]],Var 15],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [16,17]) (Comb ConsCall ("Prelude","[]") [])])])]),Branch (Pattern ("Prelude",":") [18,19]) (Comb ConsCall ("Prelude","[]") [])])])]),Branch (Pattern ("Prelude",":") [20,21]) (Comb ConsCall ("Prelude","[]") [])])])])])),Func ("replace","readDotNat") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Lit (Floatc 0.0),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [2,3]) (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Lit (Floatc 0.0),Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [4,5]) (Case Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 2,Lit (Charc '.')],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") [Lit (Intc 48),Comb FuncCall ("Prelude","ord") [Var 4]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Comb FuncCall ("Prelude","ord") [Var 4]],Lit (Intc 58)]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("replace","readDotNat1") [Var 3],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Lit (Floatc 0.0),Var 1],Comb ConsCall ("Prelude","[]") []])])])])),Func ("replace","readDotNat1") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Lit (Floatc 0.0),Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [2,3]) (Let [(4,Comb FuncCall ("Prelude","ord") [Var 2])] (Case Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") [Lit (Intc 48),Var 4],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Var 4],Lit (Intc 58)]]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("replace","readDotNat1") [Var 3]) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","_impl#/#Prelude.Fractional#Prelude.Float") [Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Float") [Comb FuncCall ("Prelude","_impl#fromInt#Prelude.Num#Prelude.Float") [Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Var 4,Lit (Intc 48)]],Var 5],Lit (Floatc 10.0)],Var 6])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","(,)") [Lit (Floatc 0.0),Comb ConsCall ("Prelude",":") [Var 2,Var 3]])]))])),Func ("replace","readENat") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Lit (Intc 0),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [2,3]) (Case Rigid (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 2,Lit (Charc 'e')],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 2,Lit (Charc 'E')]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("replace","readNatLiteral") [Var 3]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Lit (Intc 0),Comb ConsCall ("Prelude",":") [Var 2,Var 3]],Comb ConsCall ("Prelude","[]") []])])])),Func ("replace","pow") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Float") []))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Var 2],Lit (Intc 0)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","_impl#/#Prelude.Fractional#Prelude.Float") [Lit (Floatc 1.0),Comb FuncCall ("replace","powaux") [Lit (Floatc 1.0),Var 1,Comb FuncCall ("Prelude","_impl#negate#Prelude.Num#Prelude.Int") [Var 2]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("replace","powaux") [Lit (Floatc 1.0),Var 1,Var 2])])),Func ("replace","powaux") 3 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Float") [])))) (Rule [1,2,3] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") [Var 3,Lit (Intc 0)]) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Let [(4,Comb FuncCall ("replace","square") [Var 2]),(5,Comb FuncCall ("replace","halve") [Var 3])] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#mod#Prelude.Integral#Prelude.Int") [],Var 3],Lit (Intc 2)],Lit (Intc 1)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("replace","powaux") [Comb FuncCall ("Prelude","_impl#*#Prelude.Num#Prelude.Float") [Var 1,Var 2],Var 4,Var 5]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("replace","powaux") [Var 1,Var 4,Var 5])]))])),Func ("replace","halve") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#div#Prelude.Integral#Prelude.Int") [],Var 1],Lit (Intc 2)])),Func ("replace","square") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [1] (Comb FuncCall ("Prelude","_impl#*#Prelude.Num#Prelude.Float") [Var 1,Var 1])),Func ("replace","lexLitChar") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 2,Lit (Charc '\\')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("replace","lexLitChar_lexPrefix") [Lit (Charc '\\')],Comb FuncCall ("replace","lexLitChar_lexEsc") [Var 3]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Var 3],Comb ConsCall ("Prelude","[]") []])])])),Func ("replace","lexLitChar_lexEsc") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case Rigid (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Comb FuncCall ("replace","lexLitChar_runEsc") [Var 2,Var 3]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])])),Func ("replace","lexLitChar_runEsc") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") [],Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'v'),Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc '"'),Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []],Var 2],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("replace","lexLitChar_runEsc_1") [Var 1,Var 2])])),Func ("replace","lexLitChar_runEsc_1") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 1,Lit (Charc 'b')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("replace","lexLitChar_lexPrefix") [Lit (Charc 'b'),Comb FuncCall ("replace","span") [Comb (FuncPartCall 1) ("replace","isBinDigit") [],Var 2]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("replace","lexLitChar_runEsc_2") [Var 1,Var 2])])),Func ("replace","lexLitChar_runEsc_2") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 1,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("replace","lexLitChar_lexPrefix") [Lit (Charc 'o'),Comb FuncCall ("replace","span") [Comb (FuncPartCall 1) ("replace","isOctDigit") [],Var 2]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("replace","lexLitChar_runEsc_3") [Var 1,Var 2])])),Func ("replace","lexLitChar_runEsc_3") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 1,Lit (Charc 'x')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("replace","lexLitChar_lexPrefix") [Lit (Charc 'x'),Comb FuncCall ("replace","span") [Comb (FuncPartCall 1) ("replace","isHexDigit") [],Var 2]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("replace","lexLitChar_runEsc_4") [Var 1,Var 2])])),Func ("replace","lexLitChar_runEsc_4") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Comb FuncCall ("replace","isDigit") [Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("replace","span") [Comb (FuncPartCall 1) ("replace","isDigit") [],Comb ConsCall ("Prelude",":") [Var 1,Var 2]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("replace","lexLitChar_runEsc_5") [Var 1,Var 2])])),Func ("replace","lexLitChar_runEsc_5") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Comb FuncCall ("replace","isUpper") [Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("replace","span") [Comb (FuncPartCall 1) ("replace","lexLitChar_isCharName") [],Comb ConsCall ("Prelude",":") [Var 1,Var 2]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("replace","lexLitChar_runEsc_6") [Var 1,Var 2])])),Func ("replace","lexLitChar_runEsc_6") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 1,Lit (Charc '^')],Comb FuncCall ("replace","lexLitChar_isAt") [Var 2]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc '^'),Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []]],Var 2],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])),Func ("replace","lexLitChar_isAt") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") [])) (Rule [1] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude",":") [2,3]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Char") [],Var 2],Lit (Charc '@')],Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Char") [Var 2,Lit (Charc '_')]])])),Func ("replace","lexLitChar_isCharName") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","||") [Comb FuncCall ("replace","isUpper") [Var 1],Comb FuncCall ("replace","isDigit") [Var 1]])),Func ("replace","lexLitChar_lexPrefix") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TVar 1]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TVar 1]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 1,Var 3],Var 4])])),Func ("replace","lex") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [2,3]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 2,Lit (Charc '\'')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("replace","lex_lexSingleQuote") [],Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("replace","lex_filterSingleQuote") [],Comb FuncCall ("replace","lexLitChar") [Var 3]]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 2,Lit (Charc '"')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("replace","lex_lexDoubleQuote") [],Comb FuncCall ("replace","lex_lexString") [Var 3]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("replace","lex_else") [Var 2,Var 3])])])])),Func ("replace","lex_lexSingleQuote") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Var 2,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [4,5]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 4,Comb FuncCall ("Prelude","++") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude","[]") []]]],Var 5])])])),Func ("replace","lex_filterSingleQuote") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","Bool") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude",":") [4,5]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 4,Lit (Charc '\'')],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") []],Var 2],Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude","[]") []]]])])])),Func ("replace","lex_lexDoubleQuote") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TVar 0])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc '"'),Var 2],Var 3])])),Func ("replace","lex_else") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Comb FuncCall ("replace","isSpace") [Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("replace","lex") [],Comb FuncCall ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("replace","isSpace") [],Var 2]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("replace","lex_isSingle") [Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []],Var 2],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("replace","lex_isSym") [Var 1]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("replace","span") [Comb (FuncPartCall 1) ("replace","lex_isSym") [],Var 2]) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 1,Var 3],Var 4],Comb ConsCall ("Prelude","[]") []])]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("replace","isAlpha") [Var 1]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("replace","span") [Comb (FuncPartCall 1) ("replace","lex_isSym") [],Var 2]) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 1,Var 5],Var 6],Comb ConsCall ("Prelude","[]") []])]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("replace","isDigit") [Var 1]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("replace","span") [Comb (FuncPartCall 1) ("replace","isDigit") [],Var 2]) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("replace","lex_else_frac") [Var 1,Var 7],Comb FuncCall ("replace","lex_lexFracExp") [Var 8]])]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])])])),Func ("replace","lex_else_frac") 3 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TVar 1]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TVar 1])))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 1,Comb FuncCall ("Prelude","++") [Var 2,Var 4]],Var 5])])),Func ("replace","lex_isSingle") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") [],Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude",":") [Lit (Charc ';'),Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude",":") [Lit (Charc '['),Comb ConsCall ("Prelude",":") [Lit (Charc ']'),Comb ConsCall ("Prelude",":") [Lit (Charc '{'),Comb ConsCall ("Prelude",":") [Lit (Charc '}'),Comb ConsCall ("Prelude",":") [Lit (Charc '_'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]])),Func ("replace","lex_isSym") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") [],Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc '!'),Comb ConsCall ("Prelude",":") [Lit (Charc '@'),Comb ConsCall ("Prelude",":") [Lit (Charc '#'),Comb ConsCall ("Prelude",":") [Lit (Charc '$'),Comb ConsCall ("Prelude",":") [Lit (Charc '&'),Comb ConsCall ("Prelude",":") [Lit (Charc '+'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc '/'),Comb ConsCall ("Prelude",":") [Lit (Charc '<'),Comb ConsCall ("Prelude",":") [Lit (Charc '='),Comb ConsCall ("Prelude",":") [Lit (Charc '?'),Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc '^'),Comb ConsCall ("Prelude",":") [Lit (Charc '|'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc '~'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]])),Func ("replace","lex_isIdChar") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","||") [Comb FuncCall ("replace","isAlphaNum") [Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") [],Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc '_'),Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude","[]") []]]]])),Func ("replace","lex_lexFracExp") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case Rigid (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 2,Lit (Charc '.')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case Rigid (Comb FuncCall ("replace","isDigit") [Var 4]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("replace","lex_lexFracExp_dot") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("replace","lex_lexFracExp_exp") []],Comb FuncCall ("replace","lexDigits") [Comb ConsCall ("Prelude",":") [Var 4,Var 5]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("replace","lex_lexExp") [Var 1])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("replace","lex_lexExp") [Var 1])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("replace","lex_lexExp") [Var 1])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("replace","lex_lexExp") [Var 1])])),Func ("replace","lex_lexFracExp_dot") 1 Public (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb FuncCall ("Prelude","++") [Var 2,Var 3]],Var 4])])),Func ("replace","lex_lexFracExp_exp") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("replace","makeTriple") [Var 2],Comb FuncCall ("replace","lex_lexExp") [Var 3]])])),Func ("replace","makeTriple") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 2]) (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude","(,,)") [Var 1,Var 3,Var 4])])),Func ("replace","lex_lexExp") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case Rigid (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 2,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("replace","lex_lexPMExp") [Var 2,Var 3]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 2,Lit (Charc 'E')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("replace","lex_lexPMExp") [Var 2,Var 3]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Var 1],Comb ConsCall ("Prelude","[]") []])])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Var 1],Comb ConsCall ("Prelude","[]") []])])),Func ("replace","lex_lexPMExp") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Let [(3,Var 2)] (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 4,Lit (Charc '+')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("replace","lex_lexPMExp_sgn") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc '+'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("replace","lexDigits") [Var 5]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 4,Lit (Charc '-')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("replace","lex_lexPMExp_sgn") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc '-'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("replace","lexDigits") [Var 5]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("replace","lex_lexPMExp_sgn") [Var 1,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("replace","lexDigits") [Var 3]])])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("replace","lex_lexPMExp_sgn") [Var 1,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("replace","lexDigits") [Var 3]])]))),Func ("replace","lex_lexPMExp_sgn") 3 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 1,Comb FuncCall ("Prelude","++") [Var 2,Var 4]],Var 5])])),Func ("replace","lex_lexString") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case Rigid (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 2,Lit (Charc '"')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc '"'),Comb ConsCall ("Prelude","[]") []],Var 3],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("replace","lex_lexString_build") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("replace","lex_lexString_string") []],Comb FuncCall ("replace","lex_lexStrItem") [Var 1]]])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("replace","lex_lexString_build") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("replace","lex_lexString_string") []],Comb FuncCall ("replace","lex_lexStrItem") [Var 1]]])])),Func ("replace","lex_lexString_build") 1 Public (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","++") [Var 2,Var 3],Var 4])])),Func ("replace","lex_lexString_string") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("replace","makeTriple") [Var 2],Comb FuncCall ("replace","lex_lexString") [Var 3]])])),Func ("replace","lex_lexStrItem") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case Rigid (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 2,Lit (Charc '\\')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 4,Lit (Charc '&')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc '&'),Comb ConsCall ("Prelude","[]") []]],Var 5],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("replace","isSpace") [Var 4]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("replace","isSpace") [],Var 5]) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc '\\')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc '&'),Comb ConsCall ("Prelude","[]") []]],Var 7],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("replace","lexLitChar") [Var 1])])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("replace","lexLitChar") [Var 1])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("replace","lexLitChar") [Var 1])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("replace","lexLitChar") [Var 1])])),Func ("replace","take") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") [Var 1,Lit (Intc 0)]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Case Rigid (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Comb ConsCall ("Prelude",":") [Var 3,Comb FuncCall ("replace","take") [Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Var 1,Lit (Intc 1)],Var 4]])])])),Func ("replace","splitAt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") [Var 1,Lit (Intc 0)]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Var 2]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [3,4]) (Case Rigid (Comb FuncCall ("replace","splitAt") [Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Var 1,Lit (Intc 1)],Var 4]) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 3,Var 5],Var 6])])])])),Func ("replace","span") 2 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [3,4]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Var 1,Var 3]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("replace","span") [Var 1,Var 4]) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 3,Var 5],Var 6])]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude",":") [Var 3,Var 4]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("replace","lines") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Case Rigid (Comb FuncCall ("replace","splitline") [Comb ConsCall ("Prelude",":") [Var 2,Var 3]]) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Var 4,Comb FuncCall ("replace","lines") [Var 5]])])])),Func ("replace","splitline") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [2,3]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 2,Lit (Charc '\n')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Var 3]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("replace","splitline") [Var 3]) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 2,Var 4],Var 5])])])])),Func ("replace","words") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("replace","isSpace") [],Var 1])] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") [],Var 2,Comb ConsCall ("Prelude","[]") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","break") [Comb (FuncPartCall 1) ("replace","isSpace") []],Var 2]) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude",":") [Var 3,Comb FuncCall ("replace","words") [Var 4]])])]))),Func ("replace","isSpace") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") [],Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '\t'),Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc '\r'),Comb ConsCall ("Prelude",":") [Lit (Charc '\f'),Comb ConsCall ("Prelude",":") [Lit (Charc '\v'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Int") [],Comb FuncCall ("Prelude","ord") [Var 1]],Comb ConsCall ("Prelude",":") [Lit (Intc 160),Comb ConsCall ("Prelude",":") [Lit (Intc 5760),Comb ConsCall ("Prelude",":") [Lit (Intc 6158),Comb ConsCall ("Prelude",":") [Lit (Intc 8192),Comb ConsCall ("Prelude",":") [Lit (Intc 8239),Comb ConsCall ("Prelude",":") [Lit (Intc 8287),Comb ConsCall ("Prelude",":") [Lit (Intc 12288),Comb ConsCall ("Prelude","[]") []]]]]]]]]])),Func ("replace","readLeft") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","Either") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") [],Comb FuncCall ("replace","take") [Lit (Intc 4),Var 2],Comb ConsCall ("Prelude",":") [Lit (Charc 'L'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude","[]") []]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("replace","makeLeft") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reads") [Var 1],Comb FuncCall ("Prelude","drop") [Lit (Intc 4),Var 2]]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("replace","makeLeft") 1 Public (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("replace","Either") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("replace","Left") [Var 2],Var 3])])),Func ("replace","readRight") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","Either") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") [],Comb FuncCall ("replace","take") [Lit (Intc 5),Var 2],Comb ConsCall ("Prelude",":") [Lit (Charc 'R'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude","[]") []]]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("replace","makeRight") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reads") [Var 1],Comb FuncCall ("Prelude","drop") [Lit (Intc 5),Var 2]]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("replace","makeRight") 1 Public (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("replace","Either") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("replace","Right") [Var 2],Var 3])])),Func ("replace","readTrue") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","RepBool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") [],Comb FuncCall ("replace","take") [Lit (Intc 4),Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","True") [],Comb FuncCall ("Prelude","drop") [Lit (Intc 4),Var 1]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("replace","readFalse") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","RepBool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") [],Comb FuncCall ("replace","take") [Lit (Intc 5),Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","False") [],Comb FuncCall ("Prelude","drop") [Lit (Intc 5),Var 1]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("replace","readNothing") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") [],Comb FuncCall ("replace","take") [Lit (Intc 7),Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude","[]") []]]]]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("replace","Nothing") [],Comb FuncCall ("Prelude","drop") [Lit (Intc 7),Var 1]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("replace","readJust") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") [],Comb FuncCall ("replace","take") [Lit (Intc 4),Var 2],Comb ConsCall ("Prelude",":") [Lit (Charc 'J'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude","[]") []]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("replace","makeJust") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reads") [Var 1],Comb FuncCall ("Prelude","drop") [Lit (Intc 4),Var 2]]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("replace","makeJust") 1 Public (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("replace","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("replace","Just") [Var 2],Var 3])])),Func ("replace","readIOError") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") [],Comb FuncCall ("replace","take") [Lit (Intc 7),Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'O'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude","[]") []]]]]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("replace","makeIOError") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reads") [Comb FuncCall ("Prelude","_inst#Prelude.Read#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Read#Prelude.Char") []]],Comb FuncCall ("Prelude","drop") [Lit (Intc 7),Var 1]]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("replace","makeIOError") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("replace","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("replace","IOError") [Var 2],Var 3])])),Func ("replace","readUserError") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") [],Comb FuncCall ("replace","take") [Lit (Intc 9),Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc 'U'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("replace","makeUserError") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reads") [Comb FuncCall ("Prelude","_inst#Prelude.Read#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Read#Prelude.Char") []]],Comb FuncCall ("Prelude","drop") [Lit (Intc 9),Var 1]]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("replace","makeUserError") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("replace","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("replace","UserError") [Var 2],Var 3])])),Func ("replace","readFailError") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") [],Comb FuncCall ("replace","take") [Lit (Intc 9),Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("replace","makeFailError") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reads") [Comb FuncCall ("Prelude","_inst#Prelude.Read#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Read#Prelude.Char") []]],Comb FuncCall ("Prelude","drop") [Lit (Intc 9),Var 1]]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("replace","makeFailError") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("replace","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("replace","FailError") [Var 2],Var 3])])),Func ("replace","readNondetError") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") [],Comb FuncCall ("replace","take") [Lit (Intc 11),Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("replace","makeNondetError") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reads") [Comb FuncCall ("Prelude","_inst#Prelude.Read#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Read#Prelude.Char") []]],Comb FuncCall ("Prelude","drop") [Lit (Intc 9),Var 1]]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("replace","makeNondetError") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("replace","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("replace","NondetError") [Var 2],Var 3])]))] []