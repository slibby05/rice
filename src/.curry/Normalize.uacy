{- AbstractCurry 2.0 -}
CurryProg "Normalize"
["Prelude","FlatCurry.Types","FlatRewrite","Util","Debug","Control.SetFunctions","Graph","Gas"]
Nothing
 []
 []
 []
 [CFunc ("Normalize","transform") 1 Public (CQualType (CContext []) (CFuncType (CTCons ("FlatCurry.Types","Prog")) (CTApply (CTCons ("Prelude","DET")) (CTCons ("FlatCurry.Types","Prog"))))) [CRule [CPComb ("FlatCurry.Types","Prog") [CPVar (0,"n"),CPVar (1,"is"),CPVar (2,"d"),CPVar (3,"fs"),CPVar (4,"ops")]] (CSimpleRhs (CApply (CApply (CApply (CApply (CApply (CSymbol ("FlatCurry.Types","Prog")) (CVar (0,"n"))) (CVar (1,"is"))) (CVar (2,"d"))) (CVar (9,"caseFs"))) (CVar (4,"ops"))) [CLocalPat (CPComb ("Prelude","(,)") [CPVar (5,"fixes"),CPVar (6,"c0")]) (CSimpleRhs (CApply (CApply (CApply (CSymbol ("Gas","loop")) (CSymbol ("Normalize","caseInCase"))) (CVar (3,"fs"))) (CLit (CIntc 0))) []),CLocalPat (CPComb ("Prelude","(,)") [CPVar (7,"flatFs"),CPVar (8,"c1")]) (CSimpleRhs (CApply (CApply (CApply (CSymbol ("Gas","loop")) (CSymbol ("Normalize","nestedCont"))) (CVar (5,"fixes"))) (CVar (6,"c0"))) []),CLocalPat (CPComb ("Prelude","(,)") [CPVar (9,"caseFs"),CPVar (10,"_")]) (CSimpleRhs (CApply (CApply (CApply (CSymbol ("Gas","loop")) (CSymbol ("Normalize","caseArg"))) (CVar (7,"flatFs"))) (CVar (8,"c1"))) [])])],
  CFunc ("Normalize","nestedCont") 2 Public (CQualType (CContext []) (CFuncType (CTCons ("FlatCurry.Types","FuncDecl")) (CFuncType (CTCons ("Prelude","Int")) (CTApply (CTCons ("Prelude","[]")) (CTCons ("FlatCurry.Types","FuncDecl")))))) [CRule [CPComb ("FlatCurry.Types","Func") [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"_"),CPComb ("FlatCurry.Types","External") [CPVar (4,"_")]],CPVar (5,"_")] (CSimpleRhs (CSymbol ("Prelude","[]")) []),CRule [CPComb ("FlatCurry.Types","Func") [CPVar (6,"name"),CPVar (7,"a"),CPVar (8,"vis"),CPVar (9,"xtype"),CPComb ("FlatCurry.Types","Rule") [CPVar (10,"vs"),CPVar (11,"body")]],CPVar (12,"n")] (CSimpleRhs (CCase CRigid (CApply (CSymbol ("Normalize","redex_path")) (CVar (11,"body"))) [(CPComb ("Prelude","Nothing") [],CSimpleRhs (CSymbol ("Prelude","[]")) []),(CPComb ("Prelude","Just") [CPComb ("Prelude","(,)") [CPVar (13,"path"),CPVar (14,"redex")]],CSimpleRhs (CLetDecl [CLocalPat (CPVar (15,"newVars")) (CSimpleRhs (CApply (CSymbol ("FlatRewrite","freeVars")) (CVar (14,"redex"))) []),CLocalPat (CPVar (16,"new_name")) (CSimpleRhs (CApply (CApply (CSymbol ("Util","mapSnd")) (CApply (CApply (CSymbol ("Prelude","flip")) (CSymbol ("Prelude","++"))) (CApply (CApply (CSymbol ("Prelude","++")) (CLit (CStringc "#A"))) (CApply (CSymbol ("Prelude","show")) (CVar (12,"n")))))) (CVar (6,"name"))) []),CLocalPat (CPVar (17,"call")) (CSimpleRhs (CApply (CApply (CApply (CSymbol ("FlatCurry.Types","Comb")) (CSymbol ("FlatCurry.Types","FuncCall"))) (CVar (16,"new_name"))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatCurry.Types","Var"))) (CVar (15,"newVars")))) []),CLocalPat (CPVar (18,"new_body")) (CSimpleRhs (CApply (CApply (CApply (CSymbol ("FlatRewrite","replace")) (CVar (11,"body"))) (CVar (13,"path"))) (CVar (17,"call"))) [])] (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("FlatCurry.Types","Func")) (CVar (6,"name"))) (CVar (7,"a"))) (CVar (8,"vis"))) (CVar (9,"xtype"))) (CApply (CApply (CSymbol ("FlatCurry.Types","Rule")) (CVar (10,"vs"))) (CVar (18,"new_body"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("FlatCurry.Types","Func")) (CVar (16,"new_name"))) (CApply (CSymbol ("Prelude","length")) (CVar (15,"newVars")))) (CSymbol ("FlatCurry.Types","Private"))) (CApply (CSymbol ("FlatCurry.Types","TVar")) (CLit (CIntc 0)))) (CApply (CApply (CSymbol ("FlatCurry.Types","Rule")) (CVar (15,"newVars"))) (CVar (14,"redex"))))) (CSymbol ("Prelude","[]"))))) [])]) [])],
  CFunc ("Normalize","redex_path") 1 Public (CQualType (CContext []) (CFuncType (CTCons ("FlatCurry.Types","Expr")) (CTApply (CTCons ("Prelude","DET")) (CTApply (CTCons ("Prelude","Maybe")) (CTApply (CTApply (CTCons ("Prelude","(,)")) (CTCons ("FlatRewrite","Path"))) (CTCons ("FlatCurry.Types","Expr"))))))) [CRule [CPVar (0,"t")] (CSimpleRhs (CApply (CApply (CSymbol ("Gas","~>")) (CApply (CApply (CSymbol ("Gas","~>")) (CApply (CSymbol ("Gas","start")) (CVar (0,"t")))) (CSymbol ("Gas","cor")))) (CApply (CApply (CSymbol ("Prelude","?")) (CSymbol ("Gas","clet"))) (CApply (CApply (CSymbol ("Prelude","?")) (CSymbol ("Gas","ccase"))) (CSymbol ("Gas","cfree"))))) []),CRule [CPVar (1,"t")] (CSimpleRhs (CApply (CApply (CSymbol ("Gas","~>")) (CApply (CApply (CSymbol ("Gas","~>")) (CApply (CSymbol ("Gas","start")) (CVar (1,"t")))) (CSymbol ("Gas","ccomb")))) (CApply (CApply (CSymbol ("Prelude","?")) (CSymbol ("Gas","clet"))) (CApply (CApply (CSymbol ("Prelude","?")) (CSymbol ("Gas","ccase"))) (CSymbol ("Gas","cfree"))))) []),CRule [CPVar (2,"t")] (CSimpleRhs (CApply (CApply (CSymbol ("Gas","~>")) (CApply (CApply (CSymbol ("Gas","~~")) (CApply (CApply (CSymbol ("Gas","~>")) (CApply (CSymbol ("Gas","start")) (CVar (2,"t")))) (CApply (CApply (CSymbol ("FlatCurry.Types","Let")) (CApply (CApply (CSymbol ("Prelude","++")) (CSymbol ("","_"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("","_"))) (CVar (3,"u")))) (CSymbol ("Prelude","[]")))) (CSymbol ("","_"))))) (CSymbol ("","_"))))) (CVar (3,"u")))) (CApply (CApply (CSymbol ("Prelude","?")) (CSymbol ("Gas","clet"))) (CSymbol ("Gas","ccase")))) [CLocalVars [(3,"u")]]),CRule [CPVar (4,"t")] (CSimpleRhs (CSymbol ("Prelude","Nothing")) [])],
  CFunc ("Normalize","caseArg") 2 Public (CQualType (CContext []) (CFuncType (CTCons ("FlatCurry.Types","FuncDecl")) (CFuncType (CTCons ("Prelude","Int")) (CTApply (CTCons ("Prelude","[]")) (CTCons ("FlatCurry.Types","FuncDecl")))))) [CRule [CPComb ("FlatCurry.Types","Func") [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"_"),CPComb ("FlatCurry.Types","External") [CPVar (4,"_")]],CPVar (5,"_")] (CSimpleRhs (CSymbol ("Prelude","[]")) []),CRule [CPComb ("FlatCurry.Types","Func") [CPVar (6,"name"),CPVar (7,"a"),CPVar (8,"vis"),CPVar (9,"xtype"),CPComb ("FlatCurry.Types","Rule") [CPVar (10,"vs"),CPVar (11,"body")]],CPVar (12,"c")] (CSimpleRhs (CCase CRigid (CApply (CSymbol ("Normalize","getCaseArg")) (CVar (11,"body"))) [(CPComb ("Prelude","Nothing") [],CSimpleRhs (CSymbol ("Prelude","[]")) []),(CPComb ("Prelude","Just") [CPComb ("Prelude","(,)") [CPVar (13,"path"),CPVar (14,"redex")]],CSimpleRhs (CLetDecl [CLocalPat (CPComb ("FlatCurry.Types","Case") [CPVar (15,"ct"),CPVar (16,"sel"),CPVar (17,"br")]) (CSimpleRhs (CVar (14,"redex")) []),CLocalPat (CPVar (18,"redex_vars")) (CSimpleRhs (CApply (CSymbol ("FlatRewrite","allVars")) (CVar (14,"redex"))) []),CLocalPat (CPVar (19,"new_var")) (CSimpleRhs (CApply (CApply (CSymbol ("Prelude","+")) (CApply (CApply (CApply (CSymbol ("Prelude","foldr")) (CSymbol ("Prelude","max"))) (CLit (CIntc 0))) (CVar (18,"redex_vars")))) (CLit (CIntc 1))) []),CLocalPat (CPVar (20,"let_expr")) (CSimpleRhs (CApply (CApply (CSymbol ("FlatCurry.Types","Let")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (19,"new_var"))) (CVar (16,"sel")))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CApply (CSymbol ("FlatCurry.Types","Case")) (CVar (15,"ct"))) (CApply (CSymbol ("FlatCurry.Types","Var")) (CVar (19,"new_var")))) (CVar (17,"br")))) []),CLocalPat (CPVar (21,"new_body")) (CSimpleRhs (CApply (CApply (CApply (CSymbol ("FlatRewrite","replace")) (CVar (11,"body"))) (CVar (13,"path"))) (CVar (20,"let_expr"))) [])] (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("FlatCurry.Types","Func")) (CVar (6,"name"))) (CVar (7,"a"))) (CVar (8,"vis"))) (CVar (9,"xtype"))) (CApply (CApply (CSymbol ("FlatCurry.Types","Rule")) (CVar (10,"vs"))) (CVar (21,"new_body"))))) (CSymbol ("Prelude","[]")))) [])]) [])],
  CFunc ("Normalize","getCaseArg") 1 Public (CQualType (CContext []) (CFuncType (CTCons ("FlatCurry.Types","Expr")) (CTApply (CTCons ("Prelude","DET")) (CTApply (CTCons ("Prelude","Maybe")) (CTApply (CTApply (CTCons ("Prelude","(,)")) (CTCons ("FlatRewrite","Path"))) (CTCons ("FlatCurry.Types","Expr"))))))) [CRule [CPVar (0,"t")] (CSimpleRhs (CApply (CApply (CSymbol ("Gas","~>")) (CApply (CSymbol ("Gas","start")) (CVar (0,"t")))) (CApply (CApply (CApply (CSymbol ("FlatCurry.Types","Case")) (CSymbol ("","_"))) (CApply (CApply (CSymbol ("Prelude","?")) (CSymbol ("Gas","clet"))) (CApply (CApply (CSymbol ("Prelude","?")) (CSymbol ("Gas","cfree"))) (CApply (CApply (CSymbol ("Prelude","?")) (CSymbol ("Gas","cor"))) (CApply (CApply (CSymbol ("Prelude","?")) (CSymbol ("Gas","ccase"))) (CApply (CApply (CSymbol ("Prelude","?")) (CSymbol ("Gas","ctype"))) (CApply (CApply (CApply (CSymbol ("FlatCurry.Types","Comb")) (CApply (CApply (CSymbol ("Prelude","?")) (CSymbol ("FlatCurry.Types","FuncCall"))) (CApply (CApply (CSymbol ("Prelude","?")) (CApply (CSymbol ("FlatCurry.Types","ConsPartCall")) (CSymbol ("","_")))) (CApply (CSymbol ("FlatCurry.Types","FuncPartCall")) (CSymbol ("","_")))))) (CSymbol ("","_"))) (CSymbol ("","_"))))))))) (CSymbol ("","_")))) []),CRule [CPVar (1,"t")] (CSimpleRhs (CSymbol ("Prelude","Nothing")) [])],
  CFunc ("Normalize","caseInCase") 2 Public (CQualType (CContext []) (CTCons ("Prelude","untyped"))) [CRule [CPComb ("FlatCurry.Types","Func") [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"_"),CPComb ("FlatCurry.Types","External") [CPVar (4,"_")]],CPVar (5,"_")] (CSimpleRhs (CSymbol ("Prelude","[]")) []),CRule [CPComb ("FlatCurry.Types","Func") [CPVar (6,"name"),CPVar (7,"a"),CPVar (8,"vis"),CPVar (9,"xtype"),CPComb ("FlatCurry.Types","Rule") [CPVar (10,"vs"),CPVar (11,"body")]],CPVar (12,"c")] (CSimpleRhs (CCase CRigid (CApply (CSymbol ("Normalize","findCase")) (CVar (11,"body"))) [(CPComb ("Prelude","Nothing") [],CSimpleRhs (CSymbol ("Prelude","[]")) []),(CPComb ("Prelude","Just") [CPComb ("Prelude","(,)") [CPVar (13,"path"),CPVar (14,"redex")]],CSimpleRhs (CCase CRigid (CApply (CSymbol ("Normalize","repCase")) (CVar (14,"redex"))) [(CPComb ("Prelude","Nothing") [],CSimpleRhs (CSymbol ("Prelude","[]")) []),(CPComb ("Prelude","Just") [CPVar (15,"rep")],CSimpleRhs (CLetDecl [CLocalPat (CPVar (16,"newBody")) (CSimpleRhs (CApply (CApply (CApply (CSymbol ("FlatRewrite","replace")) (CVar (11,"body"))) (CVar (13,"path"))) (CVar (15,"rep"))) [])] (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("FlatCurry.Types","Func")) (CVar (6,"name"))) (CVar (7,"a"))) (CVar (8,"vis"))) (CVar (9,"xtype"))) (CApply (CApply (CSymbol ("FlatCurry.Types","Rule")) (CVar (10,"vs"))) (CVar (16,"newBody"))))) (CSymbol ("Prelude","[]")))) [])]) [])]) [])],
  CFunc ("Normalize","findCase") 1 Public (CQualType (CContext []) (CFuncType (CTCons ("FlatCurry.Types","Expr")) (CTApply (CTCons ("Prelude","DET")) (CTApply (CTCons ("Prelude","Maybe")) (CTApply (CTApply (CTCons ("Prelude","(,)")) (CTCons ("FlatRewrite","Path"))) (CTCons ("FlatCurry.Types","Expr"))))))) [CRule [CPVar (0,"t")] (CSimpleRhs (CApply (CApply (CSymbol ("Gas","~>")) (CApply (CSymbol ("Gas","start")) (CVar (0,"t")))) (CApply (CApply (CApply (CSymbol ("FlatCurry.Types","Case")) (CSymbol ("","_"))) (CApply (CApply (CApply (CSymbol ("FlatCurry.Types","Case")) (CSymbol ("","_"))) (CSymbol ("","_"))) (CSymbol ("","_")))) (CSymbol ("","_")))) []),CRule [CPVar (1,"t")] (CSimpleRhs (CApply (CApply (CSymbol ("Gas","~>")) (CApply (CSymbol ("Gas","start")) (CVar (1,"t")))) (CApply (CApply (CSymbol ("FlatCurry.Types","Typed")) (CSymbol ("","_"))) (CSymbol ("","_")))) []),CRule [CPVar (2,"t")] (CSimpleRhs (CApply (CApply (CSymbol ("Gas","~>")) (CApply (CSymbol ("Gas","start")) (CVar (2,"t")))) (CApply (CApply (CSymbol ("FlatCurry.Types","Let")) (CSymbol ("","_"))) (CSymbol ("","_")))) []),CRule [CPVar (3,"t")] (CSimpleRhs (CSymbol ("Prelude","Nothing")) [])],
  CFunc ("Normalize","repCase") 1 Public (CQualType (CContext []) (CFuncType (CTCons ("FlatCurry.Types","Expr")) (CTApply (CTCons ("Prelude","DET")) (CTApply (CTCons ("Prelude","Maybe")) (CTCons ("FlatCurry.Types","Expr")))))) [CRule [CPComb ("FlatCurry.Types","Typed") [CPVar (0,"e"),CPVar (1,"t")]] (CSimpleRhs (CApply (CSymbol ("Prelude","Just")) (CVar (0,"e"))) []),CRule [CPComb ("FlatCurry.Types","Let") [CPVar (2,"es"),CPVar (3,"e")]] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Prelude","Just"))) (CApply (CApply (CSymbol ("Normalize","makeBlocks")) (CVar (2,"es"))) (CVar (3,"e")))) []),CRule [CPComb ("FlatCurry.Types","Case") [CPVar (4,"t1"),CPComb ("FlatCurry.Types","Case") [CPVar (5,"t2"),CPVar (6,"e"),CPVar (7,"b2")],CPVar (8,"b1")]] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Prelude","Just"))) (CApply (CApply (CApply (CSymbol ("FlatCurry.Types","Case")) (CVar (5,"t2"))) (CVar (6,"e"))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("","foldCase"))) (CVar (7,"b2"))))) [CLocalFunc (CFunc ("","foldCase") 1 Private (CQualType (CContext []) (CTCons ("Prelude","untyped"))) [CRule [CPComb ("FlatCurry.Types","Branch") [CPVar (9,"p"),CPVar (10,"e'")]] (CSimpleRhs (CApply (CApply (CSymbol ("FlatCurry.Types","Branch")) (CVar (9,"p"))) (CApply (CApply (CApply (CSymbol ("FlatCurry.Types","Case")) (CVar (4,"t1"))) (CVar (10,"e'"))) (CVar (8,"b1")))) [])])]),CRule [CPVar (11,"t")] (CSimpleRhs (CSymbol ("Prelude","Nothing")) [])],
  CFunc ("Normalize","makeBlocks") 2 Public (CQualType (CContext []) (CFuncType (CTApply (CTCons ("Prelude","[]")) (CTApply (CTApply (CTCons ("Prelude","(,)")) (CTCons ("Prelude","Int"))) (CTCons ("FlatCurry.Types","Expr")))) (CFuncType (CTCons ("FlatCurry.Types","Expr")) (CTCons ("FlatCurry.Types","Expr"))))) [CRule [CPVar (0,"es"),CPVar (1,"e")] (CGuardedRhs [(CApply (CApply (CSymbol ("Prelude",">")) (CApply (CSymbol ("Prelude","length")) (CVar (3,"comps")))) (CLit (CIntc 1)),CApply (CApply (CApply (CSymbol ("Prelude","foldr")) (CSymbol ("","makeBlock"))) (CVar (1,"e"))) (CVar (3,"comps")))] [CLocalFunc (CFunc ("","makeEdges") 1 Private (CQualType (CContext []) (CTCons ("Prelude","untyped"))) [CRule [CPComb ("Prelude","(,)") [CPVar (4,"v"),CPVar (5,"exp")]] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPVar (6,"f")] (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (4,"v"))) (CVar (6,"f"))))) (CApply (CSymbol ("FlatRewrite","freeVars")) (CVar (5,"exp")))) [])]),CLocalPat (CPVar (2,"getComponents")) (CSimpleRhs (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("Prelude","map")) (CSymbol ("Graph","preorder")))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Graph","scc"))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Graph","buildG"))) (CApply (CSymbol ("Prelude","concatMap")) (CSymbol ("","makeEdges")))))) []),CLocalPat (CPVar (3,"comps")) (CSimpleRhs (CApply (CVar (2,"getComponents")) (CVar (0,"es"))) []),CLocalFunc (CFunc ("","getExp") 2 Private (CQualType (CContext []) (CTCons ("Prelude","untyped"))) [CRule [CPFuncComb ("Prelude","++") [CPVar (7,"_"),CPFuncComb ("Prelude","++") [CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPVar (8,"n"),CPVar (9,"exp")],CPComb ("Prelude","[]") []],CPVar (10,"_")]],CPVar (8,"n")] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (8,"n"))) (CVar (9,"exp"))) [])]),CLocalFunc (CFunc ("","makeBlock") 1 Private (CQualType (CContext []) (CTCons ("Prelude","untyped"))) [CRule [CPVar (11,"comp")] (CSimpleRhs (CApply (CSymbol ("FlatCurry.Types","Let")) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CSymbol ("","getExp")) (CVar (0,"es")))) (CVar (11,"comp")))) [])])])]]
 []
