Prog "incompl" ["Prelude"] [Type ("incompl","MyList") Public [0] [Cons ("incompl","Nil") 0 Public [],Cons ("incompl","Cons") 2 Public [TVar 0,TCons ("incompl","MyList") [TVar 0]]],Type ("incompl","Color") Public [] [Cons ("incompl","Black") 0 Public [],Cons ("incompl","White") 0 Public []]] [Func ("incompl","comp_dark") 1 Public (FuncType (TCons ("incompl","Color") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("incompl","Black") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("incompl","White") []) (Comb FuncCall ("Prelude","failed") [])])),Func ("incompl","incomp_dark") 1 Public (FuncType (TCons ("incompl","Color") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("incompl","Black") []) (Comb ConsCall ("Prelude","True") [])])),Func ("incompl","incomp_head") 1 Public (FuncType (TCons ("incompl","MyList") [TVar 0]) (TVar 0)) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("incompl","Cons") [2,3]) (Var 2)])),Func ("incompl","comp_head") 1 Public (FuncType (TCons ("incompl","MyList") [TVar 0]) (TVar 0)) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("incompl","Nil") []) (Comb FuncCall ("Prelude","failed") []),Branch (Pattern ("incompl","Cons") [2,3]) (Var 2)])),Func ("incompl","length") 2 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TCons ("incompl","MyList") [TVar 1]) (TVar 0))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("incompl","Nil") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 0)]),Branch (Pattern ("incompl","Cons") [3,4]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","+") [Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 1)]],Comb FuncCall ("incompl","length") [Var 1,Var 4]])])),Func ("incompl","rev_length") 2 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TCons ("incompl","MyList") [TVar 1]) (TVar 0))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("incompl","Cons") [3,4]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","+") [Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 1)]],Comb FuncCall ("incompl","rev_length") [Var 1,Var 4]]),Branch (Pattern ("incompl","Nil") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 0)])])),Func ("incompl","main") 2 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Num") [TVar 1]) (TCons ("Prelude","(,,,,)") [TCons ("Prelude","Bool") [],TCons ("Prelude","Bool") [],TVar 2,TVar 0,TVar 1]))) (Rule [1,2] (Let [(3,Comb FuncCall ("incompl","comp_dark") [Comb ConsCall ("incompl","Black") []]),(4,Comb FuncCall ("incompl","incomp_dark") [Comb ConsCall ("incompl","Black") []]),(5,Comb FuncCall ("incompl","comp_head") [Comb ConsCall ("incompl","Nil") []]),(6,Comb FuncCall ("incompl","length") [Var 1,Comb ConsCall ("incompl","Nil") []]),(7,Comb FuncCall ("incompl","rev_length") [Var 2,Comb ConsCall ("incompl","Nil") []])] (Comb ConsCall ("Prelude","(,,,,)") [Var 3,Var 4,Var 5,Var 6,Var 7])))] []