Prog "Util" ["Prelude"] [] [Func ("Util","_inst#Prelude.Functor#Prelude.Maybe") 0 Public (TCons ("Prelude","_Dict#Functor") [TCons ("Prelude","Maybe") []]) (Rule [] (Var 0)),Func ("Util","_impl#fmap#Prelude.Functor#Prelude.Maybe") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Maybe") [TVar 1]))) (Rule [] (Var 0)),Func ("Util","_inst#Prelude.Functor#Prelude.IO") 0 Public (TCons ("Prelude","_Dict#Functor") [TCons ("Prelude","IO") []]) (Rule [] (Var 0)),Func ("Util","_impl#fmap#Prelude.Functor#Prelude.IO") 1 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("Prelude","IO") [TVar 0]) (TCons ("Prelude","IO") [TVar 1]))) (Rule [] (Var 0)),Func ("Util","fork") 3 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (FuncType (TVar 2) (TVar 3)) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 2]) (TCons ("Prelude","(,)") [TVar 1,TVar 3])))) (Rule [] (Var 0)),Func ("Util","mapFst") 1 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 2]) (TCons ("Prelude","(,)") [TVar 1,TVar 2]))) (Rule [] (Var 0)),Func ("Util","mapSnd") 1 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("Prelude","(,)") [TVar 2,TVar 0]) (TCons ("Prelude","(,)") [TVar 2,TVar 1]))) (Rule [] (Var 0))] []