Prog "Graph" ["Data.Map","Prelude"] [TypeSyn ("Graph","Set") Public [0] (TCons ("Data.Map","Map") [TVar 0,TCons ("Prelude","()") []]),TypeSyn ("Graph","Vertex") Public [] (TCons ("Prelude","Int") []),TypeSyn ("Graph","Edge") Public [] (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]),TypeSyn ("Graph","Table") Public [0] (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TVar 0]),TypeSyn ("Graph","Graph") Public [] (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]),TypeSyn ("Graph","Forrest") Public [0] (TCons ("Prelude","[]") [TCons ("Graph","Tree") [TVar 0]]),Type ("Graph","Tree") Public [0] [Cons ("Graph","Node") 2 Public [TVar 0,TCons ("Prelude","[]") [TCons ("Graph","Tree") [TVar 0]]]]] [Func ("Graph","!") 2 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [1,2] (Comb FuncCall ("Data.Map","findWithDefault") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Int") [],Comb ConsCall ("Prelude","[]") [],Var 2,Var 1])),Func ("Graph","vertices") 0 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [] (Comb (FuncPartCall 1) ("Data.Map","keys") [])),Func ("Graph","edges") 1 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]])) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("Graph","edges._#lambda1") [Var 1]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Graph","vertices") [],Var 1]])),Func ("Graph","edges._#lambda1") 2 Private (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]))) (Rule [1,2] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Graph","edges._#lambda1._#lambda2") [Var 2],Comb FuncCall ("Graph","!") [Var 1,Var 2]])),Func ("Graph","edges._#lambda1._#lambda2") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]))) (Rule [1,2] (Comb ConsCall ("Prelude","(,)") [Var 1,Var 2])),Func ("Graph","mapT") 0 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TVar 1))) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TVar 0]) (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TVar 1]))) (Rule [] (Comb (FuncPartCall 2) ("Data.Map","mapWithKey") [])),Func ("Graph","buildG") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]) (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])) (Rule [1] (Comb FuncCall ("Data.Map","insertListWith") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Int") [],Comb (FuncPartCall 2) ("Prelude","++") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Graph","buildG.mapSnd.12") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (ConsPartCall 2) ("Prelude",":") [],Comb ConsCall ("Prelude","[]") []]],Var 1],Comb FuncCall ("Data.Map","empty") []])),Func ("Graph","buildG.mapSnd.12") 2 Private (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("Prelude","(,)") [TVar 2,TVar 0]) (TCons ("Prelude","(,)") [TVar 2,TVar 1]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude","(,)") [Var 3,Comb FuncCall ("Prelude","apply") [Var 1,Var 4]])])),Func ("Graph","undirected") 1 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])) (Rule [1] (Comb FuncCall ("Graph","buildG") [Comb FuncCall ("Prelude","++") [Comb FuncCall ("Graph","edges") [Var 1],Comb FuncCall ("Graph","reverseE") [Var 1]]])),Func ("Graph","transposeG") 0 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Graph","buildG") [],Comb (FuncPartCall 1) ("Graph","reverseE") []])),Func ("Graph","reverseE") 1 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Graph","reverseE._#lambda5") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Graph","edges") [Var 1]])),Func ("Graph","reverseE._#lambda5") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 4,Var 3],Var 2])])),Func ("Graph","outdegree") 1 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []])) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Graph","mapT") [],Comb (FuncPartCall 2) ("Graph","outdegree.numEdges.23") []],Var 1])),Func ("Graph","outdegree.numEdges.23") 2 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","Int") []))) (Rule [1,2] (Comb FuncCall ("Prelude","length") [Var 2])),Func ("Graph","indegree") 0 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Graph","outdegree") [],Comb FuncCall ("Graph","transposeG") []])),Func ("Graph","dfs") 2 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Graph","Tree") [TCons ("Prelude","Int") []]]))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Graph","prune") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Graph","generate") [Var 1],Var 2]])),Func ("Graph","generate") 2 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Graph","Tree") [TCons ("Prelude","Int") []]))) (Rule [1,2] (Comb ConsCall ("Graph","Node") [Var 2,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Graph","generate") [Var 1],Comb FuncCall ("Graph","!") [Var 1,Var 2]]])),Func ("Graph","prune") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Graph","Tree") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("Graph","Tree") [TCons ("Prelude","Int") []]])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","snd") [],Comb (FuncPartCall 1) ("Graph","chop") [Comb FuncCall ("Data.Map","empty") []]])),Func ("Graph","chop") 2 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","()") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Graph","Tree") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Graph","Tree") [TCons ("Prelude","Int") []]]]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Var 1,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [3,4]) (Case Flex (Var 3) [Branch (Pattern ("Graph","Node") [5,6]) (Case Rigid (Comb FuncCall ("Data.Map","member") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Int") [],Var 5,Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Graph","chop") [Var 1,Var 4]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Let [(7,Comb FuncCall ("Graph","chop") [Comb FuncCall ("Data.Map","insert") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Int") [],Var 5,Comb ConsCall ("Prelude","()") [],Var 1],Var 6]),(8,Comb FuncCall ("Graph","chop._#selFP5#seen1") [Var 7]),(9,Comb FuncCall ("Graph","chop._#selFP6#as") [Var 7]),(10,Comb FuncCall ("Graph","chop") [Var 8,Var 4]),(11,Comb FuncCall ("Graph","chop._#selFP3#seen2") [Var 10]),(12,Comb FuncCall ("Graph","chop._#selFP4#bs") [Var 10])] (Comb ConsCall ("Prelude","(,)") [Var 11,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Graph","Node") [Var 5,Var 9],Var 12]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("Graph","chop._#selFP5#seen1") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Graph","Tree") [TCons ("Prelude","Int") []]]]) (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","()") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Graph","chop._#selFP6#as") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Graph","Tree") [TCons ("Prelude","Int") []]]]) (TCons ("Prelude","[]") [TCons ("Graph","Tree") [TCons ("Prelude","Int") []]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Graph","chop._#selFP3#seen2") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Graph","Tree") [TCons ("Prelude","Int") []]]]) (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","()") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Graph","chop._#selFP4#bs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Graph","Tree") [TCons ("Prelude","Int") []]]]) (TCons ("Prelude","[]") [TCons ("Graph","Tree") [TCons ("Prelude","Int") []]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Graph","dff") 1 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("Graph","Tree") [TCons ("Prelude","Int") []]])) (Rule [1] (Comb FuncCall ("Graph","dfs") [Var 1,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Graph","vertices") [],Var 1]])),Func ("Graph","preorder") 1 Public (FuncType (TCons ("Graph","Tree") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Graph","Node") [2,3]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Graph","flatten") [Comb (FuncPartCall 1) ("Graph","preorder") []],Var 3]])])),Func ("Graph","postorder") 1 Public (FuncType (TCons ("Graph","Tree") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Graph","Node") [2,3]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Graph","flatten") [Comb (FuncPartCall 1) ("Graph","postorder") []],Var 3],Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]])])),Func ("Graph","flatten") 1 Public (FuncType (FuncType (TCons ("Graph","Tree") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Graph","Tree") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","concat") [],Comb (FuncPartCall 1) ("Prelude","map") [Var 1]])),Func ("Graph","preOrd") 0 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("Graph","flatten") [Comb (FuncPartCall 1) ("Graph","preorder") []],Comb (FuncPartCall 1) ("Graph","dff") []])),Func ("Graph","postOrd") 0 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("Graph","flatten") [Comb (FuncPartCall 1) ("Graph","postorder") []],Comb (FuncPartCall 1) ("Graph","dff") []])),Func ("Graph","preArr") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Graph","Tree") [TCons ("Prelude","Int") []]]) (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []])) (Rule [1] (Comb FuncCall ("Data.Map","fromList") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Int") [],Comb FuncCall ("Prelude","zip") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Graph","flatten") [Comb (FuncPartCall 1) ("Graph","preorder") []],Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Int") [],Lit (Intc 1)]]])),Func ("Graph","topSort") 0 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","reverse") [],Comb FuncCall ("Graph","postOrd") []])),Func ("Graph","components") 0 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("Graph","Tree") [TCons ("Prelude","Int") []]])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Graph","dff") [],Comb (FuncPartCall 1) ("Graph","undirected") []])),Func ("Graph","scc") 1 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("Graph","Tree") [TCons ("Prelude","Int") []]])) (Rule [1] (Comb FuncCall ("Graph","dfs") [Var 1,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reverse") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Graph","postOrd") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Graph","transposeG") [],Var 1]]]])),Func ("Graph","reachable") 2 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Graph","flatten") [Comb (FuncPartCall 1) ("Graph","preorder") []],Comb FuncCall ("Graph","dfs") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]]])),Func ("Graph","path") 3 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Int") [],Var 3],Comb FuncCall ("Graph","reachable") [Var 1,Var 2]]))] []