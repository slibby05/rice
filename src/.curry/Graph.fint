Prog "Graph" ["Data.Map","Prelude"] [TypeSyn ("Graph","Set") Public [0] (TCons ("Data.Map","Map") [TVar 0,TCons ("Prelude","()") []]),TypeSyn ("Graph","Vertex") Public [] (TCons ("Prelude","Int") []),TypeSyn ("Graph","Edge") Public [] (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]),TypeSyn ("Graph","Table") Public [0] (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TVar 0]),TypeSyn ("Graph","Graph") Public [] (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]),TypeSyn ("Graph","Forrest") Public [0] (TCons ("Prelude","[]") [TCons ("Graph","Tree") [TVar 0]]),Type ("Graph","Tree") Public [0] [Cons ("Graph","Node") 2 Public [TVar 0,TCons ("Prelude","[]") [TCons ("Graph","Tree") [TVar 0]]]]] [Func ("Graph","!") 2 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [] (Var 0)),Func ("Graph","vertices") 0 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [] (Var 0)),Func ("Graph","edges") 1 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]])) (Rule [] (Var 0)),Func ("Graph","edges._#lambda1") 2 Private (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]))) (Rule [] (Var 0)),Func ("Graph","edges._#lambda1._#lambda2") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]))) (Rule [] (Var 0)),Func ("Graph","mapT") 0 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TVar 1))) (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TVar 0]) (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TVar 1]))) (Rule [] (Var 0)),Func ("Graph","buildG") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]) (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])) (Rule [] (Var 0)),Func ("Graph","buildG.mapSnd.12") 2 Private (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("Prelude","(,)") [TVar 2,TVar 0]) (TCons ("Prelude","(,)") [TVar 2,TVar 1]))) (Rule [] (Var 0)),Func ("Graph","undirected") 1 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])) (Rule [] (Var 0)),Func ("Graph","transposeG") 0 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])) (Rule [] (Var 0)),Func ("Graph","reverseE") 1 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]])) (Rule [] (Var 0)),Func ("Graph","reverseE._#lambda5") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]))) (Rule [] (Var 0)),Func ("Graph","outdegree") 1 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []])) (Rule [] (Var 0)),Func ("Graph","outdegree.numEdges.23") 2 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("Graph","indegree") 0 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []])) (Rule [] (Var 0)),Func ("Graph","dfs") 2 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Graph","Tree") [TCons ("Prelude","Int") []]]))) (Rule [] (Var 0)),Func ("Graph","generate") 2 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Graph","Tree") [TCons ("Prelude","Int") []]))) (Rule [] (Var 0)),Func ("Graph","prune") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Graph","Tree") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("Graph","Tree") [TCons ("Prelude","Int") []]])) (Rule [] (Var 0)),Func ("Graph","chop") 2 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","()") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Graph","Tree") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Graph","Tree") [TCons ("Prelude","Int") []]]]))) (Rule [] (Var 0)),Func ("Graph","chop._#selFP5#seen1") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Graph","Tree") [TCons ("Prelude","Int") []]]]) (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("Graph","chop._#selFP6#as") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Graph","Tree") [TCons ("Prelude","Int") []]]]) (TCons ("Prelude","[]") [TCons ("Graph","Tree") [TCons ("Prelude","Int") []]])) (Rule [] (Var 0)),Func ("Graph","chop._#selFP3#seen2") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Graph","Tree") [TCons ("Prelude","Int") []]]]) (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("Graph","chop._#selFP4#bs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Graph","Tree") [TCons ("Prelude","Int") []]]]) (TCons ("Prelude","[]") [TCons ("Graph","Tree") [TCons ("Prelude","Int") []]])) (Rule [] (Var 0)),Func ("Graph","dff") 1 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("Graph","Tree") [TCons ("Prelude","Int") []]])) (Rule [] (Var 0)),Func ("Graph","preorder") 1 Public (FuncType (TCons ("Graph","Tree") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (Rule [] (Var 0)),Func ("Graph","postorder") 1 Public (FuncType (TCons ("Graph","Tree") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (Rule [] (Var 0)),Func ("Graph","flatten") 1 Public (FuncType (FuncType (TCons ("Graph","Tree") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Graph","Tree") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Graph","preOrd") 0 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [] (Var 0)),Func ("Graph","postOrd") 0 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [] (Var 0)),Func ("Graph","preArr") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Graph","Tree") [TCons ("Prelude","Int") []]]) (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []])) (Rule [] (Var 0)),Func ("Graph","topSort") 0 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [] (Var 0)),Func ("Graph","components") 0 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("Graph","Tree") [TCons ("Prelude","Int") []]])) (Rule [] (Var 0)),Func ("Graph","scc") 1 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("Graph","Tree") [TCons ("Prelude","Int") []]])) (Rule [] (Var 0)),Func ("Graph","reachable") 2 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [] (Var 0)),Func ("Graph","path") 3 Public (FuncType (TCons ("Data.Map","Map") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0))] []