(Prog "Gas" ["Debug","FlatCurry.Types","FlatRewrite","Prelude","Util"] [] [(Func ("Gas","loop") 3 Public (FuncType (FuncType (TCons ("FlatCurry.Types","FuncDecl") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [(TCons ("FlatCurry.Types","FuncDecl") [])]))) (FuncType (TCons ("Prelude","[]") [(TCons ("FlatCurry.Types","FuncDecl") [])]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("FlatCurry.Types","FuncDecl") [])]),(TCons ("Prelude","Int") [])])))) (Rule [1,2,3] (Case Flex (Var 2) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude","[]") []),(Var 3)])),(Branch (Pattern ("Prelude",":") [4,5]) (Comb FuncCall ("Prelude","$") [(Comb (FuncPartCall 1) ("Debug","trace") [(Comb FuncCall ("Prelude","++") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'F')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'U')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'N')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'C')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'T')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'I')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'O')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'N')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ':')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])]),(Comb FuncCall ("Gas","loop.fname.4") [(Var 4)])])]),(Let [(6,(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Var 1),(Var 4)]),(Var 3)]))] (Case Flex (Var 6) [(Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Util","mapFst") [(Comb (ConsPartCall 1) ("Prelude",":") [(Var 4)])]),(Comb FuncCall ("Gas","loop") [(Var 1),(Var 5),(Var 3)])])),(Branch (Pattern ("Prelude",":") [7,8]) (Comb FuncCall ("Gas","loop") [(Var 1),(Comb FuncCall ("Prelude","++") [(Var 6),(Var 5)]),(Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [(Var 3),(Comb FuncCall ("Prelude","length") [(Var 6)])])]))]))]))]))),(Func ("Gas","loop.fname.4") 1 Private (FuncType (TCons ("FlatCurry.Types","FuncDecl") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("FlatCurry.Types","Func") [2,3,4,5,6]) (Comb FuncCall ("Prelude","snd") [(Var 2)]))]))),(Func ("Gas","start") 1 Public (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("Prelude","Maybe") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]),(TCons ("FlatCurry.Types","Expr") [])])])) (Rule [1] (Comb ConsCall ("Prelude","Just") [(Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude","[]") []),(Var 1)])]))),(Func ("Gas","~~") 2 Public (FuncType (TCons ("Prelude","Maybe") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]),(TCons ("FlatCurry.Types","Expr") [])])]) (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("Prelude","Maybe") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]),(TCons ("FlatCurry.Types","Expr") [])])]))) (Rule [1,2] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","Just") [3]) (Case Flex (Var 3) [(Branch (Pattern ("Prelude","(,)") [4,5]) (Free [6] (Case Rigid (Comb FuncCall ("Prelude","=:=") [(Comb FuncCall ("FlatRewrite","subexpr") [(Var 5)]),(Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude",":") [(Var 6),(Comb ConsCall ("Prelude","[]") [])]),(Var 2)])]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","Just") [(Comb ConsCall ("Prelude","(,)") [(Comb FuncCall ("Prelude","++") [(Var 4),(Comb ConsCall ("Prelude",":") [(Var 6),(Comb ConsCall ("Prelude","[]") [])])]),(Var 2)])])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))])))]))]))),(Func ("Gas","~>") 2 Public (FuncType (TCons ("Prelude","Maybe") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]),(TCons ("FlatCurry.Types","Expr") [])])]) (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("Prelude","Maybe") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]),(TCons ("FlatCurry.Types","Expr") [])])]))) (Rule [1,2] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","Just") [3]) (Case Flex (Var 3) [(Branch (Pattern ("Prelude","(,)") [4,5]) (Free [6] (Case Rigid (Comb FuncCall ("Prelude","=:=") [(Comb FuncCall ("FlatRewrite","subexpr") [(Var 5)]),(Comb ConsCall ("Prelude","(,)") [(Var 6),(Var 2)])]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","Just") [(Comb ConsCall ("Prelude","(,)") [(Comb FuncCall ("Prelude","++") [(Var 4),(Var 6)]),(Var 2)])])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))])))]))]))),(Func ("Gas","~~>") 2 Public (FuncType (TCons ("Prelude","Maybe") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]),(TCons ("FlatCurry.Types","Expr") [])])]) (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("Prelude","Maybe") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]),(TCons ("FlatCurry.Types","Expr") [])])]))) (Rule [1,2] (Comb FuncCall ("Gas","~>") [(Comb FuncCall ("Gas","~~") [(Var 1),(Comb FuncCall ("Prelude","unknown") [])]),(Var 2)]))),(Func ("Gas","satisfies") 2 Public (FuncType (TCons ("Prelude","Maybe") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]),(TCons ("FlatCurry.Types","Expr") [])])]) (FuncType (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("Prelude","Bool") [])) (TCons ("Prelude","Maybe") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]),(TCons ("FlatCurry.Types","Expr") [])])]))) (Rule [1,2] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","Just") [3]) (Case Flex (Var 3) [(Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Comb FuncCall ("Prelude","apply") [(Var 2),(Var 5)]) [(Branch (Pattern ("Prelude","True") []) (Var 1)),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))]))),(Func ("Gas","clet") 0 Public (TCons ("FlatCurry.Types","Expr") []) (Rule [] (Comb ConsCall ("FlatCurry.Types","Let") [(Comb FuncCall ("Prelude","unknown") []),(Comb FuncCall ("Prelude","unknown") [])]))),(Func ("Gas","ccase") 0 Public (TCons ("FlatCurry.Types","Expr") []) (Rule [] (Comb ConsCall ("FlatCurry.Types","Case") [(Comb FuncCall ("Prelude","unknown") []),(Comb FuncCall ("Prelude","unknown") []),(Comb FuncCall ("Prelude","unknown") [])]))),(Func ("Gas","ccomb") 0 Public (TCons ("FlatCurry.Types","Expr") []) (Rule [] (Comb ConsCall ("FlatCurry.Types","Comb") [(Comb FuncCall ("Prelude","unknown") []),(Comb FuncCall ("Prelude","unknown") []),(Comb FuncCall ("Prelude","unknown") [])]))),(Func ("Gas","cor") 0 Public (TCons ("FlatCurry.Types","Expr") []) (Rule [] (Comb ConsCall ("FlatCurry.Types","Or") [(Comb FuncCall ("Prelude","unknown") []),(Comb FuncCall ("Prelude","unknown") [])]))),(Func ("Gas","cfree") 0 Public (TCons ("FlatCurry.Types","Expr") []) (Rule [] (Comb ConsCall ("FlatCurry.Types","Free") [(Comb FuncCall ("Prelude","unknown") []),(Comb FuncCall ("Prelude","unknown") [])]))),(Func ("Gas","ctype") 0 Public (TCons ("FlatCurry.Types","Expr") []) (Rule [] (Comb ConsCall ("FlatCurry.Types","Typed") [(Comb FuncCall ("Prelude","unknown") []),(Comb FuncCall ("Prelude","unknown") [])])))] [])