Prog "take" ["Prelude"] [] [Func ("take","mytake") 4 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","[]") [TVar 1]))))) (Rule [1,2,3,4] (Case Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 3],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 2],Lit (Intc 0)]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Var 5,Comb FuncCall ("take","mytake") [Var 1,Var 2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","-") [Var 2],Var 3],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 2],Lit (Intc 1)]],Var 6]])])])),Func ("take","main") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (Rule [] (Comb FuncCall ("Prelude","take") [Lit (Intc 3),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude","[]") []]]]]]))] []