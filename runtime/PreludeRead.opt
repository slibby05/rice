Prog "PreludeRead" ["PreludeBase","PreludeCompare","PreludeNum","PreludeList","PreludeString"] [] [Func ("Prelude","_def#readsPrec#Prelude.Read") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [2] (Let [(3,Comb (FuncPartCall 1) ("Prelude","prim_error") [])] (Let [(4,Comb ConsCall ("StringConst","No instance or default method for class operation `readsPrec'") [])] (Comb FuncCall ("Prelude","$##") [Var 3,Var 4])))),Func ("Prelude","makeJust") 1 Public (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Let [(5,Comb ConsCall ("Prelude","Just") [Var 3])] (Comb ConsCall ("Prelude","(,)") [Var 5,Var 4]))])),Func ("Prelude","readNothing") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [2] (Let [(3,Comb FuncCall ("Prelude","take#worker") [Var 2,Lit (Intc 7)])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char") [])] (Let [(6,Comb ConsCall ("Prelude","_Dict#Eq") [Var 4,Var 5])] (Let [(7,Comb ConsCall ("StringConst","Nothing") [])] (Let [(-8,Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Var 6,Var 3,Var 7])] (Case Rigid (Var (-8)) [Branch (Pattern ("Prelude","True") []) (Let [(9,Comb FuncCall ("Prelude","drop#worker") [Var 2,Lit (Intc 7)])] (Let [(10,Comb ConsCall ("Prelude","Nothing") [])] (Let [(11,Comb ConsCall ("Prelude","(,)") [Var 10,Var 9])] (Let [(12,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 11,Var 12]))))),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])))))))),Func ("Prelude","readFalse") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Bool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [2] (Let [(3,Comb FuncCall ("Prelude","take#worker") [Var 2,Lit (Intc 5)])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char") [])] (Let [(6,Comb ConsCall ("Prelude","_Dict#Eq") [Var 4,Var 5])] (Let [(7,Comb ConsCall ("StringConst","False") [])] (Let [(-8,Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Var 6,Var 3,Var 7])] (Case Rigid (Var (-8)) [Branch (Pattern ("Prelude","True") []) (Let [(9,Comb FuncCall ("Prelude","drop#worker") [Var 2,Lit (Intc 5)])] (Let [(10,Comb ConsCall ("Prelude","False") [])] (Let [(11,Comb ConsCall ("Prelude","(,)") [Var 10,Var 9])] (Let [(12,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 11,Var 12]))))),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])))))))),Func ("Prelude","readTrue") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Bool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [2] (Let [(3,Comb FuncCall ("Prelude","take#worker") [Var 2,Lit (Intc 4)])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char") [])] (Let [(6,Comb ConsCall ("Prelude","_Dict#Eq") [Var 4,Var 5])] (Let [(7,Comb ConsCall ("StringConst","True") [])] (Let [(8,Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Var 6,Var 3,Var 7])] (Case Rigid (Var 8) [Branch (Pattern ("Prelude","True") []) (Let [(9,Comb FuncCall ("Prelude","drop#worker") [Var 2,Lit (Intc 4)])] (Let [(10,Var 8)] (Let [(11,Comb ConsCall ("Prelude","(,)") [Var 10,Var 9])] (Let [(12,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 11,Var 12]))))),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])))))))),Func ("Prelude","makeRight") 1 Public (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Let [(5,Comb ConsCall ("Prelude","Right") [Var 3])] (Comb ConsCall ("Prelude","(,)") [Var 5,Var 4]))])),Func ("Prelude","makeLeft") 1 Public (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Let [(5,Comb ConsCall ("Prelude","Left") [Var 3])] (Comb ConsCall ("Prelude","(,)") [Var 5,Var 4]))])),Func ("Prelude","readDotNat") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Let [(3,Comb ConsCall ("","float") [Lit (Floatc 0.0)])] (Let [(4,Var 2)] (Let [(5,Comb ConsCall ("Prelude","(,)") [Var 3,Var 4])] (Let [(6,Var 2)] (Comb ConsCall ("Prelude",":") [Var 5,Var 6]))))),Branch (Pattern ("Prelude",":") [7,8]) (Case Flex (Var 8) [Branch (Pattern ("Prelude","[]") []) (Let [(9,Comb ConsCall ("","float") [Lit (Floatc 0.0)])] (Let [(10,Var 8)] (Let [(11,Comb ConsCall ("Prelude",":") [Var 7,Var 10])] (Let [(12,Comb ConsCall ("Prelude","(,)") [Var 9,Var 11])] (Let [(13,Var 8)] (Comb ConsCall ("Prelude",":") [Var 12,Var 13])))))),Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Var 7) [Branch (Pattern ("","char") [16]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 16,Lit (Charc '.')]),Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("","char") [17]) (Let [(18,Comb FuncCall ("Prelude","primOrd") [Var 17])] (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Lit (Intc 48),Var 18]),Branch (Pattern ("Prelude","True") []) (Let [(19,Comb FuncCall ("Prelude","primOrd") [Var 17])] (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Lit (Intc 58),Var 19]),Branch (Pattern ("Prelude","True") []) (Let [(20,Comb ConsCall ("","float") [Lit (Floatc 0.0)])] (Let [(21,Var 7)] (Let [(22,Var 14)] (Let [(23,Comb ConsCall ("Prelude",":") [Var 22,Var 15])] (Let [(24,Comb ConsCall ("Prelude",":") [Var 21,Var 23])] (Let [(25,Comb ConsCall ("Prelude","(,)") [Var 20,Var 24])] (Let [(26,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 25,Var 26])))))))),Branch (Pattern ("Prelude","False") []) (Let [(27,Var 14)] (Let [(28,Comb ConsCall ("Prelude",":") [Var 27,Var 15])] (Let [(29,Comb FuncCall ("Prelude","readDotNat1") [Var 28])] (Let [(30,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 29,Var 30])))))])),Branch (Pattern ("Prelude","False") []) (Let [(31,Comb ConsCall ("","float") [Lit (Floatc 0.0)])] (Let [(32,Var 7)] (Let [(33,Var 14)] (Let [(34,Comb ConsCall ("Prelude",":") [Var 33,Var 15])] (Let [(35,Comb ConsCall ("Prelude",":") [Var 32,Var 34])] (Let [(36,Comb ConsCall ("Prelude","(,)") [Var 31,Var 35])] (Let [(37,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 36,Var 37]))))))))]))]),Branch (Pattern ("Prelude","False") []) (Let [(38,Comb ConsCall ("","float") [Lit (Floatc 0.0)])] (Let [(39,Var 7)] (Let [(40,Var 8)] (Let [(41,Comb ConsCall ("Prelude",":") [Var 39,Var 40])] (Let [(42,Comb ConsCall ("Prelude","(,)") [Var 38,Var 41])] (Let [(43,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 42,Var 43])))))))])])])])),Func ("Prelude","readCharLiteral") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Var 2),Branch (Pattern ("Prelude",":") [3,4]) (Let [(5,Comb ConsCall ("Prelude","(,)") [Var 3,Var 4])] (Let [(6,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 5,Var 6])))])),Func ("Prelude","readNatLiteral") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Var 2),Branch (Pattern ("Prelude",":") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("","char") [5]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 5,Lit (Charc '-')]),Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 4) [Branch (Pattern ("Prelude","[]") []) (Var 4),Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Var 6) [Branch (Pattern ("","char") [8]) (Let [(9,Comb FuncCall ("Prelude","primOrd") [Var 8])] (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Lit (Intc 48),Var 9]),Branch (Pattern ("Prelude","True") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Lit (Intc 58),Var 9]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Let [(10,Var 6)] (Let [(11,Comb ConsCall ("Prelude",":") [Var 10,Var 7])] (Let [(12,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(-13,Comb FuncCall ("Prelude","readNat") [Var 11,Var 12])] (Case Rigid (Var (-13)) [Branch (Pattern ("Prelude","(,)") [14,15]) (Let [(16,Comb FuncCall ("Prelude","_impl#negate#Prelude.Num#Prelude.Int") [Var 14])] (Let [(17,Comb ConsCall ("Prelude","(,)") [Var 16,Var 15])] (Let [(18,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 17,Var 18]))))])))))]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]))])]),Branch (Pattern ("Prelude","False") []) (Let [(19,Comb FuncCall ("Prelude","primOrd") [Var 5])] (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Lit (Intc 48),Var 19]),Branch (Pattern ("Prelude","True") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Lit (Intc 58),Var 19]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Let [(20,Var 3)] (Let [(21,Comb ConsCall ("Prelude",":") [Var 20,Var 4])] (Let [(22,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(23,Comb FuncCall ("Prelude","readNat") [Var 21,Var 22])] (Let [(24,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 23,Var 24]))))))]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]))])])])),Func ("Prelude","readENat") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Let [(3,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(4,Var 2)] (Let [(5,Comb ConsCall ("Prelude","(,)") [Var 3,Var 4])] (Let [(6,Var 2)] (Comb ConsCall ("Prelude",":") [Var 5,Var 6]))))),Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Var 7) [Branch (Pattern ("","char") [9]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 9,Lit (Charc 'e')]),Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","readNatLiteral") [Var 8]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 9,Lit (Charc 'E')]),Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","readNatLiteral") [Var 8]),Branch (Pattern ("Prelude","False") []) (Let [(10,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(11,Var 7)] (Let [(12,Comb ConsCall ("Prelude",":") [Var 11,Var 8])] (Let [(13,Comb ConsCall ("Prelude","(,)") [Var 10,Var 12])] (Let [(14,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 13,Var 14]))))))])])])])),Func ("Prelude","readPosFloat") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Var 2),Branch (Pattern ("Prelude",":") [3,4]) (Let [(5,Var 2)] (Let [(6,Comb FuncCall ("Prelude","readNatLiteral") [Var 5])] (Case Rigid (Var 6) [Branch (Pattern ("Prelude","[]") []) (Var 6),Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Var 7) [Branch (Pattern ("Prelude","(,)") [9,10]) (Case Rigid (Var 8) [Branch (Pattern ("Prelude","[]") []) (Let [(11,Comb FuncCall ("Prelude","readDotNat") [Var 10])] (Case Rigid (Var 11) [Branch (Pattern ("Prelude","[]") []) (Var 11),Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Var 12) [Branch (Pattern ("Prelude","(,)") [14,15]) (Case Rigid (Var 13) [Branch (Pattern ("Prelude","[]") []) (Case Flex (Var 15) [Branch (Pattern ("Prelude","[]") []) (Let [(16,Comb FuncCall ("Prelude","readPosFloat#A0") [Var 9,Var 14])] (Let [(17,Comb ConsCall ("","float") [Lit (Floatc 10.0)])] (Let [(18,Comb FuncCall ("Prelude","powaux#worker") [Var 17,Lit (Floatc 1.0),Lit (Intc 0)])] (Let [(19,Comb FuncCall ("Prelude","_impl#*#Prelude.Num#Prelude.Float") [Var 16,Var 18])] (Let [(20,Var 15)] (Let [(21,Comb ConsCall ("Prelude","(,)") [Var 19,Var 20])] (Let [(22,Var 15)] (Comb ConsCall ("Prelude",":") [Var 21,Var 22])))))))),Branch (Pattern ("Prelude",":") [23,24]) (Case Rigid (Var 23) [Branch (Pattern ("","char") [25]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 25,Lit (Charc 'e')]),Branch (Pattern ("Prelude","True") []) (Let [(26,Comb FuncCall ("Prelude","readNatLiteral") [Var 24])] (Case Rigid (Var 26) [Branch (Pattern ("Prelude","[]") []) (Var 26),Branch (Pattern ("Prelude",":") [27,28]) (Case Rigid (Var 27) [Branch (Pattern ("Prelude","(,)") [29,30]) (Case Rigid (Var 28) [Branch (Pattern ("Prelude","[]") []) (Let [(31,Comb FuncCall ("Prelude","readPosFloat#A2") [Var 9,Var 14])] (Let [(32,Comb FuncCall ("Prelude","readPosFloat#A1") [Var 29])] (Let [(33,Comb FuncCall ("Prelude","_impl#*#Prelude.Num#Prelude.Float") [Var 31,Var 32])] (Let [(34,Comb ConsCall ("Prelude","(,)") [Var 33,Var 30])] (Let [(35,Var 28)] (Comb ConsCall ("Prelude",":") [Var 34,Var 35])))))),Branch (Pattern ("Prelude",":") [36,37]) (Var 13)])])])),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 25,Lit (Charc 'E')]),Branch (Pattern ("Prelude","True") []) (Let [(38,Comb FuncCall ("Prelude","readNatLiteral") [Var 24])] (Case Rigid (Var 38) [Branch (Pattern ("Prelude","[]") []) (Var 38),Branch (Pattern ("Prelude",":") [39,40]) (Case Rigid (Var 39) [Branch (Pattern ("Prelude","(,)") [41,42]) (Case Rigid (Var 40) [Branch (Pattern ("Prelude","[]") []) (Let [(43,Comb FuncCall ("Prelude","readPosFloat#A4") [Var 9,Var 14])] (Let [(44,Comb FuncCall ("Prelude","readPosFloat#A3") [Var 41])] (Let [(45,Comb FuncCall ("Prelude","_impl#*#Prelude.Num#Prelude.Float") [Var 43,Var 44])] (Let [(46,Comb ConsCall ("Prelude","(,)") [Var 45,Var 42])] (Let [(47,Var 40)] (Comb ConsCall ("Prelude",":") [Var 46,Var 47])))))),Branch (Pattern ("Prelude",":") [48,49]) (Var 13)])])])),Branch (Pattern ("Prelude","False") []) (Let [(50,Comb FuncCall ("Prelude","readPosFloat#A5") [Var 9,Var 14])] (Let [(51,Comb ConsCall ("","float") [Lit (Floatc 10.0)])] (Let [(52,Comb FuncCall ("Prelude","powaux#worker") [Var 51,Lit (Floatc 1.0),Lit (Intc 0)])] (Let [(53,Comb FuncCall ("Prelude","_impl#*#Prelude.Num#Prelude.Float") [Var 50,Var 52])] (Let [(54,Var 23)] (Let [(55,Comb ConsCall ("Prelude",":") [Var 54,Var 24])] (Let [(56,Comb ConsCall ("Prelude","(,)") [Var 53,Var 55])] (Let [(57,Var 13)] (Comb ConsCall ("Prelude",":") [Var 56,Var 57])))))))))])])])]),Branch (Pattern ("Prelude",":") [58,59]) (Var 8)])])])),Branch (Pattern ("Prelude",":") [60,61]) (Comb ConsCall ("Prelude","[]") [])])])])))])),Func ("Prelude","readPosFloat#A5") 2 Public (TVar 0) (Rule [2,3] (Case Rigid (Var 2) [Branch (Pattern ("","int") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","float") [5]) (Let [(6,Comb FuncCall ("Prelude","primI2F") [Var 4])] (Let [(7,Comb FuncCall ("Prelude","primAddFloat") [Var 6,Var 5])] (Comb ConsCall ("","float") [Var 7])))])])),Func ("Prelude","readPosFloat#A4") 2 Public (TVar 0) (Rule [2,3] (Case Rigid (Var 2) [Branch (Pattern ("","int") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","float") [5]) (Let [(6,Comb FuncCall ("Prelude","primI2F") [Var 4])] (Let [(7,Comb FuncCall ("Prelude","primAddFloat") [Var 6,Var 5])] (Comb ConsCall ("","float") [Var 7])))])])),Func ("Prelude","readPosFloat#A3") 1 Public (TVar 0) (Rule [2] (Case Rigid (Var 2) [Branch (Pattern ("","int") [3]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Lit (Intc 0),Var 3]),Branch (Pattern ("Prelude","True") []) (Let [(4,Comb ConsCall ("","float") [Lit (Floatc 10.0)])] (Comb FuncCall ("Prelude","powaux#worker") [Var 4,Lit (Floatc 1.0),Var 3])),Branch (Pattern ("Prelude","False") []) (Let [(5,Comb FuncCall ("Prelude","primSubInt") [Lit (Intc 0),Var 3])] (Let [(6,Comb ConsCall ("","float") [Lit (Floatc 10.0)])] (Let [(-7,Comb FuncCall ("Prelude","powaux#worker") [Var 6,Lit (Floatc 1.0),Var 5])] (Case Rigid (Var (-7)) [Branch (Pattern ("","float") [8]) (Let [(9,Comb FuncCall ("Prelude","primDivFloat") [Lit (Floatc 1.0),Var 8])] (Comb ConsCall ("","float") [Var 9]))]))))])])),Func ("Prelude","readPosFloat#A2") 2 Public (TVar 0) (Rule [2,3] (Case Rigid (Var 2) [Branch (Pattern ("","int") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","float") [5]) (Let [(6,Comb FuncCall ("Prelude","primI2F") [Var 4])] (Let [(7,Comb FuncCall ("Prelude","primAddFloat") [Var 6,Var 5])] (Comb ConsCall ("","float") [Var 7])))])])),Func ("Prelude","readPosFloat#A1") 1 Public (TVar 0) (Rule [2] (Case Rigid (Var 2) [Branch (Pattern ("","int") [3]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Lit (Intc 0),Var 3]),Branch (Pattern ("Prelude","True") []) (Let [(4,Comb ConsCall ("","float") [Lit (Floatc 10.0)])] (Comb FuncCall ("Prelude","powaux#worker") [Var 4,Lit (Floatc 1.0),Var 3])),Branch (Pattern ("Prelude","False") []) (Let [(5,Comb FuncCall ("Prelude","primSubInt") [Lit (Intc 0),Var 3])] (Let [(6,Comb ConsCall ("","float") [Lit (Floatc 10.0)])] (Let [(-7,Comb FuncCall ("Prelude","powaux#worker") [Var 6,Lit (Floatc 1.0),Var 5])] (Case Rigid (Var (-7)) [Branch (Pattern ("","float") [8]) (Let [(9,Comb FuncCall ("Prelude","primDivFloat") [Lit (Floatc 1.0),Var 8])] (Comb ConsCall ("","float") [Var 9]))]))))])])),Func ("Prelude","readPosFloat#A0") 2 Public (TVar 0) (Rule [2,3] (Case Rigid (Var 2) [Branch (Pattern ("","int") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","float") [5]) (Let [(6,Comb FuncCall ("Prelude","primI2F") [Var 4])] (Let [(7,Comb FuncCall ("Prelude","primAddFloat") [Var 6,Var 5])] (Comb ConsCall ("","float") [Var 7])))])])),Func ("Prelude","readFloatLiteral") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Var 2),Branch (Pattern ("Prelude",":") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("","char") [5]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 5,Lit (Charc '-')]),Branch (Pattern ("Prelude","True") []) (Let [(6,Comb FuncCall ("Prelude","readPosFloat") [Var 4])] (Case Rigid (Var 6) [Branch (Pattern ("Prelude","[]") []) (Var 6),Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Var 7) [Branch (Pattern ("Prelude","(,)") [9,10]) (Case Rigid (Var 8) [Branch (Pattern ("Prelude","[]") []) (Let [(11,Comb FuncCall ("Prelude","_impl#negate#Prelude.Num#Prelude.Float") [Var 9])] (Let [(12,Comb ConsCall ("Prelude","(,)") [Var 11,Var 10])] (Let [(13,Var 8)] (Comb ConsCall ("Prelude",":") [Var 12,Var 13])))),Branch (Pattern ("Prelude",":") [14,15]) (Comb ConsCall ("Prelude","[]") [])])])])),Branch (Pattern ("Prelude","False") []) (Let [(16,Var 3)] (Let [(17,Comb ConsCall ("Prelude",":") [Var 16,Var 4])] (Comb FuncCall ("Prelude","readPosFloat") [Var 17])))])])])),Func ("Prelude","readStringLiteral") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","[]") []) (Var 2),Branch (Pattern ("Prelude",":") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("","char") [5]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 5,Lit (Charc '"')]),Branch (Pattern ("Prelude","True") []) (Let [(6,Comb (FuncPartCall 1) ("Prelude","readStringLiteral#P1") [])] (Let [(-7,Comb FuncCall ("Prelude","span") [Var 6,Var 4])] (Case Rigid (Var (-7)) [Branch (Pattern ("Prelude","(,)") [8,9]) (Let [(10,Comb (FuncPartCall 2) ("Prelude","readStringLiteral#P0") [Var 8])] (Let [(11,Comb FuncCall ("Prelude","build") [Var 10])] (Let [(12,Comb FuncCall ("Prelude","tail") [Var 9])] (Let [(13,Comb ConsCall ("","char") [Lit (Charc '"')])] (Let [(14,Comb ConsCall ("Prelude",":") [Var 13,Var 11])] (Let [(15,Comb ConsCall ("Prelude","(,)") [Var 14,Var 12])] (Let [(16,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 15,Var 16]))))))))]))),Branch (Pattern ("Prelude","False") []) (Let [(17,Comb ConsCall ("Prelude","[]") [])] (Let [(18,Var 3)] (Let [(19,Comb ConsCall ("Prelude",":") [Var 18,Var 4])] (Let [(20,Comb ConsCall ("Prelude","(,)") [Var 17,Var 19])] (Let [(21,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 20,Var 21]))))))])])])),Func ("Prelude","readStringLiteral#P1") 1 Public (TVar 0) (Rule [2] (Case Rigid (Var 2) [Branch (Pattern ("","char") [3]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Lit (Charc '"'),Var 3]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("Prelude","readStringLiteral#P0") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb ConsCall ("StringConst","\"") [])] (Let [(6,Comb FuncCall ("Prelude","foldr") [Var 3,Var 4,Var 5])] (Comb FuncCall ("Prelude","foldr") [Var 3,Var 6,Var 2])))),Func ("Prelude","readList") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Read") [3,4]) (Var 4)])),Func ("Prelude","readsPrec") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Read") [3,4]) (Var 3)])),Func ("Prelude","readSigned.read'.490._#lambda355._#lambda359") 3 Public (FuncType (TCons ("Prelude","_Dict#Real") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [2,-3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Let [(7,Comb FuncCall ("Prelude","readSigned.read'.490._#lambda355._#lambda359#A6") [Var 2])] (Let [(8,Comb FuncCall ("Prelude","negate") [Var 7])] (Let [(9,Comb FuncCall ("Prelude","apply") [Var 8,Var 5])] (Let [(10,Comb ConsCall ("Prelude","(,)") [Var 9,Var 6])] (Comb ConsCall ("Prelude",":") [Var 10,Var 4])))))])),Func ("Prelude","readSigned.read'.490._#lambda355._#lambda359#A6") 1 Public (TVar 0) (Rule [2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Real") [3,4]) (Var 3)])),Func ("Prelude","readSigned.read''.490._#lambda363._#lambda367") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [2,-3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case Rigid (Var 6) [Branch (Pattern ("Prelude","[]") []) (Let [(7,Comb ConsCall ("Prelude","(,)") [Var 5,Var 2])] (Comb ConsCall ("Prelude",":") [Var 7,Var 4])),Branch (Pattern ("Prelude",":") [8,9]) (Var 4)])])),Func ("Prelude","readSigned.read''.490._#lambda363") 3 Public (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [2,-3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Let [(7,Comb FuncCall ("Prelude","apply") [Var 2,Var 5])] (Let [(8,Comb (FuncPartCall 2) ("Prelude","readSigned.read''.490._#lambda363._#lambda367") [Var 6])] (Let [(9,Comb ConsCall ("Prelude","[]") [])] (Let [(10,Comb FuncCall ("Prelude","foldr") [Var 8,Var 9,Var 7])] (Let [(11,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 10,Var 4])] (Comb FuncCall ("Prelude","build") [Var 11]))))))])),Func ("Prelude","readSigned.read'.490._#lambda355") 4 Public (FuncType (TCons ("Prelude","_Dict#Real") [TVar 0]) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [2,3,-4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Var 8) [Branch (Pattern ("","char") [10]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 10,Lit (Charc '-')]),Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude","[]") []) (Let [(11,Comb FuncCall ("Prelude","lex") [Var 7])] (Let [(12,Comb (FuncPartCall 2) ("Prelude","readSigned.read''.490._#lambda363") [Var 3])] (Let [(13,Var 9)] (Let [(14,Comb FuncCall ("Prelude","foldr") [Var 12,Var 13,Var 11])] (Let [(15,Comb (FuncPartCall 2) ("Prelude","readSigned.read'.490._#lambda355._#lambda359") [Var 2])] (Let [(16,Var 9)] (Let [(17,Comb FuncCall ("Prelude","foldr") [Var 15,Var 16,Var 14])] (Let [(18,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 17,Var 5])] (Comb FuncCall ("Prelude","build") [Var 18]))))))))),Branch (Pattern ("Prelude",":") [19,20]) (Var 5)]),Branch (Pattern ("Prelude","False") []) (Var 5)])]),Branch (Pattern ("Prelude","[]") []) (Var 5)])])),Func ("Prelude","readSigned.read'.490") 3 Public (FuncType (TCons ("Prelude","_Dict#Real") [TVar 0]) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","lex") [Var 4])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","readSigned.read''.490._#lambda363") [Var 3])] (Let [(7,Comb ConsCall ("Prelude","[]") [])] (Let [(8,Comb FuncCall ("Prelude","foldr") [Var 6,Var 7,Var 5])] (Let [(9,Comb FuncCall ("Prelude","lex") [Var 4])] (Let [(10,Comb (FuncPartCall 2) ("Prelude","readSigned.read'.490._#lambda355") [Var 2,Var 3])] (Let [(11,Comb ConsCall ("Prelude","[]") [])] (Let [(12,Comb FuncCall ("Prelude","foldr") [Var 10,Var 11,Var 9])] (Let [(13,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 8,Var 12])] (Comb FuncCall ("Prelude","build") [Var 13]))))))))))),Func ("Prelude","read._#lambda346._#lambda350") 3 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [2,-3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case Rigid (Var 5) [Branch (Pattern ("Prelude","[]") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Var 2,Var 4]),Branch (Pattern ("Prelude",":") [7,8]) (Var 4)]),Branch (Pattern ("Prelude",":") [9,10]) (Var 4)])])),Func ("Prelude","read._#lambda346") 2 Public (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [-2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Let [(6,Comb FuncCall ("Prelude","lex") [Var 5])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","read._#lambda346._#lambda350") [Var 4])] (Let [(8,Comb ConsCall ("Prelude","[]") [])] (Let [(9,Comb FuncCall ("Prelude","foldr") [Var 7,Var 8,Var 6])] (Let [(10,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 9,Var 3])] (Comb FuncCall ("Prelude","build") [Var 10]))))))])),Func ("Prelude","readParen.mandatory.470._#lambda334._#lambda338._#lambda342") 3 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [2,-3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case Rigid (Var 5) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Var 7) [Branch (Pattern ("","char") [9]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 9,Lit (Charc ')')]),Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude","[]") []) (Let [(10,Comb ConsCall ("Prelude","(,)") [Var 2,Var 6])] (Comb ConsCall ("Prelude",":") [Var 10,Var 4])),Branch (Pattern ("Prelude",":") [11,12]) (Var 4)]),Branch (Pattern ("Prelude","False") []) (Var 4)])]),Branch (Pattern ("Prelude","[]") []) (Var 4)])])),Func ("Prelude","readParen.mandatory.470._#lambda334._#lambda338") 2 Public (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [-2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Let [(6,Comb FuncCall ("Prelude","lex") [Var 5])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","readParen.mandatory.470._#lambda334._#lambda338._#lambda342") [Var 4])] (Let [(8,Comb ConsCall ("Prelude","[]") [])] (Let [(9,Comb FuncCall ("Prelude","foldr") [Var 7,Var 8,Var 6])] (Let [(10,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 9,Var 3])] (Comb FuncCall ("Prelude","build") [Var 10]))))))])),Func ("Prelude","readParen.mandatory.470") 2 Public (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [2,-3] (Let [(4,Comb FuncCall ("Prelude","lex") [Var 3])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","readParen.mandatory.470._#lambda334") [Var 2])] (Let [(6,Comb ConsCall ("Prelude","[]") [])] (Comb FuncCall ("Prelude","foldr") [Var 5,Var 6,Var 4]))))),Func ("Prelude","readParen.optional.470") 2 Public (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","apply") [Var 2,Var 3])] (Let [(5,Comb FuncCall ("Prelude","lex") [Var 3])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","readParen.mandatory.470._#lambda334") [Var 2])] (Let [(7,Comb ConsCall ("Prelude","[]") [])] (Let [(8,Comb FuncCall ("Prelude","foldr") [Var 6,Var 7,Var 5])] (Let [(9,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 4,Var 8])] (Comb FuncCall ("Prelude","build") [Var 9])))))))),Func ("Prelude","readParen") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [-2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","True") []) (Comb (FuncPartCall 1) ("Prelude","readParen.mandatory.470") [Var 3]),Branch (Pattern ("Prelude","False") []) (Comb (FuncPartCall 1) ("Prelude","readParen.optional.470") [Var 3])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Bool") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Bool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [2,3] (Let [(4,Comb (FuncPartCall 1) ("Prelude","readTrue") [])] (Let [(5,Comb FuncCall ("Prelude","readParen.optional.470") [Var 4,Var 3])] (Let [(6,Comb (FuncPartCall 1) ("Prelude","readFalse") [])] (Let [(7,Comb FuncCall ("Prelude","readParen.optional.470") [Var 6,Var 3])] (Let [(8,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 5,Var 7])] (Comb FuncCall ("Prelude","build") [Var 8]))))))),Func ("Prelude","reads") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [2] (Let [(3,Comb FuncCall ("Prelude","readsPrec") [Var 2])] (Let [(4,Comb ConsCall ("","int") [Lit (Intc 0)])] (Comb FuncCall ("Prelude","apply") [Var 3,Var 4])))),Func ("Prelude","readJust") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","take#worker") [Var 3,Lit (Intc 4)])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char") [])] (Let [(7,Comb ConsCall ("Prelude","_Dict#Eq") [Var 5,Var 6])] (Let [(8,Comb ConsCall ("StringConst","Just") [])] (Let [(-9,Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Var 7,Var 4,Var 8])] (Case Rigid (Var (-9)) [Branch (Pattern ("Prelude","True") []) (Let [(10,Comb FuncCall ("Prelude","readsPrec") [Var 2])] (Let [(11,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(12,Comb FuncCall ("Prelude","apply") [Var 10,Var 11])] (Let [(13,Comb FuncCall ("Prelude","drop#worker") [Var 3,Lit (Intc 4)])] (Let [(14,Comb FuncCall ("Prelude","apply") [Var 12,Var 13])] (Let [(15,Comb (FuncPartCall 3) ("Prelude","readJust#P2") [])] (Let [(16,Comb (FuncPartCall 1) ("Prelude","id") [])] (Comb FuncCall ("Prelude","build_fold") [Var 15,Var 16,Var 14])))))))),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])))))))),Func ("Prelude","readJust#P2") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","makeJust") [Var 3])] (Comb FuncCall ("Prelude","apply") [Var 2,Var 5,Var 4]))),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe#A8") [Var 3])] (Let [(6,Comb (FuncPartCall 1) ("Prelude","readNothing") [])] (Let [(7,Comb FuncCall ("Prelude","readParen") [Var 5,Var 6])] (Let [(8,Comb FuncCall ("Prelude","apply") [Var 7,Var 4])] (Let [(9,Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe#A7") [Var 3])] (Let [(10,Comb (FuncPartCall 1) ("Prelude","readJust") [Var 2])] (Let [(11,Comb FuncCall ("Prelude","readParen") [Var 9,Var 10])] (Let [(12,Comb FuncCall ("Prelude","apply") [Var 11,Var 4])] (Let [(13,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 8,Var 12])] (Comb FuncCall ("Prelude","build") [Var 13]))))))))))),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe#A8") 1 Public (TVar 0) (Rule [2] (Case Rigid (Var 2) [Branch (Pattern ("","int") [3]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Var 3,Lit (Intc 10)]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe#A7") 1 Public (TVar 0) (Rule [2] (Case Rigid (Var 2) [Branch (Pattern ("","int") [3]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Var 3,Lit (Intc 10)]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("Prelude","readRight") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","take#worker") [Var 3,Lit (Intc 5)])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char") [])] (Let [(7,Comb ConsCall ("Prelude","_Dict#Eq") [Var 5,Var 6])] (Let [(8,Comb ConsCall ("StringConst","Right") [])] (Let [(-9,Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Var 7,Var 4,Var 8])] (Case Rigid (Var (-9)) [Branch (Pattern ("Prelude","True") []) (Let [(10,Comb FuncCall ("Prelude","readsPrec") [Var 2])] (Let [(11,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(12,Comb FuncCall ("Prelude","apply") [Var 10,Var 11])] (Let [(13,Comb FuncCall ("Prelude","drop#worker") [Var 3,Lit (Intc 5)])] (Let [(14,Comb FuncCall ("Prelude","apply") [Var 12,Var 13])] (Let [(15,Comb (FuncPartCall 3) ("Prelude","readRight#P3") [])] (Let [(16,Comb (FuncPartCall 1) ("Prelude","id") [])] (Comb FuncCall ("Prelude","build_fold") [Var 15,Var 16,Var 14])))))))),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])))))))),Func ("Prelude","readRight#P3") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","makeRight") [Var 3])] (Comb FuncCall ("Prelude","apply") [Var 2,Var 5,Var 4]))),Func ("Prelude","readLeft") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","take#worker") [Var 3,Lit (Intc 4)])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char") [])] (Let [(7,Comb ConsCall ("Prelude","_Dict#Eq") [Var 5,Var 6])] (Let [(8,Comb ConsCall ("StringConst","Left") [])] (Let [(-9,Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Var 7,Var 4,Var 8])] (Case Rigid (Var (-9)) [Branch (Pattern ("Prelude","True") []) (Let [(10,Comb FuncCall ("Prelude","readsPrec") [Var 2])] (Let [(11,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(12,Comb FuncCall ("Prelude","apply") [Var 10,Var 11])] (Let [(13,Comb FuncCall ("Prelude","drop#worker") [Var 3,Lit (Intc 4)])] (Let [(14,Comb FuncCall ("Prelude","apply") [Var 12,Var 13])] (Let [(15,Comb (FuncPartCall 3) ("Prelude","readLeft#P4") [])] (Let [(16,Comb (FuncPartCall 1) ("Prelude","id") [])] (Comb FuncCall ("Prelude","build_fold") [Var 15,Var 16,Var 14])))))))),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])))))))),Func ("Prelude","readLeft#P4") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","makeLeft") [Var 3])] (Comb FuncCall ("Prelude","apply") [Var 2,Var 5,Var 4]))),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either") 4 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either#A10") [Var 4])] (Let [(7,Comb (FuncPartCall 1) ("Prelude","readLeft") [Var 2])] (Let [(8,Comb FuncCall ("Prelude","readParen") [Var 6,Var 7])] (Let [(9,Comb FuncCall ("Prelude","apply") [Var 8,Var 5])] (Let [(10,Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either#A9") [Var 4])] (Let [(11,Comb (FuncPartCall 1) ("Prelude","readRight") [Var 3])] (Let [(12,Comb FuncCall ("Prelude","readParen") [Var 10,Var 11])] (Let [(13,Comb FuncCall ("Prelude","apply") [Var 12,Var 5])] (Let [(14,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 9,Var 13])] (Comb FuncCall ("Prelude","build") [Var 14]))))))))))),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either#A10") 1 Public (TVar 0) (Rule [2] (Case Rigid (Var 2) [Branch (Pattern ("","int") [3]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Var 3,Lit (Intc 10)]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either#A9") 1 Public (TVar 0) (Rule [2] (Case Rigid (Var 2) [Branch (Pattern ("","int") [3]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Var 3,Lit (Intc 10)]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("Prelude","read") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TVar 0))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","readsPrec") [Var 2])] (Let [(5,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 4,Var 5])] (Let [(7,Comb FuncCall ("Prelude","apply") [Var 6,Var 3])] (Let [(8,Comb (FuncPartCall 2) ("Prelude","read._#lambda346") [])] (Let [(9,Comb ConsCall ("Prelude","[]") [])] (Let [(-10,Comb FuncCall ("Prelude","foldr") [Var 8,Var 9,Var 7])] (Case Rigid (Var (-10)) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Var 12) [Branch (Pattern ("Prelude","[]") []) (Var 11),Branch (Pattern ("Prelude",":") [13,14]) (Let [(15,Comb (FuncPartCall 1) ("Prelude","prim_error") [])] (Let [(16,Comb ConsCall ("StringConst","Prelude.read: ambiguous parse") [])] (Comb FuncCall ("Prelude","$##") [Var 15,Var 16])))]),Branch (Pattern ("Prelude","[]") []) (Let [(17,Comb (FuncPartCall 1) ("Prelude","prim_error") [])] (Let [(18,Comb ConsCall ("StringConst","Prelude.read: no parse") [])] (Comb FuncCall ("Prelude","$##") [Var 17,Var 18])))]))))))))),Func ("Prelude","readListDefault.readl.452._#lambda304._#lambda308") 3 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [2,-3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Let [(7,Comb ConsCall ("Prelude",":") [Var 2,Var 5])] (Let [(8,Comb ConsCall ("Prelude","(,)") [Var 7,Var 6])] (Comb ConsCall ("Prelude",":") [Var 8,Var 4])))])),Func ("Prelude","readListDefault.readl.452._#lambda300") 2 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [-2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Var 6) [Branch (Pattern ("","char") [8]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 8,Lit (Charc ']')]),Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude","[]") []) (Let [(9,Var 7)] (Let [(10,Comb ConsCall ("Prelude","(,)") [Var 9,Var 5])] (Comb ConsCall ("Prelude",":") [Var 10,Var 3]))),Branch (Pattern ("Prelude",":") [11,12]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)])]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Prelude","readListDefault.readl'.452._#lambda316._#lambda320._#lambda324") 3 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [2,-3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Let [(7,Comb ConsCall ("Prelude",":") [Var 2,Var 5])] (Let [(8,Comb ConsCall ("Prelude","(,)") [Var 7,Var 6])] (Comb ConsCall ("Prelude",":") [Var 8,Var 4])))])),Func ("Prelude","readListDefault.readl'.452._#lambda312") 2 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [-2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Var 6) [Branch (Pattern ("","char") [8]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 8,Lit (Charc ']')]),Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude","[]") []) (Let [(9,Var 7)] (Let [(10,Comb ConsCall ("Prelude","(,)") [Var 9,Var 5])] (Comb ConsCall ("Prelude",":") [Var 10,Var 3]))),Branch (Pattern ("Prelude",":") [11,12]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)])]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Prelude","readListDefault.readl'.452") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","lex") [Var 3])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","readListDefault.readl'.452._#lambda312") [])] (Let [(6,Comb ConsCall ("Prelude","[]") [])] (Let [(7,Comb FuncCall ("Prelude","foldr") [Var 5,Var 6,Var 4])] (Let [(8,Comb FuncCall ("Prelude","lex") [Var 3])] (Let [(9,Comb (FuncPartCall 2) ("Prelude","readListDefault.readl'.452._#lambda316") [Var 2])] (Let [(10,Comb ConsCall ("Prelude","[]") [])] (Let [(11,Comb FuncCall ("Prelude","foldr") [Var 9,Var 10,Var 8])] (Let [(12,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 7,Var 11])] (Comb FuncCall ("Prelude","build") [Var 12]))))))))))),Func ("Prelude","readListDefault.readl'.452._#lambda316._#lambda320") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [2,-3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Let [(7,Comb FuncCall ("Prelude","readListDefault.readl'.452") [Var 2,Var 6])] (Let [(8,Comb (FuncPartCall 2) ("Prelude","readListDefault.readl'.452._#lambda316._#lambda320._#lambda324") [Var 5])] (Let [(9,Comb ConsCall ("Prelude","[]") [])] (Let [(10,Comb FuncCall ("Prelude","foldr") [Var 8,Var 9,Var 7])] (Let [(11,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 10,Var 4])] (Comb FuncCall ("Prelude","build") [Var 11]))))))])),Func ("Prelude","readListDefault.readl.452._#lambda304") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [2,-3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Let [(7,Comb FuncCall ("Prelude","readListDefault.readl'.452") [Var 2,Var 6])] (Let [(8,Comb (FuncPartCall 2) ("Prelude","readListDefault.readl.452._#lambda304._#lambda308") [Var 5])] (Let [(9,Comb ConsCall ("Prelude","[]") [])] (Let [(10,Comb FuncCall ("Prelude","foldr") [Var 8,Var 9,Var 7])] (Let [(11,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 10,Var 4])] (Comb FuncCall ("Prelude","build") [Var 11]))))))])),Func ("Prelude","readListDefault.readl.452") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","lex") [Var 3])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","readListDefault.readl.452._#lambda300") [])] (Let [(6,Comb ConsCall ("Prelude","[]") [])] (Let [(7,Comb FuncCall ("Prelude","foldr") [Var 5,Var 6,Var 4])] (Let [(8,Comb FuncCall ("Prelude","readsPrec") [Var 2])] (Let [(9,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(10,Comb FuncCall ("Prelude","apply") [Var 8,Var 9])] (Let [(11,Comb FuncCall ("Prelude","apply") [Var 10,Var 3])] (Let [(12,Comb (FuncPartCall 2) ("Prelude","readListDefault.readl.452._#lambda304") [Var 2])] (Let [(13,Comb ConsCall ("Prelude","[]") [])] (Let [(14,Comb FuncCall ("Prelude","foldr") [Var 12,Var 13,Var 11])] (Let [(15,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 7,Var 14])] (Comb FuncCall ("Prelude","build") [Var 15])))))))))))))),Func ("Prelude","readListDefault._#lambda326._#lambda329") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [2,-3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case Rigid (Var 5) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Var 7) [Branch (Pattern ("","char") [9]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 9,Lit (Charc '[')]),Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude","[]") []) (Let [(10,Comb FuncCall ("Prelude","readListDefault.readl.452") [Var 2,Var 6])] (Let [(11,Comb (FuncPartCall 3) ("Prelude","readListDefault._#lambda326._#lambda329#P5") [])] (Let [(12,Comb (FuncPartCall 1) ("Prelude","id") [])] (Let [(13,Comb FuncCall ("Prelude","build_fold") [Var 11,Var 12,Var 10])] (Let [(14,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 13,Var 4])] (Comb FuncCall ("Prelude","build") [Var 14])))))),Branch (Pattern ("Prelude",":") [15,16]) (Var 4)]),Branch (Pattern ("Prelude","False") []) (Var 4)])]),Branch (Pattern ("Prelude","[]") []) (Var 4)])])),Func ("Prelude","readListDefault._#lambda326._#lambda329#P5") 3 Public (TVar 0) (Rule [2,3,4] (Comb FuncCall ("Prelude","apply") [Var 2,Var 3,Var 4])),Func ("Prelude","readListDefault._#lambda326") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [2,-3] (Let [(4,Comb FuncCall ("Prelude","lex") [Var 3])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","readListDefault._#lambda326._#lambda329") [Var 2])] (Let [(6,Comb ConsCall ("Prelude","[]") [])] (Comb FuncCall ("Prelude","foldr") [Var 5,Var 6,Var 4]))))),Func ("Prelude","readListDefault") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","lex") [Var 3])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","readListDefault._#lambda326._#lambda329") [Var 2])] (Let [(6,Comb ConsCall ("Prelude","[]") [])] (Let [(7,Comb FuncCall ("Prelude","foldr") [Var 5,Var 6,Var 4])] (Let [(8,Comb FuncCall ("Prelude","lex") [Var 3])] (Let [(9,Comb (FuncPartCall 1) ("Prelude","readListDefault._#lambda326") [Var 2])] (Let [(10,Comb (FuncPartCall 2) ("Prelude","readParen.mandatory.470._#lambda334") [Var 9])] (Let [(11,Comb ConsCall ("Prelude","[]") [])] (Let [(12,Comb FuncCall ("Prelude","foldr") [Var 10,Var 11,Var 8])] (Let [(13,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 7,Var 12])] (Comb FuncCall ("Prelude","build") [Var 13])))))))))))),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda206._#lambda209") 2 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [-2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Var 6) [Branch (Pattern ("","char") [8]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 8,Lit (Charc 'G')]),Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Var 9) [Branch (Pattern ("","char") [11]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 11,Lit (Charc 'T')]),Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude","[]") []) (Let [(12,Comb ConsCall ("Prelude","GT") [])] (Let [(13,Comb ConsCall ("Prelude","(,)") [Var 12,Var 5])] (Comb ConsCall ("Prelude",":") [Var 13,Var 3]))),Branch (Pattern ("Prelude",":") [14,15]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)])]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)])]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda206") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [-2] (Let [(3,Comb FuncCall ("Prelude","lex") [Var 2])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda206._#lambda209") [])] (Let [(5,Comb ConsCall ("Prelude","[]") [])] (Comb FuncCall ("Prelude","foldr") [Var 4,Var 5,Var 3]))))),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda201._#lambda204") 2 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [-2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Var 6) [Branch (Pattern ("","char") [8]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 8,Lit (Charc 'E')]),Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Var 9) [Branch (Pattern ("","char") [11]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 11,Lit (Charc 'Q')]),Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude","[]") []) (Let [(12,Comb ConsCall ("Prelude","EQ") [])] (Let [(13,Comb ConsCall ("Prelude","(,)") [Var 12,Var 5])] (Comb ConsCall ("Prelude",":") [Var 13,Var 3]))),Branch (Pattern ("Prelude",":") [14,15]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)])]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)])]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda201") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [-2] (Let [(3,Comb FuncCall ("Prelude","lex") [Var 2])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda201._#lambda204") [])] (Let [(5,Comb ConsCall ("Prelude","[]") [])] (Comb FuncCall ("Prelude","foldr") [Var 4,Var 5,Var 3]))))),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda196._#lambda199") 2 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [-2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Var 6) [Branch (Pattern ("","char") [8]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 8,Lit (Charc 'L')]),Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Var 9) [Branch (Pattern ("","char") [11]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 11,Lit (Charc 'T')]),Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude","[]") []) (Let [(12,Comb ConsCall ("Prelude","LT") [])] (Let [(13,Comb ConsCall ("Prelude","(,)") [Var 12,Var 5])] (Comb ConsCall ("Prelude",":") [Var 13,Var 3]))),Branch (Pattern ("Prelude",":") [14,15]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)])]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)])]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda196") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [-2] (Let [(3,Comb FuncCall ("Prelude","lex") [Var 2])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda196._#lambda199") [])] (Let [(5,Comb ConsCall ("Prelude","[]") [])] (Comb FuncCall ("Prelude","foldr") [Var 4,Var 5,Var 3]))))),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [2,3] (Let [(4,Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda196") [])] (Let [(5,Comb FuncCall ("Prelude","readParen.optional.470") [Var 4,Var 3])] (Let [(6,Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda201") [])] (Let [(7,Comb FuncCall ("Prelude","readParen.optional.470") [Var 6,Var 3])] (Let [(8,Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda206") [])] (Let [(9,Comb FuncCall ("Prelude","readParen.optional.470") [Var 8,Var 3])] (Let [(10,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 7,Var 9])] (Let [(11,Comb FuncCall ("Prelude","build") [Var 10])] (Let [(12,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 5,Var 11])] (Comb FuncCall ("Prelude","build") [Var 12]))))))))))),Func ("Prelude","_impl#readsPrec#Prelude.Read#[]") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [-2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Read") [4,5]) (Var 5)])),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Char._#lambda41._#lambda44._#lambda48") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [2,-3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case Rigid (Var 6) [Branch (Pattern ("Prelude","[]") []) (Let [(7,Comb ConsCall ("Prelude","(,)") [Var 5,Var 2])] (Comb ConsCall ("Prelude",":") [Var 7,Var 4])),Branch (Pattern ("Prelude",":") [8,9]) (Var 4)])])),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Char._#lambda41._#lambda44") 2 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [-2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Let [(6,Comb (FuncPartCall 2) ("Prelude","null_fold") [])] (Let [(7,Comb ConsCall ("Prelude","True") [])] (Let [(8,Comb FuncCall ("Prelude","foldr") [Var 6,Var 7,Var 4])] (Let [(9,Comb FuncCall ("Prelude","_impl#readList#Prelude.Read#Prelude.Char._#lambda41._#lambda44#A11") [Var 4,Var 5,Var 8])] (Let [(10,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 9,Var 3])] (Comb FuncCall ("Prelude","build") [Var 10]))))))])),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Char._#lambda41._#lambda44#A11") 3 Public (TVar 0) (Rule [2,3,4] (Case Flex (Var 4) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Case Flex (Var 2) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Var 5) [Branch (Pattern ("","char") [7]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 7,Lit (Charc '"')]),Branch (Pattern ("Prelude","True") []) (Let [(8,Var 5)] (Let [(9,Comb ConsCall ("Prelude",":") [Var 8,Var 6])] (Let [(10,Comb FuncCall ("Prelude","readStringLiteral") [Var 9])] (Let [(11,Comb (FuncPartCall 2) ("Prelude","_impl#readList#Prelude.Read#Prelude.Char._#lambda41._#lambda44._#lambda48") [Var 3])] (Let [(12,Comb ConsCall ("Prelude","[]") [])] (Comb FuncCall ("Prelude","foldr") [Var 11,Var 12,Var 10])))))),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("","EXEMPT") [])])])),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Char._#lambda41") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [-2] (Let [(3,Comb FuncCall ("Prelude","lex") [Var 2])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#readList#Prelude.Read#Prelude.Char._#lambda41._#lambda44") [])] (Let [(5,Comb ConsCall ("Prelude","[]") [])] (Comb FuncCall ("Prelude","foldr") [Var 4,Var 5,Var 3]))))),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Char._#lambda32._#lambda35._#lambda39") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [2,-3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case Rigid (Var 6) [Branch (Pattern ("Prelude","[]") []) (Let [(7,Comb ConsCall ("Prelude","(,)") [Var 5,Var 2])] (Comb ConsCall ("Prelude",":") [Var 7,Var 4])),Branch (Pattern ("Prelude",":") [8,9]) (Var 4)])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Char._#lambda32._#lambda35") 2 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [-2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Let [(6,Comb (FuncPartCall 2) ("Prelude","null_fold") [])] (Let [(7,Comb ConsCall ("Prelude","True") [])] (Let [(8,Comb FuncCall ("Prelude","foldr") [Var 6,Var 7,Var 4])] (Let [(9,Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Char._#lambda32._#lambda35#A12") [Var 4,Var 5,Var 8])] (Let [(10,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 9,Var 3])] (Comb FuncCall ("Prelude","build") [Var 10]))))))])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Char._#lambda32._#lambda35#A12") 3 Public (TVar 0) (Rule [2,3,4] (Case Flex (Var 4) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Case Flex (Var 2) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Var 5) [Branch (Pattern ("","char") [7]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 7,Lit (Charc '\'')]),Branch (Pattern ("Prelude","True") []) (Let [(8,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Char._#lambda32._#lambda35._#lambda39") [Var 3])] (Let [(9,Comb ConsCall ("Prelude","[]") [])] (Let [(10,Var 5)] (Let [(11,Comb ConsCall ("Prelude","(,)") [Var 10,Var 6])] (Let [(12,Comb ConsCall ("Prelude","[]") [])] (Let [(13,Comb ConsCall ("Prelude",":") [Var 11,Var 12])] (Comb FuncCall ("Prelude","foldr") [Var 8,Var 9,Var 13]))))))),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("","EXEMPT") [])])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Char._#lambda32") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [-2] (Let [(3,Comb FuncCall ("Prelude","lex") [Var 2])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Char._#lambda32._#lambda35") [])] (Let [(5,Comb ConsCall ("Prelude","[]") [])] (Comb FuncCall ("Prelude","foldr") [Var 4,Var 5,Var 3]))))),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Char") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","lex") [Var 2])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Char._#lambda32._#lambda35") [])] (Let [(6,Comb ConsCall ("Prelude","[]") [])] (Let [(7,Comb FuncCall ("Prelude","foldr") [Var 5,Var 6,Var 4])] (Let [(8,Comb FuncCall ("Prelude","lex") [Var 2])] (Let [(9,Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Char._#lambda32") [])] (Let [(10,Comb (FuncPartCall 2) ("Prelude","readParen.mandatory.470._#lambda334") [Var 9])] (Let [(11,Comb ConsCall ("Prelude","[]") [])] (Let [(12,Comb FuncCall ("Prelude","foldr") [Var 10,Var 11,Var 8])] (Let [(13,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 7,Var 12])] (Comb FuncCall ("Prelude","build") [Var 13])))))))))))),Func ("Prelude","_inst#Prelude.Read#Prelude.Char") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","Char") []]) (Rule [] (Let [(2,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Char") [])] (Let [(3,Comb (FuncPartCall 1) ("Prelude","_impl#readList#Prelude.Read#Prelude.Char") [])] (Comb ConsCall ("Prelude","_Dict#Read") [Var 2,Var 3])))),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float._#lambda23._#lambda26._#lambda30") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [2,-3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case Rigid (Var 6) [Branch (Pattern ("Prelude","[]") []) (Let [(7,Comb ConsCall ("Prelude","(,)") [Var 5,Var 2])] (Comb ConsCall ("Prelude",":") [Var 7,Var 4])),Branch (Pattern ("Prelude",":") [8,9]) (Var 4)])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float.readFloat.903._#lambda21") 2 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [-2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Let [(6,Comb FuncCall ("Prelude","i2f") [Var 4])] (Let [(7,Comb ConsCall ("Prelude","(,)") [Var 6,Var 5])] (Comb ConsCall ("Prelude",":") [Var 7,Var 3])))])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float.readFloat.903") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [-2] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float.readFloat.903#P6") [])] (Let [(4,Comb ConsCall ("Prelude","True") [])] (Let [(-5,Comb FuncCall ("Prelude","foldr") [Var 3,Var 4,Var 2])] (Case Rigid (Var (-5)) [Branch (Pattern ("Prelude","True") []) (Let [(6,Comb FuncCall ("Prelude","readNatLiteral") [Var 2])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float.readFloat.903._#lambda21") [])] (Let [(8,Comb ConsCall ("Prelude","[]") [])] (Comb FuncCall ("Prelude","foldr") [Var 7,Var 8,Var 6])))),Branch (Pattern ("Prelude","False") []) (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Var 2),Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Var 9) [Branch (Pattern ("","char") [11]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 11,Lit (Charc '-')]),Branch (Pattern ("Prelude","True") []) (Let [(12,Comb FuncCall ("Prelude","readPosFloat") [Var 10])] (Case Rigid (Var 12) [Branch (Pattern ("Prelude","[]") []) (Var 12),Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Var 13) [Branch (Pattern ("Prelude","(,)") [15,16]) (Case Rigid (Var 14) [Branch (Pattern ("Prelude","[]") []) (Let [(17,Comb FuncCall ("Prelude","_impl#negate#Prelude.Num#Prelude.Float") [Var 15])] (Let [(18,Comb ConsCall ("Prelude","(,)") [Var 17,Var 16])] (Let [(19,Var 14)] (Comb ConsCall ("Prelude",":") [Var 18,Var 19])))),Branch (Pattern ("Prelude",":") [20,21]) (Comb ConsCall ("Prelude","[]") [])])])])),Branch (Pattern ("Prelude","False") []) (Let [(22,Var 9)] (Let [(23,Comb ConsCall ("Prelude",":") [Var 22,Var 10])] (Comb FuncCall ("Prelude","readPosFloat") [Var 23])))])])])]))))),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float.readFloat.903#P6") 2 Public (TVar 0) (Rule [2,3] (Case Rigid (Var 2) [Branch (Pattern ("","char") [4]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Lit (Charc '0'),Var 4]),Branch (Pattern ("Prelude","True") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 4,Lit (Charc '9')]),Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float._#lambda23._#lambda26") 2 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [-2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Let [(6,Comb (FuncPartCall 2) ("Prelude","null_fold") [])] (Let [(7,Comb ConsCall ("Prelude","True") [])] (Let [(8,Comb FuncCall ("Prelude","foldr") [Var 6,Var 7,Var 4])] (Let [(9,Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float._#lambda23._#lambda26#A13") [Var 4,Var 5,Var 8])] (Let [(10,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 9,Var 3])] (Comb FuncCall ("Prelude","build") [Var 10]))))))])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float._#lambda23._#lambda26#A13") 3 Public (TVar 0) (Rule [2,3,4] (Case Flex (Var 4) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Case Flex (Var 2) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Var 5) [Branch (Pattern ("","char") [7]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Lit (Charc '0'),Var 7]),Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqChar") [Var 7,Lit (Charc '9')]),Branch (Pattern ("Prelude","True") []) (Let [(8,Var 5)] (Let [(9,Comb ConsCall ("Prelude",":") [Var 8,Var 6])] (Let [(10,Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float.readFloat.903") [Var 9])] (Let [(11,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float._#lambda23._#lambda26._#lambda30") [Var 3])] (Let [(12,Comb ConsCall ("Prelude","[]") [])] (Comb FuncCall ("Prelude","foldr") [Var 11,Var 12,Var 10])))))),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("","EXEMPT") [])])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float._#lambda23") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [-2] (Let [(3,Comb FuncCall ("Prelude","lex") [Var 2])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float._#lambda23._#lambda26") [])] (Let [(5,Comb ConsCall ("Prelude","[]") [])] (Comb FuncCall ("Prelude","foldr") [Var 4,Var 5,Var 3]))))),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Float") [])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#+#Prelude.Num#Prelude.Float") [])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","_impl#-#Prelude.Num#Prelude.Float") [])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","_impl#*#Prelude.Num#Prelude.Float") [])] (Let [(8,Comb (FuncPartCall 1) ("Prelude","_impl#negate#Prelude.Num#Prelude.Float") [])] (Let [(9,Comb (FuncPartCall 1) ("Prelude","_impl#abs#Prelude.Num#Prelude.Float") [])] (Let [(10,Comb (FuncPartCall 1) ("Prelude","_impl#signum#Prelude.Num#Prelude.Float") [])] (Let [(11,Comb (FuncPartCall 1) ("Prelude","_impl#fromInt#Prelude.Num#Prelude.Float") [])] (Let [(12,Comb ConsCall ("Prelude","_Dict#Num") [Var 5,Var 6,Var 7,Var 8,Var 9,Var 10,Var 11])] (Let [(13,Comb ConsCall ("Prelude","_Dict#Real") [Var 12,Var 4])] (Let [(14,Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float._#lambda23") [])] (Let [(15,Comb FuncCall ("Prelude","readSigned.read'.490") [Var 13,Var 14,Var 3])] (Let [(16,Comb FuncCall ("Prelude","lex") [Var 3])] (Let [(17,Comb (FuncPartCall 2) ("Prelude","_impl#+#Prelude.Num#Prelude.Float") [])] (Let [(18,Comb (FuncPartCall 2) ("Prelude","_impl#-#Prelude.Num#Prelude.Float") [])] (Let [(19,Comb (FuncPartCall 2) ("Prelude","_impl#*#Prelude.Num#Prelude.Float") [])] (Let [(20,Comb (FuncPartCall 1) ("Prelude","_impl#negate#Prelude.Num#Prelude.Float") [])] (Let [(21,Comb (FuncPartCall 1) ("Prelude","_impl#abs#Prelude.Num#Prelude.Float") [])] (Let [(22,Comb (FuncPartCall 1) ("Prelude","_impl#signum#Prelude.Num#Prelude.Float") [])] (Let [(23,Comb (FuncPartCall 1) ("Prelude","_impl#fromInt#Prelude.Num#Prelude.Float") [])] (Let [(24,Comb ConsCall ("Prelude","_Dict#Num") [Var 17,Var 18,Var 19,Var 20,Var 21,Var 22,Var 23])] (Let [(25,Comb ConsCall ("Prelude","_Dict#Real") [Var 24,Var 4])] (Let [(26,Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float._#lambda23") [])] (Let [(27,Comb (FuncPartCall 1) ("Prelude","readSigned.read'.490") [Var 25,Var 26])] (Let [(28,Comb (FuncPartCall 2) ("Prelude","readParen.mandatory.470._#lambda334") [Var 27])] (Let [(29,Comb ConsCall ("Prelude","[]") [])] (Let [(30,Comb FuncCall ("Prelude","foldr") [Var 28,Var 29,Var 16])] (Let [(31,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 15,Var 30])] (Comb FuncCall ("Prelude","build") [Var 31])))))))))))))))))))))))))))))),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Int._#lambda10._#lambda13._#lambda17") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [2,-3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case Rigid (Var 6) [Branch (Pattern ("Prelude","[]") []) (Let [(7,Comb ConsCall ("Prelude","(,)") [Var 5,Var 2])] (Comb ConsCall ("Prelude",":") [Var 7,Var 4])),Branch (Pattern ("Prelude",":") [8,9]) (Var 4)])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Int._#lambda10._#lambda13") 2 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [-2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Let [(6,Comb FuncCall ("Prelude","readNatLiteral") [Var 4])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Int._#lambda10._#lambda13._#lambda17") [Var 5])] (Let [(8,Comb ConsCall ("Prelude","[]") [])] (Let [(9,Comb FuncCall ("Prelude","foldr") [Var 7,Var 8,Var 6])] (Let [(10,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 9,Var 3])] (Comb FuncCall ("Prelude","build") [Var 10]))))))])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Int._#lambda10") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [2] (Let [(3,Comb FuncCall ("Prelude","lexDigits") [Var 2])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Int._#lambda10._#lambda13") [])] (Let [(5,Comb ConsCall ("Prelude","[]") [])] (Comb FuncCall ("Prelude","foldr") [Var 4,Var 5,Var 3]))))),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Int") [])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","_impl#*#Prelude.Num#Prelude.Int") [])] (Let [(8,Comb (FuncPartCall 1) ("Prelude","_impl#negate#Prelude.Num#Prelude.Int") [])] (Let [(9,Comb (FuncPartCall 1) ("Prelude","_impl#abs#Prelude.Num#Prelude.Int") [])] (Let [(10,Comb (FuncPartCall 1) ("Prelude","_impl#signum#Prelude.Num#Prelude.Int") [])] (Let [(11,Comb (FuncPartCall 1) ("Prelude","_impl#fromInt#Prelude.Num#Prelude.Int") [])] (Let [(12,Comb ConsCall ("Prelude","_Dict#Num") [Var 5,Var 6,Var 7,Var 8,Var 9,Var 10,Var 11])] (Let [(13,Comb ConsCall ("Prelude","_Dict#Real") [Var 12,Var 4])] (Let [(14,Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Int._#lambda10") [])] (Let [(15,Comb FuncCall ("Prelude","readSigned.read'.490") [Var 13,Var 14,Var 3])] (Let [(16,Comb FuncCall ("Prelude","lex") [Var 3])] (Let [(17,Comb (FuncPartCall 2) ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [])] (Let [(18,Comb (FuncPartCall 2) ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [])] (Let [(19,Comb (FuncPartCall 2) ("Prelude","_impl#*#Prelude.Num#Prelude.Int") [])] (Let [(20,Comb (FuncPartCall 1) ("Prelude","_impl#negate#Prelude.Num#Prelude.Int") [])] (Let [(21,Comb (FuncPartCall 1) ("Prelude","_impl#abs#Prelude.Num#Prelude.Int") [])] (Let [(22,Comb (FuncPartCall 1) ("Prelude","_impl#signum#Prelude.Num#Prelude.Int") [])] (Let [(23,Comb (FuncPartCall 1) ("Prelude","_impl#fromInt#Prelude.Num#Prelude.Int") [])] (Let [(24,Comb ConsCall ("Prelude","_Dict#Num") [Var 17,Var 18,Var 19,Var 20,Var 21,Var 22,Var 23])] (Let [(25,Comb ConsCall ("Prelude","_Dict#Real") [Var 24,Var 4])] (Let [(26,Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Int._#lambda10") [])] (Let [(27,Comb (FuncPartCall 1) ("Prelude","readSigned.read'.490") [Var 25,Var 26])] (Let [(28,Comb (FuncPartCall 2) ("Prelude","readParen.mandatory.470._#lambda334") [Var 27])] (Let [(29,Comb ConsCall ("Prelude","[]") [])] (Let [(30,Comb FuncCall ("Prelude","foldr") [Var 28,Var 29,Var 16])] (Let [(31,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 15,Var 30])] (Comb FuncCall ("Prelude","build") [Var 31])))))))))))))))))))))))))))))),Func ("Prelude","_def#readList#Prelude.Read") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","lex") [Var 3])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","readListDefault._#lambda326._#lambda329") [Var 2])] (Let [(6,Comb ConsCall ("Prelude","[]") [])] (Let [(7,Comb FuncCall ("Prelude","foldr") [Var 5,Var 6,Var 4])] (Let [(8,Comb FuncCall ("Prelude","lex") [Var 3])] (Let [(9,Comb (FuncPartCall 1) ("Prelude","readListDefault._#lambda326") [Var 2])] (Let [(10,Comb (FuncPartCall 2) ("Prelude","readParen.mandatory.470._#lambda334") [Var 9])] (Let [(11,Comb ConsCall ("Prelude","[]") [])] (Let [(12,Comb FuncCall ("Prelude","foldr") [Var 10,Var 11,Var 8])] (Let [(13,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 7,Var 12])] (Comb FuncCall ("Prelude","build") [Var 13])))))))))))),Func ("Prelude","_inst#Prelude.Read#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","Maybe") [TVar 0]])) (Rule [2] (Let [(3,Comb (FuncPartCall 1) ("Prelude","_impl#readList#Prelude.Read#Prelude.Maybe") [Var 2])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe") [Var 2])] (Comb ConsCall ("Prelude","_Dict#Read") [Var 4,Var 3])))),Func ("Prelude","_inst#Prelude.Read#Prelude.Bool") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","Bool") []]) (Rule [] (Let [(2,Comb (FuncPartCall 1) ("Prelude","_impl#readList#Prelude.Read#Prelude.Bool") [])] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Bool") [])] (Comb ConsCall ("Prelude","_Dict#Read") [Var 3,Var 2])))),Func ("Prelude","_inst#Prelude.Read#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","Either") [TVar 0,TVar 1]]))) (Rule [2,3] (Let [(4,Comb (FuncPartCall 1) ("Prelude","_impl#readList#Prelude.Read#Prelude.Either") [Var 2,Var 3])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either") [Var 2,Var 3])] (Comb ConsCall ("Prelude","_Dict#Read") [Var 5,Var 4])))),Func ("Prelude","_inst#Prelude.Read#Prelude.Ordering") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","Ordering") []]) (Rule [] (Let [(2,Comb (FuncPartCall 1) ("Prelude","_impl#readList#Prelude.Read#Prelude.Ordering") [])] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering") [])] (Comb ConsCall ("Prelude","_Dict#Read") [Var 3,Var 2])))),Func ("Prelude","_inst#Prelude.Read#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","[]") [TVar 0]])) (Rule [2] (Let [(3,Comb (FuncPartCall 1) ("Prelude","_impl#readList#Prelude.Read#[]") [Var 2])] (Let [(4,Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Var 2])] (Comb ConsCall ("Prelude","_Dict#Read") [Var 4,Var 3])))),Func ("Prelude","_inst#Prelude.Read#Prelude.Float") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","Float") []]) (Rule [] (Let [(2,Comb (FuncPartCall 1) ("Prelude","_impl#readList#Prelude.Read#Prelude.Float") [])] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float") [])] (Comb ConsCall ("Prelude","_Dict#Read") [Var 3,Var 2])))),Func ("Prelude","_inst#Prelude.Read#Prelude.Int") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","Int") []]) (Rule [] (Let [(2,Comb (FuncPartCall 1) ("Prelude","_impl#readList#Prelude.Read#Prelude.Int") [])] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Int") [])] (Comb ConsCall ("Prelude","_Dict#Read") [Var 3,Var 2])))),Func ("Prelude","readDotNat1") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Let [(3,Comb ConsCall ("","float") [Lit (Floatc 0.0)])] (Let [(4,Var 2)] (Comb ConsCall ("Prelude","(,)") [Var 3,Var 4]))),Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Var 5) [Branch (Pattern ("","char") [7]) (Let [(8,Comb FuncCall ("Prelude","primOrd") [Var 7])] (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Lit (Intc 48),Var 8]),Branch (Pattern ("Prelude","True") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Lit (Intc 58),Var 8]),Branch (Pattern ("Prelude","True") []) (Let [(9,Comb ConsCall ("","float") [Lit (Floatc 0.0)])] (Let [(10,Var 5)] (Let [(11,Comb ConsCall ("Prelude",":") [Var 10,Var 6])] (Comb ConsCall ("Prelude","(,)") [Var 9,Var 11])))),Branch (Pattern ("Prelude","False") []) (Let [(-12,Comb FuncCall ("Prelude","readDotNat1") [Var 6])] (Case Rigid (Var (-12)) [Branch (Pattern ("Prelude","(,)") [13,14]) (Let [(15,Comb FuncCall ("Prelude","readDotNat1#A14") [Var 8,Var 13])] (Comb ConsCall ("Prelude","(,)") [Var 15,Var 14]))]))]),Branch (Pattern ("Prelude","False") []) (Let [(16,Comb ConsCall ("","float") [Lit (Floatc 0.0)])] (Let [(17,Var 5)] (Let [(18,Comb ConsCall ("Prelude",":") [Var 17,Var 6])] (Comb ConsCall ("Prelude","(,)") [Var 16,Var 18]))))]))])])),Func ("Prelude","readDotNat1#A14") 2 Public (TVar 0) (Rule [2,3] (Case Rigid (Var 3) [Branch (Pattern ("","float") [4]) (Let [(5,Comb FuncCall ("Prelude","primSubInt") [Var 2,Lit (Intc 48)])] (Let [(6,Comb FuncCall ("Prelude","primI2F") [Var 5])] (Let [(7,Comb FuncCall ("Prelude","primAddFloat") [Var 6,Var 4])] (Let [(8,Comb FuncCall ("Prelude","primDivFloat") [Var 7,Lit (Floatc 10.0)])] (Comb ConsCall ("","float") [Var 8])))))])),Func ("Prelude","readNat") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [-2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Let [(4,Var 2)] (Comb ConsCall ("Prelude","(,)") [Var 3,Var 4])),Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Var 5) [Branch (Pattern ("","char") [7]) (Let [(8,Comb FuncCall ("Prelude","primOrd") [Var 7])] (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Lit (Intc 48),Var 8]),Branch (Pattern ("Prelude","True") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Lit (Intc 58),Var 8]),Branch (Pattern ("Prelude","True") []) (Let [(9,Var 5)] (Let [(10,Comb ConsCall ("Prelude",":") [Var 9,Var 6])] (Comb ConsCall ("Prelude","(,)") [Var 3,Var 10]))),Branch (Pattern ("Prelude","False") []) (Let [(11,Comb FuncCall ("Prelude","readNat#A15") [Var 3,Var 8])] (Comb FuncCall ("Prelude","readNat") [Var 6,Var 11]))]),Branch (Pattern ("Prelude","False") []) (Let [(12,Var 5)] (Let [(13,Comb ConsCall ("Prelude",":") [Var 12,Var 6])] (Comb ConsCall ("Prelude","(,)") [Var 3,Var 13])))]))])])),Func ("Prelude","readNat#A15") 2 Public (TVar 0) (Rule [2,3] (Case Rigid (Var 2) [Branch (Pattern ("","int") [4]) (Let [(5,Comb FuncCall ("Prelude","primMulInt") [Var 4,Lit (Intc 10)])] (Let [(6,Comb FuncCall ("Prelude","primAddInt") [Var 5,Var 3])] (Let [(7,Comb FuncCall ("Prelude","primSubInt") [Var 6,Lit (Intc 48)])] (Comb ConsCall ("","int") [Var 7]))))])),Func ("Prelude","readParen.mandatory.470._#lambda334") 3 Private (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [2,-3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case Rigid (Var 5) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Var 7) [Branch (Pattern ("","char") [9]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 9,Lit (Charc '(')]),Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude","[]") []) (Let [(10,Comb FuncCall ("Prelude","readParen.optional.470") [Var 2,Var 6])] (Let [(11,Comb (FuncPartCall 2) ("Prelude","readParen.mandatory.470._#lambda334._#lambda338") [])] (Let [(12,Var 8)] (Let [(13,Comb FuncCall ("Prelude","foldr") [Var 11,Var 12,Var 10])] (Let [(14,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 13,Var 4])] (Comb FuncCall ("Prelude","build") [Var 14])))))),Branch (Pattern ("Prelude",":") [15,16]) (Var 4)]),Branch (Pattern ("Prelude","False") []) (Var 4)])]),Branch (Pattern ("Prelude","[]") []) (Var 4)])])),Func ("Prelude","readListDefault.readl'.452._#lambda316") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [2,-3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case Rigid (Var 5) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Var 7) [Branch (Pattern ("","char") [9]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 9,Lit (Charc ',')]),Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude","[]") []) (Let [(10,Comb FuncCall ("Prelude","readsPrec") [Var 2])] (Let [(11,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(12,Comb FuncCall ("Prelude","apply") [Var 10,Var 11])] (Let [(13,Comb FuncCall ("Prelude","apply") [Var 12,Var 6])] (Let [(14,Comb (FuncPartCall 2) ("Prelude","readListDefault.readl'.452._#lambda316._#lambda320") [Var 2])] (Let [(15,Var 8)] (Let [(16,Comb FuncCall ("Prelude","foldr") [Var 14,Var 15,Var 13])] (Let [(17,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 16,Var 4])] (Comb FuncCall ("Prelude","build") [Var 17]))))))))),Branch (Pattern ("Prelude",":") [18,19]) (Var 4)]),Branch (Pattern ("Prelude","False") []) (Var 4)])]),Branch (Pattern ("Prelude","[]") []) (Var 4)])])),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Char") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [2] (Let [(3,Comb (FuncPartCall 1) ("Prelude","_impl#readList#Prelude.Read#Prelude.Char._#lambda41") [])] (Let [(4,Comb FuncCall ("Prelude","readParen.optional.470") [Var 3,Var 2])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Char") [])] (Let [(6,Comb (FuncPartCall 1) ("Prelude","_impl#readList#Prelude.Read#Prelude.Char") [])] (Let [(7,Comb ConsCall ("Prelude","_Dict#Read") [Var 5,Var 6])] (Let [(8,Comb FuncCall ("Prelude","readListDefault") [Var 7,Var 2])] (Let [(9,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 4,Var 8])] (Comb FuncCall ("Prelude","build") [Var 9]))))))))),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Maybe") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Maybe") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [2,3] (Let [(4,Comb (FuncPartCall 1) ("Prelude","_impl#readList#Prelude.Read#Prelude.Maybe") [Var 2])] (Let [(5,Comb FuncCall ("Prelude","lex") [Var 3])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe") [Var 2])] (Let [(7,Comb ConsCall ("Prelude","_Dict#Read") [Var 6,Var 4])] (Let [(8,Comb (FuncPartCall 2) ("Prelude","readListDefault._#lambda326._#lambda329") [Var 7])] (Let [(9,Comb ConsCall ("Prelude","[]") [])] (Let [(10,Comb FuncCall ("Prelude","foldr") [Var 8,Var 9,Var 5])] (Let [(11,Comb FuncCall ("Prelude","lex") [Var 3])] (Let [(12,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe") [Var 2])] (Let [(13,Comb ConsCall ("Prelude","_Dict#Read") [Var 12,Var 4])] (Let [(14,Comb (FuncPartCall 1) ("Prelude","readListDefault._#lambda326") [Var 13])] (Let [(15,Comb (FuncPartCall 2) ("Prelude","readParen.mandatory.470._#lambda334") [Var 14])] (Let [(16,Comb ConsCall ("Prelude","[]") [])] (Let [(17,Comb FuncCall ("Prelude","foldr") [Var 15,Var 16,Var 11])] (Let [(18,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 10,Var 17])] (Comb FuncCall ("Prelude","build") [Var 18]))))))))))))))))),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Bool") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Bool") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [2] (Let [(3,Comb (FuncPartCall 1) ("Prelude","_impl#readList#Prelude.Read#Prelude.Bool") [])] (Let [(4,Comb FuncCall ("Prelude","lex") [Var 2])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Bool") [])] (Let [(6,Comb ConsCall ("Prelude","_Dict#Read") [Var 5,Var 3])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","readListDefault._#lambda326._#lambda329") [Var 6])] (Let [(8,Comb ConsCall ("Prelude","[]") [])] (Let [(9,Comb FuncCall ("Prelude","foldr") [Var 7,Var 8,Var 4])] (Let [(10,Comb FuncCall ("Prelude","lex") [Var 2])] (Let [(11,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Bool") [])] (Let [(12,Comb ConsCall ("Prelude","_Dict#Read") [Var 11,Var 3])] (Let [(13,Comb (FuncPartCall 1) ("Prelude","readListDefault._#lambda326") [Var 12])] (Let [(14,Comb (FuncPartCall 2) ("Prelude","readParen.mandatory.470._#lambda334") [Var 13])] (Let [(15,Comb ConsCall ("Prelude","[]") [])] (Let [(16,Comb FuncCall ("Prelude","foldr") [Var 14,Var 15,Var 10])] (Let [(17,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 9,Var 16])] (Comb FuncCall ("Prelude","build") [Var 17]))))))))))))))))),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Either") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Either") [TVar 0,TVar 1]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [2,3,4] (Let [(5,Comb (FuncPartCall 1) ("Prelude","_impl#readList#Prelude.Read#Prelude.Either") [Var 2,Var 3])] (Let [(6,Comb FuncCall ("Prelude","lex") [Var 4])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either") [Var 2,Var 3])] (Let [(8,Comb ConsCall ("Prelude","_Dict#Read") [Var 7,Var 5])] (Let [(9,Comb (FuncPartCall 2) ("Prelude","readListDefault._#lambda326._#lambda329") [Var 8])] (Let [(10,Comb ConsCall ("Prelude","[]") [])] (Let [(11,Comb FuncCall ("Prelude","foldr") [Var 9,Var 10,Var 6])] (Let [(12,Comb FuncCall ("Prelude","lex") [Var 4])] (Let [(13,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either") [Var 2,Var 3])] (Let [(14,Comb ConsCall ("Prelude","_Dict#Read") [Var 13,Var 5])] (Let [(15,Comb (FuncPartCall 1) ("Prelude","readListDefault._#lambda326") [Var 14])] (Let [(16,Comb (FuncPartCall 2) ("Prelude","readParen.mandatory.470._#lambda334") [Var 15])] (Let [(17,Comb ConsCall ("Prelude","[]") [])] (Let [(18,Comb FuncCall ("Prelude","foldr") [Var 16,Var 17,Var 12])] (Let [(19,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 11,Var 18])] (Comb FuncCall ("Prelude","build") [Var 19]))))))))))))))))),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Ordering") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Ordering") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [2] (Let [(3,Comb (FuncPartCall 1) ("Prelude","_impl#readList#Prelude.Read#Prelude.Ordering") [])] (Let [(4,Comb FuncCall ("Prelude","lex") [Var 2])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering") [])] (Let [(6,Comb ConsCall ("Prelude","_Dict#Read") [Var 5,Var 3])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","readListDefault._#lambda326._#lambda329") [Var 6])] (Let [(8,Comb ConsCall ("Prelude","[]") [])] (Let [(9,Comb FuncCall ("Prelude","foldr") [Var 7,Var 8,Var 4])] (Let [(10,Comb FuncCall ("Prelude","lex") [Var 2])] (Let [(11,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering") [])] (Let [(12,Comb ConsCall ("Prelude","_Dict#Read") [Var 11,Var 3])] (Let [(13,Comb (FuncPartCall 1) ("Prelude","readListDefault._#lambda326") [Var 12])] (Let [(14,Comb (FuncPartCall 2) ("Prelude","readParen.mandatory.470._#lambda334") [Var 13])] (Let [(15,Comb ConsCall ("Prelude","[]") [])] (Let [(16,Comb FuncCall ("Prelude","foldr") [Var 14,Var 15,Var 10])] (Let [(17,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 9,Var 16])] (Comb FuncCall ("Prelude","build") [Var 17]))))))))))))))))),Func ("Prelude","_impl#readList#Prelude.Read#[]") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [2,3] (Let [(4,Comb (FuncPartCall 1) ("Prelude","_impl#readList#Prelude.Read#[]") [Var 2])] (Let [(5,Comb FuncCall ("Prelude","lex") [Var 3])] (Let [(6,Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Var 2])] (Let [(7,Comb ConsCall ("Prelude","_Dict#Read") [Var 6,Var 4])] (Let [(8,Comb (FuncPartCall 2) ("Prelude","readListDefault._#lambda326._#lambda329") [Var 7])] (Let [(9,Comb ConsCall ("Prelude","[]") [])] (Let [(10,Comb FuncCall ("Prelude","foldr") [Var 8,Var 9,Var 5])] (Let [(11,Comb FuncCall ("Prelude","lex") [Var 3])] (Let [(12,Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Var 2])] (Let [(13,Comb ConsCall ("Prelude","_Dict#Read") [Var 12,Var 4])] (Let [(14,Comb (FuncPartCall 1) ("Prelude","readListDefault._#lambda326") [Var 13])] (Let [(15,Comb (FuncPartCall 2) ("Prelude","readParen.mandatory.470._#lambda334") [Var 14])] (Let [(16,Comb ConsCall ("Prelude","[]") [])] (Let [(17,Comb FuncCall ("Prelude","foldr") [Var 15,Var 16,Var 11])] (Let [(18,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 10,Var 17])] (Comb FuncCall ("Prelude","build") [Var 18]))))))))))))))))),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Float") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Float") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [2] (Let [(3,Comb (FuncPartCall 1) ("Prelude","_impl#readList#Prelude.Read#Prelude.Float") [])] (Let [(4,Comb FuncCall ("Prelude","lex") [Var 2])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float") [])] (Let [(6,Comb ConsCall ("Prelude","_Dict#Read") [Var 5,Var 3])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","readListDefault._#lambda326._#lambda329") [Var 6])] (Let [(8,Comb ConsCall ("Prelude","[]") [])] (Let [(9,Comb FuncCall ("Prelude","foldr") [Var 7,Var 8,Var 4])] (Let [(10,Comb FuncCall ("Prelude","lex") [Var 2])] (Let [(11,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float") [])] (Let [(12,Comb ConsCall ("Prelude","_Dict#Read") [Var 11,Var 3])] (Let [(13,Comb (FuncPartCall 1) ("Prelude","readListDefault._#lambda326") [Var 12])] (Let [(14,Comb (FuncPartCall 2) ("Prelude","readParen.mandatory.470._#lambda334") [Var 13])] (Let [(15,Comb ConsCall ("Prelude","[]") [])] (Let [(16,Comb FuncCall ("Prelude","foldr") [Var 14,Var 15,Var 10])] (Let [(17,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 9,Var 16])] (Comb FuncCall ("Prelude","build") [Var 17]))))))))))))))))),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Int") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [2] (Let [(3,Comb (FuncPartCall 1) ("Prelude","_impl#readList#Prelude.Read#Prelude.Int") [])] (Let [(4,Comb FuncCall ("Prelude","lex") [Var 2])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Int") [])] (Let [(6,Comb ConsCall ("Prelude","_Dict#Read") [Var 5,Var 3])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","readListDefault._#lambda326._#lambda329") [Var 6])] (Let [(8,Comb ConsCall ("Prelude","[]") [])] (Let [(9,Comb FuncCall ("Prelude","foldr") [Var 7,Var 8,Var 4])] (Let [(10,Comb FuncCall ("Prelude","lex") [Var 2])] (Let [(11,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Int") [])] (Let [(12,Comb ConsCall ("Prelude","_Dict#Read") [Var 11,Var 3])] (Let [(13,Comb (FuncPartCall 1) ("Prelude","readListDefault._#lambda326") [Var 12])] (Let [(14,Comb (FuncPartCall 2) ("Prelude","readParen.mandatory.470._#lambda334") [Var 13])] (Let [(15,Comb ConsCall ("Prelude","[]") [])] (Let [(16,Comb FuncCall ("Prelude","foldr") [Var 14,Var 15,Var 10])] (Let [(17,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 9,Var 16])] (Comb FuncCall ("Prelude","build") [Var 17])))))))))))))))))] []