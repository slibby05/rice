(Prog "PreludeCompare" ["PreludeBase"] [] [(Func ("Prelude","_def#==#Prelude.Eq") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","not") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","/=") [(Var 1)]),(Var 2)]),(Var 3)])]))),(Func ("Prelude","_def#/=#Prelude.Eq") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","not") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","==") [(Var 1)]),(Var 2)]),(Var 3)])]))),(Func ("Prelude","_def#compare#Prelude.Ord") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Ordering") [])))) (Rule [1,2,3] (Case Rigid (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","==") [(Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [(Var 1)])]),(Var 2)]),(Var 3)]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","EQ") [])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","<=") [(Var 1)]),(Var 2)]),(Var 3)]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","LT") [])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","GT") [])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))]))),(Func ("Prelude","_def#>=#Prelude.Ord") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","<=") [(Var 1)]),(Var 3)]),(Var 2)]))),(Func ("Prelude","_def#<#Prelude.Ord") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","&&") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","<=") [(Var 1)]),(Var 2)]),(Var 3)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","/=") [(Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [(Var 1)])]),(Var 2)]),(Var 3)])]))),(Func ("Prelude","_def#>#Prelude.Ord") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","not") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","<=") [(Var 1)]),(Var 2)]),(Var 3)])]))),(Func ("Prelude","_def#min#Prelude.Ord") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1,2,3] (Case Rigid (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","<=") [(Var 1)]),(Var 2)]),(Var 3)]) [(Branch (Pattern ("Prelude","True") []) (Var 2)),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Var 3)),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))),(Func ("Prelude","_def#max#Prelude.Ord") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1,2,3] (Case Rigid (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude",">=") [(Var 1)]),(Var 2)]),(Var 3)]) [(Branch (Pattern ("Prelude","True") []) (Var 2)),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Var 3)),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))),(Func ("Prelude","_inst#Prelude.Eq#Prelude.Ordering") 0 Public (TCons ("Prelude","_Dict#Eq") [(TCons ("Prelude","Ordering") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [(Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Ordering") []),(Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.Ordering") [])]))),(Func ("Prelude","_impl#==#Prelude.Eq#Prelude.Ordering") 2 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","LT") []) (Case Flex (Var 2) [(Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") [])),(Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") []))])),(Branch (Pattern ("Prelude","EQ") []) (Case Flex (Var 2) [(Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") [])),(Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") []))])),(Branch (Pattern ("Prelude","GT") []) (Case Flex (Var 2) [(Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") []))]))]))),(Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Ordering") [])]))),(Func ("Prelude","_inst#Prelude.Ord#Prelude.Ordering") 0 Public (TCons ("Prelude","_Dict#Ord") [(TCons ("Prelude","Ordering") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Ord") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Ordering") []),(Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#Prelude.Ordering") []),(Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#Prelude.Ordering") []),(Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Ordering") []),(Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Ordering") []),(Comb FuncCall ("Prelude","_impl#>#Prelude.Ord#Prelude.Ordering") []),(Comb FuncCall ("Prelude","_impl#min#Prelude.Ord#Prelude.Ordering") []),(Comb FuncCall ("Prelude","_impl#max#Prelude.Ord#Prelude.Ordering") [])]))),(Func ("Prelude","_impl#compare#Prelude.Ord#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#compare#Prelude.Ord") [(Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Ordering") [])]))),(Func ("Prelude","_impl#<=#Prelude.Ord#Prelude.Ordering") 2 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","LT") []) (Case Flex (Var 2) [(Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") [])),(Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") [])),(Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") []))])),(Branch (Pattern ("Prelude","EQ") []) (Case Flex (Var 2) [(Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") [])),(Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") []))])),(Branch (Pattern ("Prelude","GT") []) (Case Flex (Var 2) [(Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") []))]))]))),(Func ("Prelude","_impl#>=#Prelude.Ord#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#>=#Prelude.Ord") [(Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Ordering") [])]))),(Func ("Prelude","_impl#<#Prelude.Ord#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#<#Prelude.Ord") [(Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Ordering") [])]))),(Func ("Prelude","_impl#>#Prelude.Ord#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#>#Prelude.Ord") [(Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Ordering") [])]))),(Func ("Prelude","_impl#min#Prelude.Ord#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#min#Prelude.Ord") [(Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Ordering") [])]))),(Func ("Prelude","_impl#max#Prelude.Ord#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#max#Prelude.Ord") [(Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Ordering") [])]))),(Func ("Prelude","_inst#Prelude.Eq#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 0)]) (TCons ("Prelude","_Dict#Eq") [(TCons ("Prelude","Maybe") [(TVar 0)])])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Eq") [(Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Maybe") [(Var 1)]),(Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.Maybe") [(Var 1)])]))),(Func ("Prelude","_impl#==#Prelude.Eq#Prelude.Maybe") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 0)]) (FuncType (TCons ("Prelude","Maybe") [(TVar 0)]) (FuncType (TCons ("Prelude","Maybe") [(TVar 0)]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Case Flex (Var 2) [(Branch (Pattern ("Prelude","Nothing") []) (Case Flex (Var 3) [(Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","True") [])),(Branch (Pattern ("Prelude","Just") [4]) (Comb ConsCall ("Prelude","False") []))])),(Branch (Pattern ("Prelude","Just") [5]) (Case Flex (Var 3) [(Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","Just") [6]) (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","==") [(Var 1)]),(Var 5)]),(Var 6)]))]))]))),(Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 0)]) (FuncType (TCons ("Prelude","Maybe") [(TVar 0)]) (FuncType (TCons ("Prelude","Maybe") [(TVar 0)]) (TCons ("Prelude","Bool") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Maybe") [(Var 1)])]))),(Func ("Prelude","_inst#Prelude.Ord#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (TCons ("Prelude","_Dict#Ord") [(TCons ("Prelude","Maybe") [(TVar 0)])])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Ord") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Maybe") [(Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [(Var 1)])]),(Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#Prelude.Maybe") [(Var 1)]),(Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#Prelude.Maybe") [(Var 1)]),(Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Maybe") [(Var 1)]),(Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Maybe") [(Var 1)]),(Comb FuncCall ("Prelude","_impl#>#Prelude.Ord#Prelude.Maybe") [(Var 1)]),(Comb FuncCall ("Prelude","_impl#min#Prelude.Ord#Prelude.Maybe") [(Var 1)]),(Comb FuncCall ("Prelude","_impl#max#Prelude.Ord#Prelude.Maybe") [(Var 1)])]))),(Func ("Prelude","_impl#compare#Prelude.Ord#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","Maybe") [(TVar 0)]) (FuncType (TCons ("Prelude","Maybe") [(TVar 0)]) (TCons ("Prelude","Ordering") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#compare#Prelude.Ord") [(Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Maybe") [(Var 1)])]))),(Func ("Prelude","_impl#<=#Prelude.Ord#Prelude.Maybe") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","Maybe") [(TVar 0)]) (FuncType (TCons ("Prelude","Maybe") [(TVar 0)]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Case Flex (Var 2) [(Branch (Pattern ("Prelude","Nothing") []) (Case Flex (Var 3) [(Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","True") [])),(Branch (Pattern ("Prelude","Just") [4]) (Comb ConsCall ("Prelude","True") []))])),(Branch (Pattern ("Prelude","Just") [5]) (Case Flex (Var 3) [(Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","Just") [6]) (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","<=") [(Var 1)]),(Var 5)]),(Var 6)]))]))]))),(Func ("Prelude","_impl#>=#Prelude.Ord#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","Maybe") [(TVar 0)]) (FuncType (TCons ("Prelude","Maybe") [(TVar 0)]) (TCons ("Prelude","Bool") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#>=#Prelude.Ord") [(Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Maybe") [(Var 1)])]))),(Func ("Prelude","_impl#<#Prelude.Ord#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","Maybe") [(TVar 0)]) (FuncType (TCons ("Prelude","Maybe") [(TVar 0)]) (TCons ("Prelude","Bool") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#<#Prelude.Ord") [(Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Maybe") [(Var 1)])]))),(Func ("Prelude","_impl#>#Prelude.Ord#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","Maybe") [(TVar 0)]) (FuncType (TCons ("Prelude","Maybe") [(TVar 0)]) (TCons ("Prelude","Bool") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#>#Prelude.Ord") [(Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Maybe") [(Var 1)])]))),(Func ("Prelude","_impl#min#Prelude.Ord#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","Maybe") [(TVar 0)]) (FuncType (TCons ("Prelude","Maybe") [(TVar 0)]) (TCons ("Prelude","Maybe") [(TVar 0)])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#min#Prelude.Ord") [(Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Maybe") [(Var 1)])]))),(Func ("Prelude","_impl#max#Prelude.Ord#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","Maybe") [(TVar 0)]) (FuncType (TCons ("Prelude","Maybe") [(TVar 0)]) (TCons ("Prelude","Maybe") [(TVar 0)])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#max#Prelude.Ord") [(Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Maybe") [(Var 1)])]))),(Func ("Prelude","_inst#Prelude.Eq#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 1)]) (TCons ("Prelude","_Dict#Eq") [(TCons ("Prelude","Either") [(TVar 0),(TVar 1)])]))) (Rule [1,2] (Comb ConsCall ("Prelude","_Dict#Eq") [(Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Either") [(Var 1),(Var 2)]),(Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.Either") [(Var 1),(Var 2)])]))),(Func ("Prelude","_impl#==#Prelude.Eq#Prelude.Either") 4 Public (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 1)]) (FuncType (TCons ("Prelude","Either") [(TVar 0),(TVar 1)]) (FuncType (TCons ("Prelude","Either") [(TVar 0),(TVar 1)]) (TCons ("Prelude","Bool") []))))) (Rule [1,2,3,4] (Case Flex (Var 3) [(Branch (Pattern ("Prelude","Left") [5]) (Case Flex (Var 4) [(Branch (Pattern ("Prelude","Left") [6]) (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","==") [(Var 1)]),(Var 5)]),(Var 6)])),(Branch (Pattern ("Prelude","Right") [7]) (Comb ConsCall ("Prelude","False") []))])),(Branch (Pattern ("Prelude","Right") [8]) (Case Flex (Var 4) [(Branch (Pattern ("Prelude","Left") [9]) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","Right") [10]) (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","==") [(Var 2)]),(Var 8)]),(Var 10)]))]))]))),(Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 1)]) (FuncType (TCons ("Prelude","Either") [(TVar 0),(TVar 1)]) (FuncType (TCons ("Prelude","Either") [(TVar 0),(TVar 1)]) (TCons ("Prelude","Bool") []))))) (Rule [1,2] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Either") [(Var 1),(Var 2)])]))),(Func ("Prelude","_inst#Prelude.Ord#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (TCons ("Prelude","_Dict#Ord") [(TCons ("Prelude","Either") [(TVar 0),(TVar 1)])]))) (Rule [1,2] (Comb ConsCall ("Prelude","_Dict#Ord") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Either") [(Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [(Var 1)]),(Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [(Var 2)])]),(Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#Prelude.Either") [(Var 1),(Var 2)]),(Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#Prelude.Either") [(Var 1),(Var 2)]),(Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Either") [(Var 1),(Var 2)]),(Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Either") [(Var 1),(Var 2)]),(Comb FuncCall ("Prelude","_impl#>#Prelude.Ord#Prelude.Either") [(Var 1),(Var 2)]),(Comb FuncCall ("Prelude","_impl#min#Prelude.Ord#Prelude.Either") [(Var 1),(Var 2)]),(Comb FuncCall ("Prelude","_impl#max#Prelude.Ord#Prelude.Either") [(Var 1),(Var 2)])]))),(Func ("Prelude","_impl#compare#Prelude.Ord#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","Either") [(TVar 0),(TVar 1)]) (FuncType (TCons ("Prelude","Either") [(TVar 0),(TVar 1)]) (TCons ("Prelude","Ordering") []))))) (Rule [1,2] (Comb (FuncPartCall 2) ("Prelude","_def#compare#Prelude.Ord") [(Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Either") [(Var 1),(Var 2)])]))),(Func ("Prelude","_impl#<=#Prelude.Ord#Prelude.Either") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","Either") [(TVar 0),(TVar 1)]) (FuncType (TCons ("Prelude","Either") [(TVar 0),(TVar 1)]) (TCons ("Prelude","Bool") []))))) (Rule [1,2,3,4] (Case Flex (Var 3) [(Branch (Pattern ("Prelude","Left") [5]) (Case Flex (Var 4) [(Branch (Pattern ("Prelude","Left") [6]) (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","<=") [(Var 1)]),(Var 5)]),(Var 6)])),(Branch (Pattern ("Prelude","Right") [7]) (Comb ConsCall ("Prelude","True") []))])),(Branch (Pattern ("Prelude","Right") [8]) (Case Flex (Var 4) [(Branch (Pattern ("Prelude","Left") [9]) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","Right") [10]) (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","<=") [(Var 2)]),(Var 8)]),(Var 10)]))]))]))),(Func ("Prelude","_impl#>=#Prelude.Ord#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","Either") [(TVar 0),(TVar 1)]) (FuncType (TCons ("Prelude","Either") [(TVar 0),(TVar 1)]) (TCons ("Prelude","Bool") []))))) (Rule [1,2] (Comb (FuncPartCall 2) ("Prelude","_def#>=#Prelude.Ord") [(Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Either") [(Var 1),(Var 2)])]))),(Func ("Prelude","_impl#<#Prelude.Ord#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","Either") [(TVar 0),(TVar 1)]) (FuncType (TCons ("Prelude","Either") [(TVar 0),(TVar 1)]) (TCons ("Prelude","Bool") []))))) (Rule [1,2] (Comb (FuncPartCall 2) ("Prelude","_def#<#Prelude.Ord") [(Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Either") [(Var 1),(Var 2)])]))),(Func ("Prelude","_impl#>#Prelude.Ord#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","Either") [(TVar 0),(TVar 1)]) (FuncType (TCons ("Prelude","Either") [(TVar 0),(TVar 1)]) (TCons ("Prelude","Bool") []))))) (Rule [1,2] (Comb (FuncPartCall 2) ("Prelude","_def#>#Prelude.Ord") [(Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Either") [(Var 1),(Var 2)])]))),(Func ("Prelude","_impl#min#Prelude.Ord#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","Either") [(TVar 0),(TVar 1)]) (FuncType (TCons ("Prelude","Either") [(TVar 0),(TVar 1)]) (TCons ("Prelude","Either") [(TVar 0),(TVar 1)]))))) (Rule [1,2] (Comb (FuncPartCall 2) ("Prelude","_def#min#Prelude.Ord") [(Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Either") [(Var 1),(Var 2)])]))),(Func ("Prelude","_impl#max#Prelude.Ord#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","Either") [(TVar 0),(TVar 1)]) (FuncType (TCons ("Prelude","Either") [(TVar 0),(TVar 1)]) (TCons ("Prelude","Either") [(TVar 0),(TVar 1)]))))) (Rule [1,2] (Comb (FuncPartCall 2) ("Prelude","_def#max#Prelude.Ord") [(Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Either") [(Var 1),(Var 2)])]))),(Func ("Prelude","==") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Eq") [2,3]) (Var 2))]))),(Func ("Prelude","/=") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Eq") [2,3]) (Var 3))]))),(Func ("Prelude","_super#Prelude.Ord#Prelude.Eq") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (TCons ("Prelude","_Dict#Eq") [(TVar 0)])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Ord") [2,3,4,5,6,7,8,9]) (Var 2))]))),(Func ("Prelude","compare") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Ordering") [])))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Ord") [2,3,4,5,6,7,8,9]) (Var 3))]))),(Func ("Prelude","<=") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Ord") [2,3,4,5,6,7,8,9]) (Var 4))]))),(Func ("Prelude",">=") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Ord") [2,3,4,5,6,7,8,9]) (Var 5))]))),(Func ("Prelude","<") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Ord") [2,3,4,5,6,7,8,9]) (Var 6))]))),(Func ("Prelude",">") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Ord") [2,3,4,5,6,7,8,9]) (Var 7))]))),(Func ("Prelude","min") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Ord") [2,3,4,5,6,7,8,9]) (Var 8))]))),(Func ("Prelude","max") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Ord") [2,3,4,5,6,7,8,9]) (Var 9))]))),(Func ("Prelude","_inst#Prelude.Eq#Prelude.Bool") 0 Public (TCons ("Prelude","_Dict#Eq") [(TCons ("Prelude","Bool") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [(Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Bool") []),(Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#Prelude.Bool") [])]))),(Func ("Prelude","_impl#==#Prelude.Eq#Prelude.Bool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","||") [(Comb FuncCall ("Prelude","not") [(Comb FuncCall ("Prelude","||") [(Var 1),(Var 2)])]),(Comb FuncCall ("Prelude","&&") [(Var 1),(Var 2)])]))),(Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.Bool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","&&") [(Comb FuncCall ("Prelude","||") [(Var 1),(Var 2)]),(Comb FuncCall ("Prelude","not") [(Comb FuncCall ("Prelude","&&") [(Var 1),(Var 2)])])]))),(Func ("Prelude","_inst#Prelude.Eq#Prelude.Int") 0 Public (TCons ("Prelude","_Dict#Eq") [(TCons ("Prelude","Int") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [(Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") []),(Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#Prelude.Int") [])]))),(Func ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","eqInt") [(Var 1),(Var 2)]))),(Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","not") [(Comb FuncCall ("Prelude","eqInt") [(Var 1),(Var 2)])]))),(Func ("Prelude","_inst#Prelude.Eq#Prelude.Float") 0 Public (TCons ("Prelude","_Dict#Eq") [(TCons ("Prelude","Float") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [(Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Float") []),(Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#Prelude.Float") [])]))),(Func ("Prelude","_impl#==#Prelude.Eq#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","eqFloat") [(Var 1),(Var 2)]))),(Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","not") [(Comb FuncCall ("Prelude","eqFloat") [(Var 1),(Var 2)])]))),(Func ("Prelude","_inst#Prelude.Eq#Prelude.Char") 0 Public (TCons ("Prelude","_Dict#Eq") [(TCons ("Prelude","Char") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [(Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") []),(Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char") [])]))),(Func ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","eqChar") [(Var 1),(Var 2)]))),(Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","not") [(Comb FuncCall ("Prelude","eqChar") [(Var 1),(Var 2)])]))),(Func ("Prelude","_inst#Prelude.Ord#Prelude.Int") 0 Public (TCons ("Prelude","_Dict#Ord") [(TCons ("Prelude","Int") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Ord") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Int") []),(Comb (FuncPartCall 2) ("Prelude","_impl#compare#Prelude.Ord#Prelude.Int") []),(Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") []),(Comb (FuncPartCall 2) ("Prelude","_impl#>=#Prelude.Ord#Prelude.Int") []),(Comb (FuncPartCall 2) ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") []),(Comb (FuncPartCall 2) ("Prelude","_impl#>#Prelude.Ord#Prelude.Int") []),(Comb (FuncPartCall 2) ("Prelude","_impl#min#Prelude.Ord#Prelude.Int") []),(Comb (FuncPartCall 2) ("Prelude","_impl#max#Prelude.Ord#Prelude.Int") [])]))),(Func ("Prelude","_impl#compare#Prelude.Ord#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Ordering") []))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","eqInt") [(Var 1),(Var 2)]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","EQ") [])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","ltEqInt") [(Var 1),(Var 2)]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","LT") [])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","GT") [])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))]))),(Func ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","ltEqInt") [(Var 1),(Var 2)]))),(Func ("Prelude","_impl#>=#Prelude.Ord#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","ltEqInt") [(Var 2),(Var 1)]))),(Func ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","not") [(Comb FuncCall ("Prelude","ltEqInt") [(Var 2),(Var 1)])]))),(Func ("Prelude","_impl#>#Prelude.Ord#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","not") [(Comb FuncCall ("Prelude","ltEqInt") [(Var 1),(Var 2)])]))),(Func ("Prelude","_impl#min#Prelude.Ord#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","ltEqInt") [(Var 1),(Var 2)]) [(Branch (Pattern ("Prelude","True") []) (Var 1)),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Var 2)),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))),(Func ("Prelude","_impl#max#Prelude.Ord#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","ltEqInt") [(Var 1),(Var 2)]) [(Branch (Pattern ("Prelude","True") []) (Var 2)),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Var 1)),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))),(Func ("Prelude","_inst#Prelude.Ord#Prelude.Float") 0 Public (TCons ("Prelude","_Dict#Ord") [(TCons ("Prelude","Float") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Ord") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Float") []),(Comb (FuncPartCall 2) ("Prelude","_impl#compare#Prelude.Ord#Prelude.Float") []),(Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#Prelude.Float") []),(Comb (FuncPartCall 2) ("Prelude","_impl#>=#Prelude.Ord#Prelude.Float") []),(Comb (FuncPartCall 2) ("Prelude","_impl#<#Prelude.Ord#Prelude.Float") []),(Comb (FuncPartCall 2) ("Prelude","_impl#>#Prelude.Ord#Prelude.Float") []),(Comb (FuncPartCall 2) ("Prelude","_impl#min#Prelude.Ord#Prelude.Float") []),(Comb (FuncPartCall 2) ("Prelude","_impl#max#Prelude.Ord#Prelude.Float") [])]))),(Func ("Prelude","_impl#compare#Prelude.Ord#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Ordering") []))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","eqFloat") [(Var 1),(Var 2)]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","EQ") [])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","ltEqFloat") [(Var 1),(Var 2)]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","LT") [])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","GT") [])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))]))),(Func ("Prelude","_impl#<=#Prelude.Ord#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","ltEqFloat") [(Var 1),(Var 2)]))),(Func ("Prelude","_impl#>=#Prelude.Ord#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","ltEqFloat") [(Var 2),(Var 1)]))),(Func ("Prelude","_impl#<#Prelude.Ord#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","not") [(Comb FuncCall ("Prelude","ltEqFloat") [(Var 2),(Var 1)])]))),(Func ("Prelude","_impl#>#Prelude.Ord#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","not") [(Comb FuncCall ("Prelude","ltEqFloat") [(Var 1),(Var 2)])]))),(Func ("Prelude","_impl#min#Prelude.Ord#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","ltEqFloat") [(Var 1),(Var 2)]) [(Branch (Pattern ("Prelude","True") []) (Var 1)),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Var 2)),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))),(Func ("Prelude","_impl#max#Prelude.Ord#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","ltEqFloat") [(Var 1),(Var 2)]) [(Branch (Pattern ("Prelude","True") []) (Var 2)),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Var 1)),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))),(Func ("Prelude","_inst#Prelude.Ord#Prelude.Char") 0 Public (TCons ("Prelude","_Dict#Ord") [(TCons ("Prelude","Char") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Ord") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") []),(Comb (FuncPartCall 2) ("Prelude","_impl#compare#Prelude.Ord#Prelude.Char") []),(Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#Prelude.Char") []),(Comb (FuncPartCall 2) ("Prelude","_impl#>=#Prelude.Ord#Prelude.Char") []),(Comb (FuncPartCall 2) ("Prelude","_impl#<#Prelude.Ord#Prelude.Char") []),(Comb (FuncPartCall 2) ("Prelude","_impl#>#Prelude.Ord#Prelude.Char") []),(Comb (FuncPartCall 2) ("Prelude","_impl#min#Prelude.Ord#Prelude.Char") []),(Comb (FuncPartCall 2) ("Prelude","_impl#max#Prelude.Ord#Prelude.Char") [])]))),(Func ("Prelude","_impl#compare#Prelude.Ord#Prelude.Char") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Ordering") []))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","eqChar") [(Var 1),(Var 2)]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","EQ") [])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","ltEqChar") [(Var 1),(Var 2)]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","LT") [])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","GT") [])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))]))),(Func ("Prelude","_impl#<=#Prelude.Ord#Prelude.Char") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","ltEqChar") [(Var 1),(Var 2)]))),(Func ("Prelude","_impl#>=#Prelude.Ord#Prelude.Char") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","ltEqChar") [(Var 2),(Var 1)]))),(Func ("Prelude","_impl#<#Prelude.Ord#Prelude.Char") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","not") [(Comb FuncCall ("Prelude","ltEqChar") [(Var 2),(Var 1)])]))),(Func ("Prelude","_impl#>#Prelude.Ord#Prelude.Char") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","not") [(Comb FuncCall ("Prelude","ltEqChar") [(Var 1),(Var 2)])]))),(Func ("Prelude","_impl#min#Prelude.Ord#Prelude.Char") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Char") []))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","ltEqChar") [(Var 1),(Var 2)]) [(Branch (Pattern ("Prelude","True") []) (Var 1)),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Var 2)),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))),(Func ("Prelude","_impl#max#Prelude.Ord#Prelude.Char") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Char") []))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","ltEqChar") [(Var 1),(Var 2)]) [(Branch (Pattern ("Prelude","True") []) (Var 2)),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Var 1)),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))),(Func ("Prelude","_inst#Prelude.Ord#Prelude.Bool") 0 Public (TCons ("Prelude","_Dict#Ord") [(TCons ("Prelude","Bool") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Ord") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Bool") []),(Comb (FuncPartCall 2) ("Prelude","_impl#compare#Prelude.Ord#Prelude.Bool") []),(Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#Prelude.Bool") []),(Comb (FuncPartCall 2) ("Prelude","_impl#>=#Prelude.Ord#Prelude.Bool") []),(Comb (FuncPartCall 2) ("Prelude","_impl#<#Prelude.Ord#Prelude.Bool") []),(Comb (FuncPartCall 2) ("Prelude","_impl#>#Prelude.Ord#Prelude.Bool") []),(Comb (FuncPartCall 2) ("Prelude","_impl#min#Prelude.Ord#Prelude.Bool") []),(Comb (FuncPartCall 2) ("Prelude","_impl#max#Prelude.Ord#Prelude.Bool") [])]))),(Func ("Prelude","_impl#compare#Prelude.Ord#Prelude.Bool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Ordering") []))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","&&") [(Comb FuncCall ("Prelude","not") [(Var 1)]),(Var 2)]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","LT") [])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","&&") [(Comb FuncCall ("Prelude","not") [(Var 2)]),(Var 1)]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","GT") [])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","EQ") [])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))]))),(Func ("Prelude","_impl#<=#Prelude.Ord#Prelude.Bool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","||") [(Comb FuncCall ("Prelude","not") [(Var 1)]),(Var 2)]))),(Func ("Prelude","_impl#>=#Prelude.Ord#Prelude.Bool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","||") [(Comb FuncCall ("Prelude","not") [(Var 2)]),(Var 1)]))),(Func ("Prelude","_impl#<#Prelude.Ord#Prelude.Bool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","&&") [(Comb FuncCall ("Prelude","not") [(Var 1)]),(Var 2)]))),(Func ("Prelude","_impl#>#Prelude.Ord#Prelude.Bool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","&&") [(Comb FuncCall ("Prelude","not") [(Var 2)]),(Var 1)]))),(Func ("Prelude","_impl#min#Prelude.Ord#Prelude.Bool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","&&") [(Var 1),(Var 2)]))),(Func ("Prelude","_impl#max#Prelude.Ord#Prelude.Bool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","||") [(Var 1),(Var 2)]))),(Func ("Prelude","_def#<=#Prelude.Ord") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Case Rigid (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","compare") [(Var 1)]),(Var 2)]),(Var 3)]) [(Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") [])),(Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") [])),(Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") []))])))] [])