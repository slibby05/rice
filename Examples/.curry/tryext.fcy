Prog "tryext" ["Prelude"] [] [Func ("tryext","g") 1 Public (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []])) (External "tryext.g"),Func ("tryext","f") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Comb FuncCall ("tryext","g") [Var 2])])),Func ("tryext","main") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []])) (Rule [1] (Comb FuncCall ("tryext","f") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 1)],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 2)],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 3)],Comb ConsCall ("Prelude","[]") []]]]]))] []