(Prog "PreludeList" ["PreludeBase","PreludeCompare","PreludeNum"] [] [(Func ("Prelude","_def#minBound#Prelude.Bounded") 2 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 0)]) (FuncType (TCons ("Prelude","()") []) (TVar 0))) (Rule [1,2] (Case Flex (Var 2) [(Branch (Pattern ("Prelude","()") []) (Comb FuncCall ("Prelude","error") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'N')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'h')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'p')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '`')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'B')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '\'')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])]))]))),(Func ("Prelude","_def#maxBound#Prelude.Bounded") 2 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 0)]) (FuncType (TCons ("Prelude","()") []) (TVar 0))) (Rule [1,2] (Case Flex (Var 2) [(Branch (Pattern ("Prelude","()") []) (Comb FuncCall ("Prelude","error") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'N')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'h')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'p')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '`')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'x')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'B')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '\'')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])]))]))),(Func ("Prelude","_def#succ#Prelude.Enum") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [(TVar 0)]) (FuncType (TVar 0) (TVar 0))) (Rule [1] (Comb FuncCall ("Prelude",".") [(Comb FuncCall ("Prelude","toEnum") [(Var 1)]),(Comb FuncCall ("Prelude",".") [(Comb (FuncPartCall 1) ("Prelude","flip") [(Comb (FuncPartCall 2) ("Prelude","_impl#+#Prelude.Num#Prelude.Int") []),(Lit (Intc 1))]),(Comb FuncCall ("Prelude","fromEnum") [(Var 1)])])]))),(Func ("Prelude","_def#pred#Prelude.Enum") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [(TVar 0)]) (FuncType (TVar 0) (TVar 0))) (Rule [1] (Comb FuncCall ("Prelude",".") [(Comb FuncCall ("Prelude","toEnum") [(Var 1)]),(Comb FuncCall ("Prelude",".") [(Comb (FuncPartCall 1) ("Prelude","_def#pred#Prelude.Enum._#lambda182") []),(Comb FuncCall ("Prelude","fromEnum") [(Var 1)])])]))),(Func ("Prelude","_def#pred#Prelude.Enum._#lambda182") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [(Var 1),(Lit (Intc 1))]))),(Func ("Prelude","_def#toEnum#Prelude.Enum") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [(TVar 0)]) (FuncType (TCons ("Prelude","Int") []) (TVar 0))) (Rule [1] (Comb FuncCall ("Prelude","error") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'N')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'h')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'p')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '`')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'E')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '\'')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])]))),(Func ("Prelude","_def#fromEnum#Prelude.Enum") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [(TVar 0)]) (FuncType (TVar 0) (TCons ("Prelude","Int") []))) (Rule [1] (Comb FuncCall ("Prelude","error") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'N')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'h')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'p')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '`')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'E')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '\'')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])]))),(Func ("Prelude","_def#enumFrom#Prelude.Enum") 2 Public (FuncType (TCons ("Prelude","_Dict#Enum") [(TVar 0)]) (FuncType (TVar 0) (TCons ("Prelude","[]") [(TVar 0)]))) (Rule [1,2] (Comb FuncCall ("Prelude","map") [(Comb FuncCall ("Prelude","toEnum") [(Var 1)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Int") []),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","fromEnum") [(Var 1)]),(Var 2)])])]))),(Func ("Prelude","_def#enumFromThen#Prelude.Enum") 3 Public (FuncType (TCons ("Prelude","_Dict#Enum") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [(TVar 0)])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","map") [(Comb FuncCall ("Prelude","toEnum") [(Var 1)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#enumFromThen#Prelude.Enum#Prelude.Int") []),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","fromEnum") [(Var 1)]),(Var 2)])]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","fromEnum") [(Var 1)]),(Var 3)])])]))),(Func ("Prelude","_def#enumFromTo#Prelude.Enum") 3 Public (FuncType (TCons ("Prelude","_Dict#Enum") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [(TVar 0)])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","map") [(Comb FuncCall ("Prelude","toEnum") [(Var 1)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Int") []),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","fromEnum") [(Var 1)]),(Var 2)])]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","fromEnum") [(Var 1)]),(Var 3)])])]))),(Func ("Prelude","_def#enumFromThenTo#Prelude.Enum") 4 Public (FuncType (TCons ("Prelude","_Dict#Enum") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [(TVar 0)]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","map") [(Comb FuncCall ("Prelude","toEnum") [(Var 1)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Int") []),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","fromEnum") [(Var 1)]),(Var 2)])]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","fromEnum") [(Var 1)]),(Var 3)])]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","fromEnum") [(Var 1)]),(Var 4)])])]))),(Func ("Prelude","_inst#Prelude.Bounded#Prelude.Bool") 0 Public (TCons ("Prelude","_Dict#Bounded") [(TCons ("Prelude","Bool") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Bounded") [(Comb (FuncPartCall 1) ("Prelude","_impl#minBound#Prelude.Bounded#Prelude.Bool") []),(Comb (FuncPartCall 1) ("Prelude","_impl#maxBound#Prelude.Bounded#Prelude.Bool") [])]))),(Func ("Prelude","_impl#minBound#Prelude.Bounded#Prelude.Bool") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","False") []))]))),(Func ("Prelude","_impl#maxBound#Prelude.Bounded#Prelude.Bool") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","True") []))]))),(Func ("Prelude","_inst#Prelude.Enum#Prelude.Bool") 0 Public (TCons ("Prelude","_Dict#Enum") [(TCons ("Prelude","Bool") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Enum") [(Comb (FuncPartCall 1) ("Prelude","_impl#succ#Prelude.Enum#Prelude.Bool") []),(Comb (FuncPartCall 1) ("Prelude","_impl#pred#Prelude.Enum#Prelude.Bool") []),(Comb (FuncPartCall 1) ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Bool") []),(Comb (FuncPartCall 1) ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Bool") []),(Comb FuncCall ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Bool") []),(Comb FuncCall ("Prelude","_impl#enumFromThen#Prelude.Enum#Prelude.Bool") []),(Comb FuncCall ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Bool") []),(Comb FuncCall ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Bool") [])]))),(Func ("Prelude","_impl#succ#Prelude.Enum#Prelude.Bool") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])),(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","error") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'P')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '.')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'E')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '.')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'B')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '.')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ':')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'b')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'g')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])]))]))),(Func ("Prelude","_impl#pred#Prelude.Enum#Prelude.Bool") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","error") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'P')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '.')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'E')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '.')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'B')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '.')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'p')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ':')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'b')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'g')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])),(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []))]))),(Func ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Bool") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") [(Var 1),(Lit (Intc 0))]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") [(Var 1),(Lit (Intc 1))]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") [])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","error") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'P')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '.')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'E')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '.')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'B')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '.')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'E')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ':')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'b')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'g')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))]))),(Func ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Bool") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Int") [])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","False") []) (Lit (Intc 0))),(Branch (Pattern ("Prelude","True") []) (Lit (Intc 1)))]))),(Func ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Bool") [])])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","boundedEnumFrom") [(Comb FuncCall ("Prelude","_inst#Prelude.Bounded#Prelude.Bool") []),(Comb FuncCall ("Prelude","_inst#Prelude.Enum#Prelude.Bool") [])]))),(Func ("Prelude","_impl#enumFromThen#Prelude.Enum#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Bool") [])]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","boundedEnumFromThen") [(Comb FuncCall ("Prelude","_inst#Prelude.Bounded#Prelude.Bool") []),(Comb FuncCall ("Prelude","_inst#Prelude.Enum#Prelude.Bool") [])]))),(Func ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Bool") [])]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#enumFromTo#Prelude.Enum") [(Comb FuncCall ("Prelude","_inst#Prelude.Enum#Prelude.Bool") [])]))),(Func ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Bool") [])])))) (Rule [] (Comb (FuncPartCall 3) ("Prelude","_def#enumFromThenTo#Prelude.Enum") [(Comb FuncCall ("Prelude","_inst#Prelude.Enum#Prelude.Bool") [])]))),(Func ("Prelude","_inst#Prelude.Bounded#Prelude.Ordering") 0 Public (TCons ("Prelude","_Dict#Bounded") [(TCons ("Prelude","Ordering") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Bounded") [(Comb (FuncPartCall 1) ("Prelude","_impl#minBound#Prelude.Bounded#Prelude.Ordering") []),(Comb (FuncPartCall 1) ("Prelude","_impl#maxBound#Prelude.Bounded#Prelude.Ordering") [])]))),(Func ("Prelude","_impl#minBound#Prelude.Bounded#Prelude.Ordering") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Ordering") [])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","LT") []))]))),(Func ("Prelude","_impl#maxBound#Prelude.Bounded#Prelude.Ordering") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Ordering") [])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","GT") []))]))),(Func ("Prelude","_inst#Prelude.Enum#Prelude.Ordering") 0 Public (TCons ("Prelude","_Dict#Enum") [(TCons ("Prelude","Ordering") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Enum") [(Comb (FuncPartCall 1) ("Prelude","_impl#succ#Prelude.Enum#Prelude.Ordering") []),(Comb (FuncPartCall 1) ("Prelude","_impl#pred#Prelude.Enum#Prelude.Ordering") []),(Comb (FuncPartCall 1) ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Ordering") []),(Comb (FuncPartCall 1) ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Ordering") []),(Comb FuncCall ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Ordering") []),(Comb FuncCall ("Prelude","_impl#enumFromThen#Prelude.Enum#Prelude.Ordering") []),(Comb FuncCall ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Ordering") []),(Comb FuncCall ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Ordering") [])]))),(Func ("Prelude","_impl#succ#Prelude.Enum#Prelude.Ordering") 1 Public (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Ordering") [])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","EQ") [])),(Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","GT") [])),(Branch (Pattern ("Prelude","GT") []) (Comb FuncCall ("Prelude","error") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'P')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '.')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'E')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '.')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'O')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'g')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '.')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ':')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'b')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'g')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])]))]))),(Func ("Prelude","_impl#pred#Prelude.Enum#Prelude.Ordering") 1 Public (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Ordering") [])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","LT") []) (Comb FuncCall ("Prelude","error") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'P')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '.')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'E')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '.')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'O')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'g')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '.')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'p')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ':')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'b')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'g')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])),(Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","LT") [])),(Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","EQ") []))]))),(Func ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Ordering") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Ordering") [])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") [(Var 1),(Lit (Intc 0))]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","LT") [])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") [(Var 1),(Lit (Intc 1))]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","EQ") [])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") [(Var 1),(Lit (Intc 2))]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","GT") [])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","error") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'P')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '.')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'E')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '.')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'O')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'g')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '.')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'E')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ':')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'b')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'g')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))]))]))),(Func ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Ordering") 1 Public (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Int") [])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","LT") []) (Lit (Intc 0))),(Branch (Pattern ("Prelude","EQ") []) (Lit (Intc 1))),(Branch (Pattern ("Prelude","GT") []) (Lit (Intc 2)))]))),(Func ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Ordering") [])])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","boundedEnumFrom") [(Comb FuncCall ("Prelude","_inst#Prelude.Bounded#Prelude.Ordering") []),(Comb FuncCall ("Prelude","_inst#Prelude.Enum#Prelude.Ordering") [])]))),(Func ("Prelude","_impl#enumFromThen#Prelude.Enum#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Ordering") [])]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","boundedEnumFromThen") [(Comb FuncCall ("Prelude","_inst#Prelude.Bounded#Prelude.Ordering") []),(Comb FuncCall ("Prelude","_inst#Prelude.Enum#Prelude.Ordering") [])]))),(Func ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Ordering") [])]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#enumFromTo#Prelude.Enum") [(Comb FuncCall ("Prelude","_inst#Prelude.Enum#Prelude.Ordering") [])]))),(Func ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Ordering") [])])))) (Rule [] (Comb (FuncPartCall 3) ("Prelude","_def#enumFromThenTo#Prelude.Enum") [(Comb FuncCall ("Prelude","_inst#Prelude.Enum#Prelude.Ordering") [])]))),(Func ("Prelude","_inst#Prelude.Bounded#Prelude.Char") 0 Public (TCons ("Prelude","_Dict#Bounded") [(TCons ("Prelude","Char") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Bounded") [(Comb (FuncPartCall 1) ("Prelude","_impl#minBound#Prelude.Bounded#Prelude.Char") []),(Comb (FuncPartCall 1) ("Prelude","_impl#maxBound#Prelude.Bounded#Prelude.Char") [])]))),(Func ("Prelude","_impl#minBound#Prelude.Bounded#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Char") [])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","()") []) (Comb FuncCall ("Prelude","chr") [(Lit (Intc 0))]))]))),(Func ("Prelude","_impl#maxBound#Prelude.Bounded#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Char") [])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","()") []) (Comb FuncCall ("Prelude","chr") [(Comb FuncCall ("Prelude","uppermostCharacter") [])]))]))),(Func ("Prelude","_inst#Prelude.Enum#Prelude.Char") 0 Public (TCons ("Prelude","_Dict#Enum") [(TCons ("Prelude","Char") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Enum") [(Comb (FuncPartCall 1) ("Prelude","_impl#succ#Prelude.Enum#Prelude.Char") []),(Comb (FuncPartCall 1) ("Prelude","_impl#pred#Prelude.Enum#Prelude.Char") []),(Comb FuncCall ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Char") []),(Comb FuncCall ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Char") []),(Comb FuncCall ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Char") []),(Comb FuncCall ("Prelude","_impl#enumFromThen#Prelude.Enum#Prelude.Char") []),(Comb FuncCall ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Char") []),(Comb FuncCall ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Char") [])]))),(Func ("Prelude","_impl#succ#Prelude.Enum#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Char") [])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") []),(Comb FuncCall ("Prelude","ord") [(Var 1)])]),(Comb FuncCall ("Prelude","uppermostCharacter") [])]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [(Comb (FuncPartCall 1) ("Prelude","chr") []),(Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [(Comb FuncCall ("Prelude","ord") [(Var 1)]),(Lit (Intc 1))])])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","error") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'P')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '.')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'E')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '.')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'C')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'h')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '.')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ':')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))),(Func ("Prelude","_impl#pred#Prelude.Enum#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Char") [])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#>#Prelude.Ord#Prelude.Int") []),(Comb FuncCall ("Prelude","ord") [(Var 1)])]),(Lit (Intc 0))]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [(Comb (FuncPartCall 1) ("Prelude","chr") []),(Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [(Comb FuncCall ("Prelude","ord") [(Var 1)]),(Lit (Intc 1))])])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","error") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'P')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '.')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'E')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '.')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'C')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'h')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '.')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ':')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'p')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))),(Func ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Char") [])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","chr") []))),(Func ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Int") [])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","ord") []))),(Func ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","boundedEnumFrom") [(Comb FuncCall ("Prelude","_inst#Prelude.Bounded#Prelude.Char") []),(Comb FuncCall ("Prelude","_inst#Prelude.Enum#Prelude.Char") [])]))),(Func ("Prelude","_impl#enumFromThen#Prelude.Enum#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","boundedEnumFromThen") [(Comb FuncCall ("Prelude","_inst#Prelude.Bounded#Prelude.Char") []),(Comb FuncCall ("Prelude","_inst#Prelude.Enum#Prelude.Char") [])]))),(Func ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#enumFromTo#Prelude.Enum") [(Comb FuncCall ("Prelude","_inst#Prelude.Enum#Prelude.Char") [])]))),(Func ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])))) (Rule [] (Comb (FuncPartCall 3) ("Prelude","_def#enumFromThenTo#Prelude.Enum") [(Comb FuncCall ("Prelude","_inst#Prelude.Enum#Prelude.Char") [])]))),(Func ("Prelude","_inst#Prelude.Enum#Prelude.Int") 0 Public (TCons ("Prelude","_Dict#Enum") [(TCons ("Prelude","Int") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Enum") [(Comb (FuncPartCall 1) ("Prelude","_impl#succ#Prelude.Enum#Prelude.Int") []),(Comb (FuncPartCall 1) ("Prelude","_impl#pred#Prelude.Enum#Prelude.Int") []),(Comb (FuncPartCall 1) ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Int") []),(Comb (FuncPartCall 1) ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Int") []),(Comb FuncCall ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Int") []),(Comb FuncCall ("Prelude","_impl#enumFromThen#Prelude.Enum#Prelude.Int") []),(Comb FuncCall ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Int") []),(Comb FuncCall ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Int") [])]))),(Func ("Prelude","_impl#succ#Prelude.Enum#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [(Var 1),(Lit (Intc 1))]))),(Func ("Prelude","_impl#pred#Prelude.Enum#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [(Var 1),(Lit (Intc 1))]))),(Func ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Var 1))),(Func ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Var 1))),(Func ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","enumFrom_") []))),(Func ("Prelude","_impl#enumFromThen#Prelude.Enum#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","enumFromThen_") []))),(Func ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","enumFromTo_") []))),(Func ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])])))) (Rule [] (Comb (FuncPartCall 3) ("Prelude","enumFromThenTo_") []))),(Func ("Prelude","!!") 2 Public (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (TCons ("Prelude","Int") []) (TVar 0))) (Rule [1,2] (Case Flex (Var 1) [(Branch (Pattern ("Prelude",":") [3,4]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") [(Var 2),(Lit (Intc 0))]) [(Branch (Pattern ("Prelude","True") []) (Var 3)),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#>#Prelude.Ord#Prelude.Int") []),(Var 2)]),(Lit (Intc 0))]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","!!") [(Var 4),(Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [(Var 2),(Lit (Intc 1))])])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))]))),(Func ("Prelude","foldl") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 0))) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [(TVar 1)]) (TVar 0)))) (Rule [1,2,3] (Case Flex (Var 3) [(Branch (Pattern ("Prelude","[]") []) (Var 2)),(Branch (Pattern ("Prelude",":") [4,5]) (Comb FuncCall ("Prelude","foldl") [(Var 1),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Var 1),(Var 2)]),(Var 4)]),(Var 5)]))]))),(Func ("Prelude","foldl1") 2 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TVar 0))) (Rule [1,2] (Case Flex (Var 2) [(Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("Prelude","foldl") [(Var 1),(Var 3),(Var 4)]))]))),(Func ("Prelude","foldr1") 2 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TVar 0))) (Rule [1,2] (Case Flex (Var 2) [(Branch (Pattern ("Prelude",":") [3,4]) (Case Flex (Var 4) [(Branch (Pattern ("Prelude","[]") []) (Var 3)),(Branch (Pattern ("Prelude",":") [5,6]) (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Var 1),(Var 3)]),(Comb FuncCall ("Prelude","foldr1") [(Var 1),(Var 4)])]))]))]))),(Func ("Prelude","concatMap") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","[]") [(TVar 1)])) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 1)]))) (Rule [1] (Comb FuncCall ("Prelude",".") [(Comb (FuncPartCall 1) ("Prelude","concat") []),(Comb (FuncPartCall 1) ("Prelude","map") [(Var 1)])]))),(Func ("Prelude","replicate") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Prelude","[]") [(TVar 0)]))) (Rule [1,2] (Comb FuncCall ("Prelude","take") [(Var 1),(Comb FuncCall ("Prelude","repeat") [(Var 2)])]))),(Func ("Prelude","drop") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)]))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") [(Var 1),(Lit (Intc 0))]) [(Branch (Pattern ("Prelude","True") []) (Var 2)),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Var 2) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])),(Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("Prelude","drop") [(Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [(Var 1),(Lit (Intc 1))]),(Var 4)]))]))]))),(Func ("Prelude","takeWhile") 2 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)]))) (Rule [1,2] (Case Flex (Var 2) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])),(Branch (Pattern ("Prelude",":") [3,4]) (Case Rigid (Comb FuncCall ("Prelude","apply") [(Var 1),(Var 3)]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [(Var 3),(Comb FuncCall ("Prelude","takeWhile") [(Var 1),(Var 4)])])),(Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") []))]))]))),(Func ("Prelude","dropWhile") 2 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)]))) (Rule [1,2] (Case Flex (Var 2) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])),(Branch (Pattern ("Prelude",":") [3,4]) (Case Rigid (Comb FuncCall ("Prelude","apply") [(Var 1),(Var 3)]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","dropWhile") [(Var 1),(Var 4)])),(Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [(Var 3),(Var 4)]))]))]))),(Func ("Prelude","break") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TVar 0)])]))) (Rule [1] (Comb (FuncPartCall 1) ("Prelude","span") [(Comb FuncCall ("Prelude",".") [(Comb (FuncPartCall 1) ("Prelude","not") []),(Var 1)])]))),(Func ("Prelude","reverse") 0 Public (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","foldl") [(Comb (FuncPartCall 2) ("Prelude","flip") [(Comb (ConsPartCall 2) ("Prelude",":") [])]),(Comb ConsCall ("Prelude","[]") [])]))),(Func ("Prelude","and") 0 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Bool") [])]) (TCons ("Prelude","Bool") [])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","&&") []),(Comb ConsCall ("Prelude","True") [])]))),(Func ("Prelude","or") 0 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Bool") [])]) (TCons ("Prelude","Bool") [])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","||") []),(Comb ConsCall ("Prelude","False") [])]))),(Func ("Prelude","any") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","Bool") []))) (Rule [1] (Comb FuncCall ("Prelude",".") [(Comb FuncCall ("Prelude","or") []),(Comb (FuncPartCall 1) ("Prelude","map") [(Var 1)])]))),(Func ("Prelude","all") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","Bool") []))) (Rule [1] (Comb FuncCall ("Prelude",".") [(Comb FuncCall ("Prelude","and") []),(Comb (FuncPartCall 1) ("Prelude","map") [(Var 1)])]))),(Func ("Prelude","elem") 2 Public (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","Bool") [])))) (Rule [1,2] (Comb FuncCall ("Prelude","any") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","==") [(Var 1)]),(Var 2)])]))),(Func ("Prelude","notElem") 2 Public (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","Bool") [])))) (Rule [1,2] (Comb FuncCall ("Prelude","all") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","/=") [(Var 1)]),(Var 2)])]))),(Func ("Prelude","anyOf") 0 Public (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TVar 0)) (Rule [] (Comb (FuncPartCall 1) ("Prelude","foldr1") [(Comb (FuncPartCall 2) ("Prelude","?") [])]))),(Func ("Prelude","uppermostCharacter") 0 Private (TCons ("Prelude","Int") []) (Rule [] (Lit (Intc 1114111)))),(Func ("Prelude","boundedEnumFrom") 3 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Enum") [(TVar 0)]) (FuncType (TVar 0) (TCons ("Prelude","[]") [(TVar 0)])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","map") [(Comb FuncCall ("Prelude","toEnum") [(Var 2)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Int") []),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","fromEnum") [(Var 2)]),(Var 3)])]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","fromEnum") [(Var 2)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","asTypeOf") []),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","maxBound") [(Var 1)]),(Comb ConsCall ("Prelude","()") [])])]),(Var 3)])])])]))),(Func ("Prelude","boundedEnumFromThen") 4 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Enum") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [(TVar 0)]))))) (Rule [1,2,3,4] (Let [(5,(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","fromEnum") [(Var 2)]),(Var 3)])),(6,(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","fromEnum") [(Var 2)]),(Var 4)]))] (Case Rigid (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Int") []),(Var 6)]),(Var 5)]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [(Comb FuncCall ("Prelude","toEnum") [(Var 2)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Int") []),(Var 5)]),(Var 6)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","fromEnum") [(Var 2)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","asTypeOf") []),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","maxBound") [(Var 1)]),(Comb ConsCall ("Prelude","()") [])])]),(Var 3)])])])])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [(Comb FuncCall ("Prelude","toEnum") [(Var 2)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Int") []),(Var 5)]),(Var 6)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","fromEnum") [(Var 2)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","asTypeOf") []),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","minBound") [(Var 1)]),(Comb ConsCall ("Prelude","()") [])])]),(Var 3)])])])])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))])))),(Func ("Prelude","minBound") 1 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 0)]) (FuncType (TCons ("Prelude","()") []) (TVar 0))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Bounded") [2,3]) (Var 2))]))),(Func ("Prelude","maxBound") 1 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 0)]) (FuncType (TCons ("Prelude","()") []) (TVar 0))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Bounded") [2,3]) (Var 3))]))),(Func ("Prelude","succ") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [(TVar 0)]) (FuncType (TVar 0) (TVar 0))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Enum") [2,3,4,5,6,7,8,9]) (Var 2))]))),(Func ("Prelude","pred") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [(TVar 0)]) (FuncType (TVar 0) (TVar 0))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Enum") [2,3,4,5,6,7,8,9]) (Var 3))]))),(Func ("Prelude","toEnum") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [(TVar 0)]) (FuncType (TCons ("Prelude","Int") []) (TVar 0))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Enum") [2,3,4,5,6,7,8,9]) (Var 4))]))),(Func ("Prelude","fromEnum") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [(TVar 0)]) (FuncType (TVar 0) (TCons ("Prelude","Int") []))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Enum") [2,3,4,5,6,7,8,9]) (Var 5))]))),(Func ("Prelude","enumFrom") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [(TVar 0)]) (FuncType (TVar 0) (TCons ("Prelude","[]") [(TVar 0)]))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Enum") [2,3,4,5,6,7,8,9]) (Var 6))]))),(Func ("Prelude","enumFromThen") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [(TVar 0)])))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Enum") [2,3,4,5,6,7,8,9]) (Var 7))]))),(Func ("Prelude","enumFromTo") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [(TVar 0)])))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Enum") [2,3,4,5,6,7,8,9]) (Var 8))]))),(Func ("Prelude","enumFromThenTo") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [(TVar 0)]))))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Enum") [2,3,4,5,6,7,8,9]) (Var 9))]))),(Func ("Prelude","_inst#Prelude.Eq#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 0)]) (TCons ("Prelude","_Dict#Eq") [(TCons ("Prelude","[]") [(TVar 0)])])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Eq") [(Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#[]") [(Var 1)]),(Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#[]") [(Var 1)])]))),(Func ("Prelude","_impl#==#Prelude.Eq#[]") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Case Flex (Var 2) [(Branch (Pattern ("Prelude","[]") []) (Case Flex (Var 3) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","True") [])),(Branch (Pattern ("Prelude",":") [4,5]) (Comb ConsCall ("Prelude","False") []))])),(Branch (Pattern ("Prelude",":") [6,7]) (Case Flex (Var 3) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude",":") [8,9]) (Comb FuncCall ("Prelude","&&") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","==") [(Var 1)]),(Var 6)]),(Var 8)]),(Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [(Var 1),(Var 7),(Var 9)])]))]))]))),(Func ("Prelude","_impl#/=#Prelude.Eq#[]") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","not") [(Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [(Var 1),(Var 2),(Var 3)])]))),(Func ("Prelude","_inst#Prelude.Ord#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (TCons ("Prelude","_Dict#Ord") [(TCons ("Prelude","[]") [(TVar 0)])])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Ord") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#[]") [(Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [(Var 1)])]),(Comb (FuncPartCall 2) ("Prelude","_impl#compare#Prelude.Ord#[]") [(Var 1)]),(Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#[]") [(Var 1)]),(Comb (FuncPartCall 2) ("Prelude","_impl#>=#Prelude.Ord#[]") [(Var 1)]),(Comb (FuncPartCall 2) ("Prelude","_impl#<#Prelude.Ord#[]") [(Var 1)]),(Comb (FuncPartCall 2) ("Prelude","_impl#>#Prelude.Ord#[]") [(Var 1)]),(Comb (FuncPartCall 2) ("Prelude","_impl#min#Prelude.Ord#[]") [(Var 1)]),(Comb (FuncPartCall 2) ("Prelude","_impl#max#Prelude.Ord#[]") [(Var 1)])]))),(Func ("Prelude","_impl#compare#Prelude.Ord#[]") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","Ordering") [])))) (Rule [1,2,3] (Case Flex (Var 2) [(Branch (Pattern ("Prelude","[]") []) (Case Flex (Var 3) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","EQ") [])),(Branch (Pattern ("Prelude",":") [4,5]) (Comb ConsCall ("Prelude","LT") []))])),(Branch (Pattern ("Prelude",":") [6,7]) (Case Flex (Var 3) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","GT") [])),(Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","==") [(Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [(Var 1)])]),(Var 6)]),(Var 8)]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#[]") [(Var 1),(Var 7),(Var 9)])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","compare") [(Var 1)]),(Var 6)]),(Var 8)])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))]))]))),(Func ("Prelude","_impl#<=#Prelude.Ord#[]") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Case Rigid (Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#[]") [(Var 1),(Var 2),(Var 3)]) [(Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") [])),(Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") [])),(Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") []))]))),(Func ("Prelude","_impl#>=#Prelude.Ord#[]") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Case Rigid (Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#[]") [(Var 1),(Var 2),(Var 3)]) [(Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") [])),(Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") []))]))),(Func ("Prelude","_impl#<#Prelude.Ord#[]") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Case Rigid (Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#[]") [(Var 1),(Var 2),(Var 3)]) [(Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") [])),(Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") []))]))),(Func ("Prelude","_impl#>#Prelude.Ord#[]") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Case Rigid (Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#[]") [(Var 1),(Var 2),(Var 3)]) [(Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") []))]))),(Func ("Prelude","_impl#min#Prelude.Ord#[]") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)])))) (Rule [1,2,3] (Case Rigid (Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#[]") [(Var 1),(Var 2),(Var 3)]) [(Branch (Pattern ("Prelude","True") []) (Var 2)),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Var 3)),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))),(Func ("Prelude","_impl#max#Prelude.Ord#[]") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)])))) (Rule [1,2,3] (Case Rigid (Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#[]") [(Var 1),(Var 2),(Var 3)]) [(Branch (Pattern ("Prelude","True") []) (Var 2)),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Var 3)),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))),(Func ("Prelude","take") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)]))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") [(Var 1),(Lit (Intc 0))]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") [])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Var 2) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])),(Branch (Pattern ("Prelude",":") [3,4]) (Comb ConsCall ("Prelude",":") [(Var 3),(Comb FuncCall ("Prelude","take") [(Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [(Var 1),(Lit (Intc 1))]),(Var 4)])]))]))]))),(Func ("Prelude","splitAt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TVar 0)])]))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") [(Var 1),(Lit (Intc 0))]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude","[]") []),(Var 2)])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Var 2) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude","[]") []),(Comb ConsCall ("Prelude","[]") [])])),(Branch (Pattern ("Prelude",":") [3,4]) (Case Rigid (Comb FuncCall ("Prelude","splitAt") [(Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [(Var 1),(Lit (Intc 1))]),(Var 4)]) [(Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude",":") [(Var 3),(Var 5)]),(Var 6)]))]))]))]))),(Func ("Prelude","span") 2 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TVar 0)])]))) (Rule [1,2] (Case Flex (Var 2) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude","[]") []),(Comb ConsCall ("Prelude","[]") [])])),(Branch (Pattern ("Prelude",":") [3,4]) (Case Rigid (Comb FuncCall ("Prelude","apply") [(Var 1),(Var 3)]) [(Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("Prelude","span") [(Var 1),(Var 4)]) [(Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude",":") [(Var 3),(Var 5)]),(Var 6)]))])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude","[]") []),(Comb ConsCall ("Prelude",":") [(Var 3),(Var 4)])])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))]))),(Func ("Prelude","map") 1 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 1)]))) (Rule [1] (Comb (FuncPartCall 1) ("Prelude","build_fold") [(Comb (FuncPartCall 3) ("Prelude","map_mkc") [(Var 1)]),(Comb (FuncPartCall 1) ("Prelude","id") [])]))),(Func ("Prelude","map_mkc") 4 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (FuncType (TVar 1) (FuncType (TVar 2) (TVar 2))) (FuncType (TVar 0) (FuncType (TVar 2) (TVar 2))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Var 2),(Comb FuncCall ("Prelude","apply") [(Var 1),(Var 3)])]),(Var 4)]))),(Func ("Prelude","filter") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)]))) (Rule [1] (Comb (FuncPartCall 1) ("Prelude","build_fold") [(Comb (FuncPartCall 3) ("Prelude","filter_mkc") [(Var 1)]),(Comb (FuncPartCall 1) ("Prelude","id") [])]))),(Func ("Prelude","filter_mkc") 4 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 1))) (FuncType (TVar 0) (FuncType (TVar 1) (TVar 1))))) (Rule [1,2,3,4] (Case Rigid (Comb FuncCall ("Prelude","apply") [(Var 1),(Var 3)]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Var 2),(Var 3)]),(Var 4)])),(Branch (Pattern ("Prelude","False") []) (Var 4))]))),(Func ("Prelude","++") 2 Public (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)]))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","concat") []),(Comb FuncCall ("Prelude","build") [(Comb (FuncPartCall 2) ("Prelude","append_build") [(Var 1),(Var 2)])])]))),(Func ("Prelude","append_build") 4 Public (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (TVar 1) (TVar 1))) (FuncType (TVar 1) (TVar 1))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Var 3),(Var 1)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Var 3),(Var 2)]),(Var 4)])]))),(Func ("Prelude","concat") 0 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","[]") [(TVar 0)])]) (TCons ("Prelude","[]") [(TVar 0)])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","build_fold") [(Comb (FuncPartCall 3) ("Prelude","concat_mkc") []),(Comb (FuncPartCall 1) ("Prelude","id") [])]))),(Func ("Prelude","concat_mkc") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 1))) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (TVar 1) (TVar 1)))) (Rule [1,2,3] (Comb FuncCall ("Prelude","foldr") [(Var 1),(Var 3),(Var 2)]))),(Func ("Prelude","repeat") 1 Public (FuncType (TVar 0) (TCons ("Prelude","[]") [(TVar 0)])) (Rule [1] (Comb FuncCall ("Prelude","build") [(Comb (FuncPartCall 2) ("Prelude","repeat_build") [(Var 1)])]))),(Func ("Prelude","repeat_build") 3 Public (FuncType (TVar 0) (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 1))) (FuncType (TVar 2) (TVar 1)))) (Rule [1,2,3] (Let [(4,(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Var 2),(Var 1)]),(Var 4)]))] (Var 4)))),(Func ("Prelude","lookup") 2 Public (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TVar 1)])]) (TCons ("Prelude","Maybe") [(TVar 1)])))) (Rule [1,2] (Comb (FuncPartCall 1) ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","lookup_fold") [(Var 1),(Var 2)]),(Comb ConsCall ("Prelude","Nothing") [])]))),(Func ("Prelude","lookup_fold") 4 Public (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TVar 1)]) (FuncType (TCons ("Prelude","Maybe") [(TVar 1)]) (TCons ("Prelude","Maybe") [(TVar 1)]))))) (Rule [1,2,3,4] (Case Flex (Var 3) [(Branch (Pattern ("Prelude","(,)") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","==") [(Var 1)]),(Var 2)]),(Var 5)]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","Just") [(Var 6)])),(Branch (Pattern ("Prelude","False") []) (Var 4))]))]))),(Func ("Prelude","iterate") 2 Public (FuncType (FuncType (TVar 0) (TVar 0)) (FuncType (TVar 0) (TCons ("Prelude","[]") [(TVar 0)]))) (Rule [1,2] (Comb FuncCall ("Prelude","build") [(Comb (FuncPartCall 2) ("Prelude","iterate_build") [(Var 1),(Var 2)])]))),(Func ("Prelude","iterate_build") 4 Public (FuncType (FuncType (TVar 0) (TVar 0)) (FuncType (TVar 0) (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 1))) (FuncType (TVar 2) (TVar 1))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Var 3),(Var 2)]),(Comb FuncCall ("Prelude","iterate_build") [(Var 1),(Comb FuncCall ("Prelude","apply") [(Var 1),(Var 2)]),(Var 3),(Var 4)])]))),(Func ("Prelude","enumFrom_") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])])) (Rule [1] (Comb FuncCall ("Prelude","iterate") [(Comb (FuncPartCall 1) ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [(Lit (Intc 1))]),(Var 1)]))),(Func ("Prelude","enumFromThen_") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]))) (Rule [1,2] (Comb FuncCall ("Prelude","iterate") [(Comb (FuncPartCall 1) ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [(Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [(Var 2),(Var 1)])]),(Var 1)]))),(Func ("Prelude","enumFromTo_") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]))) (Rule [1,2] (Comb FuncCall ("Prelude","build") [(Comb (FuncPartCall 2) ("Prelude","enumFromTo_build") [(Var 1),(Var 2)])]))),(Func ("Prelude","enumFromTo_build") 4 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]))) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]))))) (Rule [1,2,3,4] (Case Rigid (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#>#Prelude.Ord#Prelude.Int") []),(Var 1)]),(Var 2)]) [(Branch (Pattern ("Prelude","True") []) (Var 4)),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Var 3),(Var 1)]),(Comb FuncCall ("Prelude","enumFromTo_build") [(Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [(Var 1),(Lit (Intc 1))]),(Var 2),(Var 3),(Var 4)])]))]))),(Func ("Prelude","enumFromThenTo_") 3 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","build") [(Comb (FuncPartCall 2) ("Prelude","enumFromThenTo_build") [(Var 1),(Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [(Var 2),(Var 1)]),(Var 3)])]))),(Func ("Prelude","enumFromThenTo_build") 5 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]))) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])])))))) (Rule [1,2,3,4,5] (Case Rigid (Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") [(Var 2),(Lit (Intc 0))]) [(Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") []),(Var 1)]),(Var 3)]) [(Branch (Pattern ("Prelude","True") []) (Var 5)),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Var 4),(Var 1)]),(Comb FuncCall ("Prelude","enumFromThenTo_build") [(Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [(Var 1),(Var 2)]),(Var 2),(Var 3),(Var 4),(Var 5)])]))])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#>#Prelude.Ord#Prelude.Int") []),(Var 1)]),(Var 3)]) [(Branch (Pattern ("Prelude","True") []) (Var 5)),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Var 4),(Var 1)]),(Comb FuncCall ("Prelude","enumFromThenTo_build") [(Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [(Var 1),(Var 2)]),(Var 2),(Var 3),(Var 4),(Var 5)])]))]))]))),(Func ("Prelude","length") 0 Public (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","Int") [])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","length_fold") []),(Lit (Intc 0))]))),(Func ("Prelude","length_fold") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [(Lit (Intc 1)),(Var 2)]))),(Func ("Prelude","null") 0 Public (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","Bool") [])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","null_fold") []),(Comb ConsCall ("Prelude","True") [])]))),(Func ("Prelude","null_fold") 2 Public (FuncType (TVar 0) (FuncType (TVar 1) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb ConsCall ("Prelude","False") [])))] [])