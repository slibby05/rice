Prog "bad5" ["Prelude"] [] [Func ("bad5","f") 3 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (FuncType (TCons ("Prelude","Bool") []) (TVar 0)))) (Rule [1,2,3] (Let [(4,Case Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","-") [Var 1],Var 5],Var 2]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","+") [Var 1],Var 2],Var 5])]),(5,Case Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","-") [Var 1],Var 4],Var 2]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","+") [Var 1],Var 2],Var 4])])] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","+") [Var 1],Var 4],Var 5]))),Func ("bad5","main") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (TVar 0)) (Rule [1] (Comb FuncCall ("bad5","f") [Var 1,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 3)],Comb ConsCall ("Prelude","False") []]))] []