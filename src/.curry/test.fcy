(Prog "test" ["Prelude"] [(Type ("test","Color") Public [] [(Cons ("test","Red") 0 Public []),(Cons ("test","Green") 0 Public []),(Cons ("test","Blue") 0 Public []),(Cons ("test","Purple") 0 Public [])])] [(Func ("test","_inst#Prelude.Eq#test.Color") 0 Public (TCons ("Prelude","_Dict#Eq") [(TCons ("test","Color") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [(Comb (FuncPartCall 2) ("test","_impl#==#Prelude.Eq#test.Color") []),(Comb FuncCall ("test","_impl#/=#Prelude.Eq#test.Color") [])]))),(Func ("test","_impl#==#Prelude.Eq#test.Color") 2 Public (FuncType (TCons ("test","Color") []) (FuncType (TCons ("test","Color") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [(Branch (Pattern ("test","Red") []) (Case Flex (Var 2) [(Branch (Pattern ("test","Red") []) (Comb ConsCall ("Prelude","True") [])),(Branch (Pattern ("test","Green") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("test","Blue") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("test","Purple") []) (Comb ConsCall ("Prelude","False") []))])),(Branch (Pattern ("test","Green") []) (Case Flex (Var 2) [(Branch (Pattern ("test","Red") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("test","Green") []) (Comb ConsCall ("Prelude","True") [])),(Branch (Pattern ("test","Blue") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("test","Purple") []) (Comb ConsCall ("Prelude","False") []))])),(Branch (Pattern ("test","Blue") []) (Case Flex (Var 2) [(Branch (Pattern ("test","Red") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("test","Green") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("test","Blue") []) (Comb ConsCall ("Prelude","True") [])),(Branch (Pattern ("test","Purple") []) (Comb ConsCall ("Prelude","False") []))])),(Branch (Pattern ("test","Purple") []) (Case Flex (Var 2) [(Branch (Pattern ("test","Red") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("test","Green") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("test","Blue") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("test","Purple") []) (Comb ConsCall ("Prelude","True") []))]))]))),(Func ("test","_impl#/=#Prelude.Eq#test.Color") 0 Public (FuncType (TCons ("test","Color") []) (FuncType (TCons ("test","Color") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [(Comb FuncCall ("test","_inst#Prelude.Eq#test.Color") [])]))),(Func ("test","_inst#Prelude.Show#test.Color") 0 Public (TCons ("Prelude","_Dict#Show") [(TCons ("test","Color") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [(Comb FuncCall ("test","_impl#show#Prelude.Show#test.Color") []),(Comb (FuncPartCall 2) ("test","_impl#showsPrec#Prelude.Show#test.Color") []),(Comb FuncCall ("test","_impl#showList#Prelude.Show#test.Color") [])]))),(Func ("test","_impl#show#Prelude.Show#test.Color") 0 Public (FuncType (TCons ("test","Color") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [(Comb FuncCall ("test","_inst#Prelude.Show#test.Color") [])]))),(Func ("test","_impl#showsPrec#Prelude.Show#test.Color") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("test","Color") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])))) (Rule [1,2] (Case Flex (Var 2) [(Branch (Pattern ("test","Red") []) (Comb (FuncPartCall 1) ("Prelude","showString") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'R')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude","[]") [])])])])])),(Branch (Pattern ("test","Green") []) (Comb (FuncPartCall 1) ("Prelude","showString") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'G')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude","[]") [])])])])])])])),(Branch (Pattern ("test","Blue") []) (Comb (FuncPartCall 1) ("Prelude","showString") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'B')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude","[]") [])])])])])])),(Branch (Pattern ("test","Purple") []) (Comb (FuncPartCall 1) ("Prelude","showString") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'P')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'p')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude","[]") [])])])])])])])]))]))),(Func ("test","_impl#showList#Prelude.Show#test.Color") 0 Public (FuncType (TCons ("Prelude","[]") [(TCons ("test","Color") [])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [(Comb FuncCall ("test","_inst#Prelude.Show#test.Color") [])]))),(Func ("test","loop") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [(TVar 0)]) (TVar 0)) (Rule [1] (Let [(2,(Var 3)),(3,(Var 2))] (Let [(4,(Var 5)),(5,(Var 4))] (Let [(6,(Var 7)),(7,(Var 6))] (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","+") [(Var 1)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","+") [(Var 1)]),(Var 2)]),(Var 4)])]),(Var 6)])))))),(Func ("test","c") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Int") [])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 1),(Lit (Charc '1'))]) [(Branch (Pattern ("Prelude","True") []) (Lit (Intc 2))),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 1),(Lit (Charc '2'))]) [(Branch (Pattern ("Prelude","True") []) (Lit (Intc 4))),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","=:=") [(Var 1),(Lit (Charc '3'))]) [(Branch (Pattern ("Prelude","True") []) (Lit (Intc 9))),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))]))),(Func ("test","s") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Comb FuncCall ("Prelude","$") [(Comb (FuncPartCall 1) ("test","s") []),(Case Flex (Comb FuncCall ("Prelude","?") [(Var 1),(Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [(Var 1),(Lit (Intc 1))])]) [(Branch (LPattern (Intc 1)) (Lit (Intc 2))),(Branch (LPattern (Intc 2)) (Lit (Intc 4))),(Branch (LPattern (Intc 3)) (Lit (Intc 9)))])]))),(Func ("test","t") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]) (TCons ("Prelude","Int") [])) (Rule [1] (Case Rigid (Var 1) [(Branch (Pattern ("Prelude","[]") []) (Lit (Intc 1))),(Branch (Pattern ("Prelude",":") [2,3]) (Lit (Intc 2)))]))),(Func ("test","u") 1 Public (FuncType (TCons ("test","Color") []) (TCons ("Prelude","Int") [])) (Rule [1] (Case Rigid (Var 1) [(Branch (Pattern ("test","Red") []) (Lit (Intc 1))),(Branch (Pattern ("test","Green") []) (Lit (Intc 2))),(Branch (Pattern ("test","Blue") []) (Lit (Intc 3)))]))),(Func ("test","f") 1 Public (FuncType (TVar 0) (TVar 0)) (Rule [1] (Var 1))),(Func ("test","g") 0 Public (TCons ("Prelude","Bool") []) (Rule [] (Comb FuncCall ("test","f") [(Comb ConsCall ("Prelude","True") [])]))),(Func ("test","app") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TVar 0) (TVar 1))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [(Var 1),(Var 2)])))] [])