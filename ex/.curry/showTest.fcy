Prog "showTest" ["Prelude"] [Type ("showTest","Color") Public [] [Cons ("showTest","Red") 0 Public [],Cons ("showTest","Green") 0 Public [],Cons ("showTest","Blue") 0 Public []]] [Func ("showTest","_inst#Prelude.Show#showTest.Color") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("showTest","Color") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("showTest","_impl#show#Prelude.Show#showTest.Color") [],Comb (FuncPartCall 2) ("showTest","_impl#showsPrec#Prelude.Show#showTest.Color") [],Comb FuncCall ("showTest","_impl#showList#Prelude.Show#showTest.Color") []])),Func ("showTest","_impl#show#Prelude.Show#showTest.Color") 0 Public (FuncType (TCons ("showTest","Color") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("showTest","_inst#Prelude.Show#showTest.Color") []])),Func ("showTest","_impl#showsPrec#Prelude.Show#showTest.Color") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("showTest","Color") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("showTest","Red") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'R'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("showTest","Green") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'G'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("showTest","Blue") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'B'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]])])),Func ("showTest","_impl#showList#Prelude.Show#showTest.Color") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("showTest","Color") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("showTest","_inst#Prelude.Show#showTest.Color") []])),Func ("showTest","_inst#Prelude.Eq#showTest.Color") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("showTest","Color") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("showTest","_impl#==#Prelude.Eq#showTest.Color") [],Comb FuncCall ("showTest","_impl#/=#Prelude.Eq#showTest.Color") []])),Func ("showTest","_impl#==#Prelude.Eq#showTest.Color") 2 Public (FuncType (TCons ("showTest","Color") []) (FuncType (TCons ("showTest","Color") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("showTest","Red") []) (Case Flex (Var 2) [Branch (Pattern ("showTest","Red") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("showTest","Green") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("showTest","Blue") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("showTest","Green") []) (Case Flex (Var 2) [Branch (Pattern ("showTest","Red") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("showTest","Green") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("showTest","Blue") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("showTest","Blue") []) (Case Flex (Var 2) [Branch (Pattern ("showTest","Red") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("showTest","Green") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("showTest","Blue") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("showTest","_impl#/=#Prelude.Eq#showTest.Color") 0 Public (FuncType (TCons ("showTest","Color") []) (FuncType (TCons ("showTest","Color") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("showTest","_inst#Prelude.Eq#showTest.Color") []])),Func ("showTest","main") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (Rule [] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("showTest","_impl#show#Prelude.Show#showTest.Color") [],Comb ConsCall ("showTest","Red") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("showTest","_impl#show#Prelude.Show#showTest.Color") [],Comb ConsCall ("showTest","Green") []]]))] []