Prog "ordTest" ["Prelude"] [Type ("ordTest","MyList") Public [0] [Cons ("ordTest","MyNil") 0 Public [],Cons ("ordTest","MyCons") 2 Public [TVar 0,TCons ("ordTest","MyList") [TVar 0]]],Type ("ordTest","BinTree") Public [0] [Cons ("ordTest","Leaf") 0 Public [],Cons ("ordTest","Branch") 3 Public [TVar 0,TCons ("ordTest","BinTree") [TVar 0],TCons ("ordTest","BinTree") [TVar 0]]]] [Func ("ordTest","_inst#Prelude.Eq#ordTest.MyList") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TCons ("ordTest","MyList") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("ordTest","_impl#==#Prelude.Eq#ordTest.MyList") [Var 1],Comb FuncCall ("ordTest","_impl#/=#Prelude.Eq#ordTest.MyList") [Var 1]])),Func ("ordTest","_impl#==#Prelude.Eq#ordTest.MyList") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("ordTest","MyList") [TVar 0]) (FuncType (TCons ("ordTest","MyList") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("ordTest","MyNil") []) (Case Flex (Var 3) [Branch (Pattern ("ordTest","MyNil") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("ordTest","MyCons") [4,5]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("ordTest","MyCons") [6,7]) (Case Flex (Var 3) [Branch (Pattern ("ordTest","MyNil") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("ordTest","MyCons") [8,9]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 6],Var 8],Comb FuncCall ("ordTest","_impl#==#Prelude.Eq#ordTest.MyList") [Var 1,Var 7,Var 9]])])])),Func ("ordTest","_impl#/=#Prelude.Eq#ordTest.MyList") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("ordTest","MyList") [TVar 0]) (FuncType (TCons ("ordTest","MyList") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("ordTest","_inst#Prelude.Eq#ordTest.MyList") [Var 1]])),Func ("ordTest","_inst#Prelude.Ord#ordTest.MyList") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (TCons ("Prelude","_Dict#Ord") [TCons ("ordTest","MyList") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Ord") [Comb FuncCall ("ordTest","_inst#Prelude.Eq#ordTest.MyList") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 1]],Comb FuncCall ("ordTest","_impl#compare#Prelude.Ord#ordTest.MyList") [Var 1],Comb (FuncPartCall 2) ("ordTest","_impl#<=#Prelude.Ord#ordTest.MyList") [Var 1],Comb FuncCall ("ordTest","_impl#>=#Prelude.Ord#ordTest.MyList") [Var 1],Comb FuncCall ("ordTest","_impl#<#Prelude.Ord#ordTest.MyList") [Var 1],Comb FuncCall ("ordTest","_impl#>#Prelude.Ord#ordTest.MyList") [Var 1],Comb FuncCall ("ordTest","_impl#min#Prelude.Ord#ordTest.MyList") [Var 1],Comb FuncCall ("ordTest","_impl#max#Prelude.Ord#ordTest.MyList") [Var 1]])),Func ("ordTest","_impl#compare#Prelude.Ord#ordTest.MyList") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("ordTest","MyList") [TVar 0]) (FuncType (TCons ("ordTest","MyList") [TVar 0]) (TCons ("Prelude","Ordering") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#compare#Prelude.Ord") [Comb FuncCall ("ordTest","_inst#Prelude.Ord#ordTest.MyList") [Var 1]])),Func ("ordTest","_impl#<=#Prelude.Ord#ordTest.MyList") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("ordTest","MyList") [TVar 0]) (FuncType (TCons ("ordTest","MyList") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("ordTest","MyNil") []) (Case Flex (Var 3) [Branch (Pattern ("ordTest","MyNil") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("ordTest","MyCons") [4,5]) (Comb ConsCall ("Prelude","True") [])]),Branch (Pattern ("ordTest","MyCons") [6,7]) (Case Flex (Var 3) [Branch (Pattern ("ordTest","MyNil") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("ordTest","MyCons") [8,9]) (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","<") [Var 1],Var 6],Var 8],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 1]],Var 6],Var 8],Comb FuncCall ("ordTest","_impl#<=#Prelude.Ord#ordTest.MyList") [Var 1,Var 7,Var 9]]])])])),Func ("ordTest","_impl#>=#Prelude.Ord#ordTest.MyList") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("ordTest","MyList") [TVar 0]) (FuncType (TCons ("ordTest","MyList") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#>=#Prelude.Ord") [Comb FuncCall ("ordTest","_inst#Prelude.Ord#ordTest.MyList") [Var 1]])),Func ("ordTest","_impl#<#Prelude.Ord#ordTest.MyList") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("ordTest","MyList") [TVar 0]) (FuncType (TCons ("ordTest","MyList") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#<#Prelude.Ord") [Comb FuncCall ("ordTest","_inst#Prelude.Ord#ordTest.MyList") [Var 1]])),Func ("ordTest","_impl#>#Prelude.Ord#ordTest.MyList") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("ordTest","MyList") [TVar 0]) (FuncType (TCons ("ordTest","MyList") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#>#Prelude.Ord") [Comb FuncCall ("ordTest","_inst#Prelude.Ord#ordTest.MyList") [Var 1]])),Func ("ordTest","_impl#min#Prelude.Ord#ordTest.MyList") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("ordTest","MyList") [TVar 0]) (FuncType (TCons ("ordTest","MyList") [TVar 0]) (TCons ("ordTest","MyList") [TVar 0])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#min#Prelude.Ord") [Comb FuncCall ("ordTest","_inst#Prelude.Ord#ordTest.MyList") [Var 1]])),Func ("ordTest","_impl#max#Prelude.Ord#ordTest.MyList") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("ordTest","MyList") [TVar 0]) (FuncType (TCons ("ordTest","MyList") [TVar 0]) (TCons ("ordTest","MyList") [TVar 0])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#max#Prelude.Ord") [Comb FuncCall ("ordTest","_inst#Prelude.Ord#ordTest.MyList") [Var 1]])),Func ("ordTest","_inst#Prelude.Eq#ordTest.BinTree") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TCons ("ordTest","BinTree") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("ordTest","_impl#==#Prelude.Eq#ordTest.BinTree") [Var 1],Comb FuncCall ("ordTest","_impl#/=#Prelude.Eq#ordTest.BinTree") [Var 1]])),Func ("ordTest","_impl#==#Prelude.Eq#ordTest.BinTree") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("ordTest","BinTree") [TVar 0]) (FuncType (TCons ("ordTest","BinTree") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("ordTest","Leaf") []) (Case Flex (Var 3) [Branch (Pattern ("ordTest","Leaf") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("ordTest","Branch") [4,5,6]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("ordTest","Branch") [7,8,9]) (Case Flex (Var 3) [Branch (Pattern ("ordTest","Leaf") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("ordTest","Branch") [10,11,12]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 7],Var 10],Comb FuncCall ("ordTest","_impl#==#Prelude.Eq#ordTest.BinTree") [Var 1,Var 8,Var 11]],Comb FuncCall ("ordTest","_impl#==#Prelude.Eq#ordTest.BinTree") [Var 1,Var 9,Var 12]])])])),Func ("ordTest","_impl#/=#Prelude.Eq#ordTest.BinTree") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("ordTest","BinTree") [TVar 0]) (FuncType (TCons ("ordTest","BinTree") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("ordTest","_inst#Prelude.Eq#ordTest.BinTree") [Var 1]])),Func ("ordTest","_inst#Prelude.Ord#ordTest.BinTree") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (TCons ("Prelude","_Dict#Ord") [TCons ("ordTest","BinTree") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Ord") [Comb FuncCall ("ordTest","_inst#Prelude.Eq#ordTest.BinTree") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 1]],Comb FuncCall ("ordTest","_impl#compare#Prelude.Ord#ordTest.BinTree") [Var 1],Comb (FuncPartCall 2) ("ordTest","_impl#<=#Prelude.Ord#ordTest.BinTree") [Var 1],Comb FuncCall ("ordTest","_impl#>=#Prelude.Ord#ordTest.BinTree") [Var 1],Comb FuncCall ("ordTest","_impl#<#Prelude.Ord#ordTest.BinTree") [Var 1],Comb FuncCall ("ordTest","_impl#>#Prelude.Ord#ordTest.BinTree") [Var 1],Comb FuncCall ("ordTest","_impl#min#Prelude.Ord#ordTest.BinTree") [Var 1],Comb FuncCall ("ordTest","_impl#max#Prelude.Ord#ordTest.BinTree") [Var 1]])),Func ("ordTest","_impl#compare#Prelude.Ord#ordTest.BinTree") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("ordTest","BinTree") [TVar 0]) (FuncType (TCons ("ordTest","BinTree") [TVar 0]) (TCons ("Prelude","Ordering") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#compare#Prelude.Ord") [Comb FuncCall ("ordTest","_inst#Prelude.Ord#ordTest.BinTree") [Var 1]])),Func ("ordTest","_impl#<=#Prelude.Ord#ordTest.BinTree") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("ordTest","BinTree") [TVar 0]) (FuncType (TCons ("ordTest","BinTree") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("ordTest","Leaf") []) (Case Flex (Var 3) [Branch (Pattern ("ordTest","Leaf") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("ordTest","Branch") [4,5,6]) (Comb ConsCall ("Prelude","True") [])]),Branch (Pattern ("ordTest","Branch") [7,8,9]) (Case Flex (Var 3) [Branch (Pattern ("ordTest","Leaf") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("ordTest","Branch") [10,11,12]) (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","<") [Var 1],Var 7],Var 10],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 1]],Var 7],Var 10],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ordTest","_impl#<#Prelude.Ord#ordTest.BinTree") [Var 1],Var 8],Var 11]]],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 1]],Var 7],Var 10],Comb FuncCall ("ordTest","_impl#==#Prelude.Eq#ordTest.BinTree") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 1],Var 8,Var 11]],Comb FuncCall ("ordTest","_impl#<=#Prelude.Ord#ordTest.BinTree") [Var 1,Var 9,Var 12]]])])])),Func ("ordTest","_impl#>=#Prelude.Ord#ordTest.BinTree") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("ordTest","BinTree") [TVar 0]) (FuncType (TCons ("ordTest","BinTree") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#>=#Prelude.Ord") [Comb FuncCall ("ordTest","_inst#Prelude.Ord#ordTest.BinTree") [Var 1]])),Func ("ordTest","_impl#<#Prelude.Ord#ordTest.BinTree") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("ordTest","BinTree") [TVar 0]) (FuncType (TCons ("ordTest","BinTree") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#<#Prelude.Ord") [Comb FuncCall ("ordTest","_inst#Prelude.Ord#ordTest.BinTree") [Var 1]])),Func ("ordTest","_impl#>#Prelude.Ord#ordTest.BinTree") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("ordTest","BinTree") [TVar 0]) (FuncType (TCons ("ordTest","BinTree") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#>#Prelude.Ord") [Comb FuncCall ("ordTest","_inst#Prelude.Ord#ordTest.BinTree") [Var 1]])),Func ("ordTest","_impl#min#Prelude.Ord#ordTest.BinTree") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("ordTest","BinTree") [TVar 0]) (FuncType (TCons ("ordTest","BinTree") [TVar 0]) (TCons ("ordTest","BinTree") [TVar 0])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#min#Prelude.Ord") [Comb FuncCall ("ordTest","_inst#Prelude.Ord#ordTest.BinTree") [Var 1]])),Func ("ordTest","_impl#max#Prelude.Ord#ordTest.BinTree") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("ordTest","BinTree") [TVar 0]) (FuncType (TCons ("ordTest","BinTree") [TVar 0]) (TCons ("ordTest","BinTree") [TVar 0])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#max#Prelude.Ord") [Comb FuncCall ("ordTest","_inst#Prelude.Ord#ordTest.BinTree") [Var 1]])),Func ("ordTest","listTest") 0 Public (TCons ("Prelude","Bool") []) (Rule [] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ordTest","_impl#<#Prelude.Ord#ordTest.MyList") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Int") []],Comb ConsCall ("ordTest","MyCons") [Lit (Intc 2),Comb ConsCall ("ordTest","MyCons") [Lit (Intc 3),Comb ConsCall ("ordTest","MyNil") []]]],Comb ConsCall ("ordTest","MyCons") [Lit (Intc 2),Comb ConsCall ("ordTest","MyCons") [Lit (Intc 2),Comb ConsCall ("ordTest","MyNil") []]]])),Func ("ordTest","t") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (TCons ("ordTest","BinTree") [TVar 0])) (Rule [1] (Comb ConsCall ("ordTest","Branch") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 5)],Comb ConsCall ("ordTest","Branch") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 2)],Comb ConsCall ("ordTest","Leaf") [],Comb ConsCall ("ordTest","Leaf") []],Comb ConsCall ("ordTest","Branch") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 8)],Comb ConsCall ("ordTest","Leaf") [],Comb ConsCall ("ordTest","Leaf") []]])),Func ("ordTest","treeTest") 0 Public (TCons ("Prelude","Bool") []) (Rule [] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ordTest","_impl#>=#Prelude.Ord#ordTest.BinTree") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Int") []],Comb FuncCall ("ordTest","t") [Comb FuncCall ("Prelude","_inst#Prelude.Num#Prelude.Int") []]],Comb FuncCall ("ordTest","t") [Comb FuncCall ("Prelude","_inst#Prelude.Num#Prelude.Int") []]])),Func ("ordTest","main") 0 Public (TCons ("Prelude","(,)") [TCons ("Prelude","Bool") [],TCons ("Prelude","Bool") []]) (Rule [] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("ordTest","listTest") [],Comb FuncCall ("ordTest","treeTest") []]))] []