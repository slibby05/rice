Prog "test" ["Prelude"] [Type ("test","BOOL") Public [] [Cons ("test","TRUE") 0 Public [],Cons ("test","FALSE") 0 Public []],Type ("test","LIST") Public [0] [Cons ("test","NIL") 0 Public [],Cons ("test","CONS") 2 Public [TVar 0,TCons ("test","LIST") [TVar 0]]]] [Func ("test","eqbool") 2 Public (FuncType (TCons ("test","BOOL") []) (FuncType (TCons ("test","BOOL") []) (TCons ("test","BOOL") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("test","TRUE") []) (Case Flex (Var 2) [Branch (Pattern ("test","TRUE") []) (Comb ConsCall ("test","TRUE") []),Branch (Pattern ("test","FALSE") []) (Comb ConsCall ("test","FALSE") [])]),Branch (Pattern ("test","FALSE") []) (Case Flex (Var 2) [Branch (Pattern ("test","TRUE") []) (Comb ConsCall ("test","FALSE") []),Branch (Pattern ("test","FALSE") []) (Comb ConsCall ("test","TRUE") [])])])),Func ("test","eqlist") 2 Public (FuncType (TCons ("test","LIST") [TCons ("test","BOOL") []]) (FuncType (TCons ("test","LIST") [TCons ("test","BOOL") []]) (TCons ("test","BOOL") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("test","NIL") []) (Case Flex (Var 2) [Branch (Pattern ("test","NIL") []) (Comb ConsCall ("test","TRUE") []),Branch (Pattern ("test","CONS") [3,4]) (Comb ConsCall ("test","FALSE") [])]),Branch (Pattern ("test","CONS") [5,6]) (Case Flex (Var 2) [Branch (Pattern ("test","NIL") []) (Comb ConsCall ("test","FALSE") []),Branch (Pattern ("test","CONS") [7,8]) (Comb FuncCall ("test","ifte") [Comb FuncCall ("test","eqbool") [Var 5,Var 7],Comb FuncCall ("test","eqlist") [Var 6,Var 8],Comb ConsCall ("test","FALSE") []])])])),Func ("test","append") 2 Public (FuncType (TCons ("test","LIST") [TVar 0]) (FuncType (TCons ("test","LIST") [TVar 0]) (TCons ("test","LIST") [TVar 0]))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("test","NIL") []) (Var 2),Branch (Pattern ("test","CONS") [3,4]) (Comb ConsCall ("test","CONS") [Var 3,Comb FuncCall ("test","append") [Var 4,Var 2]])])),Func ("test","ifte") 3 Public (FuncType (TCons ("test","BOOL") []) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1,2,3] (Case Flex (Var 1) [Branch (Pattern ("test","TRUE") []) (Var 2),Branch (Pattern ("test","FALSE") []) (Var 3)])),Func ("test","ift") 2 Public (FuncType (TCons ("test","BOOL") []) (FuncType (TVar 0) (TVar 0))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("test","TRUE") []) (Var 2)])),Func ("test","last") 1 Public (FuncType (TCons ("test","LIST") [TCons ("test","BOOL") []]) (TCons ("test","BOOL") [])) (Rule [1] (Free [2,3] (Comb FuncCall ("test","ift") [Comb FuncCall ("test","eqlist") [Var 1,Comb FuncCall ("test","append") [Var 3,Comb ConsCall ("test","CONS") [Var 2,Comb ConsCall ("test","NIL") []]]],Var 2])))] []