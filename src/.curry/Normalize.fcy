Prog "Normalize" ["Control.SetFunctions","FlatCurry.Types","FlatRewrite","Gas","Graph","Prelude","Util","Debug"] [] [Func ("Normalize","transform") 1 Public (FuncType (TCons ("FlatCurry.Types","Prog") []) (TCons ("FlatCurry.Types","Prog") [])) (Rule [1] (Comb FuncCall ("Control.SetFunctions","selectValue") [Comb FuncCall ("Control.SetFunctions","set1") [Comb (FuncPartCall 1) ("Normalize","transform_ORGNDFUN") [],Var 1]])),Func ("Normalize","transform_ORGNDFUN") 1 Private (FuncType (TCons ("FlatCurry.Types","Prog") []) (TCons ("FlatCurry.Types","Prog") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("FlatCurry.Types","Prog") [2,3,4,5,6]) (Let [(7,Comb FuncCall ("Gas","loop") [Comb (FuncPartCall 2) ("Normalize","caseInCase") [],Var 5,Lit (Intc 0)]),(8,Comb FuncCall ("Normalize","transform_ORGNDFUN._#selFP7#fixes") [Var 7]),(9,Comb FuncCall ("Normalize","transform_ORGNDFUN._#selFP8#c0") [Var 7]),(10,Comb FuncCall ("Gas","loop") [Comb (FuncPartCall 2) ("Normalize","nestedCont") [],Var 8,Var 9]),(11,Comb FuncCall ("Normalize","transform_ORGNDFUN._#selFP5#flatFs") [Var 10]),(12,Comb FuncCall ("Normalize","transform_ORGNDFUN._#selFP6#c1") [Var 10]),(13,Comb FuncCall ("Gas","loop") [Comb (FuncPartCall 2) ("Normalize","caseArg") [],Var 11,Var 12]),(14,Comb FuncCall ("Normalize","transform_ORGNDFUN._#selFP4#caseFs") [Var 13])] (Comb ConsCall ("FlatCurry.Types","Prog") [Var 2,Var 3,Var 4,Var 14,Var 6]))])),Func ("Normalize","transform_ORGNDFUN._#selFP7#fixes") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry.Types","FuncDecl") []],TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry.Types","FuncDecl") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Normalize","transform_ORGNDFUN._#selFP8#c0") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry.Types","FuncDecl") []],TCons ("Prelude","Int") []]) (TCons ("Prelude","Int") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Normalize","transform_ORGNDFUN._#selFP5#flatFs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry.Types","FuncDecl") []],TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry.Types","FuncDecl") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Normalize","transform_ORGNDFUN._#selFP6#c1") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry.Types","FuncDecl") []],TCons ("Prelude","Int") []]) (TCons ("Prelude","Int") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Normalize","transform_ORGNDFUN._#selFP4#caseFs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry.Types","FuncDecl") []],TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry.Types","FuncDecl") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Normalize","nestedCont") 2 Public (FuncType (TCons ("FlatCurry.Types","FuncDecl") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("FlatCurry.Types","FuncDecl") []]))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("FlatCurry.Types","Func") [3,4,5,6,7]) (Case Flex (Var 7) [Branch (Pattern ("FlatCurry.Types","External") [8]) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("FlatCurry.Types","Rule") [9,10]) (Case Rigid (Comb FuncCall ("Normalize","redex_path") [Var 10]) [Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","Just") [11]) (Case Rigid (Var 11) [Branch (Pattern ("Prelude","(,)") [12,13]) (Let [(14,Comb FuncCall ("FlatRewrite","freeVars") [Var 13]),(15,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Util","mapSnd") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","++") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '#'),Comb ConsCall ("Prelude",":") [Lit (Charc 'A'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#show#Prelude.Show#Prelude.Int") [],Var 2]]]],Var 3]),(16,Comb ConsCall ("FlatCurry.Types","Comb") [Comb ConsCall ("FlatCurry.Types","FuncCall") [],Var 15,Comb FuncCall ("Prelude","map") [Comb (ConsPartCall 1) ("FlatCurry.Types","Var") [],Var 14]]),(17,Comb FuncCall ("FlatRewrite","replace") [Var 10,Var 12,Var 16])] (Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry.Types","Func") [Var 3,Var 4,Var 5,Var 6,Comb ConsCall ("FlatCurry.Types","Rule") [Var 9,Var 17]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry.Types","Func") [Var 15,Comb FuncCall ("Prelude","length") [Var 14],Comb ConsCall ("FlatCurry.Types","Private") [],Comb ConsCall ("FlatCurry.Types","TVar") [Lit (Intc 0)],Comb ConsCall ("FlatCurry.Types","Rule") [Var 14,Var 13]],Comb ConsCall ("Prelude","[]") []]]))])])])])),Func ("Normalize","redex_path") 1 Public (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry.Types","Expr") []]])) (Rule [1] (Comb FuncCall ("Control.SetFunctions","selectValue") [Comb FuncCall ("Control.SetFunctions","set1") [Comb (FuncPartCall 1) ("Normalize","redex_path_ORGNDFUN") [],Var 1]])),Func ("Normalize","redex_path_ORGNDFUN") 1 Private (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry.Types","Expr") []]])) (Rule [1] (Or (Or (Or (Comb FuncCall ("Gas","~>") [Comb FuncCall ("Gas","~>") [Comb FuncCall ("Gas","start") [Var 1],Comb FuncCall ("Gas","cor") []],Comb FuncCall ("Prelude","?") [Comb FuncCall ("Gas","clet") [],Comb FuncCall ("Prelude","?") [Comb FuncCall ("Gas","ccase") [],Comb FuncCall ("Gas","cfree") []]]]) (Comb FuncCall ("Gas","~>") [Comb FuncCall ("Gas","~>") [Comb FuncCall ("Gas","start") [Var 1],Comb FuncCall ("Gas","ccomb") []],Comb FuncCall ("Prelude","?") [Comb FuncCall ("Gas","clet") [],Comb FuncCall ("Prelude","?") [Comb FuncCall ("Gas","ccase") [],Comb FuncCall ("Gas","cfree") []]]])) (Free [2] (Comb FuncCall ("Gas","~>") [Comb FuncCall ("Gas","~~") [Comb FuncCall ("Gas","~>") [Comb FuncCall ("Gas","start") [Var 1],Comb ConsCall ("FlatCurry.Types","Let") [Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","unknown") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","unknown") [],Var 2],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","unknown") []]],Comb FuncCall ("Prelude","unknown") []]],Var 2],Comb FuncCall ("Prelude","?") [Comb FuncCall ("Gas","clet") [],Comb FuncCall ("Gas","ccase") []]]))) (Comb ConsCall ("Prelude","Nothing") []))),Func ("Normalize","caseArg") 2 Public (FuncType (TCons ("FlatCurry.Types","FuncDecl") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("FlatCurry.Types","FuncDecl") []]))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("FlatCurry.Types","Func") [3,4,5,6,7]) (Case Flex (Var 7) [Branch (Pattern ("FlatCurry.Types","External") [8]) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("FlatCurry.Types","Rule") [9,10]) (Case Rigid (Comb FuncCall ("Normalize","getCaseArg") [Var 10]) [Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","Just") [11]) (Case Rigid (Var 11) [Branch (Pattern ("Prelude","(,)") [12,13]) (Let [(14,Comb FuncCall ("Normalize","caseArg._#selFP10#ct") [Var 13]),(15,Comb FuncCall ("Normalize","caseArg._#selFP11#sel") [Var 13]),(16,Comb FuncCall ("Normalize","caseArg._#selFP12#br") [Var 13]),(17,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatRewrite","allVars") [],Var 13]),(18,Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Comb FuncCall ("Prelude","foldr") [Comb FuncCall ("Prelude","_impl#max#Prelude.Ord#Prelude.Int") [],Lit (Intc 0),Var 17],Lit (Intc 1)]),(19,Comb ConsCall ("FlatCurry.Types","Let") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 18,Var 15],Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("FlatCurry.Types","Case") [Var 14,Comb ConsCall ("FlatCurry.Types","Var") [Var 18],Var 16]]),(20,Comb FuncCall ("FlatRewrite","replace") [Var 10,Var 12,Var 19])] (Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry.Types","Func") [Var 3,Var 4,Var 5,Var 6,Comb ConsCall ("FlatCurry.Types","Rule") [Var 9,Var 20]],Comb ConsCall ("Prelude","[]") []]))])])])])),Func ("Normalize","caseArg._#selFP10#ct") 1 Private (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("FlatCurry.Types","CaseType") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("FlatCurry.Types","Case") [2,3,4]) (Var 2)])),Func ("Normalize","caseArg._#selFP11#sel") 1 Private (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("FlatCurry.Types","Expr") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("FlatCurry.Types","Case") [2,3,4]) (Var 3)])),Func ("Normalize","caseArg._#selFP12#br") 1 Private (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("Prelude","[]") [TCons ("FlatCurry.Types","BranchExpr") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("FlatCurry.Types","Case") [2,3,4]) (Var 4)])),Func ("Normalize","getCaseArg") 1 Public (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry.Types","Expr") []]])) (Rule [1] (Comb FuncCall ("Control.SetFunctions","selectValue") [Comb FuncCall ("Control.SetFunctions","set1") [Comb (FuncPartCall 1) ("Normalize","getCaseArg_ORGNDFUN") [],Var 1]])),Func ("Normalize","getCaseArg_ORGNDFUN") 1 Private (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry.Types","Expr") []]])) (Rule [1] (Or (Comb FuncCall ("Gas","~>") [Comb FuncCall ("Gas","start") [Var 1],Comb ConsCall ("FlatCurry.Types","Case") [Comb FuncCall ("Prelude","unknown") [],Comb FuncCall ("Prelude","?") [Comb FuncCall ("Gas","clet") [],Comb FuncCall ("Prelude","?") [Comb FuncCall ("Gas","cfree") [],Comb FuncCall ("Prelude","?") [Comb FuncCall ("Gas","cor") [],Comb FuncCall ("Prelude","?") [Comb FuncCall ("Gas","ccase") [],Comb FuncCall ("Prelude","?") [Comb FuncCall ("Gas","ctype") [],Comb ConsCall ("FlatCurry.Types","Comb") [Comb FuncCall ("Prelude","?") [Comb ConsCall ("FlatCurry.Types","FuncCall") [],Comb FuncCall ("Prelude","?") [Comb ConsCall ("FlatCurry.Types","ConsPartCall") [Comb FuncCall ("Prelude","unknown") []],Comb ConsCall ("FlatCurry.Types","FuncPartCall") [Comb FuncCall ("Prelude","unknown") []]]],Comb FuncCall ("Prelude","unknown") [],Comb FuncCall ("Prelude","unknown") []]]]]]],Comb FuncCall ("Prelude","unknown") []]]) (Comb ConsCall ("Prelude","Nothing") []))),Func ("Normalize","caseInCase") 2 Public (FuncType (TCons ("FlatCurry.Types","FuncDecl") []) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("FlatCurry.Types","FuncDecl") []]))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("FlatCurry.Types","Func") [3,4,5,6,7]) (Case Flex (Var 7) [Branch (Pattern ("FlatCurry.Types","External") [8]) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("FlatCurry.Types","Rule") [9,10]) (Case Rigid (Comb FuncCall ("Normalize","findCase") [Var 10]) [Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","Just") [11]) (Case Rigid (Var 11) [Branch (Pattern ("Prelude","(,)") [12,13]) (Case Rigid (Comb FuncCall ("Normalize","repCase") [Var 13]) [Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","Just") [14]) (Let [(15,Comb FuncCall ("FlatRewrite","replace") [Var 10,Var 12,Var 14])] (Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry.Types","Func") [Var 3,Var 4,Var 5,Var 6,Comb ConsCall ("FlatCurry.Types","Rule") [Var 9,Var 15]],Comb ConsCall ("Prelude","[]") []]))])])])])])),Func ("Normalize","findCase") 1 Public (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry.Types","Expr") []]])) (Rule [1] (Comb FuncCall ("Control.SetFunctions","selectValue") [Comb FuncCall ("Control.SetFunctions","set1") [Comb (FuncPartCall 1) ("Normalize","findCase_ORGNDFUN") [],Var 1]])),Func ("Normalize","findCase_ORGNDFUN") 1 Private (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry.Types","Expr") []]])) (Rule [1] (Or (Or (Or (Comb FuncCall ("Gas","~>") [Comb FuncCall ("Gas","start") [Var 1],Comb ConsCall ("FlatCurry.Types","Case") [Comb FuncCall ("Prelude","unknown") [],Comb ConsCall ("FlatCurry.Types","Case") [Comb FuncCall ("Prelude","unknown") [],Comb FuncCall ("Prelude","unknown") [],Comb FuncCall ("Prelude","unknown") []],Comb FuncCall ("Prelude","unknown") []]]) (Comb FuncCall ("Gas","~>") [Comb FuncCall ("Gas","start") [Var 1],Comb ConsCall ("FlatCurry.Types","Typed") [Comb FuncCall ("Prelude","unknown") [],Comb FuncCall ("Prelude","unknown") []]])) (Comb FuncCall ("Gas","~>") [Comb FuncCall ("Gas","start") [Var 1],Comb ConsCall ("FlatCurry.Types","Let") [Comb FuncCall ("Prelude","unknown") [],Comb FuncCall ("Prelude","unknown") []]])) (Comb ConsCall ("Prelude","Nothing") []))),Func ("Normalize","repCase") 1 Public (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("Prelude","Maybe") [TCons ("FlatCurry.Types","Expr") []])) (Rule [1] (Comb FuncCall ("Control.SetFunctions","selectValue") [Comb FuncCall ("Control.SetFunctions","set1") [Comb (FuncPartCall 1) ("Normalize","repCase_ORGNDFUN") [],Var 1]])),Func ("Normalize","repCase_ORGNDFUN") 1 Private (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("Prelude","Maybe") [TCons ("FlatCurry.Types","Expr") []])) (Rule [1] (Or (Case Flex (Var 1) [Branch (Pattern ("FlatCurry.Types","Typed") [2,3]) (Comb ConsCall ("Prelude","Just") [Var 2]),Branch (Pattern ("FlatCurry.Types","Let") [4,5]) (Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("Prelude","Just") [],Comb FuncCall ("Normalize","makeBlocks") [Var 4,Var 5]]),Branch (Pattern ("FlatCurry.Types","Case") [6,7,8]) (Case Flex (Var 7) [Branch (Pattern ("FlatCurry.Types","Case") [9,10,11]) (Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("Prelude","Just") [],Comb ConsCall ("FlatCurry.Types","Case") [Var 9,Var 10,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Normalize","repCase_ORGNDFUN.foldCase.120") [Var 6,Var 8],Var 11]]])])]) (Comb ConsCall ("Prelude","Nothing") []))),Func ("Normalize","repCase_ORGNDFUN.foldCase.120") 3 Private (FuncType (TCons ("FlatCurry.Types","CaseType") []) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry.Types","BranchExpr") []]) (FuncType (TCons ("FlatCurry.Types","BranchExpr") []) (TCons ("FlatCurry.Types","BranchExpr") [])))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("FlatCurry.Types","Branch") [4,5]) (Comb ConsCall ("FlatCurry.Types","Branch") [Var 4,Comb ConsCall ("FlatCurry.Types","Case") [Var 1,Var 5,Var 2]])])),Func ("Normalize","makeBlocks") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry.Types","Expr") []]]) (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("FlatCurry.Types","Expr") []))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("Graph","preorder") []],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Graph","scc") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Graph","buildG") [],Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("Normalize","makeBlocks.makeEdges.126") []]]]]),(4,Comb FuncCall ("Prelude","apply") [Var 3,Var 1])] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>#Prelude.Ord#Prelude.Int") [],Comb FuncCall ("Prelude","length") [Var 4]],Lit (Intc 1)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 1) ("Normalize","makeBlocks.makeBlock.126") [Var 1],Var 2,Var 4]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])]))),Func ("Normalize","makeBlocks.makeEdges.126") 1 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("FlatCurry.Types","Expr") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Normalize","makeBlocks.makeEdges.126._#lambda5") [Var 2],Comb FuncCall ("FlatRewrite","freeVars") [Var 3]])])),Func ("Normalize","makeBlocks.makeEdges.126._#lambda5") 2 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]))) (Rule [1,2] (Comb ConsCall ("Prelude","(,)") [Var 1,Var 2])),Func ("Normalize","makeBlocks.getExp.126") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 0,TVar 1]))) (Rule [1,2] (Free [3,4] (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:<=") [Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","unknown") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 3,Var 4],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","unknown") []]],Var 1],Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:=") [Var 3,Var 2],Comb ConsCall ("Prelude","(,)") [Var 3,Var 4]]]))),Func ("Normalize","makeBlocks.makeBlock.126") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry.Types","Expr") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("FlatCurry.Types","Expr") [])))) (Rule [1,2] (Comb (ConsPartCall 1) ("FlatCurry.Types","Let") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Normalize","makeBlocks.getExp.126") [Var 1],Var 2]]))] []