Prog "case_in_bind" ["Prelude"] [] [Func ("case_in_bind","f") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Let [(3,Let [(4,Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Var 2,Lit (Intc 1)])] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") [Var 4,Lit (Intc 3)]) [Branch (Pattern ("Prelude","True") []) (Lit (Intc 4)),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") [Var 4,Lit (Intc 7)]) [Branch (Pattern ("Prelude","True") []) (Lit (Intc 11)),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),(5,Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Var 3,Var 1])] (Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Var 2,Var 5]))),Func ("case_in_bind","main") 0 Public (TCons ("Prelude","Int") []) (Rule [] (Comb FuncCall ("case_in_bind","f") [Lit (Intc 2),Lit (Intc 4)]))] []