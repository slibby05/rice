Prog "take5" ["Prelude"] [] [Func ("take5","take5") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []]]]]])])])])])])),Func ("take5","main") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (Rule [] (Comb FuncCall ("take5","take5") [Comb ConsCall ("Prelude",":") [Lit (Charc '0'),Comb ConsCall ("Prelude",":") [Lit (Charc '1'),Comb ConsCall ("Prelude",":") [Lit (Charc '2'),Comb ConsCall ("Prelude",":") [Lit (Charc '3'),Comb ConsCall ("Prelude",":") [Lit (Charc '4'),Comb ConsCall ("Prelude",":") [Lit (Charc '5'),Comb ConsCall ("Prelude",":") [Lit (Charc '6'),Comb ConsCall ("Prelude",":") [Lit (Charc '7'),Comb ConsCall ("Prelude",":") [Lit (Charc '8'),Comb ConsCall ("Prelude",":") [Lit (Charc '9'),Comb ConsCall ("Prelude",":") [Lit (Charc 'A'),Comb ConsCall ("Prelude",":") [Lit (Charc 'B'),Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'D'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]))] []