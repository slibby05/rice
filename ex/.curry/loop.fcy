Prog "loop" ["Prelude"] [] [Func ("loop","loop") 0 Public (TVar 0) (Rule [] (Comb FuncCall ("loop","loop") [])),Func ("loop","build") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Or (Case Flex (Var 1) [Branch (LPattern (Intc 0)) (Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Var 2,Lit (Intc 1)])]) (Case Flex (Var 2) [Branch (LPattern (Intc 0)) (Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Var 1,Lit (Intc 2)])]))),Func ("loop","main") 0 Public (TCons ("Prelude","Int") []) (Rule [] (Comb FuncCall ("loop","build") [Lit (Intc 0),Comb FuncCall ("loop","loop") []]))] []