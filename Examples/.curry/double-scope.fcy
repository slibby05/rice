Prog "double-scope" ["Prelude"] [] [Func ("double-scope","f") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Let [(4,Comb ConsCall ("Prelude",":") [Var 2,Var 4])] (Let [(5,Comb FuncCall ("Prelude","++") [Var 4,Var 4])] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","take") [Var 2,Var 5],Comb FuncCall ("double-scope","f") [Var 3]])))])),Func ("double-scope","main") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (Rule [] (Comb FuncCall ("double-scope","f") [Comb ConsCall ("Prelude",":") [Lit (Intc 3),Comb ConsCall ("Prelude",":") [Lit (Intc 5),Comb ConsCall ("Prelude","[]") []]]]))] []