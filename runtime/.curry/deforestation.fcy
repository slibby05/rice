Prog "deforestation" ["Prelude"] [] [Func ("deforestation","build") 1 Public (FuncType (FuncType (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TVar 2))) (TVar 2)) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Comb (ConsPartCall 2) ("Prelude",":") []],Comb ConsCall ("Prelude","[]") []])),Func ("deforestation","build_fold") 3 Public (FuncType (FuncType (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (FuncType (TVar 1) (FuncType (TVar 2) (TVar 2)))) (FuncType (FuncType (TCons ("Prelude","[]") [TVar 3]) (TVar 2)) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TVar 2)))) (Rule [1,2,3] (Comb FuncCall ("Prelude","foldr") [Comb FuncCall ("Prelude","apply") [Var 1,Comb (ConsPartCall 2) ("Prelude",":") []],Comb FuncCall ("Prelude","apply") [Var 2,Comb ConsCall ("Prelude","[]") []],Var 3])),Func ("deforestation","bf") 5 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (TVar 2)))) (FuncType (FuncType (TVar 3) (TVar 2)) (FuncType (TVar 0) (FuncType (TVar 3) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TVar 2)))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude","foldr") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Comb FuncCall ("Prelude","apply") [Var 2,Var 4],Var 5])),Func ("deforestation","mk_build") 5 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 2))) (FuncType (FuncType (TVar 3) (TVar 0)) (FuncType (FuncType (TVar 4) (TVar 1)) (FuncType (TVar 3) (FuncType (TVar 4) (TVar 2)))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Comb FuncCall ("Prelude","apply") [Var 2,Var 4]],Comb FuncCall ("Prelude","apply") [Var 3,Var 5]])),Func ("deforestation","map") 1 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 1]))) (Rule [1] (Comb (FuncPartCall 1) ("deforestation","build_fold") [Comb (FuncPartCall 3) ("deforestation","map_mkc") [Var 1],Comb (FuncPartCall 1) ("Prelude","id") []])),Func ("deforestation","map_mkc") 4 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (FuncType (TVar 1) (FuncType (TVar 2) (TVar 2))) (FuncType (TVar 0) (FuncType (TVar 2) (TVar 2))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 2,Comb FuncCall ("Prelude","apply") [Var 1,Var 3]],Var 4])),Func ("deforestation","filter") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1] (Comb (FuncPartCall 1) ("deforestation","build_fold") [Comb (FuncPartCall 3) ("deforestation","filter_mkc") [Var 1],Comb (FuncPartCall 1) ("Prelude","id") []])),Func ("deforestation","filter_mkc") 4 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 1))) (FuncType (TVar 0) (FuncType (TVar 1) (TVar 1))))) (Rule [1,2,3,4] (Case Rigid (Comb FuncCall ("Prelude","apply") [Var 1,Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 2,Var 3],Var 4]),Branch (Pattern ("Prelude","False") []) (Var 4)])),Func ("deforestation","++") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("deforestation","concat") [],Comb FuncCall ("deforestation","build") [Comb (FuncPartCall 2) ("deforestation","append_build") [Var 1,Var 2]]])),Func ("deforestation","append_build") 4 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TVar 1) (TVar 1))) (FuncType (TVar 1) (TVar 1))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 3,Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 3,Var 2],Var 4]])),Func ("deforestation","concat") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0])) (Rule [] (Comb (FuncPartCall 1) ("deforestation","build_fold") [Comb (FuncPartCall 3) ("deforestation","concat_mkc") [],Comb (FuncPartCall 1) ("Prelude","id") []])),Func ("deforestation","concat_mkc") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 1))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TVar 1) (TVar 1)))) (Rule [1,2,3] (Comb FuncCall ("Prelude","foldr") [Var 1,Var 3,Var 2])),Func ("deforestation","repeat") 1 Public (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Comb FuncCall ("deforestation","build") [Comb (FuncPartCall 2) ("deforestation","repeat_build") [Var 1]])),Func ("deforestation","repeat_build") 3 Public (FuncType (TVar 0) (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 1))) (FuncType (TVar 2) (TVar 1)))) (Rule [1,2,3] (Let [(4,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 2,Var 1],Var 4])] (Var 4))),Func ("deforestation","zip") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]))) (Rule [1,2] (Comb FuncCall ("deforestation","build") [Comb (FuncPartCall 2) ("deforestation","zip_build") [Var 1,Var 2]])),Func ("deforestation","zip_build") 4 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (FuncType (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TVar 2) (TVar 2))) (FuncType (TVar 2) (TVar 2))))) (Rule [1,2,3,4] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Var 4),Branch (Pattern ("Prelude",":") [5,6]) (Var 4)]),Branch (Pattern ("Prelude",":") [7,8]) (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Var 4),Branch (Pattern ("Prelude",":") [9,10]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 3,Comb ConsCall ("Prelude","(,)") [Var 7,Var 9]],Comb FuncCall ("deforestation","zip_build") [Var 8,Var 10,Var 3,Var 4]])])])),Func ("deforestation","zipWith") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 2))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","[]") [TVar 2])))) (Rule [1,2,3] (Comb FuncCall ("deforestation","build") [Comb (FuncPartCall 2) ("deforestation","zipWith_build") [Var 1,Var 2,Var 3]])),Func ("deforestation","zipWith_build") 5 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 2))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (FuncType (FuncType (TVar 2) (FuncType (TVar 3) (TVar 3))) (FuncType (TVar 3) (TVar 3)))))) (Rule [1,2,3,4,5] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Var 5),Branch (Pattern ("Prelude",":") [6,7]) (Var 5)]),Branch (Pattern ("Prelude",":") [8,9]) (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Var 5),Branch (Pattern ("Prelude",":") [10,11]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 4,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 8],Var 10]],Comb FuncCall ("deforestation","zipWith_build") [Var 1,Var 9,Var 11,Var 4,Var 5]])])])),Func ("deforestation","lookup") 2 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]) (TCons ("Prelude","Maybe") [TVar 1])))) (Rule [1,2] (Comb (FuncPartCall 1) ("Prelude","foldr") [Comb (FuncPartCall 2) ("deforestation","lookup_fold") [Var 1,Var 2],Comb ConsCall ("Prelude","Nothing") []])),Func ("deforestation","lookup_fold") 4 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Maybe") [TVar 1]) (TCons ("Prelude","Maybe") [TVar 1]))))) (Rule [1,2,3,4] (Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 2],Var 5]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","Just") [Var 6]),Branch (Pattern ("Prelude","False") []) (Var 4)])])),Func ("deforestation","iterate") 2 Public (FuncType (FuncType (TVar 0) (TVar 0)) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Comb FuncCall ("deforestation","build") [Comb (FuncPartCall 2) ("deforestation","iterate_build") [Var 1,Var 2]])),Func ("deforestation","iterate_build") 4 Public (FuncType (FuncType (TVar 0) (TVar 0)) (FuncType (TVar 0) (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 1))) (FuncType (TVar 2) (TVar 1))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 3,Var 2],Comb FuncCall ("deforestation","iterate_build") [Var 1,Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Var 3,Var 4]])),Func ("deforestation","enumFrom_") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Comb FuncCall ("deforestation","iterate") [Comb (FuncPartCall 1) ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Lit (Intc 1)],Var 1])),Func ("deforestation","enumFromThen_") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [1,2] (Comb FuncCall ("deforestation","iterate") [Comb (FuncPartCall 1) ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Var 2,Var 1]],Var 1])),Func ("deforestation","enumFromTo_") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [1,2] (Comb FuncCall ("deforestation","build") [Comb (FuncPartCall 2) ("deforestation","enumFromTo_build") [Var 1,Var 2]])),Func ("deforestation","enumFromTo_build") 4 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))))) (Rule [1,2,3,4] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>#Prelude.Ord#Prelude.Int") [],Var 1],Var 2]) [Branch (Pattern ("Prelude","True") []) (Var 4),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 3,Var 1],Comb FuncCall ("deforestation","enumFromTo_build") [Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Var 1,Lit (Intc 1)],Var 2,Var 3,Var 4]])])),Func ("deforestation","enumFromThenTo_") 3 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])))) (Rule [1,2,3] (Comb FuncCall ("deforestation","build") [Comb (FuncPartCall 2) ("deforestation","enumFromThenTo_build") [Var 1,Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Var 2,Var 1],Var 3]])),Func ("deforestation","enumFromThenTo_build") 5 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])))))) (Rule [1,2,3,4,5] (Case Rigid (Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") [Var 2,Lit (Intc 0)]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Var 1],Var 3]) [Branch (Pattern ("Prelude","True") []) (Var 5),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 4,Var 1],Comb FuncCall ("deforestation","enumFromThenTo_build") [Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Var 1,Var 2],Var 2,Var 3,Var 4,Var 5]])]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>#Prelude.Ord#Prelude.Int") [],Var 1],Var 3]) [Branch (Pattern ("Prelude","True") []) (Var 5),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 4,Var 1],Comb FuncCall ("deforestation","enumFromThenTo_build") [Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Var 1,Var 2],Var 2,Var 3,Var 4,Var 5]])])])),Func ("deforestation","length") 0 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Int") [])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","foldr") [Comb (FuncPartCall 2) ("deforestation","length_fold") [],Lit (Intc 0)])),Func ("deforestation","length_fold") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Lit (Intc 1),Var 2])),Func ("deforestation","null") 0 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","foldr") [Comb (FuncPartCall 2) ("deforestation","null_fold") [],Comb ConsCall ("Prelude","True") []])),Func ("deforestation","null_fold") 2 Public (FuncType (TVar 0) (FuncType (TVar 1) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb ConsCall ("Prelude","False") []))] []