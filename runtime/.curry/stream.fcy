Prog "stream" ["Prelude"] [Type ("stream","Stream") Public [0,1] [Cons ("stream","Stream") 2 Public [FuncType (TVar 1) (TCons ("stream","Step") [TVar 0,TVar 1]),TVar 1]],Type ("stream","Step") Public [0,1] [Cons ("stream","Done") 0 Public [],Cons ("stream","Yield") 2 Public [TVar 0,TVar 1],Cons ("stream","Skip") 1 Public [TVar 1]]] [Func ("stream","stream") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("stream","Stream") [TVar 0,TCons ("Prelude","[]") [TVar 0]])) (Rule [1] (Comb ConsCall ("stream","Stream") [Comb (FuncPartCall 1) ("stream","stream.next.2") [],Var 1])),Func ("stream","stream.next.2") 1 Private (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("stream","Step") [TVar 0,TCons ("Prelude","[]") [TVar 0]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("stream","Done") []),Branch (Pattern ("Prelude",":") [2,3]) (Comb ConsCall ("stream","Yield") [Var 2,Var 3])])),Func ("stream","unstream") 1 Public (FuncType (TCons ("stream","Stream") [TVar 0,TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("stream","Stream") [2,3]) (Comb FuncCall ("stream","unstream.unfold.8") [Var 2,Var 3])])),Func ("stream","unstream.unfold.8") 2 Private (FuncType (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("stream","Step") [TVar 0,TCons ("Prelude","[]") [TVar 0]])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","apply") [Var 1,Var 2]) [Branch (Pattern ("stream","Done") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("stream","Skip") [3]) (Var 3),Branch (Pattern ("stream","Yield") [4,5]) (Comb ConsCall ("Prelude",":") [Var 4,Comb FuncCall ("stream","unstream.unfold.8") [Var 1,Var 5]])])),Func ("stream","map_s") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("stream","Stream") [TVar 0,TVar 2]) (TCons ("stream","Stream") [TVar 1,TVar 2]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("stream","Stream") [3,4]) (Comb ConsCall ("stream","Stream") [Comb (FuncPartCall 1) ("stream","map_s.next.18") [Var 3,Var 1],Var 4])])),Func ("stream","map_s.next.18") 3 Private (FuncType (FuncType (TVar 0) (TCons ("stream","Step") [TVar 1,TVar 0])) (FuncType (FuncType (TVar 1) (TVar 2)) (FuncType (TVar 0) (TCons ("stream","Step") [TVar 2,TVar 0])))) (Rule [1,2,3] (Case Rigid (Comb FuncCall ("Prelude","apply") [Var 1,Var 3]) [Branch (Pattern ("stream","Done") []) (Comb ConsCall ("stream","Done") []),Branch (Pattern ("stream","Skip") [4]) (Comb ConsCall ("stream","Skip") [Var 4]),Branch (Pattern ("stream","Yield") [5,6]) (Comb ConsCall ("stream","Yield") [Comb FuncCall ("Prelude","apply") [Var 2,Var 5],Var 6])])),Func ("stream","map") 1 Public (FuncType (FuncType (TVar 0) (TVar 0)) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("stream","unstream") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("stream","map_s") [Var 1],Comb (FuncPartCall 1) ("stream","stream") []]])),Func ("stream","filter") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("stream","unstream") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("stream","filter_s") [Var 1],Comb (FuncPartCall 1) ("stream","stream") []]])),Func ("stream","filter_s") 2 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("stream","Stream") [TVar 0,TVar 1]) (TCons ("stream","Stream") [TVar 0,TVar 1]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("stream","Stream") [3,4]) (Comb ConsCall ("stream","Stream") [Comb (FuncPartCall 1) ("stream","filter_s.next.32") [Var 1,Var 3],Var 4])])),Func ("stream","filter_s.next.32") 3 Private (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (FuncType (TVar 1) (TCons ("stream","Step") [TVar 0,TVar 1])) (FuncType (TVar 1) (TCons ("stream","Step") [TVar 0,TVar 1])))) (Rule [1,2,3] (Case Rigid (Comb FuncCall ("Prelude","apply") [Var 2,Var 3]) [Branch (Pattern ("stream","Done") []) (Comb ConsCall ("stream","Done") []),Branch (Pattern ("stream","Skip") [4]) (Comb ConsCall ("stream","Skip") [Var 4]),Branch (Pattern ("stream","Yield") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Var 1,Var 5]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("stream","Yield") [Var 5,Var 6]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("stream","Skip") [Var 6])])])),Func ("stream","return_s") 1 Public (FuncType (TVar 0) (TCons ("stream","Stream") [TVar 0,TCons ("Prelude","Bool") []])) (Rule [1] (Comb ConsCall ("stream","Stream") [Comb (FuncPartCall 1) ("stream","return_s.next.42") [Var 1],Comb ConsCall ("Prelude","True") []])),Func ("stream","return_s.next.42") 2 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","Bool") []) (TCons ("stream","Step") [TVar 0,TCons ("Prelude","Bool") []]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("stream","Yield") [Var 1,Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("stream","Done") [])])),Func ("stream","enumFromTo_s") 4 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("stream","Stream") [TVar 0,TVar 0]))))) (Rule [1,2,3,4] (Comb ConsCall ("stream","Stream") [Comb (FuncPartCall 1) ("stream","enumFromTo_s.next.48") [Var 4,Var 1,Var 2],Var 3])),Func ("stream","enumFromTo_s.next.48") 4 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (TCons ("stream","Step") [TVar 0,TVar 0]))))) (Rule [1,2,3,4] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude",">") [Var 3],Var 4],Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("stream","Done") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("stream","Yield") [Var 4,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","succ") [Var 2],Var 4]])])),Func ("stream","enumFromTo__s") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("stream","Stream") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]))) (Rule [1,2] (Comb ConsCall ("stream","Stream") [Comb (FuncPartCall 1) ("stream","enumFromTo__s.next.52") [Var 2],Var 1])),Func ("stream","enumFromTo__s.next.52") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("stream","Step") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>#Prelude.Ord#Prelude.Int") [],Var 2],Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("stream","Done") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("stream","Yield") [Var 2,Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Var 2,Lit (Intc 1)]])])),Func ("stream","foldr_s") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 1))) (FuncType (TVar 1) (FuncType (TCons ("stream","Stream") [TVar 0,TVar 2]) (TVar 1)))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("stream","Stream") [4,5]) (Comb FuncCall ("stream","foldr_s.go.56") [Var 2,Var 4,Var 1,Var 5])])),Func ("stream","foldr_s.go.56") 4 Private (FuncType (TVar 0) (FuncType (FuncType (TVar 1) (TCons ("stream","Step") [TVar 2,TVar 1])) (FuncType (FuncType (TVar 2) (FuncType (TVar 0) (TVar 0))) (FuncType (TVar 1) (TVar 0))))) (Rule [1,2,3,4] (Case Rigid (Comb FuncCall ("Prelude","apply") [Var 2,Var 4]) [Branch (Pattern ("stream","Done") []) (Var 1),Branch (Pattern ("stream","Skip") [5]) (Comb FuncCall ("stream","foldr_s.go.56") [Var 1,Var 2,Var 3,Var 5]),Branch (Pattern ("stream","Yield") [6,7]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 3,Var 6],Comb FuncCall ("stream","foldr_s.go.56") [Var 1,Var 2,Var 3,Var 7]])])),Func ("stream","foldl_s") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 0))) (FuncType (TVar 0) (FuncType (TCons ("stream","Stream") [TVar 1,TVar 2]) (TVar 0)))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("stream","Stream") [4,5]) (Comb FuncCall ("stream","foldl_s.go.66") [Var 4,Var 1,Var 2,Var 5])])),Func ("stream","foldl_s.go.66") 4 Private (FuncType (FuncType (TVar 0) (TCons ("stream","Step") [TVar 1,TVar 0])) (FuncType (FuncType (TVar 2) (FuncType (TVar 1) (TVar 2))) (FuncType (TVar 2) (FuncType (TVar 0) (TVar 2))))) (Rule [1,2,3,4] (Case Rigid (Comb FuncCall ("Prelude","apply") [Var 1,Var 4]) [Branch (Pattern ("stream","Done") []) (Var 3),Branch (Pattern ("stream","Skip") [5]) (Comb FuncCall ("stream","foldl_s.go.66") [Var 1,Var 2,Var 3,Var 5]),Branch (Pattern ("stream","Yield") [6,7]) (Comb FuncCall ("stream","foldl_s.go.66") [Var 1,Var 2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 2,Var 3],Var 6],Var 7])])),Func ("stream","append_s") 2 Public (FuncType (TCons ("stream","Stream") [TVar 0,TVar 1]) (FuncType (TCons ("stream","Stream") [TVar 0,TVar 2]) (TCons ("stream","Stream") [TVar 0,TCons ("Prelude","Either") [TVar 1,TVar 2]]))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("stream","Stream") [3,4]) (Case Flex (Var 2) [Branch (Pattern ("stream","Stream") [5,6]) (Comb ConsCall ("stream","Stream") [Comb (FuncPartCall 1) ("stream","append_s.next.76") [Var 6,Var 5,Var 3],Comb ConsCall ("Prelude","Left") [Var 4]])])])),Func ("stream","append_s.next.76") 4 Private (FuncType (TVar 0) (FuncType (FuncType (TVar 0) (TCons ("stream","Step") [TVar 1,TVar 0])) (FuncType (FuncType (TVar 2) (TCons ("stream","Step") [TVar 1,TVar 2])) (FuncType (TCons ("Prelude","Either") [TVar 2,TVar 0]) (TCons ("stream","Step") [TVar 1,TCons ("Prelude","Either") [TVar 2,TVar 0]]))))) (Rule [1,2,3,4] (Case Flex (Var 4) [Branch (Pattern ("Prelude","Left") [5]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Var 3,Var 5]) [Branch (Pattern ("stream","Done") []) (Comb ConsCall ("stream","Skip") [Comb ConsCall ("Prelude","Right") [Var 1]]),Branch (Pattern ("stream","Skip") [6]) (Comb ConsCall ("stream","Skip") [Comb ConsCall ("Prelude","Left") [Var 6]]),Branch (Pattern ("stream","Yield") [7,8]) (Comb ConsCall ("stream","Yield") [Var 7,Comb ConsCall ("Prelude","Left") [Var 8]])]),Branch (Pattern ("Prelude","Right") [9]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Var 2,Var 9]) [Branch (Pattern ("stream","Done") []) (Comb ConsCall ("stream","Done") []),Branch (Pattern ("stream","Skip") [10]) (Comb ConsCall ("stream","Skip") [Comb ConsCall ("Prelude","Right") [Var 10]]),Branch (Pattern ("stream","Yield") [11,12]) (Comb ConsCall ("stream","Yield") [Var 11,Comb ConsCall ("Prelude","Right") [Var 12]])])])),Func ("stream","zip_s") 2 Public (FuncType (TCons ("stream","Stream") [TVar 0,TVar 1]) (FuncType (TCons ("stream","Stream") [TVar 2,TVar 3]) (TCons ("stream","Stream") [TCons ("Prelude","(,)") [TVar 0,TVar 2],TCons ("Prelude","(,,)") [TVar 1,TVar 3,TCons ("Prelude","Maybe") [TVar 0]]]))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("stream","Stream") [3,4]) (Case Flex (Var 2) [Branch (Pattern ("stream","Stream") [5,6]) (Comb ConsCall ("stream","Stream") [Comb (FuncPartCall 1) ("stream","zip_s.next.94") [Var 5,Var 3],Comb ConsCall ("Prelude","(,,)") [Var 4,Var 6,Comb ConsCall ("Prelude","Nothing") []]])])])),Func ("stream","zip_s.next.94") 3 Private (FuncType (FuncType (TVar 0) (TCons ("stream","Step") [TVar 1,TVar 0])) (FuncType (FuncType (TVar 2) (TCons ("stream","Step") [TVar 3,TVar 2])) (FuncType (TCons ("Prelude","(,,)") [TVar 2,TVar 0,TCons ("Prelude","Maybe") [TVar 3]]) (TCons ("stream","Step") [TCons ("Prelude","(,)") [TVar 3,TVar 1],TCons ("Prelude","(,,)") [TVar 2,TVar 0,TCons ("Prelude","Maybe") [TVar 3]]])))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","(,,)") [4,5,6]) (Case Flex (Var 6) [Branch (Pattern ("Prelude","Nothing") []) (Case Rigid (Comb FuncCall ("Prelude","apply") [Var 2,Var 4]) [Branch (Pattern ("stream","Done") []) (Comb ConsCall ("stream","Done") []),Branch (Pattern ("stream","Skip") [7]) (Comb ConsCall ("stream","Skip") [Comb ConsCall ("Prelude","(,,)") [Var 7,Var 5,Comb ConsCall ("Prelude","Nothing") []]]),Branch (Pattern ("stream","Yield") [8,9]) (Comb ConsCall ("stream","Skip") [Comb ConsCall ("Prelude","(,,)") [Var 9,Var 5,Comb ConsCall ("Prelude","Just") [Var 8]]])]),Branch (Pattern ("Prelude","Just") [10]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Var 1,Var 5]) [Branch (Pattern ("stream","Done") []) (Comb ConsCall ("stream","Done") []),Branch (Pattern ("stream","Skip") [11]) (Comb ConsCall ("stream","Skip") [Comb ConsCall ("Prelude","(,,)") [Var 4,Var 11,Comb ConsCall ("Prelude","Just") [Var 10]]]),Branch (Pattern ("stream","Yield") [12,13]) (Comb ConsCall ("stream","Yield") [Comb ConsCall ("Prelude","(,)") [Var 10,Var 12],Comb ConsCall ("Prelude","(,,)") [Var 4,Var 13,Comb ConsCall ("Prelude","Nothing") []]])])])]))] []