Prog "stream" ["Prelude"] [Type ("stream","Stream") Public [0,1] [Cons ("stream","Stream") 2 Public [FuncType (TVar 1) (TCons ("stream","Step") [TVar 0,TVar 1]),TVar 1]],Type ("stream","Step") Public [0,1] [Cons ("stream","Done") 0 Public [],Cons ("stream","Yield") 2 Public [TVar 0,TVar 1],Cons ("stream","Skip") 1 Public [TVar 1]]] [Func ("stream","stream") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("stream","Stream") [TVar 0,TCons ("Prelude","[]") [TVar 0]])) (Rule [] (Var 0)),Func ("stream","stream.next.2") 1 Private (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("stream","Step") [TVar 0,TCons ("Prelude","[]") [TVar 0]])) (Rule [] (Var 0)),Func ("stream","unstream") 1 Public (FuncType (TCons ("stream","Stream") [TVar 0,TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0])) (Rule [] (Var 0)),Func ("stream","unstream.unfold.8") 2 Private (FuncType (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("stream","Step") [TVar 0,TCons ("Prelude","[]") [TVar 0]])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("stream","map_s") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("stream","Stream") [TVar 0,TVar 2]) (TCons ("stream","Stream") [TVar 1,TVar 2]))) (Rule [] (Var 0)),Func ("stream","map_s.next.18") 3 Private (FuncType (FuncType (TVar 0) (TCons ("stream","Step") [TVar 1,TVar 0])) (FuncType (FuncType (TVar 1) (TVar 2)) (FuncType (TVar 0) (TCons ("stream","Step") [TVar 2,TVar 0])))) (Rule [] (Var 0)),Func ("stream","map") 1 Public (FuncType (FuncType (TVar 0) (TVar 0)) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("stream","filter") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("stream","filter_s") 2 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("stream","Stream") [TVar 0,TVar 1]) (TCons ("stream","Stream") [TVar 0,TVar 1]))) (Rule [] (Var 0)),Func ("stream","filter_s.next.32") 3 Private (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (FuncType (TVar 1) (TCons ("stream","Step") [TVar 0,TVar 1])) (FuncType (TVar 1) (TCons ("stream","Step") [TVar 0,TVar 1])))) (Rule [] (Var 0)),Func ("stream","return_s") 1 Public (FuncType (TVar 0) (TCons ("stream","Stream") [TVar 0,TCons ("Prelude","Bool") []])) (Rule [] (Var 0)),Func ("stream","return_s.next.42") 2 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","Bool") []) (TCons ("stream","Step") [TVar 0,TCons ("Prelude","Bool") []]))) (Rule [] (Var 0)),Func ("stream","enumFromTo_s") 4 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("stream","Stream") [TVar 0,TVar 0]))))) (Rule [] (Var 0)),Func ("stream","enumFromTo_s.next.48") 4 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (TCons ("stream","Step") [TVar 0,TVar 0]))))) (Rule [] (Var 0)),Func ("stream","enumFromTo__s") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("stream","Stream") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]))) (Rule [] (Var 0)),Func ("stream","enumFromTo__s.next.52") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("stream","Step") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]))) (Rule [] (Var 0)),Func ("stream","foldr_s") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 1))) (FuncType (TVar 1) (FuncType (TCons ("stream","Stream") [TVar 0,TVar 2]) (TVar 1)))) (Rule [] (Var 0)),Func ("stream","foldr_s.go.56") 4 Private (FuncType (TVar 0) (FuncType (FuncType (TVar 1) (TCons ("stream","Step") [TVar 2,TVar 1])) (FuncType (FuncType (TVar 2) (FuncType (TVar 0) (TVar 0))) (FuncType (TVar 1) (TVar 0))))) (Rule [] (Var 0)),Func ("stream","foldl_s") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 0))) (FuncType (TVar 0) (FuncType (TCons ("stream","Stream") [TVar 1,TVar 2]) (TVar 0)))) (Rule [] (Var 0)),Func ("stream","foldl_s.go.66") 4 Private (FuncType (FuncType (TVar 0) (TCons ("stream","Step") [TVar 1,TVar 0])) (FuncType (FuncType (TVar 2) (FuncType (TVar 1) (TVar 2))) (FuncType (TVar 2) (FuncType (TVar 0) (TVar 2))))) (Rule [] (Var 0)),Func ("stream","append_s") 2 Public (FuncType (TCons ("stream","Stream") [TVar 0,TVar 1]) (FuncType (TCons ("stream","Stream") [TVar 0,TVar 2]) (TCons ("stream","Stream") [TVar 0,TCons ("Prelude","Either") [TVar 1,TVar 2]]))) (Rule [] (Var 0)),Func ("stream","append_s.next.76") 4 Private (FuncType (TVar 0) (FuncType (FuncType (TVar 0) (TCons ("stream","Step") [TVar 1,TVar 0])) (FuncType (FuncType (TVar 2) (TCons ("stream","Step") [TVar 1,TVar 2])) (FuncType (TCons ("Prelude","Either") [TVar 2,TVar 0]) (TCons ("stream","Step") [TVar 1,TCons ("Prelude","Either") [TVar 2,TVar 0]]))))) (Rule [] (Var 0)),Func ("stream","zip_s") 2 Public (FuncType (TCons ("stream","Stream") [TVar 0,TVar 1]) (FuncType (TCons ("stream","Stream") [TVar 2,TVar 3]) (TCons ("stream","Stream") [TCons ("Prelude","(,)") [TVar 0,TVar 2],TCons ("Prelude","(,,)") [TVar 1,TVar 3,TCons ("Prelude","Maybe") [TVar 0]]]))) (Rule [] (Var 0)),Func ("stream","zip_s.next.94") 3 Private (FuncType (FuncType (TVar 0) (TCons ("stream","Step") [TVar 1,TVar 0])) (FuncType (FuncType (TVar 2) (TCons ("stream","Step") [TVar 3,TVar 2])) (FuncType (TCons ("Prelude","(,,)") [TVar 2,TVar 0,TCons ("Prelude","Maybe") [TVar 3]]) (TCons ("stream","Step") [TCons ("Prelude","(,)") [TVar 3,TVar 1],TCons ("Prelude","(,,)") [TVar 2,TVar 0,TCons ("Prelude","Maybe") [TVar 3]]])))) (Rule [] (Var 0))] []