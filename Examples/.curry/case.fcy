Prog "case" ["Prelude"] [] [Func ("case","break") 4 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Num") [TVar 1]) (FuncType (TVar 0) (TVar 1))))) (Rule [1,2,3,4] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 4],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 2],Lit (Intc 0)]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 3],Lit (Intc 0)]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 4],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 2],Lit (Intc 2)]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 3],Lit (Intc 1)]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 4],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 2],Lit (Intc 4)]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 3],Lit (Intc 2)]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb ConsCall ("Prelude","True") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 3],Lit (Intc 3)]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("case","main") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (TVar 0)) (Rule [1] (Comb FuncCall ("case","break") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Int") [],Comb FuncCall ("Prelude","_inst#Prelude.Num#Prelude.Int") [],Var 1,Lit (Intc 4)]))] []