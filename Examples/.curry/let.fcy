Prog "let" ["Prelude"] [] [Func ("let","coin") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (TVar 0)) (Rule [1] (Comb FuncCall ("Prelude","?") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 0)],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 1)]])),Func ("let","shared") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (TCons ("Prelude","(,)") [TVar 0,TVar 0])) (Rule [1] (Let [(2,Comb FuncCall ("let","coin") [Var 1])] (Comb ConsCall ("Prelude","(,)") [Var 2,Var 2]))),Func ("let","unshar") 2 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Num") [TVar 1]) (TCons ("Prelude","(,)") [TVar 0,TVar 1]))) (Rule [1,2] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("let","coin") [Var 1],Comb FuncCall ("let","coin") [Var 2]])),Func ("let","f") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 0]]) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","unzip") [Var 1]),(3,Comb FuncCall ("let","f._#selFP2#x") [Var 2]),(4,Comb FuncCall ("let","f._#selFP3#y") [Var 2])] (Comb FuncCall ("Prelude","++") [Var 3,Var 4]))),Func ("let","f._#selFP2#x") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("let","f._#selFP3#y") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("let","g") 3 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 0,TVar 0])))) (Rule [1,2,3] (Let [(4,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","-") [Var 1],Var 2],Var 3]),(5,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","+") [Var 1],Var 2],Var 3])] (Comb ConsCall ("Prelude","(,)") [Var 4,Var 5]))),Func ("let","main") 0 Public (TCons ("Prelude","Bool") []) (Rule [] (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#(,)") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Int") [],Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Int") [],Comb FuncCall ("let","shared") [Comb FuncCall ("Prelude","_inst#Prelude.Num#Prelude.Int") []],Comb FuncCall ("let","unshar") [Comb FuncCall ("Prelude","_inst#Prelude.Num#Prelude.Int") [],Comb FuncCall ("Prelude","_inst#Prelude.Num#Prelude.Int") []]]))] []