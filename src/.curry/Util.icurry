interface Util where {
import Prelude;
fork 3 :: (a -> b) -> (c -> d) -> (a, c) -> (b, d);
mapFst 1 :: (a -> b) -> (a, c) -> (b, c);
mapSnd 1 :: (a -> b) -> (c, a) -> (c, b);
instance Prelude.Functor Prelude.IO {
  fmap 1
};
instance Prelude.Functor Prelude.Maybe {
  fmap 2
};
hiding class (Prelude.Functor :: * -> *) a;
hiding data Prelude.IO a;
hiding data Prelude.Maybe a;
instance Prelude.Functor [] {
  fmap 0
} {-# MODULE Prelude #-}
}