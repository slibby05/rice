Prog "eqskel" ["Prelude"] [] [Func ("eqskel","eqbool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Prelude","False") []) (Case Flex (Var 2) [Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude","True") []) (Case Flex (Var 2) [Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("eqskel","eqlist") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude",":") [3,4]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude",":") [5,6]) (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude",":") [7,8]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("eqskel","eqbool") [Var 5,Var 7],Comb FuncCall ("eqskel","eqlist") [Var 6,Var 8]])])])),Func ("eqskel","main") 0 Public (TCons ("Prelude","Bool") []) (Rule [] (Comb FuncCall ("eqskel","eqlist") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","True") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","False") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","False") [],Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","True") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","False") [],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","?") [Comb ConsCall ("Prelude","True") [],Comb ConsCall ("Prelude","False") []],Comb ConsCall ("Prelude","[]") []]]]]))] []