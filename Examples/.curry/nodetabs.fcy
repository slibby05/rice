Prog "nodetabs" ["Prelude"] [] [Func ("nodetabs","myabs") 3 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (TVar 0)))) (Rule [1,2,3] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","<") [Var 2],Var 3],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 0)]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","negate") [Var 1],Var 3]),Branch (Pattern ("Prelude","False") []) (Var 3)])),Func ("nodetabs","main") 2 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (TVar 0))) (Rule [1,2] (Comb FuncCall ("nodetabs","myabs") [Var 1,Var 2,Comb FuncCall ("Prelude","?") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","negate") [Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 1)]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 1)]]]))] []