interface prim where {
import Prelude;
data C = C Prelude.Char;
data F = F Prelude.Float;
data I = I Prelude.Int;
(&) 2 :: Prelude.Bool -> Prelude.Bool -> Prelude.Bool;
(*$) 2 :: I -> I -> I;
(*.) 2 :: F -> F -> F;
(+$) 2 :: I -> I -> I;
(+.) 2 :: F -> F -> F;
(-$) 2 :: I -> I -> I;
(-.) 2 :: F -> F -> F;
(/.) 2 :: F -> F -> F;
chr 1 :: I -> C;
div_ 2 :: I -> I -> I;
eqChar 2 :: C -> C -> Prelude.Bool;
eqFloat 2 :: F -> F -> Prelude.Bool;
eqInt 2 :: I -> I -> Prelude.Bool;
i2f 1 :: I -> F;
ltEqChar 2 :: C -> C -> Prelude.Bool;
ltEqFloat 2 :: F -> F -> Prelude.Bool;
ltEqInt 2 :: I -> I -> Prelude.Bool;
mod_ 2 :: I -> I -> I;
negateFloat 1 :: F -> F;
ord 1 :: C -> I;
primAddFloat 2 :: Prelude.Float -> Prelude.Float -> Prelude.Float;
primAddInt 2 :: Prelude.Int -> Prelude.Int -> Prelude.Int;
primChr 1 :: Prelude.Int -> Prelude.Char;
primDivFloat 2 :: Prelude.Float -> Prelude.Float -> Prelude.Float;
primDivInt 2 :: Prelude.Int -> Prelude.Int -> Prelude.Int;
primEqChar 2 :: Prelude.Char -> Prelude.Char -> Prelude.Bool;
primEqFloat 2 :: Prelude.Float -> Prelude.Float -> Prelude.Bool;
primEqInt 2 :: Prelude.Int -> Prelude.Int -> Prelude.Bool;
primI2F 1 :: Prelude.Int -> Prelude.Float;
primLtEqChar 2 :: Prelude.Char -> Prelude.Char -> Prelude.Bool;
primLtEqFloat 2 :: Prelude.Float -> Prelude.Float -> Prelude.Bool;
primLtEqInt 2 :: Prelude.Int -> Prelude.Int -> Prelude.Bool;
primModInt 2 :: Prelude.Int -> Prelude.Int -> Prelude.Int;
primMulFloat 2 :: Prelude.Float -> Prelude.Float -> Prelude.Float;
primMulInt 2 :: Prelude.Int -> Prelude.Int -> Prelude.Int;
primNegateFloat 1 :: Prelude.Float -> Prelude.Float;
primOrd 1 :: Prelude.Char -> Prelude.Int;
primQuotInt 2 :: Prelude.Int -> Prelude.Int -> Prelude.Int;
primRemInt 2 :: Prelude.Int -> Prelude.Int -> Prelude.Int;
primSubFloat 2 :: Prelude.Float -> Prelude.Float -> Prelude.Float;
primSubInt 2 :: Prelude.Int -> Prelude.Int -> Prelude.Int;
prim_putChar 1 :: Prelude.Char -> Prelude.IO ();
putChar 1 :: C -> Prelude.IO ();
quot_ 2 :: I -> I -> I;
rem_ 2 :: I -> I -> I;
hiding data Prelude.Char;
hiding data Prelude.Float;
hiding data Prelude.Int;
hiding data Prelude.Bool;
hiding data Prelude.IO a
}