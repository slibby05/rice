Prog "take_1" ["Prelude"] [] [Func ("take_1","mytake") 4 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","[]") [TVar 1]))))) (Rule [1,2,3,4] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 3],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 2],Lit (Intc 0)]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Case Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [5,6]) (Comb ConsCall ("Prelude",":") [Var 5,Comb FuncCall ("take_1","mytake") [Var 1,Var 2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","-") [Var 2],Var 3],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 2],Lit (Intc 1)]],Var 6]])])])),Func ("take_1","main") 2 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Comb FuncCall ("take_1","mytake") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Int") [],Comb FuncCall ("Prelude","_inst#Prelude.Num#Prelude.Int") [],Lit (Intc 6),Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","enumFrom") [Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 2],Lit (Intc 1)]]]))] []