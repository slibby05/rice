Prog "nested-case" ["Prelude"] [] [Func ("nested-case","f") 2 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TVar 0))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 0)]),Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("nested-case","g") [Var 1,Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") [Var 3,Lit (Intc 1)]) [Branch (Pattern ("Prelude","True") []) (Lit (Intc 2)),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])]])])),Func ("nested-case","g") 2 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 1) (TVar 0))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 3)])),Func ("nested-case","main") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (TVar 0)) (Rule [1] (Comb FuncCall ("nested-case","f") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Intc 6),Comb ConsCall ("Prelude",":") [Lit (Intc 7),Comb ConsCall ("Prelude","[]") []]]]))] []