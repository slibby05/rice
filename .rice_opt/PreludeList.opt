Prog "PreludeList" ["PreludeBase","PreludeCompare","PreludeNum"] [] [Func ("Prelude","enumFromThenTo_build") 5 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])))))) (Rule [-2,-3,-4,5,6] (Case Flex (Var 2) [Branch (Pattern ("","int") [7]) (Case Flex (Var 3) [Branch (Pattern ("","int") [8]) (Case Flex (Var 4) [Branch (Pattern ("","int") [9]) (Comb FuncCall ("Prelude","enumFromThenTo_build#worker") [Var 5,Var 6,Var 7,Var 8,Var 9])])])])),Func ("Prelude","enumFromTo_build") 4 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))))) (Rule [-2,-3,4,5] (Case Flex (Var 2) [Branch (Pattern ("","int") [6]) (Case Flex (Var 3) [Branch (Pattern ("","int") [7]) (Comb FuncCall ("Prelude","enumFromTo_build#worker") [Var 4,Var 5,Var 6,Var 7])])])),Func ("Prelude","splitAt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]))) (Rule [-2,3] (Case Flex (Var 2) [Branch (Pattern ("","int") [4]) (Comb FuncCall ("Prelude","splitAt#worker") [Var 3,Var 4])])),Func ("Prelude","take") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [-2,3] (Case Flex (Var 2) [Branch (Pattern ("","int") [4]) (Comb FuncCall ("Prelude","take#worker") [Var 3,Var 4])])),Func ("Prelude","drop") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [-2,-3] (Case Flex (Var 2) [Branch (Pattern ("","int") [4]) (Comb FuncCall ("Prelude","drop#worker") [Var 3,Var 4])])),Func ("Prelude","_def#minBound#Prelude.Bounded") 2 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","()") []) (TVar 0))) (Rule [2,-3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","()") []) (Let [(4,Comb (FuncPartCall 1) ("Prelude","prim_error") [])] (Let [(5,Comb ConsCall ("StringConst","No instance or default method for class operation `minBound'") [])] (Comb FuncCall ("Prelude","$##") [Var 4,Var 5])))])),Func ("Prelude","_def#maxBound#Prelude.Bounded") 2 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","()") []) (TVar 0))) (Rule [2,-3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","()") []) (Let [(4,Comb (FuncPartCall 1) ("Prelude","prim_error") [])] (Let [(5,Comb ConsCall ("StringConst","No instance or default method for class operation `maxBound'") [])] (Comb FuncCall ("Prelude","$##") [Var 4,Var 5])))])),Func ("Prelude","_def#toEnum#Prelude.Enum") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (TVar 0))) (Rule [2] (Let [(3,Comb (FuncPartCall 1) ("Prelude","prim_error") [])] (Let [(4,Comb ConsCall ("StringConst","No instance or default method for class operation `toEnum'") [])] (Comb FuncCall ("Prelude","$##") [Var 3,Var 4])))),Func ("Prelude","_def#fromEnum#Prelude.Enum") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (TCons ("Prelude","Int") []))) (Rule [2] (Let [(3,Comb (FuncPartCall 1) ("Prelude","prim_error") [])] (Let [(4,Comb ConsCall ("StringConst","No instance or default method for class operation `fromEnum'") [])] (Comb FuncCall ("Prelude","$##") [Var 3,Var 4])))),Func ("Prelude","succ") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (TVar 0))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Enum") [3,4,5,6,7,8,9,10]) (Var 3)])),Func ("Prelude","pred") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (TVar 0))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Enum") [3,4,5,6,7,8,9,10]) (Var 4)])),Func ("Prelude","enumFrom") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Enum") [3,4,5,6,7,8,9,10]) (Var 7)])),Func ("Prelude","enumFromThen") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Enum") [3,4,5,6,7,8,9,10]) (Var 8)])),Func ("Prelude","enumFromTo") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Enum") [3,4,5,6,7,8,9,10]) (Var 9)])),Func ("Prelude","enumFromThenTo") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Enum") [3,4,5,6,7,8,9,10]) (Var 10)])),Func ("Prelude","null_fold") 2 Public (FuncType (TVar 0) (FuncType (TVar 1) (TCons ("Prelude","Bool") []))) (Rule [2,3] (Comb ConsCall ("Prelude","False") [])),Func ("Prelude","null") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])) (Rule [2] (Let [(3,Comb (FuncPartCall 2) ("Prelude","null_fold") [])] (Let [(4,Comb ConsCall ("Prelude","True") [])] (Comb FuncCall ("Prelude","foldr") [Var 3,Var 4,Var 2])))),Func ("Prelude","length_fold") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [2,-3] (Case Rigid (Var 3) [Branch (Pattern ("","int") [4]) (Let [(5,Comb FuncCall ("Prelude","primAddInt") [Lit (Intc 1),Var 4])] (Comb ConsCall ("","int") [Var 5]))])),Func ("Prelude","length") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Int") [])) (Rule [2] (Let [(3,Comb (FuncPartCall 2) ("Prelude","length_fold") [])] (Let [(4,Comb ConsCall ("","int") [Lit (Intc 0)])] (Comb FuncCall ("Prelude","foldr") [Var 3,Var 4,Var 2])))),Func ("Prelude","enumFromThenTo_") 3 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Var 3,Var 2])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","enumFromThenTo_build") [Var 2,Var 5,Var 4])] (Comb FuncCall ("Prelude","build") [Var 6])))),Func ("Prelude","enumFromTo_") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [2,3] (Let [(4,Comb (FuncPartCall 2) ("Prelude","enumFromTo_build") [Var 2,Var 3])] (Comb FuncCall ("Prelude","build") [Var 4]))),Func ("Prelude","iterate") 2 Public (FuncType (FuncType (TVar 0) (TVar 0)) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]))) (Rule [2,3] (Let [(4,Comb (FuncPartCall 2) ("Prelude","iterate_build") [Var 2,Var 3])] (Comb FuncCall ("Prelude","build") [Var 4]))),Func ("Prelude","enumFromThen_") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Var 3,Var 2])] (Let [(5,Comb (FuncPartCall 1) ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Var 4])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","iterate_build") [Var 5,Var 2])] (Comb FuncCall ("Prelude","build") [Var 6]))))),Func ("Prelude","enumFrom_") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [2] (Let [(3,Comb ConsCall ("","int") [Lit (Intc 1)])] (Let [(4,Comb (FuncPartCall 1) ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Var 3])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","iterate_build") [Var 4,Var 2])] (Comb FuncCall ("Prelude","build") [Var 5]))))),Func ("Prelude","lookup_fold") 4 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Maybe") [TVar 1]) (TCons ("Prelude","Maybe") [TVar 1]))))) (Rule [2,3,-4,5] (Case Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Let [(8,Comb FuncCall ("Prelude","==") [Var 2])] (Let [(9,Comb FuncCall ("Prelude","apply") [Var 8,Var 3,Var 6])] (Case Rigid (Var 9) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","Just") [Var 7]),Branch (Pattern ("Prelude","False") []) (Var 5)])))])),Func ("Prelude","lookup") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]) (TCons ("Prelude","Maybe") [TVar 1])))) (Rule [2,3,4] (Let [(5,Comb (FuncPartCall 2) ("Prelude","lookup_fold") [Var 2,Var 3])] (Let [(6,Comb ConsCall ("Prelude","Nothing") [])] (Comb FuncCall ("Prelude","foldr") [Var 5,Var 6,Var 4])))),Func ("Prelude","repeat_build") 3 Public (FuncType (TVar 0) (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 1))) (FuncType (TVar 2) (TVar 1)))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","apply") [Var 3,Var 2,Var 5])] (Var 5))),Func ("Prelude","repeat") 1 Public (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])) (Rule [2] (Let [(3,Comb (FuncPartCall 2) ("Prelude","repeat_build") [Var 2])] (Comb FuncCall ("Prelude","build") [Var 3]))),Func ("Prelude","concat_mkc") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 1))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TVar 1) (TVar 1)))) (Rule [2,-3,4] (Comb FuncCall ("Prelude","foldr") [Var 2,Var 4,Var 3])),Func ("Prelude","concat") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0])) (Rule [2] (Let [(3,Comb (FuncPartCall 3) ("Prelude","concat_mkc") [])] (Let [(4,Comb (FuncPartCall 1) ("Prelude","id") [])] (Comb FuncCall ("Prelude","build_fold") [Var 3,Var 4,Var 2])))),Func ("Prelude","append_build") 4 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TVar 1) (TVar 1))) (FuncType (TVar 1) (TVar 1))))) (Rule [2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 4,Var 3,Var 5])] (Comb FuncCall ("Prelude","apply") [Var 4,Var 2,Var 6]))),Func ("Prelude","++") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [2,3] (Let [(4,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 2,Var 3])] (Comb FuncCall ("Prelude","build") [Var 4]))),Func ("Prelude","++#P0") 4 Public (TVar 0) (Rule [2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","foldr") [Var 4,Var 5,Var 3])] (Comb FuncCall ("Prelude","foldr") [Var 4,Var 6,Var 2]))),Func ("Prelude","filter_mkc") 4 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 1))) (FuncType (TVar 0) (FuncType (TVar 1) (TVar 1))))) (Rule [2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 2,Var 4])] (Case Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Var 3,Var 4,Var 5]),Branch (Pattern ("Prelude","False") []) (Var 5)]))),Func ("Prelude","filter") 2 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [2,3] (Let [(4,Comb (FuncPartCall 3) ("Prelude","filter_mkc") [Var 2])] (Let [(5,Comb (FuncPartCall 1) ("Prelude","id") [])] (Comb FuncCall ("Prelude","build_fold") [Var 4,Var 5,Var 3])))),Func ("Prelude","map_mkc") 4 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (FuncType (TVar 1) (FuncType (TVar 2) (TVar 2))) (FuncType (TVar 0) (FuncType (TVar 2) (TVar 2))))) (Rule [2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 2,Var 4])] (Comb FuncCall ("Prelude","apply") [Var 3,Var 6,Var 5]))),Func ("Prelude","map") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 1]))) (Rule [2,3] (Let [(4,Comb (FuncPartCall 3) ("Prelude","map_mkc") [Var 2])] (Let [(5,Comb (FuncPartCall 1) ("Prelude","id") [])] (Comb FuncCall ("Prelude","build_fold") [Var 4,Var 5,Var 3])))),Func ("Prelude","concatMap") 2 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 1])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 1]))) (Rule [2,3] (Let [(4,Comb (FuncPartCall 3) ("Prelude","concatMap#P1") [Var 2])] (Let [(5,Comb (FuncPartCall 1) ("Prelude","concatMap#P2") [])] (Comb FuncCall ("Prelude","build_fold") [Var 4,Var 5,Var 3])))),Func ("Prelude","concatMap#P2") 1 Public (TVar 0) (Rule [2] (Var 2)),Func ("Prelude","concatMap#P1") 4 Public (TVar 0) (Rule [2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 2,Var 4])] (Comb FuncCall ("Prelude","foldr") [Var 3,Var 5,Var 6]))),Func ("Prelude","break") 2 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]))) (Rule [2,3] (Let [(4,Comb (FuncPartCall 1) ("Prelude","break#P3") [Var 2])] (Comb FuncCall ("Prelude","span") [Var 4,Var 3]))),Func ("Prelude","break#P3") 2 Public (TVar 0) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","apply") [Var 2,Var 3])] (Case Flex (Var 4) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])]))),Func ("Prelude","replicate") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]))) (Rule [2,3] (Case Flex (Var 2) [Branch (Pattern ("","int") [4]) (Let [(5,Comb (FuncPartCall 2) ("Prelude","repeat_build") [Var 3])] (Let [(6,Comb FuncCall ("Prelude","build") [Var 5])] (Comb FuncCall ("Prelude","take#worker") [Var 6,Var 4])))])),Func ("Prelude","_impl#>#Prelude.Ord#[]") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [2,3,4] (Let [(-5,Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#[]") [Var 2,Var 3,Var 4])] (Case Rigid (Var (-5)) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") [])]))),Func ("Prelude","_impl#<#Prelude.Ord#[]") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [2,3,4] (Let [(-5,Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#[]") [Var 2,Var 3,Var 4])] (Case Rigid (Var (-5)) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") [])]))),Func ("Prelude","_impl#>=#Prelude.Ord#[]") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [2,3,4] (Let [(-5,Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#[]") [Var 2,Var 3,Var 4])] (Case Rigid (Var (-5)) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") [])]))),Func ("Prelude","_impl#<=#Prelude.Ord#[]") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [2,3,4] (Let [(-5,Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#[]") [Var 2,Var 3,Var 4])] (Case Rigid (Var (-5)) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") [])]))),Func ("Prelude","_impl#max#Prelude.Ord#[]") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [2,3,4] (Let [(-5,Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#[]") [Var 2,Var 3,Var 4])] (Case Rigid (Var (-5)) [Branch (Pattern ("Prelude","LT") []) (Var 3),Branch (Pattern ("Prelude","EQ") []) (Var 3),Branch (Pattern ("Prelude","GT") []) (Var 4)]))),Func ("Prelude","_impl#min#Prelude.Ord#[]") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [2,3,4] (Let [(-5,Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#[]") [Var 2,Var 3,Var 4])] (Case Rigid (Var (-5)) [Branch (Pattern ("Prelude","LT") []) (Var 3),Branch (Pattern ("Prelude","EQ") []) (Var 3),Branch (Pattern ("Prelude","GT") []) (Var 4)]))),Func ("Prelude","_impl#/=#Prelude.Eq#[]") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [2,3,4] (Let [(-5,Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Var 2,Var 3,Var 4])] (Case Flex (Var (-5)) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])]))),Func ("Prelude","_inst#Prelude.Eq#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","[]") [TVar 0]])) (Rule [2] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#[]") [Var 2])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#[]") [Var 2])] (Comb ConsCall ("Prelude","_Dict#Eq") [Var 3,Var 4])))),Func ("Prelude","_inst#Prelude.Ord#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","[]") [TVar 0]])) (Rule [2] (Let [(3,Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 2])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#[]") [Var 3])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#[]") [Var 3])] (Let [(6,Comb ConsCall ("Prelude","_Dict#Eq") [Var 4,Var 5])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","_impl#compare#Prelude.Ord#[]") [Var 2])] (Let [(8,Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#[]") [Var 2])] (Let [(9,Comb (FuncPartCall 2) ("Prelude","_impl#>=#Prelude.Ord#[]") [Var 2])] (Let [(10,Comb (FuncPartCall 2) ("Prelude","_impl#<#Prelude.Ord#[]") [Var 2])] (Let [(11,Comb (FuncPartCall 2) ("Prelude","_impl#>#Prelude.Ord#[]") [Var 2])] (Let [(12,Comb (FuncPartCall 2) ("Prelude","_impl#min#Prelude.Ord#[]") [Var 2])] (Let [(13,Comb (FuncPartCall 2) ("Prelude","_impl#max#Prelude.Ord#[]") [Var 2])] (Comb ConsCall ("Prelude","_Dict#Ord") [Var 6,Var 7,Var 8,Var 9,Var 10,Var 11,Var 12,Var 13]))))))))))))),Func ("Prelude","fromEnum") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (TCons ("Prelude","Int") []))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Enum") [3,4,5,6,7,8,9,10]) (Var 6)])),Func ("Prelude","toEnum") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (TVar 0))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Enum") [3,4,5,6,7,8,9,10]) (Var 5)])),Func ("Prelude","_def#succ#Prelude.Enum") 2 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (TVar 0))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","toEnum") [Var 2])] (Let [(5,Comb FuncCall ("Prelude","fromEnum") [Var 2])] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 5,Var 3])] (Let [(7,Comb FuncCall ("Prelude","_def#succ#Prelude.Enum#A0") [Var 6])] (Comb FuncCall ("Prelude","apply") [Var 4,Var 7])))))),Func ("Prelude","_def#succ#Prelude.Enum#A0") 1 Public (TVar 0) (Rule [2] (Case Rigid (Var 2) [Branch (Pattern ("","int") [3]) (Let [(4,Comb FuncCall ("Prelude","primAddInt") [Var 3,Lit (Intc 1)])] (Comb ConsCall ("","int") [Var 4]))])),Func ("Prelude","maxBound") 1 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","()") []) (TVar 0))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Bounded") [3,4]) (Var 4)])),Func ("Prelude","minBound") 1 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","()") []) (TVar 0))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Bounded") [3,4]) (Var 3)])),Func ("Prelude","or") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []]) (TCons ("Prelude","Bool") [])) (Rule [2] (Let [(3,Comb (FuncPartCall 2) ("Prelude","||") [])] (Let [(4,Comb ConsCall ("Prelude","False") [])] (Comb FuncCall ("Prelude","foldr") [Var 3,Var 4,Var 2])))),Func ("Prelude","any") 2 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") []))) (Rule [2,3] (Let [(4,Comb (FuncPartCall 2) ("Prelude","any#P4") [Var 2])] (Let [(5,Comb ConsCall ("Prelude","False") [])] (Comb FuncCall ("Prelude","foldr") [Var 4,Var 5,Var 3])))),Func ("Prelude","any#P4") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","apply") [Var 2,Var 3])] (Case Flex (Var 5) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","False") []) (Var 4)]))),Func ("Prelude","elem") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","==") [Var 2])] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 5,Var 3])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","elem#P5") [Var 6])] (Let [(8,Comb ConsCall ("Prelude","False") [])] (Comb FuncCall ("Prelude","foldr") [Var 7,Var 8,Var 4])))))),Func ("Prelude","elem#P5") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","apply") [Var 2,Var 3])] (Case Flex (Var 5) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","False") []) (Var 4)]))),Func ("Prelude","and") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []]) (TCons ("Prelude","Bool") [])) (Rule [2] (Let [(3,Comb (FuncPartCall 2) ("Prelude","&&") [])] (Let [(4,Comb ConsCall ("Prelude","True") [])] (Comb FuncCall ("Prelude","foldr") [Var 3,Var 4,Var 2])))),Func ("Prelude","all") 2 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") []))) (Rule [2,3] (Let [(4,Comb (FuncPartCall 2) ("Prelude","all#P6") [Var 2])] (Let [(5,Comb ConsCall ("Prelude","True") [])] (Comb FuncCall ("Prelude","foldr") [Var 4,Var 5,Var 3])))),Func ("Prelude","all#P6") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","apply") [Var 2,Var 3])] (Case Flex (Var 5) [Branch (Pattern ("Prelude","True") []) (Var 4),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])]))),Func ("Prelude","notElem") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","/=") [Var 2])] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 5,Var 3])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","notElem#P7") [Var 6])] (Let [(8,Comb ConsCall ("Prelude","True") [])] (Comb FuncCall ("Prelude","foldr") [Var 7,Var 8,Var 4])))))),Func ("Prelude","notElem#P7") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","apply") [Var 2,Var 3])] (Case Flex (Var 5) [Branch (Pattern ("Prelude","True") []) (Var 4),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])]))),Func ("Prelude","anyOf") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0)) (Rule [2] (Let [(3,Comb (FuncPartCall 2) ("Prelude","?") [])] (Comb FuncCall ("Prelude","foldr1") [Var 3,Var 2]))),Func ("Prelude","reverse") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (Rule [2] (Let [(3,Comb (FuncPartCall 2) ("Prelude","reverse#P8") [])] (Let [(4,Comb ConsCall ("Prelude","[]") [])] (Comb FuncCall ("Prelude","foldl") [Var 3,Var 4,Var 2])))),Func ("Prelude","reverse#P8") 2 Public (TVar 0) (Rule [2,3] (Comb ConsCall ("Prelude",":") [Var 3,Var 2])),Func ("Prelude","foldl1") 2 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0))) (Rule [2,-3] (Case Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Comb FuncCall ("Prelude","foldl") [Var 2,Var 4,Var 5]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("","EXEMPT") [])])),Func ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Int") 3 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Var 3,Var 2])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","enumFromThenTo_build") [Var 2,Var 5,Var 4])] (Comb FuncCall ("Prelude","build") [Var 6])))),Func ("Prelude","boundedEnumFromThen") 4 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","fromEnum") [Var 3])] (Let [(7,Comb FuncCall ("Prelude","apply") [Var 6,Var 4])] (Case Rigid (Var 7) [Branch (Pattern ("","int") [8]) (Let [(9,Comb FuncCall ("Prelude","fromEnum") [Var 3])] (Let [(10,Comb FuncCall ("Prelude","apply") [Var 9,Var 5])] (Case Rigid (Var 10) [Branch (Pattern ("","int") [11]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Var 8,Var 11]),Branch (Pattern ("Prelude","True") []) (Let [(12,Comb FuncCall ("Prelude","toEnum") [Var 3])] (Let [(13,Comb FuncCall ("Prelude","fromEnum") [Var 3])] (Let [(14,Comb FuncCall ("Prelude","maxBound") [Var 2])] (Let [(15,Comb ConsCall ("Prelude","()") [])] (Let [(16,Comb FuncCall ("Prelude","apply") [Var 14,Var 15])] (Let [(17,Comb FuncCall ("Prelude","apply") [Var 13,Var 16])] (Let [(18,Comb FuncCall ("Prelude","primSubInt") [Var 11,Var 8])] (Let [(19,Comb (FuncPartCall 2) ("Prelude","boundedEnumFromThen#P9") [Var 8,Var 12,Var 17,Var 18])] (Comb FuncCall ("Prelude","build") [Var 19]))))))))),Branch (Pattern ("Prelude","False") []) (Let [(20,Comb FuncCall ("Prelude","toEnum") [Var 3])] (Let [(21,Comb FuncCall ("Prelude","fromEnum") [Var 3])] (Let [(22,Comb FuncCall ("Prelude","minBound") [Var 2])] (Let [(23,Comb ConsCall ("Prelude","()") [])] (Let [(24,Comb FuncCall ("Prelude","apply") [Var 22,Var 23])] (Let [(25,Comb FuncCall ("Prelude","apply") [Var 21,Var 24])] (Let [(26,Comb FuncCall ("Prelude","primSubInt") [Var 11,Var 8])] (Let [(27,Comb (FuncPartCall 2) ("Prelude","boundedEnumFromThen#P10") [Var 8,Var 20,Var 25,Var 26])] (Comb FuncCall ("Prelude","build") [Var 27])))))))))])])))])))),Func ("Prelude","boundedEnumFromThen#P10") 6 Public (TVar 0) (Rule [2,3,4,5,6,7] (Case Flex (Var 4) [Branch (Pattern ("","int") [8]) (Let [(9,Comb (FuncPartCall 2) ("Prelude","map_mkc") [Var 3,Var 6])] (Comb FuncCall ("Prelude","enumFromThenTo_build#worker") [Var 9,Var 7,Var 2,Var 5,Var 8]))])),Func ("Prelude","boundedEnumFromThen#P9") 6 Public (TVar 0) (Rule [2,3,4,5,6,7] (Case Flex (Var 4) [Branch (Pattern ("","int") [8]) (Let [(9,Comb (FuncPartCall 2) ("Prelude","map_mkc") [Var 3,Var 6])] (Comb FuncCall ("Prelude","enumFromThenTo_build#worker") [Var 9,Var 7,Var 2,Var 5,Var 8]))])),Func ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [2,3] (Let [(4,Comb (FuncPartCall 2) ("Prelude","enumFromTo_build") [Var 2,Var 3])] (Comb FuncCall ("Prelude","build") [Var 4]))),Func ("Prelude","boundedEnumFrom") 3 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","toEnum") [Var 3])] (Let [(6,Comb FuncCall ("Prelude","fromEnum") [Var 3])] (Let [(7,Comb FuncCall ("Prelude","apply") [Var 6,Var 4])] (Let [(8,Comb FuncCall ("Prelude","fromEnum") [Var 3])] (Let [(9,Comb FuncCall ("Prelude","maxBound") [Var 2])] (Let [(10,Comb ConsCall ("Prelude","()") [])] (Let [(11,Comb FuncCall ("Prelude","apply") [Var 9,Var 10])] (Let [(12,Comb FuncCall ("Prelude","apply") [Var 8,Var 11])] (Let [(13,Comb (FuncPartCall 2) ("Prelude","boundedEnumFrom#P11") [Var 7,Var 12,Var 5])] (Comb FuncCall ("Prelude","build") [Var 13]))))))))))),Func ("Prelude","boundedEnumFrom#P11") 5 Public (TVar 0) (Rule [2,3,4,5,6] (Case Flex (Var 2) [Branch (Pattern ("","int") [7]) (Case Flex (Var 3) [Branch (Pattern ("","int") [8]) (Let [(9,Comb (FuncPartCall 2) ("Prelude","map_mkc") [Var 4,Var 5])] (Comb FuncCall ("Prelude","enumFromTo_build#worker") [Var 9,Var 6,Var 7,Var 8]))])])),Func ("Prelude","_impl#enumFromThen#Prelude.Enum#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Var 3,Var 2])] (Let [(5,Comb (FuncPartCall 1) ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Var 4])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","iterate_build") [Var 5,Var 2])] (Comb FuncCall ("Prelude","build") [Var 6]))))),Func ("Prelude","_def#enumFromThen#Prelude.Enum") 3 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","toEnum") [Var 2])] (Let [(6,Comb FuncCall ("Prelude","fromEnum") [Var 2])] (Let [(7,Comb FuncCall ("Prelude","apply") [Var 6,Var 3])] (Let [(8,Comb FuncCall ("Prelude","fromEnum") [Var 2])] (Let [(9,Comb FuncCall ("Prelude","apply") [Var 8,Var 4])] (Let [(10,Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Var 9,Var 7])] (Let [(11,Comb (FuncPartCall 2) ("Prelude","_def#enumFromThen#Prelude.Enum#P12") [Var 7,Var 5,Var 10])] (Comb FuncCall ("Prelude","build") [Var 11]))))))))),Func ("Prelude","_def#enumFromThen#Prelude.Enum#P12") 5 Public (TVar 0) (Rule [2,3,4,5,6] (Let [(7,Comb (FuncPartCall 1) ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Var 4])] (Let [(8,Comb (FuncPartCall 2) ("Prelude","map_mkc") [Var 3,Var 5])] (Comb FuncCall ("Prelude","iterate_build") [Var 7,Var 2,Var 8,Var 6])))),Func ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [2] (Let [(3,Comb ConsCall ("","int") [Lit (Intc 1)])] (Let [(4,Comb (FuncPartCall 1) ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Var 3])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","iterate_build") [Var 4,Var 2])] (Comb FuncCall ("Prelude","build") [Var 5]))))),Func ("Prelude","_def#enumFrom#Prelude.Enum") 2 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","toEnum") [Var 2])] (Let [(5,Comb FuncCall ("Prelude","fromEnum") [Var 2])] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 5,Var 3])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","_def#enumFrom#Prelude.Enum#P13") [Var 6,Var 4])] (Comb FuncCall ("Prelude","build") [Var 7])))))),Func ("Prelude","_def#enumFrom#Prelude.Enum#P13") 4 Public (TVar 0) (Rule [2,3,4,5] (Let [(6,Comb (FuncPartCall 1) ("Prelude","_def#enumFrom#Prelude.Enum#P13#P14") [])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","map_mkc") [Var 3,Var 4])] (Comb FuncCall ("Prelude","iterate_build") [Var 6,Var 2,Var 7,Var 5])))),Func ("Prelude","_def#enumFrom#Prelude.Enum#P13#P14") 1 Public (TVar 0) (Rule [2] (Case Rigid (Var 2) [Branch (Pattern ("","int") [3]) (Let [(4,Comb FuncCall ("Prelude","primAddInt") [Lit (Intc 1),Var 3])] (Comb ConsCall ("","int") [Var 4]))])),Func ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [-2] (Var 2)),Func ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [-2] (Var 2)),Func ("Prelude","_impl#pred#Prelude.Enum#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("","int") [3]) (Let [(4,Comb FuncCall ("Prelude","primSubInt") [Var 3,Lit (Intc 1)])] (Comb ConsCall ("","int") [Var 4]))])),Func ("Prelude","_impl#succ#Prelude.Enum#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("","int") [3]) (Let [(4,Comb FuncCall ("Prelude","primAddInt") [Var 3,Lit (Intc 1)])] (Comb ConsCall ("","int") [Var 4]))])),Func ("Prelude","_inst#Prelude.Enum#Prelude.Int") 0 Public (TCons ("Prelude","_Dict#Enum") [TCons ("Prelude","Int") []]) (Rule [] (Let [(2,Comb (FuncPartCall 1) ("Prelude","_impl#succ#Prelude.Enum#Prelude.Int") [])] (Let [(3,Comb (FuncPartCall 1) ("Prelude","_impl#pred#Prelude.Enum#Prelude.Int") [])] (Let [(4,Comb (FuncPartCall 1) ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Int") [])] (Let [(5,Comb (FuncPartCall 1) ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Int") [])] (Let [(6,Comb (FuncPartCall 1) ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Int") [])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","_impl#enumFromThen#Prelude.Enum#Prelude.Int") [])] (Let [(8,Comb (FuncPartCall 2) ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Int") [])] (Let [(9,Comb (FuncPartCall 3) ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Int") [])] (Comb ConsCall ("Prelude","_Dict#Enum") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 9])))))))))),Func ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Int") [])) (Rule [2] (Case Rigid (Var 2) [Branch (Pattern ("","char") [3]) (Let [(4,Comb FuncCall ("Prelude","primOrd") [Var 3])] (Comb ConsCall ("","int") [Var 4]))])),Func ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Char") [])) (Rule [2] (Case Rigid (Var 2) [Branch (Pattern ("","int") [3]) (Let [(4,Comb FuncCall ("Prelude","primChr") [Var 3])] (Comb ConsCall ("","char") [Var 4]))])),Func ("Prelude","_impl#pred#Prelude.Enum#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Char") [])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("","char") [3]) (Let [(4,Comb FuncCall ("Prelude","primOrd") [Var 3])] (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Var 4,Lit (Intc 0)]),Branch (Pattern ("Prelude","True") []) (Let [(5,Comb (FuncPartCall 1) ("Prelude","prim_error") [])] (Let [(6,Comb ConsCall ("StringConst","Prelude.Enum.Char.succ: no predecessor") [])] (Comb FuncCall ("Prelude","$##") [Var 5,Var 6]))),Branch (Pattern ("Prelude","False") []) (Let [(7,Comb FuncCall ("Prelude","primOrd") [Var 3])] (Let [(8,Comb FuncCall ("Prelude","primSubInt") [Var 7,Lit (Intc 1)])] (Let [(9,Comb FuncCall ("Prelude","primChr") [Var 8])] (Comb ConsCall ("","char") [Var 9]))))]))])),Func ("Prelude","_impl#succ#Prelude.Enum#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Char") [])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("","char") [3]) (Let [(4,Comb FuncCall ("Prelude","primOrd") [Var 3])] (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Lit (Intc 1114111),Var 4]),Branch (Pattern ("Prelude","True") []) (Let [(5,Comb (FuncPartCall 1) ("Prelude","prim_error") [])] (Let [(6,Comb ConsCall ("StringConst","Prelude.Enum.Char.succ: no successor") [])] (Comb FuncCall ("Prelude","$##") [Var 5,Var 6]))),Branch (Pattern ("Prelude","False") []) (Let [(7,Comb FuncCall ("Prelude","primOrd") [Var 3])] (Let [(8,Comb FuncCall ("Prelude","primAddInt") [Var 7,Lit (Intc 1)])] (Let [(9,Comb FuncCall ("Prelude","primChr") [Var 8])] (Comb ConsCall ("","char") [Var 9]))))]))])),Func ("Prelude","_impl#maxBound#Prelude.Bounded#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Char") [])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("","char") [Lit (Charc '\1114111')])])),Func ("Prelude","_impl#minBound#Prelude.Bounded#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Char") [])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("","char") [Lit (Charc '\00')])])),Func ("Prelude","_inst#Prelude.Bounded#Prelude.Char") 0 Public (TCons ("Prelude","_Dict#Bounded") [TCons ("Prelude","Char") []]) (Rule [] (Let [(2,Comb (FuncPartCall 1) ("Prelude","_impl#minBound#Prelude.Bounded#Prelude.Char") [])] (Let [(3,Comb (FuncPartCall 1) ("Prelude","_impl#maxBound#Prelude.Bounded#Prelude.Char") [])] (Comb ConsCall ("Prelude","_Dict#Bounded") [Var 2,Var 3])))),Func ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Ordering") 1 Public (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Int") [])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("","int") [Lit (Intc 0)]),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("","int") [Lit (Intc 1)]),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("","int") [Lit (Intc 2)])])),Func ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Ordering") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Ordering") [])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("","int") [3]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqInt") [Var 3,Lit (Intc 0)]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","LT") []),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqInt") [Var 3,Lit (Intc 1)]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","EQ") []),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqInt") [Var 3,Lit (Intc 2)]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","GT") []),Branch (Pattern ("Prelude","False") []) (Let [(4,Comb (FuncPartCall 1) ("Prelude","prim_error") [])] (Let [(5,Comb ConsCall ("StringConst","Prelude.Enum.Ordering.toEnum: bad argument") [])] (Comb FuncCall ("Prelude","$##") [Var 4,Var 5])))])])])])),Func ("Prelude","_impl#pred#Prelude.Enum#Prelude.Ordering") 1 Public (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Ordering") [])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","LT") []) (Let [(3,Comb (FuncPartCall 1) ("Prelude","prim_error") [])] (Let [(4,Comb ConsCall ("StringConst","Prelude.Enum.Ordering.pred: bad argument") [])] (Comb FuncCall ("Prelude","$##") [Var 3,Var 4]))),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","LT") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","EQ") [])])),Func ("Prelude","_impl#succ#Prelude.Enum#Prelude.Ordering") 1 Public (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Ordering") [])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","EQ") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","GT") []),Branch (Pattern ("Prelude","GT") []) (Let [(3,Comb (FuncPartCall 1) ("Prelude","prim_error") [])] (Let [(4,Comb ConsCall ("StringConst","Prelude.Enum.Ordering.succ: bad argument") [])] (Comb FuncCall ("Prelude","$##") [Var 3,Var 4])))])),Func ("Prelude","_impl#maxBound#Prelude.Bounded#Prelude.Ordering") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Ordering") [])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","GT") [])])),Func ("Prelude","_impl#minBound#Prelude.Bounded#Prelude.Ordering") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Ordering") [])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","LT") [])])),Func ("Prelude","_inst#Prelude.Bounded#Prelude.Ordering") 0 Public (TCons ("Prelude","_Dict#Bounded") [TCons ("Prelude","Ordering") []]) (Rule [] (Let [(2,Comb (FuncPartCall 1) ("Prelude","_impl#minBound#Prelude.Bounded#Prelude.Ordering") [])] (Let [(3,Comb (FuncPartCall 1) ("Prelude","_impl#maxBound#Prelude.Bounded#Prelude.Ordering") [])] (Comb ConsCall ("Prelude","_Dict#Bounded") [Var 2,Var 3])))),Func ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Bool") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Int") [])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("","int") [Lit (Intc 0)]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("","int") [Lit (Intc 1)])])),Func ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Bool") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") [])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("","int") [3]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqInt") [Var 3,Lit (Intc 0)]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqInt") [Var 3,Lit (Intc 1)]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","False") []) (Let [(4,Comb (FuncPartCall 1) ("Prelude","prim_error") [])] (Let [(5,Comb ConsCall ("StringConst","Prelude.Enum.Bool.toEnum: bad argument") [])] (Comb FuncCall ("Prelude","$##") [Var 4,Var 5])))])])])),Func ("Prelude","_impl#pred#Prelude.Enum#Prelude.Bool") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") [])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","False") []) (Let [(3,Comb (FuncPartCall 1) ("Prelude","prim_error") [])] (Let [(4,Comb ConsCall ("StringConst","Prelude.Enum.Bool.pred: bad argument") [])] (Comb FuncCall ("Prelude","$##") [Var 3,Var 4]))),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") [])])),Func ("Prelude","_impl#succ#Prelude.Enum#Prelude.Bool") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") [])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","True") []) (Let [(3,Comb (FuncPartCall 1) ("Prelude","prim_error") [])] (Let [(4,Comb ConsCall ("StringConst","Prelude.Enum.Bool.succ: bad argument") [])] (Comb FuncCall ("Prelude","$##") [Var 3,Var 4])))])),Func ("Prelude","_impl#maxBound#Prelude.Bounded#Prelude.Bool") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") [])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","True") [])])),Func ("Prelude","_impl#minBound#Prelude.Bounded#Prelude.Bool") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") [])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","False") [])])),Func ("Prelude","_inst#Prelude.Bounded#Prelude.Bool") 0 Public (TCons ("Prelude","_Dict#Bounded") [TCons ("Prelude","Bool") []]) (Rule [] (Let [(2,Comb (FuncPartCall 1) ("Prelude","_impl#minBound#Prelude.Bounded#Prelude.Bool") [])] (Let [(3,Comb (FuncPartCall 1) ("Prelude","_impl#maxBound#Prelude.Bounded#Prelude.Bool") [])] (Comb ConsCall ("Prelude","_Dict#Bounded") [Var 2,Var 3])))),Func ("Prelude","_def#enumFromThenTo#Prelude.Enum") 4 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","toEnum") [Var 2])] (Let [(7,Comb FuncCall ("Prelude","fromEnum") [Var 2])] (Let [(8,Comb FuncCall ("Prelude","apply") [Var 7,Var 3])] (Let [(9,Comb FuncCall ("Prelude","fromEnum") [Var 2])] (Let [(10,Comb FuncCall ("Prelude","apply") [Var 9,Var 4])] (Let [(11,Comb FuncCall ("Prelude","fromEnum") [Var 2])] (Let [(12,Comb FuncCall ("Prelude","apply") [Var 11,Var 5])] (Let [(13,Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Var 10,Var 8])] (Let [(14,Comb (FuncPartCall 2) ("Prelude","_def#enumFromThenTo#Prelude.Enum#P15") [Var 8,Var 12,Var 6,Var 13])] (Comb FuncCall ("Prelude","build") [Var 14]))))))))))),Func ("Prelude","_def#enumFromThenTo#Prelude.Enum#P15") 6 Public (TVar 0) (Rule [2,3,4,5,6,7] (Case Flex (Var 2) [Branch (Pattern ("","int") [8]) (Case Flex (Var 5) [Branch (Pattern ("","int") [9]) (Case Flex (Var 3) [Branch (Pattern ("","int") [10]) (Let [(11,Comb (FuncPartCall 2) ("Prelude","map_mkc") [Var 4,Var 6])] (Comb FuncCall ("Prelude","enumFromThenTo_build#worker") [Var 11,Var 7,Var 8,Var 9,Var 10]))])])])),Func ("Prelude","_def#enumFromTo#Prelude.Enum") 3 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","toEnum") [Var 2])] (Let [(6,Comb FuncCall ("Prelude","fromEnum") [Var 2])] (Let [(7,Comb FuncCall ("Prelude","apply") [Var 6,Var 3])] (Let [(8,Comb FuncCall ("Prelude","fromEnum") [Var 2])] (Let [(9,Comb FuncCall ("Prelude","apply") [Var 8,Var 4])] (Let [(10,Comb (FuncPartCall 2) ("Prelude","_def#enumFromTo#Prelude.Enum#P16") [Var 7,Var 9,Var 5])] (Comb FuncCall ("Prelude","build") [Var 10])))))))),Func ("Prelude","_def#enumFromTo#Prelude.Enum#P16") 5 Public (TVar 0) (Rule [2,3,4,5,6] (Case Flex (Var 2) [Branch (Pattern ("","int") [7]) (Case Flex (Var 3) [Branch (Pattern ("","int") [8]) (Let [(9,Comb (FuncPartCall 2) ("Prelude","map_mkc") [Var 4,Var 5])] (Comb FuncCall ("Prelude","enumFromTo_build#worker") [Var 9,Var 6,Var 7,Var 8]))])])),Func ("Prelude","_inst#Prelude.Enum#Prelude.Char") 0 Public (TCons ("Prelude","_Dict#Enum") [TCons ("Prelude","Char") []]) (Rule [] (Let [(2,Comb (FuncPartCall 1) ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Char") [])] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#enumFromThen#Prelude.Enum#Prelude.Char") [])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Char") [])] (Let [(5,Comb (FuncPartCall 3) ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Char") [])] (Let [(6,Comb (FuncPartCall 1) ("Prelude","_impl#succ#Prelude.Enum#Prelude.Char") [])] (Let [(7,Comb (FuncPartCall 1) ("Prelude","_impl#pred#Prelude.Enum#Prelude.Char") [])] (Let [(8,Comb (FuncPartCall 1) ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Char") [])] (Let [(9,Comb (FuncPartCall 1) ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Char") [])] (Comb ConsCall ("Prelude","_Dict#Enum") [Var 6,Var 7,Var 8,Var 9,Var 2,Var 3,Var 4,Var 5])))))))))),Func ("Prelude","_inst#Prelude.Enum#Prelude.Ordering") 0 Public (TCons ("Prelude","_Dict#Enum") [TCons ("Prelude","Ordering") []]) (Rule [] (Let [(2,Comb (FuncPartCall 1) ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Ordering") [])] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#enumFromThen#Prelude.Enum#Prelude.Ordering") [])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Ordering") [])] (Let [(5,Comb (FuncPartCall 3) ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Ordering") [])] (Let [(6,Comb (FuncPartCall 1) ("Prelude","_impl#succ#Prelude.Enum#Prelude.Ordering") [])] (Let [(7,Comb (FuncPartCall 1) ("Prelude","_impl#pred#Prelude.Enum#Prelude.Ordering") [])] (Let [(8,Comb (FuncPartCall 1) ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Ordering") [])] (Let [(9,Comb (FuncPartCall 1) ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Ordering") [])] (Comb ConsCall ("Prelude","_Dict#Enum") [Var 6,Var 7,Var 8,Var 9,Var 2,Var 3,Var 4,Var 5])))))))))),Func ("Prelude","_inst#Prelude.Enum#Prelude.Bool") 0 Public (TCons ("Prelude","_Dict#Enum") [TCons ("Prelude","Bool") []]) (Rule [] (Let [(2,Comb (FuncPartCall 1) ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Bool") [])] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#enumFromThen#Prelude.Enum#Prelude.Bool") [])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Bool") [])] (Let [(5,Comb (FuncPartCall 3) ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Bool") [])] (Let [(6,Comb (FuncPartCall 1) ("Prelude","_impl#succ#Prelude.Enum#Prelude.Bool") [])] (Let [(7,Comb (FuncPartCall 1) ("Prelude","_impl#pred#Prelude.Enum#Prelude.Bool") [])] (Let [(8,Comb (FuncPartCall 1) ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Bool") [])] (Let [(9,Comb (FuncPartCall 1) ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Bool") [])] (Comb ConsCall ("Prelude","_Dict#Enum") [Var 6,Var 7,Var 8,Var 9,Var 2,Var 3,Var 4,Var 5])))))))))),Func ("Prelude","_def#pred#Prelude.Enum") 2 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (TVar 0))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","toEnum") [Var 2])] (Let [(5,Comb FuncCall ("Prelude","fromEnum") [Var 2])] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 5,Var 3])] (Let [(7,Comb FuncCall ("Prelude","_def#pred#Prelude.Enum#A1") [Var 6])] (Comb FuncCall ("Prelude","apply") [Var 4,Var 7])))))),Func ("Prelude","_def#pred#Prelude.Enum#A1") 1 Public (TVar 0) (Rule [2] (Case Rigid (Var 2) [Branch (Pattern ("","int") [3]) (Let [(4,Comb FuncCall ("Prelude","primSubInt") [Var 3,Lit (Intc 1)])] (Comb ConsCall ("","int") [Var 4]))])),Func ("Prelude","enumFromThenTo_build#worker") 5 Private (TVar 0) (Rule [2,3,4,5,6] (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Var 5,Lit (Intc 0)]),Branch (Pattern ("Prelude","True") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Var 6,Var 4]),Branch (Pattern ("Prelude","True") []) (Let [(7,Comb FuncCall ("Prelude","primAddInt") [Var 4,Var 5])] (Let [(8,Comb FuncCall ("Prelude","enumFromThenTo_build#worker") [Var 2,Var 3,Var 7,Var 5,Var 6])] (Let [(9,Comb ConsCall ("","int") [Var 4])] (Comb FuncCall ("Prelude","apply") [Var 2,Var 9,Var 8])))),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Var 4,Var 6]),Branch (Pattern ("Prelude","True") []) (Let [(10,Comb FuncCall ("Prelude","primAddInt") [Var 4,Var 5])] (Let [(11,Comb FuncCall ("Prelude","enumFromThenTo_build#worker") [Var 2,Var 3,Var 10,Var 5,Var 6])] (Let [(12,Comb ConsCall ("","int") [Var 4])] (Comb FuncCall ("Prelude","apply") [Var 2,Var 12,Var 11])))),Branch (Pattern ("Prelude","False") []) (Var 3)])])),Func ("Prelude","enumFromTo_build#worker") 4 Private (TVar 0) (Rule [2,3,4,5] (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Var 4,Var 5]),Branch (Pattern ("Prelude","True") []) (Let [(6,Comb FuncCall ("Prelude","primAddInt") [Var 4,Lit (Intc 1)])] (Let [(7,Comb FuncCall ("Prelude","enumFromTo_build#worker") [Var 2,Var 3,Var 6,Var 5])] (Let [(8,Comb ConsCall ("","int") [Var 4])] (Comb FuncCall ("Prelude","apply") [Var 2,Var 8,Var 7])))),Branch (Pattern ("Prelude","False") []) (Var 3)])),Func ("Prelude","iterate_build") 4 Private (FuncType (FuncType (TVar 0) (TVar 0)) (FuncType (TVar 0) (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 1))) (FuncType (TVar 2) (TVar 1))))) (Rule [2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 2,Var 3])] (Let [(7,Comb FuncCall ("Prelude","iterate_build") [Var 2,Var 6,Var 4,Var 5])] (Comb FuncCall ("Prelude","apply") [Var 4,Var 3,Var 7])))),Func ("Prelude","span") 2 Private (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]))) (Rule [2,-3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Let [(4,Comb ConsCall ("Prelude","[]") [])] (Let [(5,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude","(,)") [Var 4,Var 5]))),Branch (Pattern ("Prelude",":") [6,7]) (Let [(8,Comb FuncCall ("Prelude","apply") [Var 2,Var 6])] (Case Rigid (Var 8) [Branch (Pattern ("Prelude","True") []) (Let [(-9,Comb FuncCall ("Prelude","span") [Var 2,Var 7])] (Case Rigid (Var (-9)) [Branch (Pattern ("Prelude","(,)") [10,11]) (Let [(12,Comb ConsCall ("Prelude",":") [Var 6,Var 10])] (Comb ConsCall ("Prelude","(,)") [Var 12,Var 11]))])),Branch (Pattern ("Prelude","False") []) (Let [(13,Comb ConsCall ("Prelude","[]") [])] (Let [(14,Comb ConsCall ("Prelude",":") [Var 6,Var 7])] (Comb ConsCall ("Prelude","(,)") [Var 13,Var 14])))]))])),Func ("Prelude","splitAt#worker") 2 Private (TVar 0) (Rule [2,3] (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Var 3,Lit (Intc 0)]),Branch (Pattern ("Prelude","True") []) (Let [(4,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude","(,)") [Var 4,Var 2])),Branch (Pattern ("Prelude","False") []) (Case Rigid (Var 2) [Branch (Pattern ("Prelude","[]") []) (Let [(5,Comb ConsCall ("Prelude","[]") [])] (Let [(6,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude","(,)") [Var 5,Var 6]))),Branch (Pattern ("Prelude",":") [7,8]) (Let [(9,Comb FuncCall ("Prelude","primSubInt") [Var 3,Lit (Intc 1)])] (Let [(-10,Comb FuncCall ("Prelude","splitAt#worker") [Var 8,Var 9])] (Case Rigid (Var (-10)) [Branch (Pattern ("Prelude","(,)") [11,12]) (Let [(13,Comb ConsCall ("Prelude",":") [Var 7,Var 11])] (Comb ConsCall ("Prelude","(,)") [Var 13,Var 12]))])))])])),Func ("Prelude","take#worker") 2 Private (TVar 0) (Rule [2,3] (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Var 3,Lit (Intc 0)]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Case Rigid (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [4,5]) (Let [(6,Comb FuncCall ("Prelude","primSubInt") [Var 3,Lit (Intc 1)])] (Let [(7,Comb FuncCall ("Prelude","take#worker") [Var 5,Var 6])] (Comb ConsCall ("Prelude",":") [Var 4,Var 7])))])])),Func ("Prelude","_impl#compare#Prelude.Ord#[]") 3 Private (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Ordering") [])))) (Rule [2,-3,-4] (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Case Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","EQ") []),Branch (Pattern ("Prelude",":") [5,6]) (Comb ConsCall ("Prelude","LT") [])]),Branch (Pattern ("Prelude",":") [7,8]) (Case Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","GT") []),Branch (Pattern ("Prelude",":") [9,10]) (Let [(11,Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#[]#A2") [Var 2])] (Let [(12,Comb FuncCall ("Prelude","==") [Var 11])] (Let [(13,Comb FuncCall ("Prelude","apply") [Var 12,Var 7,Var 9])] (Case Rigid (Var 13) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#[]") [Var 2,Var 8,Var 10]),Branch (Pattern ("Prelude","False") []) (Let [(14,Comb FuncCall ("Prelude","compare") [Var 2])] (Comb FuncCall ("Prelude","apply") [Var 14,Var 7,Var 9]))]))))])])),Func ("Prelude","_impl#compare#Prelude.Ord#[]#A2") 1 Public (TVar 0) (Rule [2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Ord") [3,4,5,6,7,8,9,10]) (Var 3)])),Func ("Prelude","_impl#==#Prelude.Eq#[]") 3 Private (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [2,-3,-4] (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Case Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude",":") [5,6]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude",":") [7,8]) (Case Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude",":") [9,10]) (Let [(11,Comb FuncCall ("Prelude","==") [Var 2])] (Let [(12,Comb FuncCall ("Prelude","apply") [Var 11,Var 7,Var 9])] (Case Flex (Var 12) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Var 2,Var 8,Var 10]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])])))])])),Func ("Prelude","dropWhile") 2 Private (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [2,-3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [4,5]) (Let [(6,Comb FuncCall ("Prelude","apply") [Var 2,Var 4])] (Case Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","dropWhile") [Var 2,Var 5]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Var 4,Var 5])]))])),Func ("Prelude","takeWhile") 2 Private (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [2,-3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [4,5]) (Let [(6,Comb FuncCall ("Prelude","apply") [Var 2,Var 4])] (Case Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Let [(7,Comb FuncCall ("Prelude","takeWhile") [Var 2,Var 5])] (Comb ConsCall ("Prelude",":") [Var 4,Var 7])),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]))])),Func ("Prelude","drop#worker") 2 Private (TVar 0) (Rule [2,3] (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Var 3,Lit (Intc 0)]),Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Case Rigid (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [4,5]) (Let [(6,Comb FuncCall ("Prelude","primSubInt") [Var 3,Lit (Intc 1)])] (Comb FuncCall ("Prelude","drop#worker") [Var 5,Var 6]))])])),Func ("Prelude","foldr1") 2 Private (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0))) (Rule [2,-3] (Case Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case Flex (Var 5) [Branch (Pattern ("Prelude","[]") []) (Var 4),Branch (Pattern ("Prelude",":") [6,7]) (Let [(8,Comb ConsCall ("Prelude",":") [Var 6,Var 7])] (Let [(9,Comb FuncCall ("Prelude","foldr1") [Var 2,Var 8])] (Comb FuncCall ("Prelude","apply") [Var 2,Var 4,Var 9])))]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("","EXEMPT") [])])),Func ("Prelude","foldl") 3 Private (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 0))) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TVar 0)))) (Rule [2,3,-4] (Case Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Var 3),Branch (Pattern ("Prelude",":") [5,6]) (Let [(7,Comb FuncCall ("Prelude","apply") [Var 2,Var 3,Var 5])] (Comb FuncCall ("Prelude","foldl") [Var 2,Var 7,Var 6]))])),Func ("Prelude","!!") 2 Private (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (TVar 0))) (Rule [-2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude",":") [4,5]) (Case Rigid (Var 3) [Branch (Pattern ("","int") [6]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqInt") [Var 6,Lit (Intc 0)]),Branch (Pattern ("Prelude","True") []) (Var 4),Branch (Pattern ("Prelude","False") []) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Var 6,Lit (Intc 0)]),Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","failed") []),Branch (Pattern ("Prelude","False") []) (Let [(7,Comb FuncCall ("Prelude","primSubInt") [Var 6,Lit (Intc 1)])] (Let [(8,Comb ConsCall ("","int") [Var 7])] (Comb FuncCall ("Prelude","!!") [Var 5,Var 8])))])])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("","EXEMPT") [])])),Func ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Char") 3 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","_inst#Prelude.Enum#Prelude.Char") [])] (Comb FuncCall ("Prelude","_def#enumFromThenTo#Prelude.Enum") [Var 5,Var 2,Var 3,Var 4]))),Func ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Char") 2 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Char") [Var 2])] (Let [(5,Comb FuncCall ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Char") [Var 3])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Char#P17") [Var 4,Var 5])] (Comb FuncCall ("Prelude","build") [Var 6]))))),Func ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Char#P17") 4 Public (TVar 0) (Rule [2,3,4,5] (Case Flex (Var 2) [Branch (Pattern ("","int") [6]) (Case Flex (Var 3) [Branch (Pattern ("","int") [7]) (Let [(8,Comb (FuncPartCall 2) ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Char#P17#P18") [Var 4])] (Comb FuncCall ("Prelude","enumFromTo_build#worker") [Var 8,Var 5,Var 6,Var 7]))])])),Func ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Char#P17#P18") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Char") [Var 3])] (Comb FuncCall ("Prelude","apply") [Var 2,Var 5,Var 4]))),Func ("Prelude","_impl#enumFromThen#Prelude.Enum#Prelude.Char") 2 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","_inst#Prelude.Enum#Prelude.Char") [])] (Let [(5,Comb (FuncPartCall 1) ("Prelude","_impl#minBound#Prelude.Bounded#Prelude.Char") [])] (Let [(6,Comb (FuncPartCall 1) ("Prelude","_impl#maxBound#Prelude.Bounded#Prelude.Char") [])] (Let [(7,Comb ConsCall ("Prelude","_Dict#Bounded") [Var 5,Var 6])] (Comb FuncCall ("Prelude","boundedEnumFromThen") [Var 7,Var 4,Var 2,Var 3])))))),Func ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Char") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [2] (Let [(3,Comb FuncCall ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Char") [Var 2])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Char#P19") [Var 3])] (Comb FuncCall ("Prelude","build") [Var 4])))),Func ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Char#P19") 3 Public (TVar 0) (Rule [2,3,4] (Case Flex (Var 2) [Branch (Pattern ("","int") [5]) (Let [(6,Comb (FuncPartCall 2) ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Char#P19#P20") [Var 3])] (Comb FuncCall ("Prelude","enumFromTo_build#worker") [Var 6,Var 4,Var 5,Lit (Intc 1114111)]))])),Func ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Char#P19#P20") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Char") [Var 3])] (Comb FuncCall ("Prelude","apply") [Var 2,Var 5,Var 4]))),Func ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Ordering") 3 Private (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","[]") [TCons ("Prelude","Ordering") []])))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","_inst#Prelude.Enum#Prelude.Ordering") [])] (Comb FuncCall ("Prelude","_def#enumFromThenTo#Prelude.Enum") [Var 5,Var 2,Var 3,Var 4]))),Func ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Ordering") 2 Private (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","[]") [TCons ("Prelude","Ordering") []]))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Ordering") [Var 2])] (Let [(5,Comb FuncCall ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Ordering") [Var 3])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Ordering#P21") [Var 4,Var 5])] (Comb FuncCall ("Prelude","build") [Var 6]))))),Func ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Ordering#P21") 4 Public (TVar 0) (Rule [2,3,4,5] (Case Flex (Var 2) [Branch (Pattern ("","int") [6]) (Case Flex (Var 3) [Branch (Pattern ("","int") [7]) (Let [(8,Comb (FuncPartCall 2) ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Ordering#P21#P22") [Var 4])] (Comb FuncCall ("Prelude","enumFromTo_build#worker") [Var 8,Var 5,Var 6,Var 7]))])])),Func ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Ordering#P21#P22") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Ordering") [Var 3])] (Comb FuncCall ("Prelude","apply") [Var 2,Var 5,Var 4]))),Func ("Prelude","_impl#enumFromThen#Prelude.Enum#Prelude.Ordering") 2 Private (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","[]") [TCons ("Prelude","Ordering") []]))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","_inst#Prelude.Enum#Prelude.Ordering") [])] (Let [(5,Comb (FuncPartCall 1) ("Prelude","_impl#minBound#Prelude.Bounded#Prelude.Ordering") [])] (Let [(6,Comb (FuncPartCall 1) ("Prelude","_impl#maxBound#Prelude.Bounded#Prelude.Ordering") [])] (Let [(7,Comb ConsCall ("Prelude","_Dict#Bounded") [Var 5,Var 6])] (Comb FuncCall ("Prelude","boundedEnumFromThen") [Var 7,Var 4,Var 2,Var 3])))))),Func ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Ordering") 1 Private (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","[]") [TCons ("Prelude","Ordering") []])) (Rule [2] (Let [(3,Comb FuncCall ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Ordering") [Var 2])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Ordering#P23") [Var 3])] (Comb FuncCall ("Prelude","build") [Var 4])))),Func ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Ordering#P23") 3 Public (TVar 0) (Rule [2,3,4] (Case Flex (Var 2) [Branch (Pattern ("","int") [5]) (Let [(6,Comb (FuncPartCall 2) ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Ordering#P23#P24") [Var 3])] (Comb FuncCall ("Prelude","enumFromTo_build#worker") [Var 6,Var 4,Var 5,Lit (Intc 2)]))])),Func ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Ordering#P23#P24") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Ordering") [Var 3])] (Comb FuncCall ("Prelude","apply") [Var 2,Var 5,Var 4]))),Func ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Bool") 3 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []])))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","_inst#Prelude.Enum#Prelude.Bool") [])] (Comb FuncCall ("Prelude","_def#enumFromThenTo#Prelude.Enum") [Var 5,Var 2,Var 3,Var 4]))),Func ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Bool") 2 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []]))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Bool") [Var 2])] (Let [(5,Comb FuncCall ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Bool") [Var 3])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Bool#P25") [Var 4,Var 5])] (Comb FuncCall ("Prelude","build") [Var 6]))))),Func ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Bool#P25") 4 Public (TVar 0) (Rule [2,3,4,5] (Case Flex (Var 2) [Branch (Pattern ("","int") [6]) (Case Flex (Var 3) [Branch (Pattern ("","int") [7]) (Let [(8,Comb (FuncPartCall 2) ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Bool#P25#P26") [Var 4])] (Comb FuncCall ("Prelude","enumFromTo_build#worker") [Var 8,Var 5,Var 6,Var 7]))])])),Func ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Bool#P25#P26") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Bool") [Var 3])] (Comb FuncCall ("Prelude","apply") [Var 2,Var 5,Var 4]))),Func ("Prelude","_impl#enumFromThen#Prelude.Enum#Prelude.Bool") 2 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []]))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","_inst#Prelude.Enum#Prelude.Bool") [])] (Let [(5,Comb (FuncPartCall 1) ("Prelude","_impl#minBound#Prelude.Bounded#Prelude.Bool") [])] (Let [(6,Comb (FuncPartCall 1) ("Prelude","_impl#maxBound#Prelude.Bounded#Prelude.Bool") [])] (Let [(7,Comb ConsCall ("Prelude","_Dict#Bounded") [Var 5,Var 6])] (Comb FuncCall ("Prelude","boundedEnumFromThen") [Var 7,Var 4,Var 2,Var 3])))))),Func ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Bool") 1 Private (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []])) (Rule [2] (Let [(3,Comb FuncCall ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Bool") [Var 2])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Bool#P27") [Var 3])] (Comb FuncCall ("Prelude","build") [Var 4])))),Func ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Bool#P27") 3 Public (TVar 0) (Rule [2,3,4] (Case Flex (Var 2) [Branch (Pattern ("","int") [5]) (Let [(6,Comb (FuncPartCall 2) ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Bool#P27#P28") [Var 3])] (Comb FuncCall ("Prelude","enumFromTo_build#worker") [Var 6,Var 4,Var 5,Lit (Intc 1)]))])),Func ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Bool#P27#P28") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Bool") [Var 3])] (Comb FuncCall ("Prelude","apply") [Var 2,Var 5,Var 4])))] []