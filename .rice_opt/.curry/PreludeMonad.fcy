(Prog "PreludeMonad" ["PreludeBase","PreludeCompare","PreludeNum","PreludeList","PreludeString","PreludeRead"] [] [(Func ("Prelude","_def#fmap#Prelude.Functor") 1 Public (FuncType (TCons ("Prelude","_Dict#Functor") [(TVar 0)]) (FuncType (FuncType (TVar 1) (TVar 2)) (FuncType (TCons ("Prelude","Apply") [(TVar 0),(TVar 1)]) (TCons ("Prelude","Apply") [(TVar 0),(TVar 2)])))) (Rule [1] (Comb FuncCall ("Prelude","error") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'N')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'h')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'p')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '`')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'p')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '\'')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])]))),(Func ("Prelude","_inst#Prelude.Functor#[]") 0 Public (TCons ("Prelude","_Dict#Functor") [(TCons ("Prelude","[]") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Functor") [(Comb FuncCall ("Prelude","_impl#fmap#Prelude.Functor#[]") [])]))),(Func ("Prelude","_impl#fmap#Prelude.Functor#[]") 0 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 1)]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","map") []))),(Func ("Prelude","_def#>>=#Prelude.Monad") 1 Public (FuncType (TCons ("Prelude","_Dict#Monad") [(TVar 0)]) (FuncType (TCons ("Prelude","Apply") [(TVar 0),(TVar 1)]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","Apply") [(TVar 0),(TVar 2)])) (TCons ("Prelude","Apply") [(TVar 0),(TVar 2)])))) (Rule [1] (Comb FuncCall ("Prelude","error") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'N')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'h')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'p')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '`')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '>')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '>')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '=')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '\'')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])]))),(Func ("Prelude","_def#>>#Prelude.Monad") 3 Public (FuncType (TCons ("Prelude","_Dict#Monad") [(TVar 0)]) (FuncType (TCons ("Prelude","Apply") [(TVar 0),(TVar 1)]) (FuncType (TCons ("Prelude","Apply") [(TVar 0),(TVar 2)]) (TCons ("Prelude","Apply") [(TVar 0),(TVar 2)])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude",">>=") [(Var 1)]),(Var 2)]),(Comb (FuncPartCall 1) ("Prelude","_def#>>#Prelude.Monad._#lambda183") [(Var 3)])]))),(Func ("Prelude","_def#>>#Prelude.Monad._#lambda183") 2 Private (FuncType (TCons ("Prelude","Apply") [(TVar 0),(TVar 1)]) (FuncType (TVar 2) (TCons ("Prelude","Apply") [(TVar 0),(TVar 1)]))) (Rule [1,2] (Var 1))),(Func ("Prelude","_def#return#Prelude.Monad") 1 Public (FuncType (TCons ("Prelude","_Dict#Monad") [(TVar 0)]) (FuncType (TVar 1) (TCons ("Prelude","Apply") [(TVar 0),(TVar 1)]))) (Rule [1] (Comb FuncCall ("Prelude","error") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'N')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'h')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'p')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '`')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '\'')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])]))),(Func ("Prelude","_def#fail#Prelude.Monad") 2 Public (FuncType (TCons ("Prelude","_Dict#Monad") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","Apply") [(TVar 0),(TVar 1)]))) (Rule [1,2] (Comb FuncCall ("Prelude","error") [(Var 2)]))),(Func ("Prelude","_inst#Prelude.Monad#Prelude.IO") 0 Public (TCons ("Prelude","_Dict#Monad") [(TCons ("Prelude","IO") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Monad") [(Comb (FuncPartCall 2) ("Prelude","_impl#>>=#Prelude.Monad#Prelude.IO") []),(Comb (FuncPartCall 2) ("Prelude","_impl#>>#Prelude.Monad#Prelude.IO") []),(Comb (FuncPartCall 1) ("Prelude","_impl#return#Prelude.Monad#Prelude.IO") []),(Comb FuncCall ("Prelude","_impl#fail#Prelude.Monad#Prelude.IO") [])]))),(Func ("Prelude","_impl#>>=#Prelude.Monad#Prelude.IO") 2 Public (FuncType (TCons ("Prelude","IO") [(TVar 0)]) (FuncType (FuncType (TVar 0) (TCons ("Prelude","IO") [(TVar 1)])) (TCons ("Prelude","IO") [(TVar 1)]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=$") [(Var 1),(Var 2)]))),(Func ("Prelude","_impl#>>#Prelude.Monad#Prelude.IO") 2 Public (FuncType (TCons ("Prelude","IO") [(TVar 0)]) (FuncType (TCons ("Prelude","IO") [(TVar 1)]) (TCons ("Prelude","IO") [(TVar 1)]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>$") [(Var 1),(Var 2)]))),(Func ("Prelude","_impl#return#Prelude.Monad#Prelude.IO") 1 Public (FuncType (TVar 0) (TCons ("Prelude","IO") [(TVar 0)])) (Rule [1] (Comb FuncCall ("Prelude","returnIO") [(Var 1)]))),(Func ("Prelude","_impl#fail#Prelude.Monad#Prelude.IO") 0 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","IO") [(TVar 0)])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#fail#Prelude.Monad") [(Comb FuncCall ("Prelude","_inst#Prelude.Monad#Prelude.IO") [])]))),(Func ("Prelude","_inst#Prelude.Monad#Prelude.Maybe") 0 Public (TCons ("Prelude","_Dict#Monad") [(TCons ("Prelude","Maybe") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Monad") [(Comb (FuncPartCall 2) ("Prelude","_impl#>>=#Prelude.Monad#Prelude.Maybe") []),(Comb FuncCall ("Prelude","_impl#>>#Prelude.Monad#Prelude.Maybe") []),(Comb FuncCall ("Prelude","_impl#return#Prelude.Monad#Prelude.Maybe") []),(Comb (FuncPartCall 1) ("Prelude","_impl#fail#Prelude.Monad#Prelude.Maybe") [])]))),(Func ("Prelude","_impl#>>=#Prelude.Monad#Prelude.Maybe") 2 Public (FuncType (TCons ("Prelude","Maybe") [(TVar 0)]) (FuncType (FuncType (TVar 0) (TCons ("Prelude","Maybe") [(TVar 1)])) (TCons ("Prelude","Maybe") [(TVar 1)]))) (Rule [1,2] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","Nothing") [])),(Branch (Pattern ("Prelude","Just") [3]) (Comb FuncCall ("Prelude","apply") [(Var 2),(Var 3)]))]))),(Func ("Prelude","_impl#>>#Prelude.Monad#Prelude.Maybe") 0 Public (FuncType (TCons ("Prelude","Maybe") [(TVar 0)]) (FuncType (TCons ("Prelude","Maybe") [(TVar 1)]) (TCons ("Prelude","Maybe") [(TVar 1)]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#>>#Prelude.Monad") [(Comb FuncCall ("Prelude","_inst#Prelude.Monad#Prelude.Maybe") [])]))),(Func ("Prelude","_impl#return#Prelude.Monad#Prelude.Maybe") 0 Public (FuncType (TVar 0) (TCons ("Prelude","Maybe") [(TVar 0)])) (Rule [] (Comb (ConsPartCall 1) ("Prelude","Just") []))),(Func ("Prelude","_impl#fail#Prelude.Monad#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","Maybe") [(TVar 0)])) (Rule [1] (Comb ConsCall ("Prelude","Nothing") []))),(Func ("Prelude","_inst#Prelude.Monad#[]") 0 Public (TCons ("Prelude","_Dict#Monad") [(TCons ("Prelude","[]") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Monad") [(Comb (FuncPartCall 2) ("Prelude","_impl#>>=#Prelude.Monad#[]") []),(Comb FuncCall ("Prelude","_impl#>>#Prelude.Monad#[]") []),(Comb (FuncPartCall 1) ("Prelude","_impl#return#Prelude.Monad#[]") []),(Comb (FuncPartCall 1) ("Prelude","_impl#fail#Prelude.Monad#[]") [])]))),(Func ("Prelude","_impl#>>=#Prelude.Monad#[]") 2 Public (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (FuncType (TVar 0) (TCons ("Prelude","[]") [(TVar 1)])) (TCons ("Prelude","[]") [(TVar 1)]))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","concatMap") [(Comb (FuncPartCall 1) ("Prelude","_impl#>>=#Prelude.Monad#[]._#lambda184") [(Var 2)])]),(Var 1)]))),(Func ("Prelude","_impl#>>=#Prelude.Monad#[]._#lambda184") 2 Private (FuncType (FuncType (TVar 0) (TCons ("Prelude","[]") [(TVar 1)])) (FuncType (TVar 0) (TCons ("Prelude","[]") [(TVar 1)]))) (Rule [1,2] (Comb FuncCall ("Prelude","map") [(Comb (FuncPartCall 1) ("Prelude","_impl#>>=#Prelude.Monad#[]._#lambda184._#lambda185") []),(Comb FuncCall ("Prelude","apply") [(Var 1),(Var 2)])]))),(Func ("Prelude","_impl#>>=#Prelude.Monad#[]._#lambda184._#lambda185") 1 Private (FuncType (TVar 0) (TVar 0)) (Rule [1] (Var 1))),(Func ("Prelude","_impl#>>#Prelude.Monad#[]") 0 Public (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 1)]) (TCons ("Prelude","[]") [(TVar 1)]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#>>#Prelude.Monad") [(Comb FuncCall ("Prelude","_inst#Prelude.Monad#[]") [])]))),(Func ("Prelude","_impl#return#Prelude.Monad#[]") 1 Public (FuncType (TVar 0) (TCons ("Prelude","[]") [(TVar 0)])) (Rule [1] (Comb ConsCall ("Prelude",":") [(Var 1),(Comb ConsCall ("Prelude","[]") [])]))),(Func ("Prelude","_impl#fail#Prelude.Monad#[]") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TVar 0)])) (Rule [1] (Comb ConsCall ("Prelude","[]") []))),(Func ("Prelude","_inst#Prelude.Eq#Prelude.IOError") 0 Public (TCons ("Prelude","_Dict#Eq") [(TCons ("Prelude","IOError") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [(Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.IOError") []),(Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.IOError") [])]))),(Func ("Prelude","_impl#==#Prelude.Eq#Prelude.IOError") 2 Public (FuncType (TCons ("Prelude","IOError") []) (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","IOError") [3]) (Case Flex (Var 2) [(Branch (Pattern ("Prelude","IOError") [4]) (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") []),(Var 3),(Var 4)])),(Branch (Pattern ("Prelude","UserError") [5]) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","FailError") [6]) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","NondetError") [7]) (Comb ConsCall ("Prelude","False") []))])),(Branch (Pattern ("Prelude","UserError") [8]) (Case Flex (Var 2) [(Branch (Pattern ("Prelude","IOError") [9]) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","UserError") [10]) (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") []),(Var 8),(Var 10)])),(Branch (Pattern ("Prelude","FailError") [11]) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","NondetError") [12]) (Comb ConsCall ("Prelude","False") []))])),(Branch (Pattern ("Prelude","FailError") [13]) (Case Flex (Var 2) [(Branch (Pattern ("Prelude","IOError") [14]) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","UserError") [15]) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","FailError") [16]) (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") []),(Var 13),(Var 16)])),(Branch (Pattern ("Prelude","NondetError") [17]) (Comb ConsCall ("Prelude","False") []))])),(Branch (Pattern ("Prelude","NondetError") [18]) (Case Flex (Var 2) [(Branch (Pattern ("Prelude","IOError") [19]) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","UserError") [20]) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","FailError") [21]) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","NondetError") [22]) (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") []),(Var 18),(Var 22)]))]))]))),(Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.IOError") 0 Public (FuncType (TCons ("Prelude","IOError") []) (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.IOError") [])]))),(Func ("Prelude","maybe") 3 Public (FuncType (TVar 0) (FuncType (FuncType (TVar 1) (TVar 0)) (FuncType (TCons ("Prelude","Maybe") [(TVar 1)]) (TVar 0)))) (Rule [1,2,3] (Case Flex (Var 3) [(Branch (Pattern ("Prelude","Nothing") []) (Var 1)),(Branch (Pattern ("Prelude","Just") [4]) (Comb FuncCall ("Prelude","apply") [(Var 2),(Var 4)]))]))),(Func ("Prelude","either") 3 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (FuncType (TVar 2) (TVar 1)) (FuncType (TCons ("Prelude","Either") [(TVar 0),(TVar 2)]) (TVar 1)))) (Rule [1,2,3] (Case Flex (Var 3) [(Branch (Pattern ("Prelude","Left") [4]) (Comb FuncCall ("Prelude","apply") [(Var 1),(Var 4)])),(Branch (Pattern ("Prelude","Right") [5]) (Comb FuncCall ("Prelude","apply") [(Var 2),(Var 5)]))]))),(Func ("Prelude",">>=$") 2 Private (FuncType (TCons ("Prelude","IO") [(TVar 0)]) (FuncType (FuncType (TVar 0) (TCons ("Prelude","IO") [(TVar 1)])) (TCons ("Prelude","IO") [(TVar 1)]))) (External "Prelude.>>=$")),(Func ("Prelude","returnIO") 1 Private (FuncType (TVar 0) (TCons ("Prelude","IO") [(TVar 0)])) (External "Prelude.returnIO")),(Func ("Prelude",">>$") 2 Private (FuncType (TCons ("Prelude","IO") [(TVar 0)]) (FuncType (TCons ("Prelude","IO") [(TVar 1)]) (TCons ("Prelude","IO") [(TVar 1)]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=$") [(Var 1),(Comb (FuncPartCall 1) ("Prelude",">>$._#lambda283") [(Var 2)])]))),(Func ("Prelude",">>$._#lambda283") 2 Private (FuncType (TCons ("Prelude","IO") [(TVar 0)]) (FuncType (TVar 1) (TCons ("Prelude","IO") [(TVar 0)]))) (Rule [1,2] (Var 1))),(Func ("Prelude","done") 0 Public (TCons ("Prelude","IO") [(TCons ("Prelude","()") [])]) (Rule [] (Comb FuncCall ("Prelude","_impl#return#Prelude.Monad#Prelude.IO") [(Comb ConsCall ("Prelude","()") [])]))),(Func ("Prelude","putStr") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","IO") [(TCons ("Prelude","()") [])])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","done") [])),(Branch (Pattern ("Prelude",":") [2,3]) (Comb FuncCall ("Prelude","_impl#>>#Prelude.Monad#Prelude.IO") [(Comb FuncCall ("Prelude","putChar") [(Var 2)]),(Comb FuncCall ("Prelude","putStr") [(Var 3)])]))]))),(Func ("Prelude","putStrLn") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","IO") [(TCons ("Prelude","()") [])])) (Rule [1] (Comb FuncCall ("Prelude","_impl#>>#Prelude.Monad#Prelude.IO") [(Comb FuncCall ("Prelude","putStr") [(Var 1)]),(Comb FuncCall ("Prelude","putChar") [(Lit (Charc '\n'))])]))),(Func ("Prelude","getLine") 0 Public (TCons ("Prelude","IO") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (Rule [] (Comb FuncCall ("Prelude","_impl#>>=#Prelude.Monad#Prelude.IO") [(Comb FuncCall ("Prelude","getChar") []),(Comb (FuncPartCall 1) ("Prelude","getLine._#lambda285") [])]))),(Func ("Prelude","getLine._#lambda285") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","IO") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) (Rule [1] (Let [(2,(Var 1))] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 2),(Lit (Charc '\n'))]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","_impl#return#Prelude.Monad#Prelude.IO") [(Comb ConsCall ("Prelude","[]") [])])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","_impl#>>=#Prelude.Monad#Prelude.IO") [(Comb FuncCall ("Prelude","getLine") []),(Comb (FuncPartCall 1) ("Prelude","getLine._#lambda285._#lambda288") [(Var 2)])]))])))),(Func ("Prelude","getLine._#lambda285._#lambda288") 2 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","IO") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]))) (Rule [1,2] (Let [(3,(Var 2))] (Comb FuncCall ("Prelude","_impl#return#Prelude.Monad#Prelude.IO") [(Comb ConsCall ("Prelude",":") [(Var 1),(Var 3)])])))),(Func ("Prelude","userError") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","IOError") [])) (Rule [1] (Comb ConsCall ("Prelude","UserError") [(Var 1)]))),(Func ("Prelude","ioError") 1 Public (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","IO") [(TVar 0)])) (Rule [1] (Comb FuncCall ("Prelude","error") [(Comb FuncCall ("Prelude","showError") [(Var 1)])]))),(Func ("Prelude","print") 2 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TVar 0) (TCons ("Prelude","IO") [(TCons ("Prelude","()") [])]))) (Rule [1,2] (Comb FuncCall ("Prelude","putStrLn") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","show") [(Var 1)]),(Var 2)])]))),(Func ("Prelude","doSolve") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [(TCons ("Prelude","()") [])])) (Rule [1] (Case Rigid (Var 1) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","done") [])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))),(Func ("Prelude","sequenceIO") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","IO") [(TVar 0)])]) (TCons ("Prelude","IO") [(TCons ("Prelude","[]") [(TVar 0)])])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","_impl#return#Prelude.Monad#Prelude.IO") [(Comb ConsCall ("Prelude","[]") [])])),(Branch (Pattern ("Prelude",":") [2,3]) (Comb FuncCall ("Prelude","_impl#>>=#Prelude.Monad#Prelude.IO") [(Var 2),(Comb (FuncPartCall 1) ("Prelude","sequenceIO._#lambda292") [(Var 3)])]))]))),(Func ("Prelude","sequenceIO._#lambda292") 2 Private (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","IO") [(TVar 0)])]) (FuncType (TVar 0) (TCons ("Prelude","IO") [(TCons ("Prelude","[]") [(TVar 0)])]))) (Rule [1,2] (Let [(3,(Var 2))] (Comb FuncCall ("Prelude","_impl#>>=#Prelude.Monad#Prelude.IO") [(Comb FuncCall ("Prelude","sequenceIO") [(Var 1)]),(Comb (FuncPartCall 1) ("Prelude","sequenceIO._#lambda292._#lambda294") [(Var 3)])])))),(Func ("Prelude","sequenceIO._#lambda292._#lambda294") 2 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","IO") [(TCons ("Prelude","[]") [(TVar 0)])]))) (Rule [1,2] (Let [(3,(Var 2))] (Comb FuncCall ("Prelude","_impl#return#Prelude.Monad#Prelude.IO") [(Comb ConsCall ("Prelude",":") [(Var 1),(Var 3)])])))),(Func ("Prelude","sequenceIO_") 0 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","IO") [(TVar 0)])]) (TCons ("Prelude","IO") [(TCons ("Prelude","()") [])])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","_impl#>>#Prelude.Monad#Prelude.IO") []),(Comb FuncCall ("Prelude","done") [])]))),(Func ("Prelude","mapIO") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","IO") [(TVar 1)])) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","IO") [(TCons ("Prelude","[]") [(TVar 1)])]))) (Rule [1] (Comb FuncCall ("Prelude",".") [(Comb (FuncPartCall 1) ("Prelude","sequenceIO") []),(Comb (FuncPartCall 1) ("Prelude","map") [(Var 1)])]))),(Func ("Prelude","mapIO_") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","IO") [(TVar 1)])) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","IO") [(TCons ("Prelude","()") [])]))) (Rule [1] (Comb FuncCall ("Prelude",".") [(Comb FuncCall ("Prelude","sequenceIO_") []),(Comb (FuncPartCall 1) ("Prelude","map") [(Var 1)])]))),(Func ("Prelude","foldIO") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TCons ("Prelude","IO") [(TVar 0)]))) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [(TVar 1)]) (TCons ("Prelude","IO") [(TVar 0)])))) (Rule [1,2,3] (Case Flex (Var 3) [(Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","_impl#return#Prelude.Monad#Prelude.IO") [(Var 2)])),(Branch (Pattern ("Prelude",":") [4,5]) (Comb FuncCall ("Prelude","_impl#>>=#Prelude.Monad#Prelude.IO") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Var 1),(Var 2)]),(Var 4)]),(Comb (FuncPartCall 1) ("Prelude","foldIO._#lambda296") [(Var 5),(Var 1)])]))]))),(Func ("Prelude","foldIO._#lambda296") 3 Private (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (FuncType (TVar 1) (FuncType (TVar 0) (TCons ("Prelude","IO") [(TVar 1)]))) (FuncType (TVar 1) (TCons ("Prelude","IO") [(TVar 1)])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","foldIO") [(Var 2),(Var 3),(Var 1)]))),(Func ("Prelude","liftIO") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("Prelude","IO") [(TVar 0)]) (TCons ("Prelude","IO") [(TVar 1)]))) (Rule [1,2] (Comb FuncCall ("Prelude","_impl#>>=#Prelude.Monad#Prelude.IO") [(Var 2),(Comb FuncCall ("Prelude",".") [(Comb (FuncPartCall 1) ("Prelude","_impl#return#Prelude.Monad#Prelude.IO") []),(Var 1)])]))),(Func ("Prelude","forIO") 2 Public (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (FuncType (TVar 0) (TCons ("Prelude","IO") [(TVar 1)])) (TCons ("Prelude","IO") [(TCons ("Prelude","[]") [(TVar 1)])]))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","mapIO") [(Var 2)]),(Var 1)]))),(Func ("Prelude","forIO_") 2 Public (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (FuncType (TVar 0) (TCons ("Prelude","IO") [(TVar 1)])) (TCons ("Prelude","IO") [(TCons ("Prelude","()") [])]))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","mapIO_") [(Var 2)]),(Var 1)]))),(Func ("Prelude","unless") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","IO") [(TCons ("Prelude","()") [])]) (TCons ("Prelude","IO") [(TCons ("Prelude","()") [])]))) (Rule [1,2] (Case Rigid (Var 1) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","done") [])),(Branch (Pattern ("Prelude","False") []) (Var 2))]))),(Func ("Prelude","when") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","IO") [(TCons ("Prelude","()") [])]) (TCons ("Prelude","IO") [(TCons ("Prelude","()") [])]))) (Rule [1,2] (Case Rigid (Var 1) [(Branch (Pattern ("Prelude","True") []) (Var 2)),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","done") []))]))),(Func ("Prelude","sequence") 1 Public (FuncType (TCons ("Prelude","_Dict#Monad") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Apply") [(TVar 0),(TVar 1)])]) (TCons ("Prelude","Apply") [(TVar 0),(TCons ("Prelude","[]") [(TVar 1)])]))) (Rule [1] (Comb (FuncPartCall 1) ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","sequence._#lambda454") [(Var 1)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","return") [(Var 1)]),(Comb ConsCall ("Prelude","[]") [])])]))),(Func ("Prelude","sequence._#lambda454") 3 Private (FuncType (TCons ("Prelude","_Dict#Monad") [(TVar 0)]) (FuncType (TCons ("Prelude","Apply") [(TVar 0),(TVar 1)]) (FuncType (TCons ("Prelude","Apply") [(TVar 0),(TCons ("Prelude","[]") [(TVar 1)])]) (TCons ("Prelude","Apply") [(TVar 0),(TCons ("Prelude","[]") [(TVar 1)])])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude",">>=") [(Var 1)]),(Var 2)]),(Comb (FuncPartCall 1) ("Prelude","sequence._#lambda454._#lambda455") [(Var 1),(Var 3)])]))),(Func ("Prelude","sequence._#lambda454._#lambda455") 3 Private (FuncType (TCons ("Prelude","_Dict#Monad") [(TVar 0)]) (FuncType (TCons ("Prelude","Apply") [(TVar 0),(TCons ("Prelude","[]") [(TVar 1)])]) (FuncType (TVar 1) (TCons ("Prelude","Apply") [(TVar 0),(TCons ("Prelude","[]") [(TVar 1)])])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude",">>=") [(Var 1)]),(Var 2)]),(Comb (FuncPartCall 1) ("Prelude","sequence._#lambda454._#lambda455._#lambda456") [(Var 3),(Var 1)])]))),(Func ("Prelude","sequence._#lambda454._#lambda455._#lambda456") 3 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Monad") [(TVar 1)]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","Apply") [(TVar 1),(TCons ("Prelude","[]") [(TVar 0)])])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","return") [(Var 2)]),(Comb ConsCall ("Prelude",":") [(Var 1),(Var 3)])]))),(Func ("Prelude","sequence_") 1 Public (FuncType (TCons ("Prelude","_Dict#Monad") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Apply") [(TVar 0),(TVar 1)])]) (TCons ("Prelude","Apply") [(TVar 0),(TCons ("Prelude","()") [])]))) (Rule [1] (Comb (FuncPartCall 1) ("Prelude","foldr") [(Comb FuncCall ("Prelude",">>") [(Var 1)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","return") [(Var 1)]),(Comb ConsCall ("Prelude","()") [])])]))),(Func ("Prelude","mapM") 2 Public (FuncType (TCons ("Prelude","_Dict#Monad") [(TVar 0)]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","Apply") [(TVar 0),(TVar 2)])) (FuncType (TCons ("Prelude","[]") [(TVar 1)]) (TCons ("Prelude","Apply") [(TVar 0),(TCons ("Prelude","[]") [(TVar 2)])])))) (Rule [1,2] (Comb FuncCall ("Prelude",".") [(Comb FuncCall ("Prelude","sequence") [(Var 1)]),(Comb (FuncPartCall 1) ("Prelude","map") [(Var 2)])]))),(Func ("Prelude","mapM_") 2 Public (FuncType (TCons ("Prelude","_Dict#Monad") [(TVar 0)]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","Apply") [(TVar 0),(TVar 2)])) (FuncType (TCons ("Prelude","[]") [(TVar 1)]) (TCons ("Prelude","Apply") [(TVar 0),(TCons ("Prelude","()") [])])))) (Rule [1,2] (Comb FuncCall ("Prelude",".") [(Comb FuncCall ("Prelude","sequence_") [(Var 1)]),(Comb (FuncPartCall 1) ("Prelude","map") [(Var 2)])]))),(Func ("Prelude","foldM") 4 Public (FuncType (TCons ("Prelude","_Dict#Monad") [(TVar 0)]) (FuncType (FuncType (TVar 1) (FuncType (TVar 2) (TCons ("Prelude","Apply") [(TVar 0),(TVar 1)]))) (FuncType (TVar 1) (FuncType (TCons ("Prelude","[]") [(TVar 2)]) (TCons ("Prelude","Apply") [(TVar 0),(TVar 1)]))))) (Rule [1,2,3,4] (Case Flex (Var 4) [(Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","return") [(Var 1)]),(Var 3)])),(Branch (Pattern ("Prelude",":") [5,6]) (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude",">>=") [(Var 1)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Var 2),(Var 3)]),(Var 5)])]),(Comb (FuncPartCall 1) ("Prelude","foldM._#lambda457") [(Var 6),(Var 1),(Var 2)])]))]))),(Func ("Prelude","foldM._#lambda457") 4 Private (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Monad") [(TVar 1)]) (FuncType (FuncType (TVar 2) (FuncType (TVar 0) (TCons ("Prelude","Apply") [(TVar 1),(TVar 2)]))) (FuncType (TVar 2) (TCons ("Prelude","Apply") [(TVar 1),(TVar 2)]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","foldM") [(Var 2),(Var 3),(Var 4),(Var 1)]))),(Func ("Prelude","liftM") 3 Public (FuncType (TCons ("Prelude","_Dict#Monad") [(TVar 0)]) (FuncType (FuncType (TVar 1) (TVar 2)) (FuncType (TCons ("Prelude","Apply") [(TVar 0),(TVar 1)]) (TCons ("Prelude","Apply") [(TVar 0),(TVar 2)])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude",">>=") [(Var 1)]),(Var 3)]),(Comb FuncCall ("Prelude",".") [(Comb FuncCall ("Prelude","return") [(Var 1)]),(Var 2)])]))),(Func ("Prelude","liftM2") 4 Public (FuncType (TCons ("Prelude","_Dict#Monad") [(TVar 0)]) (FuncType (FuncType (TVar 1) (FuncType (TVar 2) (TVar 3))) (FuncType (TCons ("Prelude","Apply") [(TVar 0),(TVar 1)]) (FuncType (TCons ("Prelude","Apply") [(TVar 0),(TVar 2)]) (TCons ("Prelude","Apply") [(TVar 0),(TVar 3)]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude",">>=") [(Var 1)]),(Var 3)]),(Comb (FuncPartCall 1) ("Prelude","liftM2._#lambda460") [(Var 1),(Var 4),(Var 2)])]))),(Func ("Prelude","liftM2._#lambda460") 4 Private (FuncType (TCons ("Prelude","_Dict#Monad") [(TVar 0)]) (FuncType (TCons ("Prelude","Apply") [(TVar 0),(TVar 1)]) (FuncType (FuncType (TVar 2) (FuncType (TVar 1) (TVar 3))) (FuncType (TVar 2) (TCons ("Prelude","Apply") [(TVar 0),(TVar 3)]))))) (Rule [1,2,3,4] (Let [(5,(Var 4))] (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude",">>=") [(Var 1)]),(Var 2)]),(Comb (FuncPartCall 1) ("Prelude","liftM2._#lambda460._#lambda462") [(Var 5),(Var 1),(Var 3)])])))),(Func ("Prelude","liftM2._#lambda460._#lambda462") 4 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Monad") [(TVar 1)]) (FuncType (FuncType (TVar 0) (FuncType (TVar 2) (TVar 3))) (FuncType (TVar 2) (TCons ("Prelude","Apply") [(TVar 1),(TVar 3)]))))) (Rule [1,2,3,4] (Let [(5,(Var 4))] (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","return") [(Var 2)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Var 3),(Var 1)]),(Var 5)])])))),(Func ("Prelude","forM") 3 Public (FuncType (TCons ("Prelude","_Dict#Monad") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 1)]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","Apply") [(TVar 0),(TVar 2)])) (TCons ("Prelude","Apply") [(TVar 0),(TCons ("Prelude","[]") [(TVar 2)])])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","mapM") [(Var 1),(Var 3)]),(Var 2)]))),(Func ("Prelude","forM_") 3 Public (FuncType (TCons ("Prelude","_Dict#Monad") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 1)]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","Apply") [(TVar 0),(TVar 2)])) (TCons ("Prelude","Apply") [(TVar 0),(TCons ("Prelude","()") [])])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","mapM_") [(Var 1),(Var 3)]),(Var 2)]))),(Func ("Prelude","unlessM") 3 Public (FuncType (TCons ("Prelude","_Dict#Monad") [(TVar 0)]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Apply") [(TVar 0),(TCons ("Prelude","()") [])]) (TCons ("Prelude","Apply") [(TVar 0),(TCons ("Prelude","()") [])])))) (Rule [1,2,3] (Case Rigid (Var 2) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","return") [(Var 1)]),(Comb ConsCall ("Prelude","()") [])])),(Branch (Pattern ("Prelude","False") []) (Var 3))]))),(Func ("Prelude","whenM") 3 Public (FuncType (TCons ("Prelude","_Dict#Monad") [(TVar 0)]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Apply") [(TVar 0),(TCons ("Prelude","()") [])]) (TCons ("Prelude","Apply") [(TVar 0),(TCons ("Prelude","()") [])])))) (Rule [1,2,3] (Case Rigid (Var 2) [(Branch (Pattern ("Prelude","True") []) (Var 3)),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","return") [(Var 1)]),(Comb ConsCall ("Prelude","()") [])]))]))),(Func ("Prelude","fmap") 1 Public (FuncType (TCons ("Prelude","_Dict#Functor") [(TVar 0)]) (ForallType [1,2] (FuncType (FuncType (TVar 1) (TVar 2)) (FuncType (TCons ("Prelude","Apply") [(TVar 0),(TVar 1)]) (TCons ("Prelude","Apply") [(TVar 0),(TVar 2)]))))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Functor") [2]) (Var 2))]))),(Func ("Prelude",">>=") 1 Public (FuncType (TCons ("Prelude","_Dict#Monad") [(TVar 0)]) (ForallType [1,2] (FuncType (TCons ("Prelude","Apply") [(TVar 0),(TVar 1)]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","Apply") [(TVar 0),(TVar 2)])) (TCons ("Prelude","Apply") [(TVar 0),(TVar 2)]))))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Monad") [2,3,4,5]) (Var 2))]))),(Func ("Prelude",">>") 1 Public (FuncType (TCons ("Prelude","_Dict#Monad") [(TVar 0)]) (ForallType [1,2] (FuncType (TCons ("Prelude","Apply") [(TVar 0),(TVar 1)]) (FuncType (TCons ("Prelude","Apply") [(TVar 0),(TVar 2)]) (TCons ("Prelude","Apply") [(TVar 0),(TVar 2)]))))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Monad") [2,3,4,5]) (Var 3))]))),(Func ("Prelude","return") 1 Public (FuncType (TCons ("Prelude","_Dict#Monad") [(TVar 0)]) (ForallType [1] (FuncType (TVar 1) (TCons ("Prelude","Apply") [(TVar 0),(TVar 1)])))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Monad") [2,3,4,5]) (Var 4))]))),(Func ("Prelude","fail") 1 Public (FuncType (TCons ("Prelude","_Dict#Monad") [(TVar 0)]) (ForallType [1] (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","Apply") [(TVar 0),(TVar 1)])))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Monad") [2,3,4,5]) (Var 5))]))),(Func ("Prelude","_inst#Prelude.Read#Prelude.IOError") 0 Public (TCons ("Prelude","_Dict#Read") [(TCons ("Prelude","IOError") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [(Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError") []),(Comb FuncCall ("Prelude","_impl#readList#Prelude.Read#Prelude.IOError") [])]))),(Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","IOError") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1,2] (Comb FuncCall ("Prelude","++") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","readParen") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") []),(Lit (Intc 10))]),(Var 1)]),(Comb (FuncPartCall 1) ("Prelude","readIOError") [])]),(Var 2)]),(Comb FuncCall ("Prelude","++") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","readParen") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") []),(Lit (Intc 10))]),(Var 1)]),(Comb (FuncPartCall 1) ("Prelude","readUserError") [])]),(Var 2)]),(Comb FuncCall ("Prelude","++") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","readParen") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") []),(Lit (Intc 10))]),(Var 1)]),(Comb (FuncPartCall 1) ("Prelude","readFailError") [])]),(Var 2)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","readParen") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") []),(Lit (Intc 10))]),(Var 1)]),(Comb (FuncPartCall 1) ("Prelude","readNondetError") [])]),(Var 2)])])])]))),(Func ("Prelude","_impl#readList#Prelude.Read#Prelude.IOError") 0 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","IOError") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [(Comb FuncCall ("Prelude","_inst#Prelude.Read#Prelude.IOError") [])]))),(Func ("Prelude","_inst#Prelude.Show#Prelude.IOError") 0 Public (TCons ("Prelude","_Dict#Show") [(TCons ("Prelude","IOError") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [(Comb FuncCall ("Prelude","_impl#show#Prelude.Show#Prelude.IOError") []),(Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.IOError") []),(Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.IOError") [])]))),(Func ("Prelude","_impl#show#Prelude.Show#Prelude.IOError") 0 Public (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [(Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.IOError") [])]))),(Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.IOError") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","IOError") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])))) (Rule [1,2] (Case Flex (Var 2) [(Branch (Pattern ("Prelude","IOError") [3]) (Case Flex (Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") [(Var 1),(Lit (Intc 10))]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",".") [(Comb (FuncPartCall 1) ("Prelude","showString") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'I')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'O')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'E')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])]),(Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Char") [(Var 3)])])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude",".") [(Comb (FuncPartCall 1) ("Prelude","showChar") [(Lit (Charc '('))]),(Comb FuncCall ("Prelude",".") [(Comb (FuncPartCall 1) ("Prelude","showString") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'I')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'O')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'E')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])]),(Comb FuncCall ("Prelude",".") [(Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Char") [(Var 3)]),(Comb (FuncPartCall 1) ("Prelude","showChar") [(Lit (Charc ')'))])])])]))])),(Branch (Pattern ("Prelude","FailError") [4]) (Case Flex (Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") [(Var 1),(Lit (Intc 10))]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",".") [(Comb (FuncPartCall 1) ("Prelude","showString") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'F')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'E')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])]),(Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Char") [(Var 4)])])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude",".") [(Comb (FuncPartCall 1) ("Prelude","showChar") [(Lit (Charc '('))]),(Comb FuncCall ("Prelude",".") [(Comb (FuncPartCall 1) ("Prelude","showString") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'F')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'E')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])]),(Comb FuncCall ("Prelude",".") [(Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Char") [(Var 4)]),(Comb (FuncPartCall 1) ("Prelude","showChar") [(Lit (Charc ')'))])])])]))])),(Branch (Pattern ("Prelude","UserError") [5]) (Case Flex (Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") [(Var 1),(Lit (Intc 10))]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",".") [(Comb (FuncPartCall 1) ("Prelude","showString") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'U')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'E')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])]),(Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Char") [(Var 5)])])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude",".") [(Comb (FuncPartCall 1) ("Prelude","showChar") [(Lit (Charc '('))]),(Comb FuncCall ("Prelude",".") [(Comb (FuncPartCall 1) ("Prelude","showString") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'U')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'E')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])]),(Comb FuncCall ("Prelude",".") [(Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Char") [(Var 5)]),(Comb (FuncPartCall 1) ("Prelude","showChar") [(Lit (Charc ')'))])])])]))])),(Branch (Pattern ("Prelude","NondetError") [6]) (Case Flex (Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") [(Var 1),(Lit (Intc 10))]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",".") [(Comb (FuncPartCall 1) ("Prelude","showString") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'N')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'E')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])])])]),(Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Char") [(Var 6)])])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude",".") [(Comb (FuncPartCall 1) ("Prelude","showChar") [(Lit (Charc '('))]),(Comb FuncCall ("Prelude",".") [(Comb (FuncPartCall 1) ("Prelude","showString") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'N')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'E')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])])]),(Comb FuncCall ("Prelude",".") [(Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Char") [(Var 6)]),(Comb (FuncPartCall 1) ("Prelude","showChar") [(Lit (Charc ')'))])])])]))]))]))),(Func ("Prelude","_impl#showList#Prelude.Show#Prelude.IOError") 0 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","IOError") [])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [(Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.IOError") [])]))),(Func ("Prelude","readIOError") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","IOError") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") []),(Comb FuncCall ("Prelude","take") [(Lit (Intc 7)),(Var 1)]),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'I')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'O')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'E')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [(Comb (FuncPartCall 1) ("Prelude","makeIOError") []),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","reads") [(Comb FuncCall ("Prelude","_inst#Prelude.Read#[]") [(Comb FuncCall ("Prelude","_inst#Prelude.Read#Prelude.Char") [])])]),(Comb FuncCall ("Prelude","drop") [(Lit (Intc 7)),(Var 1)])])])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") [])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))),(Func ("Prelude","makeIOError") 1 Public (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","(,)") [(TCons ("Prelude","IOError") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","(,)") [2,3]) (Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude","IOError") [(Var 2)]),(Var 3)]))]))),(Func ("Prelude","readUserError") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","IOError") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") []),(Comb FuncCall ("Prelude","take") [(Lit (Intc 9)),(Var 1)]),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'U')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'E')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [(Comb (FuncPartCall 1) ("Prelude","makeUserError") []),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","reads") [(Comb FuncCall ("Prelude","_inst#Prelude.Read#[]") [(Comb FuncCall ("Prelude","_inst#Prelude.Read#Prelude.Char") [])])]),(Comb FuncCall ("Prelude","drop") [(Lit (Intc 9)),(Var 1)])])])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") [])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))),(Func ("Prelude","makeUserError") 1 Public (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","(,)") [(TCons ("Prelude","IOError") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","(,)") [2,3]) (Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude","UserError") [(Var 2)]),(Var 3)]))]))),(Func ("Prelude","readFailError") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","IOError") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") []),(Comb FuncCall ("Prelude","take") [(Lit (Intc 9)),(Var 1)]),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'F')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'E')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [(Comb (FuncPartCall 1) ("Prelude","makeFailError") []),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","reads") [(Comb FuncCall ("Prelude","_inst#Prelude.Read#[]") [(Comb FuncCall ("Prelude","_inst#Prelude.Read#Prelude.Char") [])])]),(Comb FuncCall ("Prelude","drop") [(Lit (Intc 9)),(Var 1)])])])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") [])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))),(Func ("Prelude","makeFailError") 1 Public (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","(,)") [(TCons ("Prelude","IOError") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","(,)") [2,3]) (Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude","FailError") [(Var 2)]),(Var 3)]))]))),(Func ("Prelude","readNondetError") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","IOError") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") []),(Comb FuncCall ("Prelude","take") [(Lit (Intc 11)),(Var 1)]),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'N')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'E')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])])]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [(Comb (FuncPartCall 1) ("Prelude","makeNondetError") []),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","reads") [(Comb FuncCall ("Prelude","_inst#Prelude.Read#[]") [(Comb FuncCall ("Prelude","_inst#Prelude.Read#Prelude.Char") [])])]),(Comb FuncCall ("Prelude","drop") [(Lit (Intc 9)),(Var 1)])])])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") [])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))),(Func ("Prelude","makeNondetError") 1 Public (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","(,)") [(TCons ("Prelude","IOError") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","(,)") [2,3]) (Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude","NondetError") [(Var 2)]),(Var 3)]))])))] [])