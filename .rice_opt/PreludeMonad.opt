Prog "PreludeMonad" ["PreludeBase","PreludeCompare","PreludeNum","PreludeList","PreludeString","PreludeRead"] [] [Func ("Prelude","_def#fmap#Prelude.Functor") 1 Public (FuncType (TCons ("Prelude","_Dict#Functor") [TVar 0]) (FuncType (FuncType (TVar 1) (TVar 2)) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TVar 2])))) (Rule [2] (Let [(3,Comb (FuncPartCall 1) ("Prelude","prim_error") [])] (Let [(4,Comb ConsCall ("StringConst","No instance or default method for class operation `fmap'") [])] (Comb FuncCall ("Prelude","$##") [Var 3,Var 4])))),Func ("Prelude","_def#>>=#Prelude.Monad") 1 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TVar 2])) (TCons ("Prelude","Apply") [TVar 0,TVar 2])))) (Rule [2] (Let [(3,Comb (FuncPartCall 1) ("Prelude","prim_error") [])] (Let [(4,Comb ConsCall ("StringConst","No instance or default method for class operation `>>='") [])] (Comb FuncCall ("Prelude","$##") [Var 3,Var 4])))),Func ("Prelude","_def#return#Prelude.Monad") 1 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TVar 1]))) (Rule [2] (Let [(3,Comb (FuncPartCall 1) ("Prelude","prim_error") [])] (Let [(4,Comb ConsCall ("StringConst","No instance or default method for class operation `return'") [])] (Comb FuncCall ("Prelude","$##") [Var 3,Var 4])))),Func ("Prelude","maybe") 3 Public (FuncType (TVar 0) (FuncType (FuncType (TVar 1) (TVar 0)) (FuncType (TCons ("Prelude","Maybe") [TVar 1]) (TVar 0)))) (Rule [2,3,-4] (Case Flex (Var 4) [Branch (Pattern ("Prelude","Nothing") []) (Var 2),Branch (Pattern ("Prelude","Just") [5]) (Comb FuncCall ("Prelude","apply") [Var 3,Var 5])])),Func ("Prelude","either") 3 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (FuncType (TVar 2) (TVar 1)) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 2]) (TVar 1)))) (Rule [2,3,-4] (Case Flex (Var 4) [Branch (Pattern ("Prelude","Left") [5]) (Comb FuncCall ("Prelude","apply") [Var 2,Var 5]),Branch (Pattern ("Prelude","Right") [6]) (Comb FuncCall ("Prelude","apply") [Var 3,Var 6])])),Func ("Prelude","userError") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IOError") [])) (Rule [2] (Comb ConsCall ("Prelude","UserError") [Var 2])),Func ("Prelude","ioError") 1 Public (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","IO") [TVar 0])) (Rule [-2] (Let [(3,Comb FuncCall ("Prelude","ioError#A0") [Var 2])] (Let [(4,Comb (FuncPartCall 1) ("Prelude","prim_error") [])] (Comb FuncCall ("Prelude","$##") [Var 4,Var 3])))),Func ("Prelude","ioError#A0") 1 Public (TVar 0) (Rule [2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","IOError") [3]) (Let [(4,Comb (FuncPartCall 2) ("Prelude","showError#P1") [Var 3])] (Comb FuncCall ("Prelude","build") [Var 4])),Branch (Pattern ("Prelude","UserError") [5]) (Let [(6,Comb (FuncPartCall 2) ("Prelude","showError#P2") [Var 5])] (Comb FuncCall ("Prelude","build") [Var 6])),Branch (Pattern ("Prelude","FailError") [7]) (Let [(8,Comb (FuncPartCall 2) ("Prelude","showError#P3") [Var 7])] (Comb FuncCall ("Prelude","build") [Var 8])),Branch (Pattern ("Prelude","NondetError") [9]) (Let [(10,Comb (FuncPartCall 2) ("Prelude","showError#P4") [Var 9])] (Comb FuncCall ("Prelude","build") [Var 10]))])),Func ("Prelude","fmap") 1 Public (FuncType (TCons ("Prelude","_Dict#Functor") [TVar 0]) (ForallType [1,2] (FuncType (FuncType (TVar 1) (TVar 2)) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TVar 2]))))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Functor") [3]) (Var 3)])),Func ("Prelude","fail") 1 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (ForallType [1] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Apply") [TVar 0,TVar 1])))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Monad") [3,4,5,6]) (Var 6)])),Func ("Prelude","makeNondetError") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Let [(5,Comb ConsCall ("Prelude","NondetError") [Var 3])] (Comb ConsCall ("Prelude","(,)") [Var 5,Var 4]))])),Func ("Prelude","readNondetError") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [2] (Let [(3,Comb FuncCall ("Prelude","take#worker") [Var 2,Lit (Intc 11)])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char") [])] (Let [(6,Comb ConsCall ("Prelude","_Dict#Eq") [Var 4,Var 5])] (Let [(7,Comb ConsCall ("StringConst","NondetError") [])] (Let [(-8,Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Var 6,Var 3,Var 7])] (Case Rigid (Var (-8)) [Branch (Pattern ("Prelude","True") []) (Let [(9,Comb FuncCall ("Prelude","drop#worker") [Var 2,Lit (Intc 9)])] (Let [(10,Comb FuncCall ("Prelude","_impl#readList#Prelude.Read#Prelude.Char") [Var 9])] (Let [(11,Comb (FuncPartCall 3) ("Prelude","readNondetError#P0") [])] (Let [(12,Comb (FuncPartCall 1) ("Prelude","id") [])] (Comb FuncCall ("Prelude","build_fold") [Var 11,Var 12,Var 10]))))),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])))))))),Func ("Prelude","readNondetError#P0") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","makeNondetError") [Var 3])] (Comb FuncCall ("Prelude","apply") [Var 2,Var 5,Var 4]))),Func ("Prelude","makeFailError") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Let [(5,Comb ConsCall ("Prelude","FailError") [Var 3])] (Comb ConsCall ("Prelude","(,)") [Var 5,Var 4]))])),Func ("Prelude","readFailError") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [2] (Let [(3,Comb FuncCall ("Prelude","take#worker") [Var 2,Lit (Intc 9)])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char") [])] (Let [(6,Comb ConsCall ("Prelude","_Dict#Eq") [Var 4,Var 5])] (Let [(7,Comb ConsCall ("StringConst","FailError") [])] (Let [(-8,Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Var 6,Var 3,Var 7])] (Case Rigid (Var (-8)) [Branch (Pattern ("Prelude","True") []) (Let [(9,Comb FuncCall ("Prelude","drop#worker") [Var 2,Lit (Intc 9)])] (Let [(10,Comb FuncCall ("Prelude","_impl#readList#Prelude.Read#Prelude.Char") [Var 9])] (Let [(11,Comb (FuncPartCall 3) ("Prelude","readFailError#P1") [])] (Let [(12,Comb (FuncPartCall 1) ("Prelude","id") [])] (Comb FuncCall ("Prelude","build_fold") [Var 11,Var 12,Var 10]))))),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])))))))),Func ("Prelude","readFailError#P1") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","makeFailError") [Var 3])] (Comb FuncCall ("Prelude","apply") [Var 2,Var 5,Var 4]))),Func ("Prelude","makeUserError") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Let [(5,Comb ConsCall ("Prelude","UserError") [Var 3])] (Comb ConsCall ("Prelude","(,)") [Var 5,Var 4]))])),Func ("Prelude","readUserError") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [2] (Let [(3,Comb FuncCall ("Prelude","take#worker") [Var 2,Lit (Intc 9)])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char") [])] (Let [(6,Comb ConsCall ("Prelude","_Dict#Eq") [Var 4,Var 5])] (Let [(7,Comb ConsCall ("StringConst","UserError") [])] (Let [(-8,Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Var 6,Var 3,Var 7])] (Case Rigid (Var (-8)) [Branch (Pattern ("Prelude","True") []) (Let [(9,Comb FuncCall ("Prelude","drop#worker") [Var 2,Lit (Intc 9)])] (Let [(10,Comb FuncCall ("Prelude","_impl#readList#Prelude.Read#Prelude.Char") [Var 9])] (Let [(11,Comb (FuncPartCall 3) ("Prelude","readUserError#P2") [])] (Let [(12,Comb (FuncPartCall 1) ("Prelude","id") [])] (Comb FuncCall ("Prelude","build_fold") [Var 11,Var 12,Var 10]))))),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])))))))),Func ("Prelude","readUserError#P2") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","makeUserError") [Var 3])] (Comb FuncCall ("Prelude","apply") [Var 2,Var 5,Var 4]))),Func ("Prelude","makeIOError") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Let [(5,Comb ConsCall ("Prelude","IOError") [Var 3])] (Comb ConsCall ("Prelude","(,)") [Var 5,Var 4]))])),Func ("Prelude","readIOError") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [2] (Let [(3,Comb FuncCall ("Prelude","take#worker") [Var 2,Lit (Intc 7)])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char") [])] (Let [(6,Comb ConsCall ("Prelude","_Dict#Eq") [Var 4,Var 5])] (Let [(7,Comb ConsCall ("StringConst","IOError") [])] (Let [(-8,Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Var 6,Var 3,Var 7])] (Case Rigid (Var (-8)) [Branch (Pattern ("Prelude","True") []) (Let [(9,Comb FuncCall ("Prelude","drop#worker") [Var 2,Lit (Intc 7)])] (Let [(10,Comb FuncCall ("Prelude","_impl#readList#Prelude.Read#Prelude.Char") [Var 9])] (Let [(11,Comb (FuncPartCall 3) ("Prelude","readIOError#P3") [])] (Let [(12,Comb (FuncPartCall 1) ("Prelude","id") [])] (Comb FuncCall ("Prelude","build_fold") [Var 11,Var 12,Var 10]))))),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])))))))),Func ("Prelude","readIOError#P3") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","makeIOError") [Var 3])] (Comb FuncCall ("Prelude","apply") [Var 2,Var 5,Var 4]))),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.IOError") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","IOError") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [-2,-3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","IOError") [4]) (Case Rigid (Var 2) [Branch (Pattern ("","int") [5]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Var 5,Lit (Intc 10)]),Branch (Pattern ("Prelude","True") []) (Let [(6,Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Char") [Var 4])] (Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.IOError#P4") [Var 6])),Branch (Pattern ("Prelude","False") []) (Let [(7,Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Char") [Var 4])] (Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.IOError#P5") [Var 7]))])]),Branch (Pattern ("Prelude","FailError") [8]) (Case Rigid (Var 2) [Branch (Pattern ("","int") [9]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Var 9,Lit (Intc 10)]),Branch (Pattern ("Prelude","True") []) (Let [(10,Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Char") [Var 8])] (Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.IOError#P6") [Var 10])),Branch (Pattern ("Prelude","False") []) (Let [(11,Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Char") [Var 8])] (Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.IOError#P7") [Var 11]))])]),Branch (Pattern ("Prelude","UserError") [12]) (Case Rigid (Var 2) [Branch (Pattern ("","int") [13]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Var 13,Lit (Intc 10)]),Branch (Pattern ("Prelude","True") []) (Let [(14,Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Char") [Var 12])] (Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.IOError#P8") [Var 14])),Branch (Pattern ("Prelude","False") []) (Let [(15,Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Char") [Var 12])] (Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.IOError#P9") [Var 15]))])]),Branch (Pattern ("Prelude","NondetError") [16]) (Case Rigid (Var 2) [Branch (Pattern ("","int") [17]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Var 17,Lit (Intc 10)]),Branch (Pattern ("Prelude","True") []) (Let [(18,Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Char") [Var 16])] (Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.IOError#P10") [Var 18])),Branch (Pattern ("Prelude","False") []) (Let [(19,Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Char") [Var 16])] (Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.IOError#P11") [Var 19]))])])])),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.IOError#P11") 2 Public (TVar 0) (Rule [2,3] (Let [(4,Comb ConsCall ("","char") [Lit (Charc ')')])] (Let [(5,Comb ConsCall ("Prelude",":") [Var 4,Var 3])] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 2,Var 5])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Let [(8,Comb ConsCall ("StringConst","NondetError") [])] (Let [(9,Comb FuncCall ("Prelude","foldr") [Var 7,Var 6,Var 8])] (Let [(10,Comb ConsCall ("","char") [Lit (Charc '(')])] (Comb ConsCall ("Prelude",":") [Var 10,Var 9]))))))))),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.IOError#P10") 2 Public (TVar 0) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","apply") [Var 2,Var 3])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Let [(6,Comb ConsCall ("StringConst","NondetError ") [])] (Comb FuncCall ("Prelude","foldr") [Var 5,Var 4,Var 6]))))),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.IOError#P9") 2 Public (TVar 0) (Rule [2,3] (Let [(4,Comb ConsCall ("","char") [Lit (Charc ')')])] (Let [(5,Comb ConsCall ("Prelude",":") [Var 4,Var 3])] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 2,Var 5])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Let [(8,Comb ConsCall ("StringConst","UserError") [])] (Let [(9,Comb FuncCall ("Prelude","foldr") [Var 7,Var 6,Var 8])] (Let [(10,Comb ConsCall ("","char") [Lit (Charc '(')])] (Comb ConsCall ("Prelude",":") [Var 10,Var 9]))))))))),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.IOError#P8") 2 Public (TVar 0) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","apply") [Var 2,Var 3])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Let [(6,Comb ConsCall ("StringConst","UserError ") [])] (Comb FuncCall ("Prelude","foldr") [Var 5,Var 4,Var 6]))))),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.IOError#P7") 2 Public (TVar 0) (Rule [2,3] (Let [(4,Comb ConsCall ("","char") [Lit (Charc ')')])] (Let [(5,Comb ConsCall ("Prelude",":") [Var 4,Var 3])] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 2,Var 5])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Let [(8,Comb ConsCall ("StringConst","FailError") [])] (Let [(9,Comb FuncCall ("Prelude","foldr") [Var 7,Var 6,Var 8])] (Let [(10,Comb ConsCall ("","char") [Lit (Charc '(')])] (Comb ConsCall ("Prelude",":") [Var 10,Var 9]))))))))),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.IOError#P6") 2 Public (TVar 0) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","apply") [Var 2,Var 3])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Let [(6,Comb ConsCall ("StringConst","FailError ") [])] (Comb FuncCall ("Prelude","foldr") [Var 5,Var 4,Var 6]))))),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.IOError#P5") 2 Public (TVar 0) (Rule [2,3] (Let [(4,Comb ConsCall ("","char") [Lit (Charc ')')])] (Let [(5,Comb ConsCall ("Prelude",":") [Var 4,Var 3])] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 2,Var 5])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Let [(8,Comb ConsCall ("StringConst","IOError") [])] (Let [(9,Comb FuncCall ("Prelude","foldr") [Var 7,Var 6,Var 8])] (Let [(10,Comb ConsCall ("","char") [Lit (Charc '(')])] (Comb ConsCall ("Prelude",":") [Var 10,Var 9]))))))))),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.IOError#P4") 2 Public (TVar 0) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","apply") [Var 2,Var 3])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Let [(6,Comb ConsCall ("StringConst","IOError ") [])] (Comb FuncCall ("Prelude","foldr") [Var 5,Var 4,Var 6]))))),Func ("Prelude","_inst#Prelude.Show#Prelude.IOError") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","IOError") []]) (Rule [] (Let [(2,Comb (FuncPartCall 1) ("Prelude","_impl#show#Prelude.Show#Prelude.IOError") [])] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#showList#Prelude.Show#Prelude.IOError") [])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.IOError") [])] (Comb ConsCall ("Prelude","_Dict#Show") [Var 2,Var 4,Var 3]))))),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError#A4") [Var 2])] (Let [(5,Comb (FuncPartCall 1) ("Prelude","readIOError") [])] (Let [(6,Comb FuncCall ("Prelude","readParen") [Var 4,Var 5])] (Let [(7,Comb FuncCall ("Prelude","apply") [Var 6,Var 3])] (Let [(8,Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError#A3") [Var 2])] (Let [(9,Comb (FuncPartCall 1) ("Prelude","readUserError") [])] (Let [(10,Comb FuncCall ("Prelude","readParen") [Var 8,Var 9])] (Let [(11,Comb FuncCall ("Prelude","apply") [Var 10,Var 3])] (Let [(12,Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError#A2") [Var 2])] (Let [(13,Comb (FuncPartCall 1) ("Prelude","readFailError") [])] (Let [(14,Comb FuncCall ("Prelude","readParen") [Var 12,Var 13])] (Let [(15,Comb FuncCall ("Prelude","apply") [Var 14,Var 3])] (Let [(16,Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError#A1") [Var 2])] (Let [(17,Comb (FuncPartCall 1) ("Prelude","readNondetError") [])] (Let [(18,Comb FuncCall ("Prelude","readParen") [Var 16,Var 17])] (Let [(19,Comb FuncCall ("Prelude","apply") [Var 18,Var 3])] (Let [(20,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 15,Var 19])] (Let [(21,Comb FuncCall ("Prelude","build") [Var 20])] (Let [(22,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 11,Var 21])] (Let [(23,Comb FuncCall ("Prelude","build") [Var 22])] (Let [(24,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 7,Var 23])] (Comb FuncCall ("Prelude","build") [Var 24]))))))))))))))))))))))),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError#A4") 1 Public (TVar 0) (Rule [2] (Case Rigid (Var 2) [Branch (Pattern ("","int") [3]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Var 3,Lit (Intc 10)]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError#A3") 1 Public (TVar 0) (Rule [2] (Case Rigid (Var 2) [Branch (Pattern ("","int") [3]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Var 3,Lit (Intc 10)]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError#A2") 1 Public (TVar 0) (Rule [2] (Case Rigid (Var 2) [Branch (Pattern ("","int") [3]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Var 3,Lit (Intc 10)]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError#A1") 1 Public (TVar 0) (Rule [2] (Case Rigid (Var 2) [Branch (Pattern ("","int") [3]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Var 3,Lit (Intc 10)]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("Prelude","_inst#Prelude.Read#Prelude.IOError") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","IOError") []]) (Rule [] (Let [(2,Comb (FuncPartCall 1) ("Prelude","_impl#readList#Prelude.Read#Prelude.IOError") [])] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError") [])] (Comb ConsCall ("Prelude","_Dict#Read") [Var 3,Var 2])))),Func ("Prelude","return") 1 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (ForallType [1] (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TVar 1])))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Monad") [3,4,5,6]) (Var 5)])),Func ("Prelude","whenM") 3 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","()") []]) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","()") []])))) (Rule [2,-3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Var 4),Branch (Pattern ("Prelude","False") []) (Let [(5,Comb FuncCall ("Prelude","return") [Var 2])] (Let [(6,Comb ConsCall ("Prelude","()") [])] (Comb FuncCall ("Prelude","apply") [Var 5,Var 6])))])),Func ("Prelude","unlessM") 3 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","()") []]) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","()") []])))) (Rule [2,-3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Let [(5,Comb FuncCall ("Prelude","return") [Var 2])] (Let [(6,Comb ConsCall ("Prelude","()") [])] (Comb FuncCall ("Prelude","apply") [Var 5,Var 6]))),Branch (Pattern ("Prelude","False") []) (Var 4)])),Func ("Prelude",">>") 1 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (ForallType [1,2] (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 2]) (TCons ("Prelude","Apply") [TVar 0,TVar 2]))))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Monad") [3,4,5,6]) (Var 4)])),Func ("Prelude",">>=") 1 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (ForallType [1,2] (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TVar 2])) (TCons ("Prelude","Apply") [TVar 0,TVar 2]))))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Monad") [3,4,5,6]) (Var 3)])),Func ("Prelude","liftM") 3 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (FuncType (TVar 1) (TVar 2)) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TVar 2])))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude",">>=") [Var 2])] (Let [(6,Comb FuncCall ("Prelude","return") [Var 2])] (Let [(7,Comb (FuncPartCall 1) ("Prelude",".") [Var 6,Var 3])] (Comb FuncCall ("Prelude","apply") [Var 5,Var 4,Var 7]))))),Func ("Prelude","liftM2._#lambda460._#lambda462") 4 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 1]) (FuncType (FuncType (TVar 0) (FuncType (TVar 2) (TVar 3))) (FuncType (TVar 2) (TCons ("Prelude","Apply") [TVar 1,TVar 3]))))) (Rule [2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","return") [Var 3])] (Let [(7,Comb FuncCall ("Prelude","apply") [Var 4,Var 2,Var 5])] (Comb FuncCall ("Prelude","apply") [Var 6,Var 7])))),Func ("Prelude","liftM2._#lambda460") 4 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (FuncType (TVar 2) (FuncType (TVar 1) (TVar 3))) (FuncType (TVar 2) (TCons ("Prelude","Apply") [TVar 0,TVar 3]))))) (Rule [2,3,4,5] (Let [(6,Comb FuncCall ("Prelude",">>=") [Var 2])] (Let [(7,Comb (FuncPartCall 1) ("Prelude","liftM2._#lambda460._#lambda462") [Var 5,Var 2,Var 4])] (Comb FuncCall ("Prelude","apply") [Var 6,Var 3,Var 7])))),Func ("Prelude","liftM2") 4 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (FuncType (TVar 1) (FuncType (TVar 2) (TVar 3))) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 2]) (TCons ("Prelude","Apply") [TVar 0,TVar 3]))))) (Rule [2,3,4,5] (Let [(6,Comb FuncCall ("Prelude",">>=") [Var 2])] (Let [(7,Comb (FuncPartCall 1) ("Prelude","liftM2._#lambda460") [Var 2,Var 5,Var 3])] (Comb FuncCall ("Prelude","apply") [Var 6,Var 4,Var 7])))),Func ("Prelude","foldM._#lambda457") 4 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 1]) (FuncType (FuncType (TVar 2) (FuncType (TVar 0) (TCons ("Prelude","Apply") [TVar 1,TVar 2]))) (FuncType (TVar 2) (TCons ("Prelude","Apply") [TVar 1,TVar 2]))))) (Rule [2,3,4,5] (Comb FuncCall ("Prelude","foldM") [Var 3,Var 4,Var 5,Var 2])),Func ("Prelude","sequence_") 2 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Apply") [TVar 0,TVar 1]]) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","()") []]))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude",">>") [Var 2])] (Let [(5,Comb FuncCall ("Prelude","return") [Var 2])] (Let [(6,Comb ConsCall ("Prelude","()") [])] (Let [(7,Comb FuncCall ("Prelude","apply") [Var 5,Var 6])] (Comb FuncCall ("Prelude","foldr") [Var 4,Var 7,Var 3])))))),Func ("Prelude","mapM_") 3 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TVar 2])) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","()") []])))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude",">>") [Var 2])] (Let [(6,Comb FuncCall ("Prelude","return") [Var 2])] (Let [(7,Comb ConsCall ("Prelude","()") [])] (Let [(8,Comb FuncCall ("Prelude","apply") [Var 6,Var 7])] (Let [(9,Comb (FuncPartCall 2) ("Prelude","map_mkc") [Var 3,Var 5])] (Comb FuncCall ("Prelude","foldr") [Var 9,Var 8,Var 4]))))))),Func ("Prelude","forM_") 3 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TVar 2])) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","()") []])))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude",">>") [Var 2])] (Let [(6,Comb FuncCall ("Prelude","return") [Var 2])] (Let [(7,Comb ConsCall ("Prelude","()") [])] (Let [(8,Comb FuncCall ("Prelude","apply") [Var 6,Var 7])] (Let [(9,Comb (FuncPartCall 2) ("Prelude","map_mkc") [Var 4,Var 5])] (Comb FuncCall ("Prelude","foldr") [Var 9,Var 8,Var 3]))))))),Func ("Prelude","sequence._#lambda454._#lambda455._#lambda456") 3 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Apply") [TVar 1,TCons ("Prelude","[]") [TVar 0]])))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","return") [Var 3])] (Let [(6,Comb ConsCall ("Prelude",":") [Var 2,Var 4])] (Comb FuncCall ("Prelude","apply") [Var 5,Var 6])))),Func ("Prelude","sequence._#lambda454._#lambda455") 3 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","[]") [TVar 1]]) (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","[]") [TVar 1]])))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude",">>=") [Var 2])] (Let [(6,Comb (FuncPartCall 1) ("Prelude","sequence._#lambda454._#lambda455._#lambda456") [Var 4,Var 2])] (Comb FuncCall ("Prelude","apply") [Var 5,Var 3,Var 6])))),Func ("Prelude","sequence._#lambda454") 3 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","[]") [TVar 1]]) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","[]") [TVar 1]])))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude",">>=") [Var 2])] (Let [(6,Comb (FuncPartCall 1) ("Prelude","sequence._#lambda454._#lambda455") [Var 2,Var 4])] (Comb FuncCall ("Prelude","apply") [Var 5,Var 3,Var 6])))),Func ("Prelude","sequence") 2 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Apply") [TVar 0,TVar 1]]) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","[]") [TVar 1]]))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","return") [Var 2])] (Let [(5,Comb ConsCall ("Prelude","[]") [])] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 4,Var 5])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","sequence._#lambda454") [Var 2])] (Comb FuncCall ("Prelude","foldr") [Var 7,Var 6,Var 3])))))),Func ("Prelude","mapM") 3 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TVar 2])) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","[]") [TVar 2]])))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","return") [Var 2])] (Let [(6,Comb ConsCall ("Prelude","[]") [])] (Let [(7,Comb FuncCall ("Prelude","apply") [Var 5,Var 6])] (Let [(8,Comb (FuncPartCall 2) ("Prelude","mapM#P12") [Var 2,Var 3])] (Comb FuncCall ("Prelude","foldr") [Var 8,Var 7,Var 4])))))),Func ("Prelude","mapM#P12") 4 Public (TVar 0) (Rule [2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 3,Var 4])] (Let [(7,Comb FuncCall ("Prelude",">>=") [Var 2])] (Let [(8,Comb (FuncPartCall 1) ("Prelude","sequence._#lambda454._#lambda455") [Var 2,Var 5])] (Comb FuncCall ("Prelude","apply") [Var 7,Var 6,Var 8]))))),Func ("Prelude","forM") 3 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TVar 2])) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","[]") [TVar 2]])))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","return") [Var 2])] (Let [(6,Comb ConsCall ("Prelude","[]") [])] (Let [(7,Comb FuncCall ("Prelude","apply") [Var 5,Var 6])] (Let [(8,Comb (FuncPartCall 2) ("Prelude","forM#P13") [Var 2,Var 4])] (Comb FuncCall ("Prelude","foldr") [Var 8,Var 7,Var 3])))))),Func ("Prelude","forM#P13") 4 Public (TVar 0) (Rule [2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 3,Var 4])] (Let [(7,Comb FuncCall ("Prelude",">>=") [Var 2])] (Let [(8,Comb (FuncPartCall 1) ("Prelude","sequence._#lambda454._#lambda455") [Var 2,Var 5])] (Comb FuncCall ("Prelude","apply") [Var 7,Var 6,Var 8]))))),Func ("Prelude",">>$._#lambda283") 2 Public (FuncType (TCons ("Prelude","IO") [TVar 0]) (FuncType (TVar 1) (TCons ("Prelude","IO") [TVar 0]))) (Rule [-2,3] (Var 2)),Func ("Prelude","returnIO") 1 Private (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 0])) (External "Prelude.returnIO"),Func ("Prelude",">>=$") 2 Private (FuncType (TCons ("Prelude","IO") [TVar 0]) (FuncType (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 1])) (TCons ("Prelude","IO") [TVar 1]))) (External "Prelude.>>=$"),Func ("Prelude","_impl#==#Prelude.Eq#Prelude.IOError") 2 Public (FuncType (TCons ("Prelude","IOError") []) (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","Bool") []))) (Rule [-2,-3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","IOError") [4]) (Case Flex (Var 3) [Branch (Pattern ("Prelude","IOError") [5]) (Let [(6,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char") [])] (Let [(8,Comb ConsCall ("Prelude","_Dict#Eq") [Var 6,Var 7])] (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Var 8,Var 4,Var 5])))),Branch (Pattern ("Prelude","UserError") [9]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","FailError") [10]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","NondetError") [11]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude","UserError") [12]) (Case Flex (Var 3) [Branch (Pattern ("Prelude","IOError") [13]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","UserError") [14]) (Let [(15,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [])] (Let [(16,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char") [])] (Let [(17,Comb ConsCall ("Prelude","_Dict#Eq") [Var 15,Var 16])] (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Var 17,Var 12,Var 14])))),Branch (Pattern ("Prelude","FailError") [18]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","NondetError") [19]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude","FailError") [20]) (Case Flex (Var 3) [Branch (Pattern ("Prelude","IOError") [21]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","UserError") [22]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","FailError") [23]) (Let [(24,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [])] (Let [(25,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char") [])] (Let [(26,Comb ConsCall ("Prelude","_Dict#Eq") [Var 24,Var 25])] (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Var 26,Var 20,Var 23])))),Branch (Pattern ("Prelude","NondetError") [27]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude","NondetError") [28]) (Case Flex (Var 3) [Branch (Pattern ("Prelude","IOError") [29]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","UserError") [30]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","FailError") [31]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","NondetError") [32]) (Let [(33,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [])] (Let [(34,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char") [])] (Let [(35,Comb ConsCall ("Prelude","_Dict#Eq") [Var 33,Var 34])] (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Var 35,Var 28,Var 32]))))])])),Func ("Prelude","_inst#Prelude.Eq#Prelude.IOError") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","IOError") []]) (Rule [] (Let [(2,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#Prelude.IOError") [])] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.IOError") [])] (Comb ConsCall ("Prelude","_Dict#Eq") [Var 3,Var 2])))),Func ("Prelude","_impl#fail#Prelude.Monad#[]") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TVar 0])) (Rule [2] (Comb ConsCall ("Prelude","[]") [])),Func ("Prelude","_impl#return#Prelude.Monad#[]") 1 Public (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])) (Rule [2] (Let [(3,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 2,Var 3]))),Func ("Prelude","_impl#>>=#Prelude.Monad#[]._#lambda184#P14") 3 Public (TVar 0) (Rule [2,3,4] (Comb FuncCall ("Prelude","apply") [Var 2,Var 3,Var 4])),Func ("Prelude","_impl#>>=#Prelude.Monad#[]") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 1])) (TCons ("Prelude","[]") [TVar 1]))) (Rule [2,3] (Let [(4,Comb (FuncPartCall 3) ("Prelude","_impl#>>=#Prelude.Monad#[]#P15") [Var 3])] (Let [(5,Comb (FuncPartCall 1) ("Prelude","concatMap#P2") [])] (Comb FuncCall ("Prelude","build_fold") [Var 4,Var 5,Var 2])))),Func ("Prelude","_impl#>>=#Prelude.Monad#[]#P15") 4 Public (TVar 0) (Rule [2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 2,Var 4])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","_impl#>>=#Prelude.Monad#[]#P15#P16") [Var 3])] (Comb FuncCall ("Prelude","foldr") [Var 7,Var 5,Var 6])))),Func ("Prelude","_impl#>>=#Prelude.Monad#[]#P15#P16") 3 Public (TVar 0) (Rule [2,3,4] (Comb FuncCall ("Prelude","apply") [Var 2,Var 3,Var 4])),Func ("Prelude","_impl#fail#Prelude.Monad#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Maybe") [TVar 0])) (Rule [2] (Comb ConsCall ("Prelude","Nothing") [])),Func ("Prelude","_impl#return#Prelude.Monad#Prelude.Maybe") 1 Public (FuncType (TVar 0) (TCons ("Prelude","Maybe") [TVar 0])) (Rule [2] (Comb ConsCall ("Prelude","Just") [Var 2])),Func ("Prelude","_impl#>>=#Prelude.Monad#Prelude.Maybe") 2 Public (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (FuncType (TVar 0) (TCons ("Prelude","Maybe") [TVar 1])) (TCons ("Prelude","Maybe") [TVar 1]))) (Rule [-2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("Prelude","Just") [4]) (Comb FuncCall ("Prelude","apply") [Var 3,Var 4])])),Func ("Prelude","_impl#return#Prelude.Monad#Prelude.IO") 1 Public (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 0])) (Rule [-2] (Comb FuncCall ("Prelude","returnIO") [Var 2])),Func ("Prelude","sequenceIO._#lambda292._#lambda294") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [2,3] (Let [(4,Comb ConsCall ("Prelude",":") [Var 2,Var 3])] (Comb FuncCall ("Prelude","returnIO") [Var 4]))),Func ("Prelude","done") 0 Public (TCons ("Prelude","IO") [TCons ("Prelude","()") []]) (Rule [] (Let [(2,Comb ConsCall ("Prelude","()") [])] (Comb FuncCall ("Prelude","returnIO") [Var 2]))),Func ("Prelude","when") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","IO") [TCons ("Prelude","()") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [-2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Let [(4,Comb ConsCall ("Prelude","()") [])] (Comb FuncCall ("Prelude","returnIO") [Var 4]))])),Func ("Prelude","unless") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","IO") [TCons ("Prelude","()") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [-2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","True") []) (Let [(4,Comb ConsCall ("Prelude","()") [])] (Comb FuncCall ("Prelude","returnIO") [Var 4])),Branch (Pattern ("Prelude","False") []) (Var 3)])),Func ("Prelude","doSolve") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","True") []) (Let [(3,Comb ConsCall ("Prelude","()") [])] (Comb FuncCall ("Prelude","returnIO") [Var 3])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])),Func ("Prelude","_impl#>>#Prelude.Monad#Prelude.IO") 2 Public (FuncType (TCons ("Prelude","IO") [TVar 0]) (FuncType (TCons ("Prelude","IO") [TVar 1]) (TCons ("Prelude","IO") [TVar 1]))) (Rule [-2,3] (Let [(4,Comb (FuncPartCall 1) ("Prelude",">>$._#lambda283") [Var 3])] (Comb FuncCall ("Prelude",">>=$") [Var 2,Var 4]))),Func ("Prelude","sequenceIO_") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","IO") [TVar 0]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [2] (Let [(3,Comb ConsCall ("Prelude","()") [])] (Let [(4,Comb FuncCall ("Prelude","returnIO") [Var 3])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#>>#Prelude.Monad#Prelude.IO") [])] (Comb FuncCall ("Prelude","foldr") [Var 5,Var 4,Var 2]))))),Func ("Prelude","mapIO_") 2 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 1])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [2,3] (Let [(4,Comb ConsCall ("Prelude","()") [])] (Let [(5,Comb FuncCall ("Prelude","returnIO") [Var 4])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","mapIO_#P17") [Var 2])] (Comb FuncCall ("Prelude","foldr") [Var 6,Var 5,Var 3]))))),Func ("Prelude","mapIO_#P17") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","apply") [Var 2,Var 3])] (Let [(6,Comb (FuncPartCall 1) ("Prelude",">>$._#lambda283") [Var 4])] (Comb FuncCall ("Prelude",">>=$") [Var 5,Var 6])))),Func ("Prelude","forIO_") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 1])) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [2,3] (Let [(4,Comb ConsCall ("Prelude","()") [])] (Let [(5,Comb FuncCall ("Prelude","returnIO") [Var 4])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","forIO_#P18") [Var 3])] (Comb FuncCall ("Prelude","foldr") [Var 6,Var 5,Var 2]))))),Func ("Prelude","forIO_#P18") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","apply") [Var 2,Var 3])] (Let [(6,Comb (FuncPartCall 1) ("Prelude",">>$._#lambda283") [Var 4])] (Comb FuncCall ("Prelude",">>=$") [Var 5,Var 6])))),Func ("Prelude","putStrLn") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [2] (Let [(3,Comb FuncCall ("Prelude","putStr") [Var 2])] (Let [(4,Comb FuncCall ("Prelude","prim_putChar") [Lit (Charc '\n')])] (Let [(5,Comb (FuncPartCall 1) ("Prelude",">>$._#lambda283") [Var 4])] (Comb FuncCall ("Prelude",">>=$") [Var 3,Var 5]))))),Func ("Prelude","print") 2 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TVar 0) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","show") [Var 2])] (Let [(5,Comb FuncCall ("Prelude","apply") [Var 4,Var 3])] (Let [(6,Comb FuncCall ("Prelude","putStr") [Var 5])] (Let [(7,Comb FuncCall ("Prelude","prim_putChar") [Lit (Charc '\n')])] (Let [(8,Comb (FuncPartCall 1) ("Prelude",">>$._#lambda283") [Var 7])] (Comb FuncCall ("Prelude",">>=$") [Var 6,Var 8]))))))),Func ("Prelude","_impl#>>=#Prelude.Monad#Prelude.IO") 2 Public (FuncType (TCons ("Prelude","IO") [TVar 0]) (FuncType (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 1])) (TCons ("Prelude","IO") [TVar 1]))) (Rule [-2,-3] (Comb FuncCall ("Prelude",">>=$") [Var 2,Var 3])),Func ("Prelude","liftIO") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("Prelude","IO") [TVar 0]) (TCons ("Prelude","IO") [TVar 1]))) (Rule [2,-3] (Let [(4,Comb (FuncPartCall 1) ("Prelude","liftIO#P19") [Var 2])] (Comb FuncCall ("Prelude",">>=$") [Var 3,Var 4]))),Func ("Prelude","liftIO#P19") 2 Public (TVar 0) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","apply") [Var 2,Var 3])] (Comb FuncCall ("Prelude","returnIO") [Var 4]))),Func ("Prelude","foldIO._#lambda296") 3 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (FuncType (TVar 1) (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 1]))) (FuncType (TVar 1) (TCons ("Prelude","IO") [TVar 1])))) (Rule [2,3,4] (Comb FuncCall ("Prelude","foldIO") [Var 3,Var 4,Var 2])),Func ("Prelude","sequenceIO._#lambda292") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","IO") [TVar 0]]) (FuncType (TVar 0) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","sequenceIO") [Var 2])] (Let [(5,Comb (FuncPartCall 1) ("Prelude","sequenceIO._#lambda292._#lambda294") [Var 3])] (Comb FuncCall ("Prelude",">>=$") [Var 4,Var 5])))),Func ("Prelude","mapIO") 2 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 1])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 1]]))) (Rule [2,3] (Let [(4,Comb (FuncPartCall 3) ("Prelude","map_mkc") [Var 2])] (Let [(5,Comb (FuncPartCall 1) ("Prelude","id") [])] (Let [(6,Comb FuncCall ("Prelude","build_fold") [Var 4,Var 5,Var 3])] (Comb FuncCall ("Prelude","sequenceIO") [Var 6]))))),Func ("Prelude","forIO") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 1])) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 1]]))) (Rule [2,3] (Let [(4,Comb (FuncPartCall 3) ("Prelude","map_mkc") [Var 3])] (Let [(5,Comb (FuncPartCall 1) ("Prelude","id") [])] (Let [(6,Comb FuncCall ("Prelude","build_fold") [Var 4,Var 5,Var 2])] (Comb FuncCall ("Prelude","sequenceIO") [Var 6]))))),Func ("Prelude","getLine") 0 Public (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (Rule [] (Let [(2,Comb FuncCall ("Prelude","getChar") [])] (Let [(3,Comb (FuncPartCall 1) ("Prelude","getLine._#lambda285") [])] (Comb FuncCall ("Prelude",">>=$") [Var 2,Var 3])))),Func ("Prelude","_def#fail#Prelude.Monad") 2 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Apply") [TVar 0,TVar 1]))) (Rule [2,-3] (Let [(4,Comb (FuncPartCall 1) ("Prelude","prim_error") [])] (Comb FuncCall ("Prelude","$##") [Var 4,Var 3]))),Func ("Prelude","_impl#fail#Prelude.Monad#Prelude.IO") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TVar 0])) (Rule [2] (Let [(3,Comb (FuncPartCall 1) ("Prelude","prim_error") [])] (Comb FuncCall ("Prelude","$##") [Var 3,Var 2]))),Func ("Prelude","_def#>>#Prelude.Monad._#lambda183") 2 Public (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (TVar 2) (TCons ("Prelude","Apply") [TVar 0,TVar 1]))) (Rule [-2,3] (Var 2)),Func ("Prelude","_def#>>#Prelude.Monad") 3 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 2]) (TCons ("Prelude","Apply") [TVar 0,TVar 2])))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude",">>=") [Var 2])] (Let [(6,Comb (FuncPartCall 1) ("Prelude","_def#>>#Prelude.Monad._#lambda183") [Var 4])] (Comb FuncCall ("Prelude","apply") [Var 5,Var 3,Var 6])))),Func ("Prelude","_impl#>>#Prelude.Monad#[]") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","[]") [TVar 1]))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","_inst#Prelude.Monad#[]") [])] (Let [(5,Comb FuncCall ("Prelude",">>=") [Var 4])] (Let [(6,Comb (FuncPartCall 1) ("Prelude","_def#>>#Prelude.Monad._#lambda183") [Var 3])] (Comb FuncCall ("Prelude","apply") [Var 5,Var 2,Var 6]))))),Func ("Prelude","_impl#>>#Prelude.Monad#Prelude.Maybe") 2 Public (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 1]) (TCons ("Prelude","Maybe") [TVar 1]))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","_inst#Prelude.Monad#Prelude.Maybe") [])] (Let [(5,Comb FuncCall ("Prelude",">>=") [Var 4])] (Let [(6,Comb (FuncPartCall 1) ("Prelude","_def#>>#Prelude.Monad._#lambda183") [Var 3])] (Comb FuncCall ("Prelude","apply") [Var 5,Var 2,Var 6]))))),Func ("Prelude","_impl#fmap#Prelude.Functor#[]") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 1]))) (Rule [2,3] (Let [(4,Comb (FuncPartCall 3) ("Prelude","map_mkc") [Var 2])] (Let [(5,Comb (FuncPartCall 1) ("Prelude","id") [])] (Comb FuncCall ("Prelude","build_fold") [Var 4,Var 5,Var 3])))),Func ("Prelude","_inst#Prelude.Functor#[]") 0 Public (TCons ("Prelude","_Dict#Functor") [TCons ("Prelude","[]") []]) (Rule [] (Let [(2,Comb (FuncPartCall 2) ("Prelude","_impl#fmap#Prelude.Functor#[]") [])] (Comb ConsCall ("Prelude","_Dict#Functor") [Var 2]))),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.IOError") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","IOError") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Let [(4,Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show#P49") [Var 3])] (Comb FuncCall ("Prelude","build") [Var 4])),Branch (Pattern ("Prelude",":") [5,6]) (Let [(7,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(8,Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.IOError") [Var 7])] (Let [(9,Comb FuncCall ("Prelude","showList'.showl.429") [Var 3,Var 8,Var 6])] (Let [(10,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(11,Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.IOError") [Var 10,Var 5])] (Let [(12,Comb FuncCall ("Prelude","apply") [Var 11,Var 9])] (Let [(13,Comb ConsCall ("","char") [Lit (Charc '[')])] (Comb ConsCall ("Prelude",":") [Var 13,Var 12]))))))))])),Func ("Prelude","_impl#show#Prelude.Show#Prelude.IOError") 1 Private (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [2] (Let [(3,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(4,Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.IOError") [Var 3,Var 2])] (Let [(5,Comb ConsCall ("Prelude","[]") [])] (Comb FuncCall ("Prelude","apply") [Var 4,Var 5]))))),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.IOError") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","IOError") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [2] (Let [(3,Comb (FuncPartCall 1) ("Prelude","_impl#readList#Prelude.Read#Prelude.IOError") [])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError") [])] (Let [(5,Comb ConsCall ("Prelude","_Dict#Read") [Var 4,Var 3])] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Var 5,Var 2]))))),Func ("Prelude","foldM") 4 Private (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (FuncType (TVar 1) (FuncType (TVar 2) (TCons ("Prelude","Apply") [TVar 0,TVar 1]))) (FuncType (TVar 1) (FuncType (TCons ("Prelude","[]") [TVar 2]) (TCons ("Prelude","Apply") [TVar 0,TVar 1]))))) (Rule [2,3,4,-5] (Case Flex (Var 5) [Branch (Pattern ("Prelude","[]") []) (Let [(6,Comb FuncCall ("Prelude","return") [Var 2])] (Comb FuncCall ("Prelude","apply") [Var 6,Var 4])),Branch (Pattern ("Prelude",":") [7,8]) (Let [(9,Comb FuncCall ("Prelude",">>=") [Var 2])] (Let [(10,Comb FuncCall ("Prelude","apply") [Var 3,Var 4,Var 7])] (Let [(11,Comb (FuncPartCall 1) ("Prelude","foldM._#lambda457") [Var 8,Var 2,Var 3])] (Comb FuncCall ("Prelude","apply") [Var 9,Var 10,Var 11]))))])),Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.IOError") 2 Private (FuncType (TCons ("Prelude","IOError") []) (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","Bool") []))) (Rule [2,3] (Let [(-4,Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.IOError") [Var 2,Var 3])] (Case Flex (Var (-4)) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])]))),Func ("Prelude","putStr") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Let [(3,Comb ConsCall ("Prelude","()") [])] (Comb FuncCall ("Prelude","returnIO") [Var 3])),Branch (Pattern ("Prelude",":") [4,5]) (Let [(6,Comb FuncCall ("Prelude","putChar") [Var 4])] (Let [(7,Comb FuncCall ("Prelude","putStr") [Var 5])] (Let [(8,Comb (FuncPartCall 1) ("Prelude",">>$._#lambda283") [Var 7])] (Comb FuncCall ("Prelude",">>=$") [Var 6,Var 8]))))])),Func ("Prelude","foldIO") 3 Private (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TCons ("Prelude","IO") [TVar 0]))) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","IO") [TVar 0])))) (Rule [2,3,-4] (Case Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","returnIO") [Var 3]),Branch (Pattern ("Prelude",":") [5,6]) (Let [(7,Comb FuncCall ("Prelude","apply") [Var 2,Var 3,Var 5])] (Let [(8,Comb (FuncPartCall 1) ("Prelude","foldIO._#lambda296") [Var 6,Var 2])] (Comb FuncCall ("Prelude",">>=$") [Var 7,Var 8])))])),Func ("Prelude","sequenceIO") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","IO") [TVar 0]]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 0]])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Let [(3,Comb ConsCall ("Prelude","[]") [])] (Comb FuncCall ("Prelude","returnIO") [Var 3])),Branch (Pattern ("Prelude",":") [4,5]) (Let [(6,Comb (FuncPartCall 1) ("Prelude","sequenceIO._#lambda292") [Var 5])] (Comb FuncCall ("Prelude",">>=$") [Var 4,Var 6]))])),Func ("Prelude","getLine._#lambda285") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("","char") [3]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 3,Lit (Charc '\n')]),Branch (Pattern ("Prelude","True") []) (Let [(4,Comb ConsCall ("Prelude","[]") [])] (Comb FuncCall ("Prelude","returnIO") [Var 4])),Branch (Pattern ("Prelude","False") []) (Let [(5,Comb FuncCall ("Prelude","getChar") [])] (Let [(6,Comb (FuncPartCall 1) ("Prelude","getLine._#lambda285") [])] (Let [(7,Comb FuncCall ("Prelude",">>=$") [Var 5,Var 6])] (Let [(8,Comb (FuncPartCall 1) ("Prelude","getLine._#lambda285#P20") [Var 3])] (Comb FuncCall ("Prelude",">>=$") [Var 7,Var 8])))))])])),Func ("Prelude","getLine._#lambda285#P20") 2 Public (TVar 0) (Rule [2,3] (Let [(4,Comb ConsCall ("","char") [Var 2])] (Let [(5,Comb ConsCall ("Prelude",":") [Var 4,Var 3])] (Comb FuncCall ("Prelude","returnIO") [Var 5])))),Func ("Prelude","_inst#Prelude.Monad#Prelude.IO") 0 Private (TCons ("Prelude","_Dict#Monad") [TCons ("Prelude","IO") []]) (Rule [] (Let [(2,Comb (FuncPartCall 2) ("Prelude","_impl#>>=#Prelude.Monad#Prelude.IO") [])] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#>>#Prelude.Monad#Prelude.IO") [])] (Let [(4,Comb (FuncPartCall 1) ("Prelude","_impl#return#Prelude.Monad#Prelude.IO") [])] (Let [(5,Comb (FuncPartCall 1) ("Prelude","_impl#fail#Prelude.Monad#Prelude.IO") [])] (Comb ConsCall ("Prelude","_Dict#Monad") [Var 2,Var 3,Var 4,Var 5])))))),Func ("Prelude","_inst#Prelude.Monad#[]") 0 Private (TCons ("Prelude","_Dict#Monad") [TCons ("Prelude","[]") []]) (Rule [] (Let [(2,Comb (FuncPartCall 2) ("Prelude","_impl#>>=#Prelude.Monad#[]") [])] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#>>#Prelude.Monad#[]") [])] (Let [(4,Comb (FuncPartCall 1) ("Prelude","_impl#return#Prelude.Monad#[]") [])] (Let [(5,Comb (FuncPartCall 1) ("Prelude","_impl#fail#Prelude.Monad#[]") [])] (Comb ConsCall ("Prelude","_Dict#Monad") [Var 2,Var 3,Var 4,Var 5])))))),Func ("Prelude","_inst#Prelude.Monad#Prelude.Maybe") 0 Private (TCons ("Prelude","_Dict#Monad") [TCons ("Prelude","Maybe") []]) (Rule [] (Let [(2,Comb (FuncPartCall 2) ("Prelude","_impl#>>=#Prelude.Monad#Prelude.Maybe") [])] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#>>#Prelude.Monad#Prelude.Maybe") [])] (Let [(4,Comb (FuncPartCall 1) ("Prelude","_impl#return#Prelude.Monad#Prelude.Maybe") [])] (Let [(5,Comb (FuncPartCall 1) ("Prelude","_impl#fail#Prelude.Monad#Prelude.Maybe") [])] (Comb ConsCall ("Prelude","_Dict#Monad") [Var 2,Var 3,Var 4,Var 5]))))))] []