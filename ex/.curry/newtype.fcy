Prog "newtype" ["Prelude"] [Type ("newtype","Mytype") Public [0,1,2] [Cons ("newtype","A0") 0 Public [],Cons ("newtype","A1") 1 Public [TVar 0],Cons ("newtype","A2") 2 Public [TVar 0,TVar 1],Cons ("newtype","A3") 3 Public [TVar 0,TVar 1,TVar 2]]] [Func ("newtype","equals_Mytype") 5 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("newtype","Mytype") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("newtype","Mytype") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","Bool") [])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("newtype","A0") []) (Let [(6,Comb ConsCall ("Prelude","False") [])] (Case Rigid (Var 5) [Branch (Pattern ("newtype","A0") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("newtype","A1") [7]) (Var 6),Branch (Pattern ("newtype","A2") [8,9]) (Var 6),Branch (Pattern ("newtype","A3") [10,11,12]) (Var 6)])),Branch (Pattern ("newtype","A1") [13]) (Let [(14,Comb ConsCall ("Prelude","False") [])] (Case Rigid (Var 5) [Branch (Pattern ("newtype","A1") [15]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 13],Var 15]),Branch (Pattern ("newtype","A0") []) (Var 14),Branch (Pattern ("newtype","A2") [16,17]) (Var 14),Branch (Pattern ("newtype","A3") [18,19,20]) (Var 14)])),Branch (Pattern ("newtype","A2") [21,22]) (Let [(23,Comb ConsCall ("Prelude","False") [])] (Case Rigid (Var 5) [Branch (Pattern ("newtype","A2") [24,25]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 21],Var 24],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 2],Var 22],Var 25]]),Branch (Pattern ("newtype","A0") []) (Var 23),Branch (Pattern ("newtype","A1") [26]) (Var 23),Branch (Pattern ("newtype","A3") [27,28,29]) (Var 23)])),Branch (Pattern ("newtype","A3") [30,31,32]) (Let [(33,Comb ConsCall ("Prelude","False") [])] (Case Rigid (Var 5) [Branch (Pattern ("newtype","A3") [34,35,36]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 30],Var 34],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 2],Var 31],Var 35],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 3],Var 32],Var 36]]]),Branch (Pattern ("newtype","A0") []) (Var 33),Branch (Pattern ("newtype","A1") [37]) (Var 33),Branch (Pattern ("newtype","A2") [38,39]) (Var 33)]))])),Func ("newtype","main") 0 Public (TCons ("Prelude","Bool") []) (Rule [] (Comb FuncCall ("newtype","equals_Mytype") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Int") [],Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Int") [],Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Int") [],Comb ConsCall ("newtype","A3") [Lit (Intc 2),Lit (Intc 3),Lit (Intc 4)],Comb ConsCall ("newtype","A3") [Lit (Intc 2),Lit (Intc 3),Lit (Intc 5)]]))] []