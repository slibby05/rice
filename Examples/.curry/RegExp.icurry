interface RegExp where {
import Prelude;
data Chr = A | B | C | D | E;
data RE a
  = Lit a
  | Alt (RE a) (RE a)
  | Conc (RE a) (RE a)
  | Star (RE a);
abc 0 :: RE Chr;
abstar 0 :: RE Chr;
abstarc 0 :: RE Chr;
plus 1 :: RE a -> RE a;
sem 1 :: Prelude.Num b => RE a -> [b];
hiding class Prelude.Num a;
instance Prelude.Num Prelude.Float {
  fromInt 1;
  signum 1;
  abs 1;
  negate 1;
  (*) 2;
  (-) 2;
  (+) 2
} {-# MODULE Prelude #-};
instance Prelude.Num Prelude.Int {
  fromInt 1;
  signum 1;
  abs 1;
  negate 1;
  (*) 2;
  (-) 2;
  (+) 2
} {-# MODULE Prelude #-};
hiding data Prelude.Float;
hiding data Prelude.Int
}