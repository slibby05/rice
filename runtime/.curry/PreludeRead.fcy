(Prog "PreludeRead" ["PreludeBase","PreludeCompare","PreludeNum","PreludeList","PreludeString"] [] [(Func ("Prelude","_def#readsPrec#Prelude.Read") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])))) (Rule [1] (Comb FuncCall ("Prelude","error") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'N')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'h')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'p')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '`')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'P')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '\'')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])]))),(Func ("Prelude","_def#readList#Prelude.Read") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1] (Comb FuncCall ("Prelude","readListDefault") [(Var 1)]))),(Func ("Prelude","_inst#Prelude.Read#Prelude.Int") 0 Public (TCons ("Prelude","_Dict#Read") [(TCons ("Prelude","Int") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [(Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Int") []),(Comb FuncCall ("Prelude","_impl#readList#Prelude.Read#Prelude.Int") [])]))),(Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Int") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1] (Comb FuncCall ("Prelude","readSigned") [(Comb FuncCall ("Prelude","_inst#Prelude.Real#Prelude.Int") []),(Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Int._#lambda10") [])]))),(Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Int._#lambda10") 1 Private (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Int") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Int._#lambda10._#lambda13") []),(Comb ConsCall ("Prelude","[]") []),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","lexDigits") []),(Var 1)])]))),(Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Int._#lambda10._#lambda13") 2 Private (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Int") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Int") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1,2] (Case Rigid (Var 1) [(Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [(Comb FuncCall ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Int._#lambda10._#lambda13._#lambda17") [(Var 4)]),(Comb ConsCall ("Prelude","[]") []),(Comb FuncCall ("Prelude","readNatLiteral") [(Var 3)])]),(Var 2)]))]))),(Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Int._#lambda10._#lambda13._#lambda17") 3 Private (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","Int") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Int") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Int") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])))) (Rule [1,2,3] (Case Rigid (Var 2) [(Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 5) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Var 4),(Var 1)]),(Var 3)])),(Branch (Pattern ("Prelude",":") [6,7]) (Var 3))]))]))),(Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [(Comb FuncCall ("Prelude","_inst#Prelude.Read#Prelude.Int") [])]))),(Func ("Prelude","_inst#Prelude.Read#Prelude.Float") 0 Public (TCons ("Prelude","_Dict#Read") [(TCons ("Prelude","Float") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [(Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float") []),(Comb FuncCall ("Prelude","_impl#readList#Prelude.Read#Prelude.Float") [])]))),(Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Float") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1] (Comb FuncCall ("Prelude","readSigned") [(Comb FuncCall ("Prelude","_inst#Prelude.Real#Prelude.Float") []),(Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float._#lambda23") [])]))),(Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float.readFloat.903") 1 Private (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Float") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","all") [(Comb (FuncPartCall 1) ("Prelude","isDigit") [])]),(Var 1)]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float.readFloat.903._#lambda21") []),(Comb ConsCall ("Prelude","[]") []),(Comb FuncCall ("Prelude","readNatLiteral") [(Var 1)])])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","readFloatLiteral") [(Var 1)]))]))),(Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float.readFloat.903._#lambda21") 2 Private (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","Int") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Float") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Float") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1,2] (Case Rigid (Var 1) [(Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Comb FuncCall ("Prelude","i2f") [(Var 3)]),(Var 4)]),(Var 2)]))]))),(Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float._#lambda23") 1 Private (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Float") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float._#lambda23._#lambda26") []),(Comb ConsCall ("Prelude","[]") []),(Comb FuncCall ("Prelude","lex") [(Var 1)])]))),(Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float._#lambda23._#lambda26") 2 Private (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Float") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Float") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1,2] (Case Rigid (Var 1) [(Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [(Case Rigid (Comb FuncCall ("Prelude","not") [(Comb FuncCall ("Prelude","null") [(Var 3)])]) [(Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("Prelude","isDigit") [(Comb FuncCall ("Prelude","head") [(Var 3)])]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float._#lambda23._#lambda26._#lambda30") [(Var 4)]),(Comb ConsCall ("Prelude","[]") []),(Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float.readFloat.903") [(Var 3)])])),(Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") []))])),(Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") []))]),(Var 2)]))]))),(Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float._#lambda23._#lambda26._#lambda30") 3 Private (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","Float") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Float") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Float") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])))) (Rule [1,2,3] (Case Rigid (Var 2) [(Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 5) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Var 4),(Var 1)]),(Var 3)])),(Branch (Pattern ("Prelude",":") [6,7]) (Var 3))]))]))),(Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Float") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [(Comb FuncCall ("Prelude","_inst#Prelude.Read#Prelude.Float") [])]))),(Func ("Prelude","_inst#Prelude.Read#Prelude.Char") 0 Public (TCons ("Prelude","_Dict#Read") [(TCons ("Prelude","Char") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [(Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Char") []),(Comb (FuncPartCall 1) ("Prelude","_impl#readList#Prelude.Read#Prelude.Char") [])]))),(Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Char") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1] (Comb FuncCall ("Prelude","readParen") [(Comb ConsCall ("Prelude","False") []),(Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Char._#lambda32") [])]))),(Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Char._#lambda32") 1 Private (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Char") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Char._#lambda32._#lambda35") []),(Comb ConsCall ("Prelude","[]") []),(Comb FuncCall ("Prelude","lex") [(Var 1)])]))),(Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Char._#lambda32._#lambda35") 2 Private (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Char") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Char") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1,2] (Case Rigid (Var 1) [(Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [(Case Rigid (Comb FuncCall ("Prelude","not") [(Comb FuncCall ("Prelude","null") [(Var 3)])]) [(Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Comb FuncCall ("Prelude","head") [(Var 3)]),(Lit (Charc '\''))]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Char._#lambda32._#lambda35._#lambda39") [(Var 4)]),(Comb ConsCall ("Prelude","[]") []),(Comb FuncCall ("Prelude","readCharLiteral") [(Var 3)])])),(Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") []))])),(Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") []))]),(Var 2)]))]))),(Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Char._#lambda32._#lambda35._#lambda39") 3 Private (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","Char") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Char") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Char") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])))) (Rule [1,2,3] (Case Rigid (Var 2) [(Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 5) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Var 4),(Var 1)]),(Var 3)])),(Branch (Pattern ("Prelude",":") [6,7]) (Var 3))]))]))),(Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [1] (Comb FuncCall ("Prelude","++") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","readParen") [(Comb ConsCall ("Prelude","False") []),(Comb (FuncPartCall 1) ("Prelude","_impl#readList#Prelude.Read#Prelude.Char._#lambda41") [])]),(Var 1)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","readListDefault") [(Comb FuncCall ("Prelude","_inst#Prelude.Read#Prelude.Char") [])]),(Var 1)])]))),(Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Char._#lambda41") 1 Private (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","_impl#readList#Prelude.Read#Prelude.Char._#lambda41._#lambda44") []),(Comb ConsCall ("Prelude","[]") []),(Comb FuncCall ("Prelude","lex") [(Var 1)])]))),(Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Char._#lambda41._#lambda44") 2 Private (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1,2] (Case Rigid (Var 1) [(Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [(Case Rigid (Comb FuncCall ("Prelude","not") [(Comb FuncCall ("Prelude","null") [(Var 3)])]) [(Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Comb FuncCall ("Prelude","head") [(Var 3)]),(Lit (Charc '"'))]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","_impl#readList#Prelude.Read#Prelude.Char._#lambda41._#lambda44._#lambda48") [(Var 4)]),(Comb ConsCall ("Prelude","[]") []),(Comb FuncCall ("Prelude","readStringLiteral") [(Var 3)])])),(Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") []))])),(Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") []))]),(Var 2)]))]))),(Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Char._#lambda41._#lambda44._#lambda48") 3 Private (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])))) (Rule [1,2,3] (Case Rigid (Var 2) [(Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 5) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Var 4),(Var 1)]),(Var 3)])),(Branch (Pattern ("Prelude",":") [6,7]) (Var 3))]))]))),(Func ("Prelude","_inst#Prelude.Read#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (TCons ("Prelude","_Dict#Read") [(TCons ("Prelude","[]") [(TVar 0)])])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Read") [(Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#[]") [(Var 1)]),(Comb FuncCall ("Prelude","_impl#readList#Prelude.Read#[]") [(Var 1)])]))),(Func ("Prelude","_impl#readsPrec#Prelude.Read#[]") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])))) (Rule [1,2] (Comb FuncCall ("Prelude","readList") [(Var 1)]))),(Func ("Prelude","_impl#readList#Prelude.Read#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","[]") [(TVar 0)])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [(Comb FuncCall ("Prelude","_inst#Prelude.Read#[]") [(Var 1)])]))),(Func ("Prelude","_inst#Prelude.Read#Prelude.Ordering") 0 Public (TCons ("Prelude","_Dict#Read") [(TCons ("Prelude","Ordering") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [(Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering") []),(Comb FuncCall ("Prelude","_impl#readList#Prelude.Read#Prelude.Ordering") [])]))),(Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Ordering") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1,2] (Comb FuncCall ("Prelude","++") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","readParen") [(Comb ConsCall ("Prelude","False") []),(Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda196") [])]),(Var 2)]),(Comb FuncCall ("Prelude","++") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","readParen") [(Comb ConsCall ("Prelude","False") []),(Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda201") [])]),(Var 2)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","readParen") [(Comb ConsCall ("Prelude","False") []),(Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda206") [])]),(Var 2)])])]))),(Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda196") 1 Private (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Ordering") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda196._#lambda199") []),(Comb ConsCall ("Prelude","[]") []),(Comb FuncCall ("Prelude","lex") [(Var 1)])]))),(Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda196._#lambda199") 2 Private (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Ordering") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Ordering") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1,2] (Case Rigid (Var 1) [(Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [(Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 5),(Lit (Charc 'L'))]) [(Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [(Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 7),(Lit (Charc 'T'))]) [(Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude","LT") []),(Var 4)]),(Var 2)])),(Branch (Pattern ("Prelude",":") [9,10]) (Var 2))])),(Branch (Pattern ("Prelude","False") []) (Var 2))])),(Branch (Pattern ("Prelude","[]") []) (Var 2))])),(Branch (Pattern ("Prelude","False") []) (Var 2))])),(Branch (Pattern ("Prelude","[]") []) (Var 2))]))]))),(Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda201") 1 Private (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Ordering") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda201._#lambda204") []),(Comb ConsCall ("Prelude","[]") []),(Comb FuncCall ("Prelude","lex") [(Var 1)])]))),(Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda201._#lambda204") 2 Private (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Ordering") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Ordering") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1,2] (Case Rigid (Var 1) [(Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [(Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 5),(Lit (Charc 'E'))]) [(Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [(Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 7),(Lit (Charc 'Q'))]) [(Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude","EQ") []),(Var 4)]),(Var 2)])),(Branch (Pattern ("Prelude",":") [9,10]) (Var 2))])),(Branch (Pattern ("Prelude","False") []) (Var 2))])),(Branch (Pattern ("Prelude","[]") []) (Var 2))])),(Branch (Pattern ("Prelude","False") []) (Var 2))])),(Branch (Pattern ("Prelude","[]") []) (Var 2))]))]))),(Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda206") 1 Private (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Ordering") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda206._#lambda209") []),(Comb ConsCall ("Prelude","[]") []),(Comb FuncCall ("Prelude","lex") [(Var 1)])]))),(Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda206._#lambda209") 2 Private (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Ordering") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Ordering") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1,2] (Case Rigid (Var 1) [(Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [(Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 5),(Lit (Charc 'G'))]) [(Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [(Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 7),(Lit (Charc 'T'))]) [(Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude","GT") []),(Var 4)]),(Var 2)])),(Branch (Pattern ("Prelude",":") [9,10]) (Var 2))])),(Branch (Pattern ("Prelude","False") []) (Var 2))])),(Branch (Pattern ("Prelude","[]") []) (Var 2))])),(Branch (Pattern ("Prelude","False") []) (Var 2))])),(Branch (Pattern ("Prelude","[]") []) (Var 2))]))]))),(Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Ordering") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [(Comb FuncCall ("Prelude","_inst#Prelude.Read#Prelude.Ordering") [])]))),(Func ("Prelude","readListDefault") 1 Private (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1] (Comb FuncCall ("Prelude","readParen") [(Comb ConsCall ("Prelude","False") []),(Comb (FuncPartCall 1) ("Prelude","readListDefault._#lambda326") [(Var 1)])]))),(Func ("Prelude","readListDefault.readl'.452") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1,2] (Comb FuncCall ("Prelude","++") [(Comb FuncCall ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","readListDefault.readl'.452._#lambda312") []),(Comb ConsCall ("Prelude","[]") []),(Comb FuncCall ("Prelude","lex") [(Var 2)])]),(Comb FuncCall ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","readListDefault.readl'.452._#lambda316") [(Var 1)]),(Comb ConsCall ("Prelude","[]") []),(Comb FuncCall ("Prelude","lex") [(Var 2)])])]))),(Func ("Prelude","readListDefault.readl'.452._#lambda312") 2 Private (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1,2] (Case Rigid (Var 1) [(Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [(Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 5),(Lit (Charc ']'))]) [(Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude","[]") []),(Var 4)]),(Var 2)])),(Branch (Pattern ("Prelude",":") [7,8]) (Var 2))])),(Branch (Pattern ("Prelude","False") []) (Var 2))])),(Branch (Pattern ("Prelude","[]") []) (Var 2))]))]))),(Func ("Prelude","readListDefault.readl'.452._#lambda316") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])))) (Rule [1,2,3] (Case Rigid (Var 2) [(Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [(Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 6),(Lit (Charc ','))]) [(Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [(Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [(Comb FuncCall ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","readListDefault.readl'.452._#lambda316._#lambda320") [(Var 1)]),(Comb ConsCall ("Prelude","[]") []),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","reads") [(Var 1)]),(Var 5)])]),(Var 3)])),(Branch (Pattern ("Prelude",":") [8,9]) (Var 3))])),(Branch (Pattern ("Prelude","False") []) (Var 3))])),(Branch (Pattern ("Prelude","[]") []) (Var 3))]))]))),(Func ("Prelude","readListDefault.readl'.452._#lambda316._#lambda320") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])))) (Rule [1,2,3] (Case Rigid (Var 2) [(Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [(Comb FuncCall ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","readListDefault.readl'.452._#lambda316._#lambda320._#lambda324") [(Var 4)]),(Comb ConsCall ("Prelude","[]") []),(Comb FuncCall ("Prelude","readListDefault.readl'.452") [(Var 1),(Var 5)])]),(Var 3)]))]))),(Func ("Prelude","readListDefault.readl'.452._#lambda316._#lambda320._#lambda324") 3 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])))) (Rule [1,2,3] (Case Rigid (Var 2) [(Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude",":") [(Var 1),(Var 4)]),(Var 5)]),(Var 3)]))]))),(Func ("Prelude","readListDefault.readl.452") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1,2] (Comb FuncCall ("Prelude","++") [(Comb FuncCall ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","readListDefault.readl.452._#lambda300") []),(Comb ConsCall ("Prelude","[]") []),(Comb FuncCall ("Prelude","lex") [(Var 2)])]),(Comb FuncCall ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","readListDefault.readl.452._#lambda304") [(Var 1)]),(Comb ConsCall ("Prelude","[]") []),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","reads") [(Var 1)]),(Var 2)])])]))),(Func ("Prelude","readListDefault.readl.452._#lambda300") 2 Private (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1,2] (Case Rigid (Var 1) [(Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [(Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 5),(Lit (Charc ']'))]) [(Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude","[]") []),(Var 4)]),(Var 2)])),(Branch (Pattern ("Prelude",":") [7,8]) (Var 2))])),(Branch (Pattern ("Prelude","False") []) (Var 2))])),(Branch (Pattern ("Prelude","[]") []) (Var 2))]))]))),(Func ("Prelude","readListDefault.readl.452._#lambda304") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])))) (Rule [1,2,3] (Case Rigid (Var 2) [(Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [(Comb FuncCall ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","readListDefault.readl.452._#lambda304._#lambda308") [(Var 4)]),(Comb ConsCall ("Prelude","[]") []),(Comb FuncCall ("Prelude","readListDefault.readl'.452") [(Var 1),(Var 5)])]),(Var 3)]))]))),(Func ("Prelude","readListDefault.readl.452._#lambda304._#lambda308") 3 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])))) (Rule [1,2,3] (Case Rigid (Var 2) [(Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude",":") [(Var 1),(Var 4)]),(Var 5)]),(Var 3)]))]))),(Func ("Prelude","readListDefault._#lambda326") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","readListDefault._#lambda326._#lambda329") [(Var 1)]),(Comb ConsCall ("Prelude","[]") []),(Comb FuncCall ("Prelude","lex") [(Var 2)])]))),(Func ("Prelude","readListDefault._#lambda326._#lambda329") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])))) (Rule [1,2,3] (Case Rigid (Var 2) [(Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [(Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 6),(Lit (Charc '['))]) [(Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [(Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [(Comb FuncCall ("Prelude","map") [(Comb (FuncPartCall 1) ("Prelude","readListDefault._#lambda326._#lambda329._#lambda331") []),(Comb FuncCall ("Prelude","readListDefault.readl.452") [(Var 1),(Var 5)])]),(Var 3)])),(Branch (Pattern ("Prelude",":") [8,9]) (Var 3))])),(Branch (Pattern ("Prelude","False") []) (Var 3))])),(Branch (Pattern ("Prelude","[]") []) (Var 3))]))]))),(Func ("Prelude","readListDefault._#lambda326._#lambda329._#lambda331") 1 Private (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) (Rule [1] (Var 1))),(Func ("Prelude","reads") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1] (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","readsPrec") [(Var 1)]),(Lit (Intc 0))]))),(Func ("Prelude","readParen") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])))) (Rule [1,2] (Case Rigid (Var 1) [(Branch (Pattern ("Prelude","True") []) (Comb (FuncPartCall 1) ("Prelude","readParen.mandatory.470") [(Var 2)])),(Branch (Pattern ("Prelude","False") []) (Comb (FuncPartCall 1) ("Prelude","readParen.optional.470") [(Var 2)]))]))),(Func ("Prelude","readParen.optional.470") 2 Private (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1,2] (Comb FuncCall ("Prelude","++") [(Comb FuncCall ("Prelude","apply") [(Var 1),(Var 2)]),(Comb FuncCall ("Prelude","readParen.mandatory.470") [(Var 1),(Var 2)])]))),(Func ("Prelude","readParen.mandatory.470") 2 Private (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","readParen.mandatory.470._#lambda334") [(Var 1)]),(Comb ConsCall ("Prelude","[]") []),(Comb FuncCall ("Prelude","lex") [(Var 2)])]))),(Func ("Prelude","readParen.mandatory.470._#lambda334") 3 Private (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])))) (Rule [1,2,3] (Case Rigid (Var 2) [(Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [(Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 6),(Lit (Charc '('))]) [(Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [(Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [(Comb FuncCall ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","readParen.mandatory.470._#lambda334._#lambda338") []),(Comb ConsCall ("Prelude","[]") []),(Comb FuncCall ("Prelude","readParen.optional.470") [(Var 1),(Var 5)])]),(Var 3)])),(Branch (Pattern ("Prelude",":") [8,9]) (Var 3))])),(Branch (Pattern ("Prelude","False") []) (Var 3))])),(Branch (Pattern ("Prelude","[]") []) (Var 3))]))]))),(Func ("Prelude","readParen.mandatory.470._#lambda334._#lambda338") 2 Private (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1,2] (Case Rigid (Var 1) [(Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [(Comb FuncCall ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","readParen.mandatory.470._#lambda334._#lambda338._#lambda342") [(Var 3)]),(Comb ConsCall ("Prelude","[]") []),(Comb FuncCall ("Prelude","lex") [(Var 4)])]),(Var 2)]))]))),(Func ("Prelude","readParen.mandatory.470._#lambda334._#lambda338._#lambda342") 3 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])))) (Rule [1,2,3] (Case Rigid (Var 2) [(Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [(Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 6),(Lit (Charc ')'))]) [(Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Var 1),(Var 5)]),(Var 3)])),(Branch (Pattern ("Prelude",":") [8,9]) (Var 3))])),(Branch (Pattern ("Prelude","False") []) (Var 3))])),(Branch (Pattern ("Prelude","[]") []) (Var 3))]))]))),(Func ("Prelude","read") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TVar 0))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","read._#lambda346") []),(Comb ConsCall ("Prelude","[]") []),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","reads") [(Var 1)]),(Var 2)])]) [(Branch (Pattern ("Prelude",":") [3,4]) (Case Rigid (Var 4) [(Branch (Pattern ("Prelude","[]") []) (Var 3)),(Branch (Pattern ("Prelude",":") [5,6]) (Comb FuncCall ("Prelude","error") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'P')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '.')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ':')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'b')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'g')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'p')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])]))])),(Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","error") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'P')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '.')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ':')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'p')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])])])])])])])])])])])])])]))]))),(Func ("Prelude","read._#lambda346") 2 Private (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)]))) (Rule [1,2] (Case Rigid (Var 1) [(Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [(Comb FuncCall ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","read._#lambda346._#lambda350") [(Var 3)]),(Comb ConsCall ("Prelude","[]") []),(Comb FuncCall ("Prelude","lex") [(Var 4)])]),(Var 2)]))]))),(Func ("Prelude","read._#lambda346._#lambda350") 3 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)])))) (Rule [1,2,3] (Case Rigid (Var 2) [(Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [(Branch (Pattern ("Prelude","[]") []) (Case Rigid (Var 5) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [(Var 1),(Var 3)])),(Branch (Pattern ("Prelude",":") [6,7]) (Var 3))])),(Branch (Pattern ("Prelude",":") [8,9]) (Var 3))]))]))),(Func ("Prelude","readSigned") 2 Private (FuncType (TCons ("Prelude","_Dict#Real") [(TVar 0)]) (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])))) (Rule [1,2] (Comb FuncCall ("Prelude","readParen") [(Comb ConsCall ("Prelude","False") []),(Comb (FuncPartCall 1) ("Prelude","readSigned.read'.490") [(Var 1),(Var 2)])]))),(Func ("Prelude","readSigned.read''.490") 2 Private (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","readSigned.read''.490._#lambda363") [(Var 1)]),(Comb ConsCall ("Prelude","[]") []),(Comb FuncCall ("Prelude","lex") [(Var 2)])]))),(Func ("Prelude","readSigned.read''.490._#lambda363") 3 Private (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])))) (Rule [1,2,3] (Case Rigid (Var 2) [(Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [(Comb FuncCall ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","readSigned.read''.490._#lambda363._#lambda367") [(Var 5)]),(Comb ConsCall ("Prelude","[]") []),(Comb FuncCall ("Prelude","apply") [(Var 1),(Var 4)])]),(Var 3)]))]))),(Func ("Prelude","readSigned.read''.490._#lambda363._#lambda367") 3 Private (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])))) (Rule [1,2,3] (Case Rigid (Var 2) [(Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 5) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Var 4),(Var 1)]),(Var 3)])),(Branch (Pattern ("Prelude",":") [6,7]) (Var 3))]))]))),(Func ("Prelude","readSigned.read'.490") 3 Private (FuncType (TCons ("Prelude","_Dict#Real") [(TVar 0)]) (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","++") [(Comb FuncCall ("Prelude","readSigned.read''.490") [(Var 2),(Var 3)]),(Comb FuncCall ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","readSigned.read'.490._#lambda355") [(Var 1),(Var 2)]),(Comb ConsCall ("Prelude","[]") []),(Comb FuncCall ("Prelude","lex") [(Var 3)])])]))),(Func ("Prelude","readSigned.read'.490._#lambda355") 4 Private (FuncType (TCons ("Prelude","_Dict#Real") [(TVar 0)]) (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [(Branch (Pattern ("Prelude","(,)") [5,6]) (Case Rigid (Var 5) [(Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 7),(Lit (Charc '-'))]) [(Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [(Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [(Comb FuncCall ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","readSigned.read'.490._#lambda355._#lambda359") [(Var 1)]),(Comb ConsCall ("Prelude","[]") []),(Comb FuncCall ("Prelude","readSigned.read''.490") [(Var 2),(Var 6)])]),(Var 4)])),(Branch (Pattern ("Prelude",":") [9,10]) (Var 4))])),(Branch (Pattern ("Prelude","False") []) (Var 4))])),(Branch (Pattern ("Prelude","[]") []) (Var 4))]))]))),(Func ("Prelude","readSigned.read'.490._#lambda355._#lambda359") 3 Private (FuncType (TCons ("Prelude","_Dict#Real") [(TVar 0)]) (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])))) (Rule [1,2,3] (Case Rigid (Var 2) [(Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","negate") [(Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [(Var 1)])]),(Var 4)]),(Var 5)]),(Var 3)]))]))),(Func ("Prelude","readsPrec") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Read") [2,3]) (Var 2))]))),(Func ("Prelude","readList") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Read") [2,3]) (Var 3))]))),(Func ("Prelude","_inst#Prelude.Read#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 1)]) (TCons ("Prelude","_Dict#Read") [(TCons ("Prelude","Either") [(TVar 0),(TVar 1)])]))) (Rule [1,2] (Comb ConsCall ("Prelude","_Dict#Read") [(Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either") [(Var 1),(Var 2)]),(Comb FuncCall ("Prelude","_impl#readList#Prelude.Read#Prelude.Either") [(Var 1),(Var 2)])]))),(Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either") 4 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 1)]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Either") [(TVar 0),(TVar 1)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","++") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","readParen") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") []),(Lit (Intc 10))]),(Var 3)]),(Comb (FuncPartCall 1) ("Prelude","readLeft") [(Var 1)])]),(Var 4)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","readParen") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") []),(Lit (Intc 10))]),(Var 3)]),(Comb (FuncPartCall 1) ("Prelude","readRight") [(Var 2)])]),(Var 4)])]))),(Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 1)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Either") [(TVar 0),(TVar 1)])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])))) (Rule [1,2] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [(Comb FuncCall ("Prelude","_inst#Prelude.Read#Prelude.Either") [(Var 1),(Var 2)])]))),(Func ("Prelude","_inst#Prelude.Read#Prelude.Bool") 0 Public (TCons ("Prelude","_Dict#Read") [(TCons ("Prelude","Bool") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [(Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Bool") []),(Comb FuncCall ("Prelude","_impl#readList#Prelude.Read#Prelude.Bool") [])]))),(Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Bool") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Bool") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1,2] (Comb FuncCall ("Prelude","++") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","readParen") [(Comb ConsCall ("Prelude","False") []),(Comb (FuncPartCall 1) ("Prelude","readTrue") [])]),(Var 2)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","readParen") [(Comb ConsCall ("Prelude","False") []),(Comb (FuncPartCall 1) ("Prelude","readFalse") [])]),(Var 2)])]))),(Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Bool") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [(Comb FuncCall ("Prelude","_inst#Prelude.Read#Prelude.Bool") [])]))),(Func ("Prelude","_inst#Prelude.Read#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (TCons ("Prelude","_Dict#Read") [(TCons ("Prelude","Maybe") [(TVar 0)])])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Read") [(Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe") [(Var 1)]),(Comb FuncCall ("Prelude","_impl#readList#Prelude.Read#Prelude.Maybe") [(Var 1)])]))),(Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Maybe") [(TVar 0)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","++") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","readParen") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") []),(Lit (Intc 10))]),(Var 2)]),(Comb (FuncPartCall 1) ("Prelude","readNothing") [])]),(Var 3)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","readParen") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") []),(Lit (Intc 10))]),(Var 2)]),(Comb (FuncPartCall 1) ("Prelude","readJust") [(Var 1)])]),(Var 3)])]))),(Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Maybe") [(TVar 0)])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [(Comb FuncCall ("Prelude","_inst#Prelude.Read#Prelude.Maybe") [(Var 1)])]))),(Func ("Prelude","readStringLiteral") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [1] (Case Rigid (Var 1) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])),(Branch (Pattern ("Prelude",":") [2,3]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 2),(Lit (Charc '"'))]) [(Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("Prelude","span") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char") []),(Lit (Charc '"'))]),(Var 3)]) [(Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude",":") [(Lit (Charc '"')),(Comb FuncCall ("Prelude","++") [(Var 4),(Comb ConsCall ("Prelude",":") [(Lit (Charc '"')),(Comb ConsCall ("Prelude","[]") [])])])]),(Comb FuncCall ("Prelude","tail") [(Var 5)])]),(Comb ConsCall ("Prelude","[]") [])]))])),(Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude","[]") []),(Var 1)]),(Comb ConsCall ("Prelude","[]") [])]))]))]))),(Func ("Prelude","readNatLiteral") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Int") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])),(Branch (Pattern ("Prelude",":") [2,3]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 2),(Lit (Charc '-'))]) [(Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 3) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])),(Branch (Pattern ("Prelude",":") [4,5]) (Let [(6,(Comb FuncCall ("Prelude","ord") [(Var 4)]))] (Case Rigid (Comb FuncCall ("Prelude","&&") [(Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") [(Lit (Intc 48)),(Var 6)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") []),(Var 6)]),(Lit (Intc 58))])]) [(Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("Prelude","readNat") [(Var 3),(Lit (Intc 0))]) [(Branch (Pattern ("Prelude","(,)") [7,8]) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Comb FuncCall ("Prelude","_impl#negate#Prelude.Num#Prelude.Int") [(Var 7)]),(Var 8)]),(Comb ConsCall ("Prelude","[]") [])]))])),(Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") []))])))])),(Branch (Pattern ("Prelude","False") []) (Let [(9,(Comb FuncCall ("Prelude","ord") [(Var 2)]))] (Case Rigid (Comb FuncCall ("Prelude","&&") [(Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") [(Lit (Intc 48)),(Var 9)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") []),(Var 9)]),(Lit (Intc 58))])]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","readNat") [(Var 1),(Lit (Intc 0))]),(Comb ConsCall ("Prelude","[]") [])])),(Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") []))])))]))]))),(Func ("Prelude","readNat") 2 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [(TCons ("Prelude","Int") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]))) (Rule [1,2] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [(Var 2),(Comb ConsCall ("Prelude","[]") [])])),(Branch (Pattern ("Prelude",":") [3,4]) (Let [(5,(Comb FuncCall ("Prelude","ord") [(Var 3)]))] (Case Rigid (Comb FuncCall ("Prelude","&&") [(Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") [(Lit (Intc 48)),(Var 5)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") []),(Var 5)]),(Lit (Intc 58))])]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","readNat") [(Var 4),(Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [(Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [(Comb FuncCall ("Prelude","_impl#*#Prelude.Num#Prelude.Int") [(Var 2),(Lit (Intc 10))]),(Var 5)]),(Lit (Intc 48))])])),(Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","(,)") [(Var 2),(Comb ConsCall ("Prelude",":") [(Var 3),(Var 4)])]))])))]))),(Func ("Prelude","readCharLiteral") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Char") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])),(Branch (Pattern ("Prelude",":") [2,3]) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Var 2),(Var 3)]),(Comb ConsCall ("Prelude","[]") [])]))]))),(Func ("Prelude","readFloatLiteral") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Float") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])),(Branch (Pattern ("Prelude",":") [2,3]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 2),(Lit (Charc '-'))]) [(Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("Prelude","readPosFloat") [(Var 3)]) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])),(Branch (Pattern ("Prelude",":") [4,5]) (Case Rigid (Var 4) [(Branch (Pattern ("Prelude","(,)") [6,7]) (Case Rigid (Var 5) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Comb FuncCall ("Prelude","_impl#negate#Prelude.Num#Prelude.Float") [(Var 6)]),(Var 7)]),(Comb ConsCall ("Prelude","[]") [])])),(Branch (Pattern ("Prelude",":") [8,9]) (Comb ConsCall ("Prelude","[]") []))]))]))])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","readPosFloat") [(Var 1)]))]))]))),(Func ("Prelude","readPosFloat") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Float") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])),(Branch (Pattern ("Prelude",":") [2,3]) (Case Rigid (Comb FuncCall ("Prelude","readNatLiteral") [(Var 1)]) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])),(Branch (Pattern ("Prelude",":") [4,5]) (Case Rigid (Var 4) [(Branch (Pattern ("Prelude","(,)") [6,7]) (Case Rigid (Var 5) [(Branch (Pattern ("Prelude","[]") []) (Case Rigid (Comb FuncCall ("Prelude","readDotNat") [(Var 7)]) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])),(Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Var 8) [(Branch (Pattern ("Prelude","(,)") [10,11]) (Case Rigid (Var 9) [(Branch (Pattern ("Prelude","[]") []) (Case Rigid (Comb FuncCall ("Prelude","readENat") [(Var 11)]) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])),(Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Var 12) [(Branch (Pattern ("Prelude","(,)") [14,15]) (Case Rigid (Var 13) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Comb FuncCall ("Prelude","_impl#*#Prelude.Num#Prelude.Float") [(Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Float") [(Comb FuncCall ("Prelude","_impl#fromInt#Prelude.Num#Prelude.Float") [(Var 6)]),(Var 10)]),(Comb FuncCall ("Prelude","pow") [(Lit (Floatc 10.0)),(Var 14)])]),(Var 15)]),(Comb ConsCall ("Prelude","[]") [])])),(Branch (Pattern ("Prelude",":") [16,17]) (Comb ConsCall ("Prelude","[]") []))]))]))])),(Branch (Pattern ("Prelude",":") [18,19]) (Comb ConsCall ("Prelude","[]") []))]))]))])),(Branch (Pattern ("Prelude",":") [20,21]) (Comb ConsCall ("Prelude","[]") []))]))]))]))]))),(Func ("Prelude","readDotNat") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Float") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Lit (Floatc 0.0)),(Comb ConsCall ("Prelude","[]") [])]),(Comb ConsCall ("Prelude","[]") [])])),(Branch (Pattern ("Prelude",":") [2,3]) (Case Flex (Var 3) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Lit (Floatc 0.0)),(Comb ConsCall ("Prelude",":") [(Var 2),(Comb ConsCall ("Prelude","[]") [])])]),(Comb ConsCall ("Prelude","[]") [])])),(Branch (Pattern ("Prelude",":") [4,5]) (Case Rigid (Comb FuncCall ("Prelude","&&") [(Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 2),(Lit (Charc '.'))]),(Comb FuncCall ("Prelude","&&") [(Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") [(Lit (Intc 48)),(Comb FuncCall ("Prelude","ord") [(Var 4)])]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") []),(Comb FuncCall ("Prelude","ord") [(Var 4)])]),(Lit (Intc 58))])])]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","readDotNat1") [(Var 3)]),(Comb ConsCall ("Prelude","[]") [])])),(Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Lit (Floatc 0.0)),(Var 1)]),(Comb ConsCall ("Prelude","[]") [])]))]))]))]))),(Func ("Prelude","readDotNat1") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","(,)") [(TCons ("Prelude","Float") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [(Lit (Floatc 0.0)),(Comb ConsCall ("Prelude","[]") [])])),(Branch (Pattern ("Prelude",":") [2,3]) (Let [(4,(Comb FuncCall ("Prelude","ord") [(Var 2)]))] (Case Rigid (Comb FuncCall ("Prelude","&&") [(Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") [(Lit (Intc 48)),(Var 4)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") []),(Var 4)]),(Lit (Intc 58))])]) [(Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("Prelude","readDotNat1") [(Var 3)]) [(Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude","(,)") [(Comb FuncCall ("Prelude","_impl#/#Prelude.Fractional#Prelude.Float") [(Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Float") [(Comb FuncCall ("Prelude","_impl#fromInt#Prelude.Num#Prelude.Float") [(Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [(Var 4),(Lit (Intc 48))])]),(Var 5)]),(Lit (Floatc 10.0))]),(Var 6)]))])),(Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","(,)") [(Lit (Floatc 0.0)),(Comb ConsCall ("Prelude",":") [(Var 2),(Var 3)])]))])))]))),(Func ("Prelude","readENat") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Int") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Lit (Intc 0)),(Comb ConsCall ("Prelude","[]") [])]),(Comb ConsCall ("Prelude","[]") [])])),(Branch (Pattern ("Prelude",":") [2,3]) (Case Rigid (Comb FuncCall ("Prelude","||") [(Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 2),(Lit (Charc 'e'))]),(Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 2),(Lit (Charc 'E'))])]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","readNatLiteral") [(Var 3)])),(Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Lit (Intc 0)),(Comb ConsCall ("Prelude",":") [(Var 2),(Var 3)])]),(Comb ConsCall ("Prelude","[]") [])]))]))]))),(Func ("Prelude","readLeft") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Either") [(TVar 0),(TVar 1)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") []),(Comb FuncCall ("Prelude","take") [(Lit (Intc 4)),(Var 2)]),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'L')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude","[]") [])])])])])]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [(Comb (FuncPartCall 1) ("Prelude","makeLeft") []),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","reads") [(Var 1)]),(Comb FuncCall ("Prelude","drop") [(Lit (Intc 4)),(Var 2)])])])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") [])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))),(Func ("Prelude","makeLeft") 1 Public (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","(,)") [(TCons ("Prelude","Either") [(TVar 0),(TVar 1)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","(,)") [2,3]) (Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude","Left") [(Var 2)]),(Var 3)]))]))),(Func ("Prelude","readRight") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Either") [(TVar 1),(TVar 0)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") []),(Comb FuncCall ("Prelude","take") [(Lit (Intc 5)),(Var 2)]),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'R')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'g')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'h')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude","[]") [])])])])])])]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [(Comb (FuncPartCall 1) ("Prelude","makeRight") []),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","reads") [(Var 1)]),(Comb FuncCall ("Prelude","drop") [(Lit (Intc 5)),(Var 2)])])])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") [])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))),(Func ("Prelude","makeRight") 1 Public (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","(,)") [(TCons ("Prelude","Either") [(TVar 1),(TVar 0)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","(,)") [2,3]) (Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude","Right") [(Var 2)]),(Var 3)]))]))),(Func ("Prelude","readTrue") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Bool") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") []),(Comb FuncCall ("Prelude","take") [(Lit (Intc 4)),(Var 1)]),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'T')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude","[]") [])])])])])]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude","True") []),(Comb FuncCall ("Prelude","drop") [(Lit (Intc 4)),(Var 1)])]),(Comb ConsCall ("Prelude","[]") [])])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") [])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))),(Func ("Prelude","readFalse") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Bool") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") []),(Comb FuncCall ("Prelude","take") [(Lit (Intc 5)),(Var 1)]),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'F')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude","[]") [])])])])])])]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude","False") []),(Comb FuncCall ("Prelude","drop") [(Lit (Intc 5)),(Var 1)])]),(Comb ConsCall ("Prelude","[]") [])])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") [])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))),(Func ("Prelude","readNothing") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Maybe") [(TVar 0)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") []),(Comb FuncCall ("Prelude","take") [(Lit (Intc 7)),(Var 1)]),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'N')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'h')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'g')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude","Nothing") []),(Comb FuncCall ("Prelude","drop") [(Lit (Intc 7)),(Var 1)])]),(Comb ConsCall ("Prelude","[]") [])])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") [])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))),(Func ("Prelude","readJust") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Maybe") [(TVar 0)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") []),(Comb FuncCall ("Prelude","take") [(Lit (Intc 4)),(Var 2)]),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'J')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude","[]") [])])])])])]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [(Comb (FuncPartCall 1) ("Prelude","makeJust") []),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","reads") [(Var 1)]),(Comb FuncCall ("Prelude","drop") [(Lit (Intc 4)),(Var 2)])])])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") [])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))),(Func ("Prelude","makeJust") 1 Public (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","(,)") [(TCons ("Prelude","Maybe") [(TVar 0)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","(,)") [2,3]) (Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude","Just") [(Var 2)]),(Var 3)]))])))] [])