(Prog "PreludeString" ["PreludeBase","PreludeCompare","PreludeNum","PreludeList"] [] [(Func ("Prelude","_def#show#Prelude.Show") 2 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TVar 0) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","shows") [(Var 1)]),(Var 2)]),(Comb ConsCall ("Prelude","[]") [])]))),(Func ("Prelude","_def#showsPrec#Prelude.Show") 4 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","++") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","show") [(Var 1)]),(Var 3)]),(Var 4)]))),(Func ("Prelude","_def#showList#Prelude.Show") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","showList'") [(Comb FuncCall ("Prelude","shows") [(Var 1)]),(Var 2),(Var 3)]))),(Func ("Prelude","_inst#Prelude.Show#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (TCons ("Prelude","_Dict#Show") [(TCons ("Prelude","[]") [(TVar 0)])])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Show") [(Comb FuncCall ("Prelude","_impl#show#Prelude.Show#[]") [(Var 1)]),(Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#[]") [(Var 1)]),(Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#[]") [(Var 1)])]))),(Func ("Prelude","_impl#show#Prelude.Show#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))) (Rule [1] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [(Comb FuncCall ("Prelude","_inst#Prelude.Show#[]") [(Var 1)])]))),(Func ("Prelude","_impl#showsPrec#Prelude.Show#[]") 2 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))))) (Rule [1,2] (Comb FuncCall ("Prelude","showList") [(Var 1)]))),(Func ("Prelude","_impl#showList#Prelude.Show#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","[]") [(TVar 0)])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [(Comb FuncCall ("Prelude","_inst#Prelude.Show#[]") [(Var 1)])]))),(Func ("Prelude","_inst#Prelude.Show#Prelude.Char") 0 Public (TCons ("Prelude","_Dict#Show") [(TCons ("Prelude","Char") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [(Comb FuncCall ("Prelude","_impl#show#Prelude.Show#Prelude.Char") []),(Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Char") []),(Comb (FuncPartCall 1) ("Prelude","_impl#showList#Prelude.Show#Prelude.Char") [])]))),(Func ("Prelude","_impl#show#Prelude.Show#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [(Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Char") [])]))),(Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Char") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])))) (Rule [1,2] (Comb (FuncPartCall 1) ("Prelude","showString") [(Comb FuncCall ("Prelude","show_") [(Var 2)])]))),(Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","null") [(Var 1)]) [(Branch (Pattern ("Prelude","True") []) (Comb (FuncPartCall 1) ("Prelude","showString") [(Comb ConsCall ("Prelude",":") [(Lit (Charc '"')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '"')),(Comb ConsCall ("Prelude","[]") [])])])])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Comb (FuncPartCall 1) ("Prelude","showString") [(Comb FuncCall ("Prelude","show_") [(Var 1)])])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))),(Func ("Prelude","_inst#Prelude.Show#Prelude.Int") 0 Public (TCons ("Prelude","_Dict#Show") [(TCons ("Prelude","Int") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [(Comb FuncCall ("Prelude","_impl#show#Prelude.Show#Prelude.Int") []),(Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Int") []),(Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Int") [])]))),(Func ("Prelude","_impl#show#Prelude.Show#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [(Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Int") [])]))),(Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","showSigned") [(Comb FuncCall ("Prelude","_inst#Prelude.Real#Prelude.Int") []),(Comb FuncCall ("Prelude",".") [(Comb (FuncPartCall 2) ("Prelude","showString") []),(Comb (FuncPartCall 1) ("Prelude","show_") [])])]))),(Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [(Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Int") [])]))),(Func ("Prelude","_inst#Prelude.Show#Prelude.Float") 0 Public (TCons ("Prelude","_Dict#Show") [(TCons ("Prelude","Float") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [(Comb FuncCall ("Prelude","_impl#show#Prelude.Show#Prelude.Float") []),(Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Float") []),(Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Float") [])]))),(Func ("Prelude","_impl#show#Prelude.Show#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [(Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Float") [])]))),(Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","showSigned") [(Comb FuncCall ("Prelude","_inst#Prelude.Real#Prelude.Float") []),(Comb FuncCall ("Prelude",".") [(Comb (FuncPartCall 2) ("Prelude","showString") []),(Comb (FuncPartCall 1) ("Prelude","show_") [])])]))),(Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Float") [])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [(Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Float") [])]))),(Func ("Prelude","_inst#Prelude.Show#Prelude.Bool") 0 Public (TCons ("Prelude","_Dict#Show") [(TCons ("Prelude","Bool") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [(Comb FuncCall ("Prelude","_impl#show#Prelude.Show#Prelude.Bool") []),(Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Bool") []),(Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Bool") [])]))),(Func ("Prelude","_impl#show#Prelude.Show#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [(Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Bool") [])]))),(Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Bool") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])))) (Rule [1,2] (Case Flex (Var 2) [(Branch (Pattern ("Prelude","False") []) (Comb (FuncPartCall 1) ("Prelude","showString") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'F')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude","[]") [])])])])])])])),(Branch (Pattern ("Prelude","True") []) (Comb (FuncPartCall 1) ("Prelude","showString") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'T')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude","[]") [])])])])])]))]))),(Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Bool") [])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [(Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Bool") [])]))),(Func ("Prelude","_inst#Prelude.Show#Prelude.Ordering") 0 Public (TCons ("Prelude","_Dict#Show") [(TCons ("Prelude","Ordering") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [(Comb FuncCall ("Prelude","_impl#show#Prelude.Show#Prelude.Ordering") []),(Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Ordering") []),(Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Ordering") [])]))),(Func ("Prelude","_impl#show#Prelude.Show#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [(Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Ordering") [])]))),(Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Ordering") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])))) (Rule [1,2] (Case Flex (Var 2) [(Branch (Pattern ("Prelude","LT") []) (Comb (FuncPartCall 1) ("Prelude","showString") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'L')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'T')),(Comb ConsCall ("Prelude","[]") [])])])])),(Branch (Pattern ("Prelude","EQ") []) (Comb (FuncPartCall 1) ("Prelude","showString") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'E')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'Q')),(Comb ConsCall ("Prelude","[]") [])])])])),(Branch (Pattern ("Prelude","GT") []) (Comb (FuncPartCall 1) ("Prelude","showString") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'G')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'T')),(Comb ConsCall ("Prelude","[]") [])])])]))]))),(Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Ordering") [])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [(Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Ordering") [])]))),(Func ("Prelude","_inst#Prelude.Show#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (TCons ("Prelude","_Dict#Show") [(TCons ("Prelude","Maybe") [(TVar 0)])])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Show") [(Comb FuncCall ("Prelude","_impl#show#Prelude.Show#Prelude.Maybe") [(Var 1)]),(Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Maybe") [(Var 1)]),(Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Maybe") [(Var 1)])]))),(Func ("Prelude","_impl#show#Prelude.Show#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","Maybe") [(TVar 0)]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))) (Rule [1] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [(Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Maybe") [(Var 1)])]))),(Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Maybe") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Maybe") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))))) (Rule [1,2,3] (Case Flex (Var 3) [(Branch (Pattern ("Prelude","Nothing") []) (Comb (FuncPartCall 1) ("Prelude","showString") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'N')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'h')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'g')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])),(Branch (Pattern ("Prelude","Just") [4]) (Comb FuncCall ("Prelude","showParen") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") []),(Lit (Intc 10))]),(Var 2)]),(Comb FuncCall ("Prelude",".") [(Comb (FuncPartCall 1) ("Prelude","showString") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'J')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude","[]") [])])])])])])]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","showsPrec") [(Var 1)]),(Lit (Intc 11))]),(Var 4)])])]))]))),(Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Maybe") [(TVar 0)])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [(Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Maybe") [(Var 1)])]))),(Func ("Prelude","_inst#Prelude.Show#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 1)]) (TCons ("Prelude","_Dict#Show") [(TCons ("Prelude","Either") [(TVar 0),(TVar 1)])]))) (Rule [1,2] (Comb ConsCall ("Prelude","_Dict#Show") [(Comb FuncCall ("Prelude","_impl#show#Prelude.Show#Prelude.Either") [(Var 1),(Var 2)]),(Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Either") [(Var 1),(Var 2)]),(Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Either") [(Var 1),(Var 2)])]))),(Func ("Prelude","_impl#show#Prelude.Show#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 1)]) (FuncType (TCons ("Prelude","Either") [(TVar 0),(TVar 1)]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])))) (Rule [1,2] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [(Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Either") [(Var 1),(Var 2)])]))),(Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Either") 4 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 1)]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Either") [(TVar 0),(TVar 1)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])))))) (Rule [1,2,3,4] (Case Flex (Var 4) [(Branch (Pattern ("Prelude","Left") [5]) (Comb FuncCall ("Prelude","showParen") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") []),(Lit (Intc 10))]),(Var 3)]),(Comb FuncCall ("Prelude",".") [(Comb (FuncPartCall 1) ("Prelude","showString") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'L')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude","[]") [])])])])])])]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","showsPrec") [(Var 1)]),(Lit (Intc 11))]),(Var 5)])])])),(Branch (Pattern ("Prelude","Right") [6]) (Comb FuncCall ("Prelude","showParen") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") []),(Lit (Intc 10))]),(Var 3)]),(Comb FuncCall ("Prelude",".") [(Comb (FuncPartCall 1) ("Prelude","showString") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'R')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'g')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'h')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude","[]") [])])])])])])])]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","showsPrec") [(Var 2)]),(Lit (Intc 11))]),(Var 6)])])]))]))),(Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 1)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Either") [(TVar 0),(TVar 1)])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))))) (Rule [1,2] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [(Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Either") [(Var 1),(Var 2)])]))),(Func ("Prelude","unlines") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])) (Rule [1] (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","concatMap") [(Comb (FuncPartCall 1) ("Prelude","flip") [(Comb (FuncPartCall 2) ("Prelude","++") []),(Comb ConsCall ("Prelude",":") [(Lit (Charc '\n')),(Comb ConsCall ("Prelude","[]") [])])])]),(Var 1)]))),(Func ("Prelude","unwords") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","null") [(Var 1)]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") [])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","foldr1") [(Comb (FuncPartCall 2) ("Prelude","unwords._#lambda282") []),(Var 1)]))]))),(Func ("Prelude","unwords._#lambda282") 2 Private (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))) (Rule [1,2] (Comb FuncCall ("Prelude","++") [(Var 1),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Var 2)])]))),(Func ("Prelude","getChar") 0 Public (TCons ("Prelude","IO") [(TCons ("Prelude","Char") [])]) (External "Prelude.getChar")),(Func ("Prelude","showError") 1 Public (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","IOError") [2]) (Comb FuncCall ("Prelude","++") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '/')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ':')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])]),(Var 2)])),(Branch (Pattern ("Prelude","UserError") [3]) (Comb FuncCall ("Prelude","++") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ':')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])])]),(Var 3)])),(Branch (Pattern ("Prelude","FailError") [4]) (Comb FuncCall ("Prelude","++") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ':')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])])]),(Var 4)])),(Branch (Pattern ("Prelude","NondetError") [5]) (Comb FuncCall ("Prelude","++") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ':')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])])])])]),(Var 5)]))]))),(Func ("Prelude","show_") 1 Private (FuncType (TVar 0) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])) (Rule [1] (Comb FuncCall ("Prelude","$##") [(Comb (FuncPartCall 1) ("Prelude","prim_show") []),(Var 1)]))),(Func ("Prelude","prim_show") 1 Private (FuncType (TVar 0) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])) (External "Prelude.prim_show")),(Func ("Prelude","showList'") 3 Private (FuncType (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])))) (Rule [1,2,3] (Case Flex (Var 2) [(Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [(Comb ConsCall ("Prelude",":") [(Lit (Charc '[')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ']')),(Comb ConsCall ("Prelude","[]") [])])]),(Var 3)])),(Branch (Pattern ("Prelude",":") [4,5]) (Comb ConsCall ("Prelude",":") [(Lit (Charc '[')),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Var 1),(Var 4)]),(Comb FuncCall ("Prelude","showList'.showl.429") [(Var 3),(Var 1),(Var 5)])])]))]))),(Func ("Prelude","showList'.showl.429") 3 Private (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (FuncType (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])))) (Rule [1,2,3] (Case Flex (Var 3) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [(Lit (Charc ']')),(Var 1)])),(Branch (Pattern ("Prelude",":") [4,5]) (Comb ConsCall ("Prelude",":") [(Lit (Charc ',')),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Var 2),(Var 4)]),(Comb FuncCall ("Prelude","showList'.showl.429") [(Var 1),(Var 2),(Var 5)])])]))]))),(Func ("Prelude","shows") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])))) (Rule [1] (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","showsPrec") [(Var 1)]),(Lit (Intc 0))]))),(Func ("Prelude","showChar") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))) (Rule [1,2] (Comb ConsCall ("Prelude",":") [(Var 1),(Var 2)]))),(Func ("Prelude","showString") 2 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","showChar") []),(Var 2),(Var 1)]))),(Func ("Prelude","showParen") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])))) (Rule [1,2] (Case Rigid (Var 1) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",".") [(Comb (FuncPartCall 1) ("Prelude","showChar") [(Lit (Charc '('))]),(Comb FuncCall ("Prelude",".") [(Var 2),(Comb (FuncPartCall 1) ("Prelude","showChar") [(Lit (Charc ')'))])])])),(Branch (Pattern ("Prelude","False") []) (Var 2))]))),(Func ("Prelude","showSigned") 4 Private (FuncType (TCons ("Prelude","_Dict#Real") [(TVar 0)]) (FuncType (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])))))) (Rule [1,2,3,4] (Case Rigid (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","<") [(Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Ord") [(Var 1)])]),(Var 4)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","fromInt") [(Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [(Var 1)])]),(Lit (Intc 0))])]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","showParen") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#>#Prelude.Ord#Prelude.Int") []),(Var 3)]),(Lit (Intc 6))]),(Comb FuncCall ("Prelude",".") [(Comb (FuncPartCall 1) ("Prelude","showChar") [(Lit (Charc '-'))]),(Comb FuncCall ("Prelude","apply") [(Var 2),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","negate") [(Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [(Var 1)])]),(Var 4)])])])])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [(Var 2),(Var 4)])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))),(Func ("Prelude","lexDigits") 0 Private (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","nonNull") [(Comb (FuncPartCall 1) ("Prelude","isDigit") [])]))),(Func ("Prelude","nonNull") 2 Private (FuncType (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [(Comb (FuncPartCall 2) ("Prelude","nonNull._#lambda452") []),(Comb ConsCall ("Prelude","[]") []),(Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","span") [(Var 1),(Var 2)]),(Comb ConsCall ("Prelude","[]") [])])]))),(Func ("Prelude","nonNull._#lambda452") 2 Private (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1,2] (Case Rigid (Var 1) [(Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [(Branch (Pattern ("Prelude",":") [5,6]) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Var 3),(Var 4)]),(Var 2)])),(Branch (Pattern ("Prelude","[]") []) (Var 2))]))]))),(Func ("Prelude","isUpper") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","&&") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Char") []),(Var 1)]),(Lit (Charc 'A'))]),(Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Char") [(Var 1),(Lit (Charc 'Z'))])]))),(Func ("Prelude","isLower") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","&&") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Char") []),(Var 1)]),(Lit (Charc 'a'))]),(Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Char") [(Var 1),(Lit (Charc 'z'))])]))),(Func ("Prelude","isAlpha") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","||") [(Comb FuncCall ("Prelude","isUpper") [(Var 1)]),(Comb FuncCall ("Prelude","isLower") [(Var 1)])]))),(Func ("Prelude","isDigit") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","&&") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Char") []),(Var 1)]),(Lit (Charc '0'))]),(Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Char") [(Var 1),(Lit (Charc '9'))])]))),(Func ("Prelude","isAlphaNum") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","||") [(Comb FuncCall ("Prelude","isAlpha") [(Var 1)]),(Comb FuncCall ("Prelude","isDigit") [(Var 1)])]))),(Func ("Prelude","isBinDigit") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","||") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Char") []),(Var 1)]),(Lit (Charc '0'))]),(Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Char") [(Var 1),(Lit (Charc '1'))])]))),(Func ("Prelude","isOctDigit") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","&&") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Char") []),(Var 1)]),(Lit (Charc '0'))]),(Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Char") [(Var 1),(Lit (Charc '7'))])]))),(Func ("Prelude","isHexDigit") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","||") [(Comb FuncCall ("Prelude","isDigit") [(Var 1)]),(Comb FuncCall ("Prelude","||") [(Comb FuncCall ("Prelude","&&") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Char") []),(Var 1)]),(Lit (Charc 'A'))]),(Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Char") [(Var 1),(Lit (Charc 'F'))])]),(Comb FuncCall ("Prelude","&&") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Char") []),(Var 1)]),(Lit (Charc 'a'))]),(Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Char") [(Var 1),(Lit (Charc 'f'))])])])]))),(Func ("Prelude","show") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TVar 0) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Show") [2,3,4]) (Var 2))]))),(Func ("Prelude","showsPrec") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Show") [2,3,4]) (Var 3))]))),(Func ("Prelude","showList") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Show") [2,3,4]) (Var 4))]))),(Func ("Prelude","lexLitChar") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [1] (Case Rigid (Var 1) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])),(Branch (Pattern ("Prelude",":") [2,3]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 2),(Lit (Charc '\\'))]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [(Comb (FuncPartCall 1) ("Prelude","lexLitChar_lexPrefix") [(Lit (Charc '\\'))]),(Comb FuncCall ("Prelude","lexLitChar_lexEsc") [(Var 3)])])),(Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude",":") [(Var 2),(Comb ConsCall ("Prelude","[]") [])]),(Var 3)]),(Comb ConsCall ("Prelude","[]") [])]))]))]))),(Func ("Prelude","lexLitChar_lexEsc") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [1] (Case Rigid (Var 1) [(Branch (Pattern ("Prelude",":") [2,3]) (Comb FuncCall ("Prelude","lexLitChar_runEsc") [(Var 2),(Var 3)])),(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []))]))),(Func ("Prelude","lexLitChar_runEsc") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","elem") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") []),(Var 1)]),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'v')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '\\')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '"')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '\'')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude",":") [(Var 1),(Comb ConsCall ("Prelude","[]") [])]),(Var 2)]),(Comb ConsCall ("Prelude","[]") [])])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","lexLitChar_runEsc_1") [(Var 1),(Var 2)]))]))),(Func ("Prelude","lexLitChar_runEsc_1") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 1),(Lit (Charc 'b'))]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","lexLitChar_lexPrefix") [(Lit (Charc 'b')),(Comb FuncCall ("Prelude","span") [(Comb (FuncPartCall 1) ("Prelude","isBinDigit") []),(Var 2)])]),(Comb ConsCall ("Prelude","[]") [])])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","lexLitChar_runEsc_2") [(Var 1),(Var 2)]))]))),(Func ("Prelude","lexLitChar_runEsc_2") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 1),(Lit (Charc 'o'))]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","lexLitChar_lexPrefix") [(Lit (Charc 'o')),(Comb FuncCall ("Prelude","span") [(Comb (FuncPartCall 1) ("Prelude","isOctDigit") []),(Var 2)])]),(Comb ConsCall ("Prelude","[]") [])])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","lexLitChar_runEsc_3") [(Var 1),(Var 2)]))]))),(Func ("Prelude","lexLitChar_runEsc_3") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 1),(Lit (Charc 'x'))]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","lexLitChar_lexPrefix") [(Lit (Charc 'x')),(Comb FuncCall ("Prelude","span") [(Comb (FuncPartCall 1) ("Prelude","isHexDigit") []),(Var 2)])]),(Comb ConsCall ("Prelude","[]") [])])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","lexLitChar_runEsc_4") [(Var 1),(Var 2)]))]))),(Func ("Prelude","lexLitChar_runEsc_4") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","isDigit") [(Var 1)]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","span") [(Comb (FuncPartCall 1) ("Prelude","isDigit") []),(Comb ConsCall ("Prelude",":") [(Var 1),(Var 2)])]),(Comb ConsCall ("Prelude","[]") [])])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","lexLitChar_runEsc_5") [(Var 1),(Var 2)]))]))),(Func ("Prelude","lexLitChar_runEsc_5") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","isUpper") [(Var 1)]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","span") [(Comb (FuncPartCall 1) ("Prelude","lexLitChar_isCharName") []),(Comb ConsCall ("Prelude",":") [(Var 1),(Var 2)])]),(Comb ConsCall ("Prelude","[]") [])])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","lexLitChar_runEsc_6") [(Var 1),(Var 2)]))]))),(Func ("Prelude","lexLitChar_runEsc_6") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","&&") [(Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 1),(Lit (Charc '^'))]),(Comb FuncCall ("Prelude","lexLitChar_isAt") [(Var 2)])]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude",":") [(Lit (Charc '^')),(Comb ConsCall ("Prelude",":") [(Var 1),(Comb ConsCall ("Prelude","[]") [])])]),(Var 2)]),(Comb ConsCall ("Prelude","[]") [])])),(Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") []))]))),(Func ("Prelude","lexLitChar_isAt") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","Bool") [])) (Rule [1] (Case Rigid (Var 1) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude",":") [2,3]) (Comb FuncCall ("Prelude","&&") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Char") []),(Var 2)]),(Lit (Charc '@'))]),(Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Char") [(Var 2),(Lit (Charc '_'))])]))]))),(Func ("Prelude","lexLitChar_isCharName") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","||") [(Comb FuncCall ("Prelude","isUpper") [(Var 1)]),(Comb FuncCall ("Prelude","isDigit") [(Var 1)])]))),(Func ("Prelude","lexLitChar_lexPrefix") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TVar 1)]) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TVar 1)]))) (Rule [1,2] (Case Flex (Var 2) [(Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude",":") [(Var 1),(Var 3)]),(Var 4)]))]))),(Func ("Prelude","lex") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [1] (Case Rigid (Var 1) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude","[]") []),(Comb ConsCall ("Prelude","[]") [])]),(Comb ConsCall ("Prelude","[]") [])])),(Branch (Pattern ("Prelude",":") [2,3]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 2),(Lit (Charc '\''))]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [(Comb (FuncPartCall 1) ("Prelude","lex_lexSingleQuote") []),(Comb FuncCall ("Prelude","filter") [(Comb (FuncPartCall 1) ("Prelude","lex_filterSingleQuote") []),(Comb FuncCall ("Prelude","lexLitChar") [(Var 3)])])])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 2),(Lit (Charc '"'))]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [(Comb (FuncPartCall 1) ("Prelude","lex_lexDoubleQuote") []),(Comb FuncCall ("Prelude","lex_lexString") [(Var 3)])])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","lex_else") [(Var 2),(Var 3)]))]))]))]))),(Func ("Prelude","lex_lexSingleQuote") 1 Public (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","(,)") [2,3]) (Case Flex (Var 3) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [(Var 2),(Comb ConsCall ("Prelude","[]") [])])),(Branch (Pattern ("Prelude",":") [4,5]) (Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude",":") [(Var 4),(Comb FuncCall ("Prelude","++") [(Var 2),(Comb ConsCall ("Prelude",":") [(Lit (Charc '\'')),(Comb ConsCall ("Prelude","[]") [])])])]),(Var 5)]))]))]))),(Func ("Prelude","lex_filterSingleQuote") 1 Public (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","Bool") [])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","(,)") [2,3]) (Case Rigid (Var 3) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude",":") [4,5]) (Comb FuncCall ("Prelude","&&") [(Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 4),(Lit (Charc '\''))]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#[]") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") [])]),(Var 2)]),(Comb ConsCall ("Prelude",":") [(Lit (Charc '\'')),(Comb ConsCall ("Prelude","[]") [])])])]))]))]))),(Func ("Prelude","lex_lexDoubleQuote") 1 Public (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TVar 0)]) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TVar 0)])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","(,)") [2,3]) (Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude",":") [(Lit (Charc '"')),(Var 2)]),(Var 3)]))]))),(Func ("Prelude","lex_else") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","isSpace") [(Var 1)]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [(Comb (FuncPartCall 1) ("Prelude","lex") []),(Comb FuncCall ("Prelude","dropWhile") [(Comb (FuncPartCall 1) ("Prelude","isSpace") []),(Var 2)])])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","lex_isSingle") [(Var 1)]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude",":") [(Var 1),(Comb ConsCall ("Prelude","[]") [])]),(Var 2)]),(Comb ConsCall ("Prelude","[]") [])])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","lex_isSym") [(Var 1)]) [(Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("Prelude","span") [(Comb (FuncPartCall 1) ("Prelude","lex_isSym") []),(Var 2)]) [(Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude",":") [(Var 1),(Var 3)]),(Var 4)]),(Comb ConsCall ("Prelude","[]") [])]))])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","isAlpha") [(Var 1)]) [(Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("Prelude","span") [(Comb (FuncPartCall 1) ("Prelude","lex_isSym") []),(Var 2)]) [(Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude",":") [(Var 1),(Var 5)]),(Var 6)]),(Comb ConsCall ("Prelude","[]") [])]))])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","isDigit") [(Var 1)]) [(Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("Prelude","span") [(Comb (FuncPartCall 1) ("Prelude","isDigit") []),(Var 2)]) [(Branch (Pattern ("Prelude","(,)") [7,8]) (Comb FuncCall ("Prelude","map") [(Comb (FuncPartCall 1) ("Prelude","lex_else_frac") [(Var 1),(Var 7)]),(Comb FuncCall ("Prelude","lex_lexFracExp") [(Var 8)])]))])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") [])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))]))]))]))]))),(Func ("Prelude","lex_else_frac") 3 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TVar 1)]) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TVar 1)])))) (Rule [1,2,3] (Case Flex (Var 3) [(Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude",":") [(Var 1),(Comb FuncCall ("Prelude","++") [(Var 2),(Var 4)])]),(Var 5)]))]))),(Func ("Prelude","lex_isSingle") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","elem") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") []),(Var 1)]),(Comb ConsCall ("Prelude",":") [(Lit (Charc ',')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ';')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '(')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ')')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '[')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ']')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '{')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '}')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '_')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])]))),(Func ("Prelude","lex_isSym") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","elem") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") []),(Var 1)]),(Comb ConsCall ("Prelude",":") [(Lit (Charc '!')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '@')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '#')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '$')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '&')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '+')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '.')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '/')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '<')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '=')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '?')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '\\')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '^')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '|')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ':')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '~')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])])])])])])])]))),(Func ("Prelude","lex_isIdChar") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","||") [(Comb FuncCall ("Prelude","isAlphaNum") [(Var 1)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","elem") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") []),(Var 1)]),(Comb ConsCall ("Prelude",":") [(Lit (Charc '_')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '\'')),(Comb ConsCall ("Prelude","[]") [])])])])]))),(Func ("Prelude","lex_lexFracExp") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [1] (Case Rigid (Var 1) [(Branch (Pattern ("Prelude",":") [2,3]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 2),(Lit (Charc '.'))]) [(Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 3) [(Branch (Pattern ("Prelude",":") [4,5]) (Case Rigid (Comb FuncCall ("Prelude","isDigit") [(Var 4)]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [(Comb (FuncPartCall 1) ("Prelude","lex_lexFracExp_dot") []),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","concatMap") [(Comb (FuncPartCall 1) ("Prelude","lex_lexFracExp_exp") [])]),(Comb FuncCall ("Prelude","lexDigits") [(Comb ConsCall ("Prelude",":") [(Var 4),(Var 5)])])])])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","lex_lexExp") [(Var 1)]))])),(Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","lex_lexExp") [(Var 1)]))])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","lex_lexExp") [(Var 1)]))])),(Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","lex_lexExp") [(Var 1)]))]))),(Func ("Prelude","lex_lexFracExp_dot") 1 Public (FuncType (TCons ("Prelude","(,,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude",":") [(Lit (Charc '.')),(Comb FuncCall ("Prelude","++") [(Var 2),(Var 3)])]),(Var 4)]))]))),(Func ("Prelude","lex_lexFracExp_exp") 1 Public (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","(,)") [2,3]) (Comb FuncCall ("Prelude","map") [(Comb (FuncPartCall 1) ("Prelude","makeTriple") [(Var 2)]),(Comb FuncCall ("Prelude","lex_lexExp") [(Var 3)])]))]))),(Func ("Prelude","makeTriple") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [(TVar 1),(TVar 2)]) (TCons ("Prelude","(,,)") [(TVar 0),(TVar 1),(TVar 2)]))) (Rule [1,2] (Case Flex (Var 2) [(Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude","(,,)") [(Var 1),(Var 3),(Var 4)]))]))),(Func ("Prelude","lex_lexExp") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [1] (Case Rigid (Var 1) [(Branch (Pattern ("Prelude",":") [2,3]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 2),(Lit (Charc 'e'))]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","lex_lexPMExp") [(Var 2),(Var 3)])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 2),(Lit (Charc 'E'))]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","lex_lexPMExp") [(Var 2),(Var 3)])),(Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude","[]") []),(Var 1)]),(Comb ConsCall ("Prelude","[]") [])]))]))])),(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude","[]") []),(Var 1)]),(Comb ConsCall ("Prelude","[]") [])]))]))),(Func ("Prelude","lex_lexPMExp") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1,2] (Let [(3,(Var 2))] (Case Rigid (Var 3) [(Branch (Pattern ("Prelude",":") [4,5]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 4),(Lit (Charc '+'))]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [(Comb (FuncPartCall 1) ("Prelude","lex_lexPMExp_sgn") [(Var 1),(Comb ConsCall ("Prelude",":") [(Lit (Charc '+')),(Comb ConsCall ("Prelude","[]") [])])]),(Comb FuncCall ("Prelude","lexDigits") [(Var 5)])])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 4),(Lit (Charc '-'))]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [(Comb (FuncPartCall 1) ("Prelude","lex_lexPMExp_sgn") [(Var 1),(Comb ConsCall ("Prelude",":") [(Lit (Charc '-')),(Comb ConsCall ("Prelude","[]") [])])]),(Comb FuncCall ("Prelude","lexDigits") [(Var 5)])])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","map") [(Comb (FuncPartCall 1) ("Prelude","lex_lexPMExp_sgn") [(Var 1),(Comb ConsCall ("Prelude","[]") [])]),(Comb FuncCall ("Prelude","lexDigits") [(Var 3)])]))]))])),(Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","map") [(Comb (FuncPartCall 1) ("Prelude","lex_lexPMExp_sgn") [(Var 1),(Comb ConsCall ("Prelude","[]") [])]),(Comb FuncCall ("Prelude","lexDigits") [(Var 3)])]))])))),(Func ("Prelude","lex_lexPMExp_sgn") 3 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])))) (Rule [1,2,3] (Case Flex (Var 3) [(Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude",":") [(Var 1),(Comb FuncCall ("Prelude","++") [(Var 2),(Var 4)])]),(Var 5)]))]))),(Func ("Prelude","lex_lexString") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [1] (Case Rigid (Var 1) [(Branch (Pattern ("Prelude",":") [2,3]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 2),(Lit (Charc '"'))]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude",":") [(Lit (Charc '"')),(Comb ConsCall ("Prelude","[]") [])]),(Var 3)]),(Comb ConsCall ("Prelude","[]") [])])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","map") [(Comb (FuncPartCall 1) ("Prelude","lex_lexString_build") []),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","concatMap") [(Comb (FuncPartCall 1) ("Prelude","lex_lexString_string") [])]),(Comb FuncCall ("Prelude","lex_lexStrItem") [(Var 1)])])]))])),(Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","map") [(Comb (FuncPartCall 1) ("Prelude","lex_lexString_build") []),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","concatMap") [(Comb (FuncPartCall 1) ("Prelude","lex_lexString_string") [])]),(Comb FuncCall ("Prelude","lex_lexStrItem") [(Var 1)])])]))]))),(Func ("Prelude","lex_lexString_build") 1 Public (FuncType (TCons ("Prelude","(,,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Comb ConsCall ("Prelude","(,)") [(Comb FuncCall ("Prelude","++") [(Var 2),(Var 3)]),(Var 4)]))]))),(Func ("Prelude","lex_lexString_string") 1 Public (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","(,)") [2,3]) (Comb FuncCall ("Prelude","map") [(Comb (FuncPartCall 1) ("Prelude","makeTriple") [(Var 2)]),(Comb FuncCall ("Prelude","lex_lexString") [(Var 3)])]))]))),(Func ("Prelude","lex_lexStrItem") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [1] (Case Rigid (Var 1) [(Branch (Pattern ("Prelude",":") [2,3]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 2),(Lit (Charc '\\'))]) [(Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 3) [(Branch (Pattern ("Prelude",":") [4,5]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 4),(Lit (Charc '&'))]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude",":") [(Lit (Charc '\\')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '&')),(Comb ConsCall ("Prelude","[]") [])])]),(Var 5)]),(Comb ConsCall ("Prelude","[]") [])])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","isSpace") [(Var 4)]) [(Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("Prelude","dropWhile") [(Comb (FuncPartCall 1) ("Prelude","isSpace") []),(Var 5)]) [(Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 6),(Lit (Charc '\\'))]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude",":") [(Lit (Charc '\\')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '&')),(Comb ConsCall ("Prelude","[]") [])])]),(Var 7)]),(Comb ConsCall ("Prelude","[]") [])])),(Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") []))])),(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []))])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","lexLitChar") [(Var 1)]))]))])),(Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","lexLitChar") [(Var 1)]))])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","lexLitChar") [(Var 1)]))])),(Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","lexLitChar") [(Var 1)]))]))),(Func ("Prelude","lines") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])),(Branch (Pattern ("Prelude",":") [2,3]) (Case Rigid (Comb FuncCall ("Prelude","splitline") [(Comb ConsCall ("Prelude",":") [(Var 2),(Var 3)])]) [(Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [(Var 4),(Comb FuncCall ("Prelude","lines") [(Var 5)])]))]))]))),(Func ("Prelude","splitline") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude","[]") []),(Comb ConsCall ("Prelude","[]") [])])),(Branch (Pattern ("Prelude",":") [2,3]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 2),(Lit (Charc '\n'))]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude","[]") []),(Var 3)])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","splitline") [(Var 3)]) [(Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude",":") [(Var 2),(Var 4)]),(Var 5)]))]))]))]))),(Func ("Prelude","words") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) (Rule [1] (Let [(2,(Comb FuncCall ("Prelude","dropWhile") [(Comb (FuncPartCall 1) ("Prelude","isSpace") []),(Var 1)]))] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") []),(Var 2),(Comb ConsCall ("Prelude","[]") [])]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") [])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","break") [(Comb (FuncPartCall 1) ("Prelude","isSpace") [])]),(Var 2)]) [(Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude",":") [(Var 3),(Comb FuncCall ("Prelude","words") [(Var 4)])]))]))])))),(Func ("Prelude","isSpace") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","||") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","elem") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") []),(Var 1)]),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '\t')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '\n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '\r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '\f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '\v')),(Comb ConsCall ("Prelude","[]") [])])])])])])])]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","elem") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Int") []),(Comb FuncCall ("Prelude","ord") [(Var 1)])]),(Comb ConsCall ("Prelude",":") [(Lit (Intc 160)),(Comb ConsCall ("Prelude",":") [(Lit (Intc 5760)),(Comb ConsCall ("Prelude",":") [(Lit (Intc 6158)),(Comb ConsCall ("Prelude",":") [(Lit (Intc 8192)),(Comb ConsCall ("Prelude",":") [(Lit (Intc 8239)),(Comb ConsCall ("Prelude",":") [(Lit (Intc 8287)),(Comb ConsCall ("Prelude",":") [(Lit (Intc 12288)),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])))] [])