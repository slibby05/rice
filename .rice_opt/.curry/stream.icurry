interface stream where {
import Prelude;
data Step a b = Done | Yield a b | Skip b;
data Stream a b = Stream (b -> Step a b) b;
append_s
2
::
Stream a b -> Stream a c -> Stream a (Prelude.Either b c);
enumFromTo__s
2
::
Prelude.Int -> Prelude.Int -> Stream Prelude.Int Prelude.Int;
enumFromTo_s
2
::
(Prelude.Enum a, Prelude.Ord a) => a -> a -> Stream a a;
filter 1 :: (a -> Prelude.Bool) -> [a] -> [a];
filter_s 2 :: (a -> Prelude.Bool) -> Stream a b -> Stream a b;
foldl_s 3 :: (a -> b -> a) -> a -> Stream b c -> a;
foldr_s 3 :: (a -> b -> b) -> b -> Stream a c -> b;
map 1 :: (a -> a) -> [a] -> [a];
map_s 2 :: (a -> b) -> Stream a c -> Stream b c;
return_s 1 :: a -> Stream a Prelude.Bool;
stream 1 :: [a] -> Stream a [a];
unstream 1 :: Stream a [a] -> [a];
zip_s
2
::
Stream a b -> Stream c d -> Stream (a, c) (b, d, Prelude.Maybe a);
hiding data Prelude.Either a b;
hiding data Prelude.Int;
hiding class Prelude.Enum a;
hiding class Prelude.Eq a => Prelude.Ord a;
hiding data Prelude.Bool;
hiding data Prelude.Maybe a;
instance Prelude.Enum () {
  enumFromThenTo 3;
  enumFromTo 2;
  enumFromThen 2;
  enumFrom 1;
  fromEnum 1;
  toEnum 1;
  pred 1;
  succ 1
} {-# MODULE Prelude #-};
instance Prelude.Enum Prelude.Bool {
  enumFromThen 0;
  enumFrom 0;
  fromEnum 1;
  toEnum 1;
  pred 1;
  succ 1
} {-# MODULE Prelude #-};
instance Prelude.Enum Prelude.Char {
  enumFromThen 0;
  enumFrom 0;
  fromEnum 0;
  toEnum 0;
  pred 1;
  succ 1
} {-# MODULE Prelude #-};
instance Prelude.Enum Prelude.Int {
  enumFromThenTo 0;
  enumFromThen 0;
  enumFromTo 0;
  enumFrom 0;
  fromEnum 1;
  toEnum 1;
  pred 1;
  succ 1
} {-# MODULE Prelude #-};
instance Prelude.Enum Prelude.Ordering {
  enumFromThen 0;
  enumFrom 0;
  fromEnum 1;
  toEnum 1;
  pred 1;
  succ 1
} {-# MODULE Prelude #-};
hiding class Prelude.Eq a;
instance Prelude.Ord () {
  (<=) 2
} {-# MODULE Prelude #-};
instance (Prelude.Ord a, Prelude.Ord b) => Prelude.Ord (a, b) {
  (<=) 2
} {-# MODULE Prelude #-};
instance (Prelude.Ord a, Prelude.Ord b,
          Prelude.Ord c) => Prelude.Ord (a, b, c) {
  (<=) 2
} {-# MODULE Prelude #-};
instance (Prelude.Ord a, Prelude.Ord b, Prelude.Ord c,
          Prelude.Ord d) => Prelude.Ord (a, b, c, d) {
  (<=) 2
} {-# MODULE Prelude #-};
instance (Prelude.Ord a, Prelude.Ord b, Prelude.Ord c,
          Prelude.Ord d, Prelude.Ord e) => Prelude.Ord (a, b, c, d, e) {
  (<=) 2
} {-# MODULE Prelude #-};
instance Prelude.Ord a => Prelude.Ord [a] {
  (<=) 2
} {-# MODULE Prelude #-};
instance Prelude.Ord Prelude.Bool {
  (<=) 2
} {-# MODULE Prelude #-};
instance Prelude.Ord Prelude.Char {
  (<=) 2
} {-# MODULE Prelude #-};
instance (Prelude.Ord a,
          Prelude.Ord b) => Prelude.Ord (Prelude.Either a b) {
  (<=) 2
} {-# MODULE Prelude #-};
instance Prelude.Ord Prelude.Float {
  (<=) 2
} {-# MODULE Prelude #-};
instance Prelude.Ord Prelude.Int {
  (<=) 2
} {-# MODULE Prelude #-};
instance Prelude.Ord a => Prelude.Ord (Prelude.Maybe a) {
  (<=) 2
} {-# MODULE Prelude #-};
instance Prelude.Ord Prelude.Ordering {
  (<=) 2
} {-# MODULE Prelude #-};
hiding data Prelude.Char;
hiding data Prelude.Ordering;
instance Prelude.Eq () {
  (==) 2
} {-# MODULE Prelude #-};
instance (Prelude.Eq a, Prelude.Eq b) => Prelude.Eq (a, b) {
  (==) 2
} {-# MODULE Prelude #-};
instance (Prelude.Eq a, Prelude.Eq b,
          Prelude.Eq c) => Prelude.Eq (a, b, c) {
  (==) 2
} {-# MODULE Prelude #-};
instance (Prelude.Eq a, Prelude.Eq b, Prelude.Eq c,
          Prelude.Eq d) => Prelude.Eq (a, b, c, d) {
  (==) 2
} {-# MODULE Prelude #-};
instance (Prelude.Eq a, Prelude.Eq b, Prelude.Eq c, Prelude.Eq d,
          Prelude.Eq e) => Prelude.Eq (a, b, c, d, e) {
  (==) 2
} {-# MODULE Prelude #-};
instance (Prelude.Eq a, Prelude.Eq b, Prelude.Eq c, Prelude.Eq d,
          Prelude.Eq e, Prelude.Eq f) => Prelude.Eq (a, b, c, d, e, f) {
  (==) 2
} {-# MODULE Prelude #-};
instance (Prelude.Eq a, Prelude.Eq b, Prelude.Eq c, Prelude.Eq d,
          Prelude.Eq e, Prelude.Eq f, Prelude.Eq g) => Prelude.Eq (a, b, c,
                                                                   d, e, f, g) {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq a => Prelude.Eq [a] {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.Bool {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.Char {
  (==) 2
} {-# MODULE Prelude #-};
instance (Prelude.Eq a,
          Prelude.Eq b) => Prelude.Eq (Prelude.Either a b) {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.Float {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.IOError {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.Int {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq a => Prelude.Eq (Prelude.Maybe a) {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.Ordering {
  (==) 2
} {-# MODULE Prelude #-};
hiding data Prelude.Float;
hiding data Prelude.IOError
}