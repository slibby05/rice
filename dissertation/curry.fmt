%format == = "\Varid{==}"
%format @> = "\hspace{2pt}\text{@}\hspace{-3pt}">
%format not = "\Varid{not}"
%format free         = "\textbf{free} "
%format fcase        = "\textbf{fcase} "
%format expr        = "\mathcal{E} "
%format ret         = "\mathcal{R} "
%format asgn        = "\mathcal{A} "
%format decl        = "\mathcal{D} "
%format declare     = "\text{declare} "
%format decfree     = "\text{free} "
%format iblock       = "\mathcal{B} "
%format ifunction    = "\mathcal{F} "
%format forall       = "\forall "
%format ...          = "\ldots "
%format =:=          = "\cuUnify"
%format =:<<=        = "\cuFunPat"
%format ->*          = "\rightarrow^* "
%format ->&          = "\rightarrow_S "
%format ->*&         = "\rightarrow_S^* "
%format EXEMPT       = "\bot "
%format Nat          = "\mathbf{N} "
%format R            = "\textbf{R} "
%format F            = "\textbf{F} "
%format `elem`       = "\in "
%format `notelem`    = "\not\in "
%format `intersect`  = "\cap"
%format ^*           = "^* "
%format ^?           = "^? "
%format ^+           = "^+ "
%format Name_A       = Name"_{Arity}"
%format sigma        = "\sigma"
%format ->^* = "\rightarrow^*"
%format `elem1` = "\in_1"

%format ==>   = "\Rrightarrow "
%format ==>*   = "\Rrightarrow^* "
%format Arr_F = "\Rrightarrow_{\mathcal{F}} "
%format Arr_B = "\Rrightarrow_{\mathcal{B}} "
%format Arr_D = "\Rrightarrow_{\mathcal{D}} "
%format Arr_S = "\Rrightarrow_{\mathcal{S}} "
%format Arr_A = "\Rrightarrow_{\mathcal{A}} "
%format Arr_E = "\Rrightarrow_{\mathcal{E}} "

%format notHead_1
%format a_1
%format a_2
%format a_n
%format a_k
%format a_k1 = "a_{k+1}"
%format as_1
%format as_2

%format enumFromTo_1
%format filter_1
%format isPrime_1

%format e_a
%format e_v
%format e_b
%format e_0
%format e_1
%format e_1'
%format e_2
%format e_2'
%format e_3
%format e_n1 = e"_{-1}"
%format e2' = e"_{2'}"
%format e_11 = e"_{1,1}"
%format e_12 = e"_{1,2}"
%format e_1n = e"_{1,n}"
%format e_21 = e"_{2,1}"
%format e_22 = e"_{2,2}"
%format e_2n = e"_{2,n}"
%format e_n
%format e_t
%format e_f
%format e_f'
%format e_i
%format e_k
%format e_i1 = e"_{i,1}"
%format e_ik = e"_{i,k}"
%format e_ki = e"_{k_i}"

%format v_i
%format v_n
%format v_k

%format n_1
%format n_2
%format n_3
%format n_k
%format n_f
%format n_q = n"_?"

%format C_S

%format f_0
%format f_1
%format f_2
%format f_i
%format f_j
%format f_k
%format f_n
%format f_kn = "f_{k-n}"
%format f_k1 = "f_{k-1}"

%format g_n
%format G_F
%format g_B
%format g_B'

%format g_11 = "g_{1,1}"
%format g_12 = "g_{1,2}"
%format g_13 = "g_{1,3}"
%format g_21 = "g_{2,1}"
%format g_22 = "g_{2,2}"
%format g_23 = "g_{2,3}"
%format g_k1 = "g_{k,1}"
%format g_k2 = "g_{k,2}"
%format g_k3 = "g_{k,3}"

%format end_1 = "end_1"
%format end_2 = "end_2"
%format end_i = "end_i"
%format end_k = "end_k"

%format z_end1 = z"_{end_1}"
%format z_end2 = z"_{end_2}"
%format z_endi = z"_{end_i}"
%format z_endk = z"_{end_k}"

%format ot = "\otimes"
%format op = "\oplus"

%format x_1
%format x_e
%format x_i
%format x_j
%format x_2
%format x_3
%format x_4
%format x_k
%format x_k1 = "x_{k+1}"
%format x_11 = "x_{1,1}"
%format x_21 = "x_{2,1}"
%format x_i1 = "x_{i,1}"
%format x_n1 = "x_{n,1}"
%format x_1k1 = "x_{1,k_1}"
%format x_2k2 = "x_{2,k_2}"
%format x_iki = "x_{i,k_i}"
%format x_nkn = "x_{n,k_n}"
%format x_n
%format x_i1 = x"_{i1}"
%format x_ik = x"_{ik}"

%format C_1
%format C_2
%format C_k
%format C_k1 = C"_{k+1}"
%format C_i
%format C_n
%format C_i1 = C"_{i1}"
%format C_ik = C"_{ik}"
%format c_1
%format c_2
%format c_n
%format b_1
%format b_2
%format b_n

%format b_11 = b"_{1,1}"
%format b_12 = b"_{1,2}"
%format b_21 = b"_{2,1}"
%format b_22 = b"_{2,2}"

%format d_1

%format p_0
%format p_1
%format p_2
%format p_n
%format p_i
%format p_11 = p"_{1,1}"
%format p_1n = p"_{1,n}"
%format p_21 = p"_{2,1}"
%format p_2n = p"_{2,n}"

%format as_1
%format as_2

%format E_0
%format E_1
%format E_2
%format E_i
%format E_n
%format E_n1 = E"_{-1}"

%format pl_1 = "+_1"
%format pl_2 = "+_2"

%format l_i = "l_i"

%format pl_p = +"_{\text{prim}}"
%format mi_p = -"_{\text{prim}}"
%format le_p = <="_{\text{prim}}"
%format eq_p = =="_{\text{prim}}"
%format x_p  = x"_{\text{prim}}"
%format y_p  = y"_{\text{prim}}"
%format n_p  = n"_{\text{prim}}"

%format mkf_1
%format mkf_2
%format mkz_1
%format mkz_2

%format weird_1 
%format eqList_1 
%format eqList_2

%format compLambda_1
%format foldr_3 = "foldr_3"
%format foldr_2 = "foldr_2"
%format foldr_1 = "foldr_1"
%format foldr_0 = "foldr_0"
%format \* = "\bullet "
%format \| = "\big\rvert"
%format vert = "\vert"
%format `vert` = " \vert "
%format pcase          = "\textbf{pcase}"
%format case_CT        = case"_{CaseType}"
%format case_ct        = case"_{ct}"
%format case_R         = case"_{R}"
%format case_F         = case"_{F}"
%format bold a         = "\textbf{"a"}"
%format bold (a)       = "\textbf{"a"}"
%format text a         = " \text{ " a " } "
%format text (a)       = " \text{ " a " } "
%format code a         = "\llbracket " a "\rrbracket "
%format (code (a))     = "\llbracket " a "\rrbracket "
%format codebr a       = "\llbracket " a "\rrbracket_{BR} "
%format (codebr (a))   = "\llbracket " a "\rrbracket_{BR} "
%format codelit a      = "\llbracket " a "\rrbracket_{LIT} "
%format (codelit (a))  = "\llbracket " a "\rrbracket_{LIT} "
%format vec v          = "\overline{" v "} "
%format vec (v)        = "\overline{" v "} "
%format (vec (v))      = "\overline{" v "} "

%format appOpt a     = "\boxed{" a "}"
%format appOpt (a)   = "\boxed{" a "}"
%format (appOpt (a)) = "\boxed{" a "}"

%format set a         = "\{ " a "\} "
%format (set (a))     = "\{ " a "\} "
%format outline f n   = f"\#"n
%format emptyspace   = "\ "
%format sp   = "\ "
%format emptyset       = "\emptyset "
%format extend env v s = env"["s "\from" v"]"
%format (extend env v s) = env"["s "\from" v"]"
%format (extend env v (s)) = env"["s "\from" v"]"
%format (extend env (v) (s)) = env"["s "\from" v"]"
%format (extend (env) (v) (s)) = env"["s "\from" v"]"
%format fsub e (vs)  = (rbody f)"["vs"]"
%format (rewriteRule a p r b) = a ->"_{"p,r"}" b
%format (rewrite a p b) = a ->"_{"p"}" b
%format `to` = "\to"
%format `f` = " \oplus "
%format |-> = "\mapsto"
%format :-> = "\mapsto"
%format path e p = e"|_{"p"}"
%format path (e) p = e"|_{"p"}"
%format # = "\#"


%format H a      = "\textbf{H}(" a ") "
%format H (a)    = "\textbf{H}(" a ") "
%format (H (a))  = "\textbf{H}(" a ") "

%format H_pp a      = "\textbf{H}_{"++"}(" a ") "
%format H_pp (a)    = "\textbf{H}_{"++"}(" a ") "
%format (H_pp (a))  = "\textbf{H}_{"++"}(" a ") "

%format H_length a      = "\textbf{H}_{length}(" a ") "
%format H_length (a)    = "\textbf{H}_{length}(" a ") "
%format (H_length (a))  = "\textbf{H}_{length}(" a ") "

%format H_p a      = "\textbf{H}_{+}(" a ") "
%format H_p (a)    = "\textbf{H}_{+}(" a ") "
%format (H_p (a))  = "\textbf{H}_{+}(" a ") "

%format H_m a      = "\textbf{H}_{-}(" a ") "
%format H_m (a)    = "\textbf{H}_{-}(" a ") "
%format (H_m (a))  = "\textbf{H}_{-}(" a ") "

%format H_le a      = "\textbf{H}_{"<="}(" a ") "
%format H_le (a)    = "\textbf{H}_{"<="}(" a ") "
%format (H_le (a))  = "\textbf{H}_{"<="}(" a ") "

%format H_fib a      = "\textbf{H}_{fib}(" a ") "
%format H_fib (a)    = "\textbf{H}_{fib}(" a ") "
%format (H_fib (a))  = "\textbf{H}_{fib}(" a ") "

%format H_fibComp a      = "\textbf{H}_{fibComp}(" a ") "
%format H_fibComp (a)    = "\textbf{H}_{fibComp}(" a ") "
%format (H_fibComp (a))  = "\textbf{H}_{fibComp}(" a ") "


%format rfunction = F"_"ifunction
%format rinlinable = I"_"ifunction
%format rbody = B"_"ifunction
%format ruseful = U"_"ifunction
%format rsimple = S"_"ifunction
%format rcancels = C"_"ifunction

%format fbody f = rbody "\hspace{-2pt}"(f)
%format finlinable f = rinlinable "\hspace{-2pt}"(f)
%format fuseful f = ruseful "\hspace{-2pt}"(f)
%format fsimple f = rsimple "\hspace{-2pt}"(f)
%format fcancels f = rcancels "\hspace{-2pt}"(f)

%format FLOAT = "\textbf{Let Floating}"
%format FLOAT_LET = "\textbf{Let Floating (Let in Let)}"
%format FLOAT_BLOCK = "\textbf{Let Floating (Block in Let)}"
%format FLOAT_OR = "\textbf{Let Floating (Let in Or)}"
%format FLOAT_APP = "\textbf{Let Floating (Let in APP)}"
%format FLOAT_CASE = "\textbf{Let Floating (Let in APP)}"
%format CASE_IN_CASE = "\textbf{Case in Case}"
%format DOUBLE_APPLY = "\textbf{Double Apply}"
%format CASE_APPLY = "\textbf{Case Apply}"
%format STRING = "\textbf{String Constant}"
%format BLOCKS = "\textbf{Blocks}"
%format UNBOX = "\textbf{Unboxing}"
%format FILL = "\textbf{fill cases}"
%format FIX_PARTIAL_LT = "\textbf{Fix Parial Appl <}"
%format FIX_PARTIAL_EQ = "\textbf{Fix Parial Appl =}"
%format FIX_PARTIAL_GT = "\textbf{Fix Parial Appl >}"
%format LET_CASE = "\textbf{Let Case}"
%format VAR_CASE = "\textbf{Var Case}"
%format ALIAS = "\textbf{Alias}"
%format CASE_FOLDING = "\textbf{Case Folding}"
%format LET_FOLDING = "\textbf{Let Folding}"
%format CONDITION_FOLD = "\textbf{Create pcase}"
%format CASE_CANCEL_CONS = "\textbf{Case Cancel Constructor}"
%format CASE_CANCEL_LIT = "\textbf{Case Cancel Literal}"
%format CASE_CANCEL_EXEMPT = "\textbf{Case Cancel } \bot"
%format CASE_CANCEL_TRUE = "\textbf{Case Cancel Primitive True}"
%format CASE_CANCEL_FALSE = "\textbf{Case Cancel Primitive False}"
%format CASE_CANCEL = "\textbf{Case Cancel}"
%format CASE_VAR = "\textbf{Case Var}"
%format DEAD_CODE = "\textbf{Dead Code}"
%format MISSING_VAR = "\textbf{Add Missing Variables}"
%format UNAPPLY = "\textbf{Unapply}"
%format UNAPPLY_LT = "\textbf{Unapply <}"
%format UNAPPLY_EQ = "\textbf{Unapply =}"
%format UNAPPLY_GT = "\textbf{Unapply >}"
%format INLINE_CONS = "\textbf{Inline Constructor}"
%format INLINE_PART = "\textbf{Inline Partial}"
%format INLINE_LIT = "\textbf{Inline Literal}"
%format INLINE_CASE = "\textbf{Inline Case in Case}"
%format INLINE_BUILD = "\textbf{Inline foldr/build}"
%format INLINE_BF = "\textbf{Inline foldr/build\_fold}"
%format FOLD_BUILD = "\textbf{Deforest foldr/build}"
%format BF_BUILD = "\textbf{Deforest build\_fold/build}"
%format FOLD_BF = "\textbf{Deforest foldr/build\_fold}"
%format BF_BF = "\textbf{Deforest build\_fold/build\_fold}"
%format REDUCE_BASE = "\textbf{Reduce Base}"
%format REDUCE_BRANCH = "\textbf{Reduce Branch}"
%format REDUCE_LET = "\textbf{Reduce Let}"
%format REDUCE_CANCELS = "\textbf{Reduce Cancels}"
%format REDUCE_USEFUL = "\textbf{Reduce Useful}"
%format REDUCE_SIMPLE = "\textbf{Reduce Simple}"
%format CASE_CALL = "\textbf{Case Call}"
%format ANF_CASE = "\textbf{ANF Case}"
%format ANF_APP = "\textbf{ANF App}"
%format ANF_OR1 = "\textbf{ANF ? 1}"
%format ANF_OR2 = "\textbf{ANF ? 2}"
%format CONSTANT_FOLDING = "\textbf{Constant Folding}"


%format v_0
%format v_1
%format v_2
%format v_3
%format v_4
%format v_5
%format v_6
%format v_7
%format v_8
%format v_9
%format v_10
%format v_11
%format v_12
%format v_13
%format v_14
%format v_15
%format v_16
%format v_17
%format v_18
%format v_19
%format v_20
%format v_21
%format v_22
%format v_23
%format v_24
%format v_25
%format v_26
%format v_27
%format v_28
%format v_29
%format v_30
%format v_31
%format v_32
%format v_33
%format v_34
%format v_35
%format v_36
%format v_37
%format v_38
%format v_39
%format v_40
%format v_41
%format v_42
%format v_43
%format v_44
%format v_45
%format v_46
%format v_47
%format v_48
%format v_49
%format v_50
%format v_51
%format v_52
%format v_53
%format v_54
%format v_55
%format v_56
%format v_57
%format v_58
%format v_59
