Prog "deforestation" ["Prelude"] [] [Func ("deforestation","build") 1 Public (FuncType (FuncType (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TVar 2))) (TVar 2)) (Rule [] (Var 0)),Func ("deforestation","build_fold") 3 Public (FuncType (FuncType (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (FuncType (TVar 1) (FuncType (TVar 2) (TVar 2)))) (FuncType (FuncType (TCons ("Prelude","[]") [TVar 3]) (TVar 2)) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TVar 2)))) (Rule [] (Var 0)),Func ("deforestation","bf") 5 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (TVar 2)))) (FuncType (FuncType (TVar 3) (TVar 2)) (FuncType (TVar 0) (FuncType (TVar 3) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TVar 2)))))) (Rule [] (Var 0)),Func ("deforestation","mk_build") 5 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 2))) (FuncType (FuncType (TVar 3) (TVar 0)) (FuncType (FuncType (TVar 4) (TVar 1)) (FuncType (TVar 3) (FuncType (TVar 4) (TVar 2)))))) (Rule [] (Var 0)),Func ("deforestation","map") 1 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 1]))) (Rule [] (Var 0)),Func ("deforestation","map_mkc") 4 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (FuncType (TVar 1) (FuncType (TVar 2) (TVar 2))) (FuncType (TVar 0) (FuncType (TVar 2) (TVar 2))))) (Rule [] (Var 0)),Func ("deforestation","filter") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("deforestation","filter_mkc") 4 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 1))) (FuncType (TVar 0) (FuncType (TVar 1) (TVar 1))))) (Rule [] (Var 0)),Func ("deforestation","++") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("deforestation","append_build") 4 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TVar 1) (TVar 1))) (FuncType (TVar 1) (TVar 1))))) (Rule [] (Var 0)),Func ("deforestation","concat") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0])) (Rule [] (Var 0)),Func ("deforestation","concat_mkc") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 1))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TVar 1) (TVar 1)))) (Rule [] (Var 0)),Func ("deforestation","repeat") 1 Public (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])) (Rule [] (Var 0)),Func ("deforestation","repeat_build") 3 Public (FuncType (TVar 0) (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 1))) (FuncType (TVar 2) (TVar 1)))) (Rule [] (Var 0)),Func ("deforestation","zip") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]))) (Rule [] (Var 0)),Func ("deforestation","zip_build") 4 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (FuncType (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TVar 2) (TVar 2))) (FuncType (TVar 2) (TVar 2))))) (Rule [] (Var 0)),Func ("deforestation","zipWith") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 2))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","[]") [TVar 2])))) (Rule [] (Var 0)),Func ("deforestation","zipWith_build") 5 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 2))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (FuncType (FuncType (TVar 2) (FuncType (TVar 3) (TVar 3))) (FuncType (TVar 3) (TVar 3)))))) (Rule [] (Var 0)),Func ("deforestation","lookup") 2 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]) (TCons ("Prelude","Maybe") [TVar 1])))) (Rule [] (Var 0)),Func ("deforestation","lookup_fold") 4 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Maybe") [TVar 1]) (TCons ("Prelude","Maybe") [TVar 1]))))) (Rule [] (Var 0)),Func ("deforestation","iterate") 2 Public (FuncType (FuncType (TVar 0) (TVar 0)) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("deforestation","iterate_build") 4 Public (FuncType (FuncType (TVar 0) (TVar 0)) (FuncType (TVar 0) (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 1))) (FuncType (TVar 2) (TVar 1))))) (Rule [] (Var 0)),Func ("deforestation","enumFrom_") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [] (Var 0)),Func ("deforestation","enumFromThen_") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [] (Var 0)),Func ("deforestation","enumFromTo_") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [] (Var 0)),Func ("deforestation","enumFromTo_build") 4 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))))) (Rule [] (Var 0)),Func ("deforestation","enumFromThenTo_") 3 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])))) (Rule [] (Var 0)),Func ("deforestation","enumFromThenTo_build") 5 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])))))) (Rule [] (Var 0)),Func ("deforestation","length") 0 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("deforestation","length_fold") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("deforestation","null") 0 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("deforestation","null_fold") 2 Public (FuncType (TVar 0) (FuncType (TVar 1) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0))] []