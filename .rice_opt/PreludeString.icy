IProg "PreludeString" ["PreludeBase","PreludeCompare","PreludeNum","PreludeList"] [] [IFunction ("Prelude","unlines",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFPCall ("Prelude","unlines#P0",0) 3 []),IVarAssign 4 (IFPCall ("Prelude","concatMap#P2",0) 1 [])] (IReturn (IFCall ("Prelude","build_fold",0) [IVar 3,IVar 4,IVar 2])))),IFunction ("Prelude","unlines#P0",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (ICCall ("StringConst","\n",0) []),IVarAssign 6 (IFCall ("Prelude","foldr",0) [IVar 2,IVar 4,IVar 5])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 2,IVar 6,IVar 3])))),IFunction ("Prelude","getChar",0) 0 Public [] (IExternal "Prelude.getChar"),IFunction ("Prelude","showError",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","UserError",0) 1 (IBlock [IVarDecl 5,IVarDecl 6] [IVarAssign 5 (IVarAccess 1 [0]),IVarAssign 6 (IFPCall ("Prelude","showError#P2",0) 2 [IVar 5])] (IReturn (IFCall ("Prelude","build",0) [IVar 6]))),IConsBranch ("Prelude","NondetError",1) 1 (IBlock [IVarDecl 9,IVarDecl 10] [IVarAssign 9 (IVarAccess 1 [0]),IVarAssign 10 (IFPCall ("Prelude","showError#P4",0) 2 [IVar 9])] (IReturn (IFCall ("Prelude","build",0) [IVar 10]))),IConsBranch ("Prelude","IOError",2) 1 (IBlock [IVarDecl 3,IVarDecl 4] [IVarAssign 3 (IVarAccess 1 [0]),IVarAssign 4 (IFPCall ("Prelude","showError#P1",0) 2 [IVar 3])] (IReturn (IFCall ("Prelude","build",0) [IVar 4]))),IConsBranch ("Prelude","FailError",3) 1 (IBlock [IVarDecl 7,IVarDecl 8] [IVarAssign 7 (IVarAccess 1 [0]),IVarAssign 8 (IFPCall ("Prelude","showError#P3",0) 2 [IVar 7])] (IReturn (IFCall ("Prelude","build",0) [IVar 8])))]))),IFunction ("Prelude","showError#P4",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFCall ("Prelude","foldr",0) [IVar 3,IVar 4,IVar 2]),IVarAssign 6 (ICCall ("StringConst","nondet error: ",0) [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 3,IVar 5,IVar 6])))),IFunction ("Prelude","showError#P3",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFCall ("Prelude","foldr",0) [IVar 3,IVar 4,IVar 2]),IVarAssign 6 (ICCall ("StringConst","fail error: ",0) [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 3,IVar 5,IVar 6])))),IFunction ("Prelude","showError#P2",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFCall ("Prelude","foldr",0) [IVar 3,IVar 4,IVar 2]),IVarAssign 6 (ICCall ("StringConst","user error: ",0) [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 3,IVar 5,IVar 6])))),IFunction ("Prelude","showError#P1",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFCall ("Prelude","foldr",0) [IVar 3,IVar 4,IVar 2]),IVarAssign 6 (ICCall ("StringConst","i/o error: ",0) [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 3,IVar 5,IVar 6])))),IFunction ("Prelude","isSpace",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl (-6)] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFPCall ("Prelude","isSpace#P6",0) 2 [IVar 2]),IVarAssign 4 (ICCall ("Prelude","False",0) []),IVarAssign 5 (ICCall ("StringConst"," \t\n\r\f\v",0) []),IVarAssign (-6) (IFCall ("Prelude","foldr",0) [IVar 3,IVar 4,IVar 5])] (ICaseCons (-6) [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10,IVarDecl 11,IVarDecl 12,IVarDecl 13,IVarDecl 14,IVarDecl 15,IVarDecl 16,IVarDecl 17,IVarDecl 18,IVarDecl 19,IVarDecl 20,IVarDecl 21,IVarDecl 22,IVarDecl 23,IVarDecl 24] [IVarAssign 7 (IFCall ("Prelude","ord",0) [IVar 2]),IVarAssign 8 (IFPCall ("Prelude","isSpace#P5",0) 2 [IVar 7]),IVarAssign 9 (ICCall ("Prelude","False",0) []),IVarAssign 10 (ICCall ("","int",0) [ILit (IInt 160)]),IVarAssign 11 (ICCall ("","int",0) [ILit (IInt 5760)]),IVarAssign 12 (ICCall ("","int",0) [ILit (IInt 6158)]),IVarAssign 13 (ICCall ("","int",0) [ILit (IInt 8192)]),IVarAssign 14 (ICCall ("","int",0) [ILit (IInt 8239)]),IVarAssign 15 (ICCall ("","int",0) [ILit (IInt 8287)]),IVarAssign 16 (ICCall ("","int",0) [ILit (IInt 12288)]),IVarAssign 17 (ICCall ("Prelude","[]",0) []),IVarAssign 18 (ICCall ("Prelude",":",0) [IVar 16,IVar 17]),IVarAssign 19 (ICCall ("Prelude",":",0) [IVar 15,IVar 18]),IVarAssign 20 (ICCall ("Prelude",":",0) [IVar 14,IVar 19]),IVarAssign 21 (ICCall ("Prelude",":",0) [IVar 13,IVar 20]),IVarAssign 22 (ICCall ("Prelude",":",0) [IVar 12,IVar 21]),IVarAssign 23 (ICCall ("Prelude",":",0) [IVar 11,IVar 22]),IVarAssign 24 (ICCall ("Prelude",":",0) [IVar 10,IVar 23])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 8,IVar 9,IVar 24])))]))),IFunction ("Prelude","isSpace#P6",0) 3 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2])] (ICaseCons 2 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 1 [0])] (ICaseCons 3 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 6] [IVarAssign 6 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqChar",0) [IVar 5,IVar 6]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (IVar 4)))]))]))]))),IFunction ("Prelude","isSpace#P5",0) 3 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2])] (ICaseCons 2 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 1 [0])] (ICaseCons 3 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 6] [IVarAssign 6 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqInt",0) [IVar 5,IVar 6]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (IVar 4)))]))]))]))),IFunction ("Prelude","lex_lexString_build",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","(,,)",0) 3 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7] [IVarAssign 5 (IVarAccess 1 [0]),IVarAssign 4 (IVarAccess 1 [1]),IVarAssign 3 (IVarAccess 1 [2]),IVarAssign 6 (IFPCall ("Prelude","++#P0",0) 2 [IVar 3,IVar 4]),IVarAssign 7 (IFCall ("Prelude","build",0) [IVar 6])] (IReturn (ICCall ("Prelude","(,)",0) [IVar 7,IVar 5])))]))),IFunction ("Prelude","lex_lexPMExp_sgn",0) 3 Public [2] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2])] (ICaseCons 4 [IConsBranch ("Prelude","(,)",0) 2 (IBlock [IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9] [IVarAssign 6 (IVarAccess 1 [0]),IVarAssign 5 (IVarAccess 1 [1]),IVarAssign 7 (IFPCall ("Prelude","++#P0",0) 2 [IVar 3,IVar 5]),IVarAssign 8 (IFCall ("Prelude","build",0) [IVar 7]),IVarAssign 9 (ICCall ("Prelude",":",0) [IVar 2,IVar 8])] (IReturn (ICCall ("Prelude","(,)",0) [IVar 9,IVar 6])))]))),IFunction ("Prelude","makeTriple",0) 2 Public [1] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 3 [IConsBranch ("Prelude","(,)",0) 2 (IBlock [IVarDecl 4,IVarDecl 5] [IVarAssign 5 (IVarAccess 1 [0]),IVarAssign 4 (IVarAccess 1 [1])] (IReturn (ICCall ("Prelude","(,,)",0) [IVar 2,IVar 4,IVar 5])))]))),IFunction ("Prelude","lex_lexFracExp_dot",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","(,,)",0) 3 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9] [IVarAssign 5 (IVarAccess 1 [0]),IVarAssign 4 (IVarAccess 1 [1]),IVarAssign 3 (IVarAccess 1 [2]),IVarAssign 6 (IFPCall ("Prelude","++#P0",0) 2 [IVar 3,IVar 4]),IVarAssign 7 (IFCall ("Prelude","build",0) [IVar 6]),IVarAssign 8 (ICCall ("","char",0) [ILit (IChar '.')]),IVarAssign 9 (ICCall ("Prelude",":",0) [IVar 8,IVar 7])] (IReturn (ICCall ("Prelude","(,)",0) [IVar 9,IVar 5])))]))),IFunction ("Prelude","lex_isSym",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFPCall ("Prelude","lex_isSym#P7",0) 2 [IVar 2]),IVarAssign 4 (ICCall ("Prelude","False",0) []),IVarAssign 5 (ICCall ("StringConst","!@#$&+./<=?\\^|:~",0) [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 3,IVar 4,IVar 5])))),IFunction ("Prelude","lex_isSym#P7",0) 3 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2])] (ICaseCons 2 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 1 [0])] (ICaseCons 3 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 6] [IVarAssign 6 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqChar",0) [IVar 5,IVar 6]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (IVar 4)))]))]))]))),IFunction ("Prelude","lex_isSingle",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFPCall ("Prelude","lex_isSingle#P8",0) 2 [IVar 2]),IVarAssign 4 (ICCall ("Prelude","False",0) []),IVarAssign 5 (ICCall ("StringConst",",;()[]{}_",0) [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 3,IVar 4,IVar 5])))),IFunction ("Prelude","lex_isSingle#P8",0) 3 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2])] (ICaseCons 2 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 1 [0])] (ICaseCons 3 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 6] [IVarAssign 6 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqChar",0) [IVar 5,IVar 6]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (IVar 4)))]))]))]))),IFunction ("Prelude","lex_else_frac",0) 3 Public [2] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2])] (ICaseCons 4 [IConsBranch ("Prelude","(,)",0) 2 (IBlock [IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9] [IVarAssign 6 (IVarAccess 1 [0]),IVarAssign 5 (IVarAccess 1 [1]),IVarAssign 7 (IFPCall ("Prelude","++#P0",0) 2 [IVar 3,IVar 5]),IVarAssign 8 (IFCall ("Prelude","build",0) [IVar 7]),IVarAssign 9 (ICCall ("Prelude",":",0) [IVar 2,IVar 8])] (IReturn (ICCall ("Prelude","(,)",0) [IVar 9,IVar 6])))]))),IFunction ("Prelude","lex_lexDoubleQuote",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","(,)",0) 2 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 4 (IVarAccess 1 [0]),IVarAssign 3 (IVarAccess 1 [1]),IVarAssign 5 (ICCall ("","char",0) [ILit (IChar '"')]),IVarAssign 6 (ICCall ("Prelude",":",0) [IVar 5,IVar 3])] (IReturn (ICCall ("Prelude","(,)",0) [IVar 6,IVar 4])))]))),IFunction ("Prelude","lex_filterSingleQuote",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","(,)",0) 2 (IBlock [IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 1 [0]),IVarAssign 3 (IVarAccess 1 [1])] (ICaseCons 4 [IConsBranch ("Prelude","[]",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude",":",1) 2 (IBlock [IVarDecl 5,IVarDecl 6] [IVarAssign 6 (IVarAccess 1 [0]),IVarAssign 5 (IVarAccess 1 [1])] (ICaseCons 5 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 7] [IVarAssign 7 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqChar",0) [IVar 7,ILit (IChar '\'')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 8,IVarDecl 9,IVarDecl 10,IVarDecl 11,IVarDecl (-12)] [IVarAssign 8 (IFPCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char",0) 2 []),IVarAssign 9 (IFPCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char",0) 2 []),IVarAssign 10 (ICCall ("Prelude","_Dict#Eq",0) [IVar 8,IVar 9]),IVarAssign 11 (ICCall ("StringConst","'",0) []),IVarAssign (-12) (IFCall ("Prelude","_impl#==#Prelude.Eq#[]",0) [IVar 10,IVar 3,IVar 11])] (ICaseCons (-12) [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) [])))])),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))]))]))]))]))),IFunction ("Prelude","lex_lexSingleQuote",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","(,)",0) 2 (IBlock [IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 1 [0]),IVarAssign 3 (IVarAccess 1 [1])] (ICaseCons 4 [IConsBranch ("Prelude","[]",0) 0 (IBlock [IVarDecl 5] [IVarAssign 5 (ICCall ("Prelude","[]",0) [])] (IReturn (ICCall ("Prelude","(,)",0) [IVar 3,IVar 5]))),IConsBranch ("Prelude",":",1) 2 (IBlock [IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10] [IVarAssign 7 (IVarAccess 1 [0]),IVarAssign 6 (IVarAccess 1 [1]),IVarAssign 8 (IFPCall ("Prelude","lex_lexSingleQuote#P9",0) 2 [IVar 3]),IVarAssign 9 (IFCall ("Prelude","build",0) [IVar 8]),IVarAssign 10 (ICCall ("Prelude",":",0) [IVar 6,IVar 9])] (IReturn (ICCall ("Prelude","(,)",0) [IVar 10,IVar 7])))]))]))),IFunction ("Prelude","lex_lexSingleQuote#P9",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (ICCall ("StringConst","'",0) []),IVarAssign 6 (IFCall ("Prelude","foldr",0) [IVar 3,IVar 4,IVar 5])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 3,IVar 6,IVar 2])))),IFunction ("Prelude","lexLitChar_lexPrefix",0) 2 Public [1] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 3 [IConsBranch ("Prelude","(,)",0) 2 (IBlock [IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 5 (IVarAccess 1 [0]),IVarAssign 4 (IVarAccess 1 [1]),IVarAssign 6 (ICCall ("Prelude",":",0) [IVar 2,IVar 4])] (IReturn (ICCall ("Prelude","(,)",0) [IVar 6,IVar 5])))]))),IFunction ("Prelude","lexLitChar_isAt",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","[]",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude",":",1) 2 (IBlock [IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 1 [0]),IVarAssign 3 (IVarAccess 1 [1])] (ICaseCons 3 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [ILit (IChar '@'),IVar 5]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 5,ILit (IChar '_')]))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))]))]))]))),IFunction ("Prelude","lexLitChar_runEsc_6",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqChar",0) [IVar 4,ILit (IChar '^')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (ICaseCons 3 [IConsBranch ("Prelude","[]",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","[]",0) []))),IConsBranch ("Prelude",":",1) 2 (IBlock [IVarDecl 5,IVarDecl 6] [IVarAssign 6 (IVarAccess 1 [0]),IVarAssign 5 (IVarAccess 1 [1])] (ICaseCons 5 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 7] [IVarAssign 7 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [ILit (IChar '@'),IVar 7]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 7,ILit (IChar '_')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 8,IVarDecl 9,IVarDecl 10,IVarDecl 11,IVarDecl 12,IVarDecl 13,IVarDecl 14,IVarDecl 15,IVarDecl 16] [IVarAssign 8 (ICCall ("","char",0) [ILit (IChar '^')]),IVarAssign 9 (ICCall ("","char",0) [IVar 4]),IVarAssign 10 (ICCall ("Prelude","[]",0) []),IVarAssign 11 (ICCall ("Prelude",":",0) [IVar 9,IVar 10]),IVarAssign 12 (ICCall ("Prelude",":",0) [IVar 8,IVar 11]),IVarAssign 13 (ICCall ("","char",0) [IVar 7]),IVarAssign 14 (ICCall ("Prelude",":",0) [IVar 13,IVar 6]),IVarAssign 15 (ICCall ("Prelude","(,)",0) [IVar 12,IVar 14]),IVarAssign 16 (ICCall ("Prelude","[]",0) [])] (IReturn (ICCall ("Prelude",":",0) [IVar 15,IVar 16]))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","[]",0) [])))])),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","[]",0) [])))]))]))])),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","[]",0) [])))]))]))),IFunction ("Prelude","showList",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Show",0) 3 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5] [IVarAssign 5 (IVarAccess 1 [0]),IVarAssign 4 (IVarAccess 1 [1]),IVarAssign 3 (IVarAccess 1 [2])] (IReturn (IVar 5)))]))),IFunction ("Prelude","showsPrec",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Show",0) 3 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5] [IVarAssign 5 (IVarAccess 1 [0]),IVarAssign 4 (IVarAccess 1 [1]),IVarAssign 3 (IVarAccess 1 [2])] (IReturn (IVar 4)))]))),IFunction ("Prelude","show",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Show",0) 3 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5] [IVarAssign 5 (IVarAccess 1 [0]),IVarAssign 4 (IVarAccess 1 [1]),IVarAssign 3 (IVarAccess 1 [2])] (IReturn (IVar 3)))]))),IFunction ("Prelude","_def#showsPrec#Prelude.Show",0) 4 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8] [IVarAssign 5 (IVarAccess 0 [0]),IVarAssign 4 (IVarAccess 0 [1]),IVarAssign 3 (IVarAccess 0 [2]),IVarAssign 2 (IVarAccess 0 [3]),IVarAssign 6 (IFCall ("Prelude","show",0) [IVar 2]),IVarAssign 7 (IFCall ("Prelude","apply",0) [IVar 6,IVar 4]),IVarAssign 8 (IFPCall ("Prelude","++#P0",0) 2 [IVar 7,IVar 5])] (IReturn (IFCall ("Prelude","build",0) [IVar 8])))),IFunction ("Prelude","isOctDigit",0) 1 Private [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 3] [IVarAssign 3 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [ILit (IChar '0'),IVar 3]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 3,ILit (IChar '7')]))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))]))]))),IFunction ("Prelude","isBinDigit",0) 1 Private [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 3] [IVarAssign 3 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [ILit (IChar '0'),IVar 3]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 3,ILit (IChar '1')])))]))]))),IFunction ("Prelude","isDigit",0) 1 Private [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 3] [IVarAssign 3 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [ILit (IChar '0'),IVar 3]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 3,ILit (IChar '9')]))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))]))]))),IFunction ("Prelude","isHexDigit",0) 1 Private [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 3] [IVarAssign 3 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [ILit (IChar '0'),IVar 3]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 3,ILit (IChar '9')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [ILit (IChar 'A'),IVar 3]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 3,ILit (IChar 'F')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [ILit (IChar 'a'),IVar 3]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 3,ILit (IChar 'f')]))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))]))])),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [ILit (IChar 'a'),IVar 3]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 3,ILit (IChar 'f')]))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))]))]))])),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [ILit (IChar 'A'),IVar 3]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 3,ILit (IChar 'F')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [ILit (IChar 'a'),IVar 3]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 3,ILit (IChar 'f')]))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))]))])),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [ILit (IChar 'a'),IVar 3]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 3,ILit (IChar 'f')]))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))]))]))]))]))),IFunction ("Prelude","lexLitChar_isCharName",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 3] [IVarAssign 3 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [ILit (IChar 'A'),IVar 3]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 3,ILit (IChar 'Z')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [ILit (IChar '0'),IVar 3]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 3,ILit (IChar '9')]))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))]))])),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [ILit (IChar '0'),IVar 3]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 3,ILit (IChar '9')]))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))]))]))]))),IFunction ("Prelude","lexLitChar_runEsc_5",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [ILit (IChar 'A'),IVar 4]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 4,ILit (IChar 'Z')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9] [IVarAssign 5 (IFPCall ("Prelude","lexLitChar_isCharName",0) 1 []),IVarAssign 6 (ICCall ("","char",0) [IVar 4]),IVarAssign 7 (ICCall ("Prelude",":",0) [IVar 6,IVar 3]),IVarAssign 8 (IFCall ("Prelude","span",0) [IVar 5,IVar 7]),IVarAssign 9 (ICCall ("Prelude","[]",0) [])] (IReturn (ICCall ("Prelude",":",0) [IVar 8,IVar 9]))),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 10] [IVarAssign 10 (ICCall ("","char",0) [IVar 4])] (IReturn (IFCall ("Prelude","lexLitChar_runEsc_6",0) [IVar 10,IVar 3])))])),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 11] [IVarAssign 11 (ICCall ("","char",0) [IVar 4])] (IReturn (IFCall ("Prelude","lexLitChar_runEsc_6",0) [IVar 11,IVar 3])))]))]))),IFunction ("Prelude","lexLitChar_runEsc_4",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [ILit (IChar '0'),IVar 4]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 4,ILit (IChar '9')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9] [IVarAssign 5 (IFPCall ("Prelude","isDigit",0) 1 []),IVarAssign 6 (ICCall ("","char",0) [IVar 4]),IVarAssign 7 (ICCall ("Prelude",":",0) [IVar 6,IVar 3]),IVarAssign 8 (IFCall ("Prelude","span",0) [IVar 5,IVar 7]),IVarAssign 9 (ICCall ("Prelude","[]",0) [])] (IReturn (ICCall ("Prelude",":",0) [IVar 8,IVar 9]))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [ILit (IChar 'A'),IVar 4]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 4,ILit (IChar 'Z')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 10,IVarDecl 11,IVarDecl 12,IVarDecl 13,IVarDecl 14] [IVarAssign 10 (IFPCall ("Prelude","lexLitChar_isCharName",0) 1 []),IVarAssign 11 (ICCall ("","char",0) [IVar 4]),IVarAssign 12 (ICCall ("Prelude",":",0) [IVar 11,IVar 3]),IVarAssign 13 (IFCall ("Prelude","span",0) [IVar 10,IVar 12]),IVarAssign 14 (ICCall ("Prelude","[]",0) [])] (IReturn (ICCall ("Prelude",":",0) [IVar 13,IVar 14]))),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 15] [IVarAssign 15 (ICCall ("","char",0) [IVar 4])] (IReturn (IFCall ("Prelude","lexLitChar_runEsc_6",0) [IVar 15,IVar 3])))])),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 16] [IVarAssign 16 (ICCall ("","char",0) [IVar 4])] (IReturn (IFCall ("Prelude","lexLitChar_runEsc_6",0) [IVar 16,IVar 3])))]))])),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [ILit (IChar 'A'),IVar 4]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 4,ILit (IChar 'Z')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 17,IVarDecl 18,IVarDecl 19,IVarDecl 20,IVarDecl 21] [IVarAssign 17 (IFPCall ("Prelude","lexLitChar_isCharName",0) 1 []),IVarAssign 18 (ICCall ("","char",0) [IVar 4]),IVarAssign 19 (ICCall ("Prelude",":",0) [IVar 18,IVar 3]),IVarAssign 20 (IFCall ("Prelude","span",0) [IVar 17,IVar 19]),IVarAssign 21 (ICCall ("Prelude","[]",0) [])] (IReturn (ICCall ("Prelude",":",0) [IVar 20,IVar 21]))),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 22] [IVarAssign 22 (ICCall ("","char",0) [IVar 4])] (IReturn (IFCall ("Prelude","lexLitChar_runEsc_6",0) [IVar 22,IVar 3])))])),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 23] [IVarAssign 23 (ICCall ("","char",0) [IVar 4])] (IReturn (IFCall ("Prelude","lexLitChar_runEsc_6",0) [IVar 23,IVar 3])))]))]))]))),IFunction ("Prelude","lexLitChar_runEsc_3",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqChar",0) [IVar 4,ILit (IChar 'x')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9] [IVarAssign 5 (IFPCall ("Prelude","isHexDigit",0) 1 []),IVarAssign 6 (IFCall ("Prelude","span",0) [IVar 5,IVar 3]),IVarAssign 7 (ICCall ("","char",0) [ILit (IChar 'x')]),IVarAssign 8 (IFCall ("Prelude","lexLitChar_lexPrefix",0) [IVar 7,IVar 6]),IVarAssign 9 (ICCall ("Prelude","[]",0) [])] (IReturn (ICCall ("Prelude",":",0) [IVar 8,IVar 9]))),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 10] [IVarAssign 10 (ICCall ("","char",0) [IVar 4])] (IReturn (IFCall ("Prelude","lexLitChar_runEsc_4",0) [IVar 10,IVar 3])))]))]))),IFunction ("Prelude","lexLitChar_runEsc_2",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqChar",0) [IVar 4,ILit (IChar 'o')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9] [IVarAssign 5 (IFPCall ("Prelude","isOctDigit",0) 1 []),IVarAssign 6 (IFCall ("Prelude","span",0) [IVar 5,IVar 3]),IVarAssign 7 (ICCall ("","char",0) [ILit (IChar 'o')]),IVarAssign 8 (IFCall ("Prelude","lexLitChar_lexPrefix",0) [IVar 7,IVar 6]),IVarAssign 9 (ICCall ("Prelude","[]",0) [])] (IReturn (ICCall ("Prelude",":",0) [IVar 8,IVar 9]))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqChar",0) [IVar 4,ILit (IChar 'x')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 10,IVarDecl 11,IVarDecl 12,IVarDecl 13,IVarDecl 14] [IVarAssign 10 (IFPCall ("Prelude","isHexDigit",0) 1 []),IVarAssign 11 (IFCall ("Prelude","span",0) [IVar 10,IVar 3]),IVarAssign 12 (ICCall ("","char",0) [ILit (IChar 'x')]),IVarAssign 13 (IFCall ("Prelude","lexLitChar_lexPrefix",0) [IVar 12,IVar 11]),IVarAssign 14 (ICCall ("Prelude","[]",0) [])] (IReturn (ICCall ("Prelude",":",0) [IVar 13,IVar 14]))),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 15] [IVarAssign 15 (ICCall ("","char",0) [IVar 4])] (IReturn (IFCall ("Prelude","lexLitChar_runEsc_4",0) [IVar 15,IVar 3])))]))]))]))),IFunction ("Prelude","lexLitChar_runEsc_1",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqChar",0) [IVar 4,ILit (IChar 'b')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9] [IVarAssign 5 (IFPCall ("Prelude","isBinDigit",0) 1 []),IVarAssign 6 (IFCall ("Prelude","span",0) [IVar 5,IVar 3]),IVarAssign 7 (ICCall ("","char",0) [ILit (IChar 'b')]),IVarAssign 8 (IFCall ("Prelude","lexLitChar_lexPrefix",0) [IVar 7,IVar 6]),IVarAssign 9 (ICCall ("Prelude","[]",0) [])] (IReturn (ICCall ("Prelude",":",0) [IVar 8,IVar 9]))),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 10] [IVarAssign 10 (ICCall ("","char",0) [IVar 4])] (IReturn (IFCall ("Prelude","lexLitChar_runEsc_2",0) [IVar 10,IVar 3])))]))]))),IFunction ("Prelude","lexLitChar_runEsc",0) 2 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl (-7)] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1]),IVarAssign 4 (IFPCall ("Prelude","lexLitChar_runEsc#P10",0) 2 [IVar 2]),IVarAssign 5 (ICCall ("Prelude","False",0) []),IVarAssign 6 (ICCall ("StringConst","afnrtv\\\"'",0) []),IVarAssign (-7) (IFCall ("Prelude","foldr",0) [IVar 4,IVar 5,IVar 6])] (ICaseCons (-7) [IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 8,IVarDecl 9,IVarDecl 10,IVarDecl 11] [IVarAssign 8 (ICCall ("Prelude","[]",0) []),IVarAssign 9 (ICCall ("Prelude",":",0) [IVar 2,IVar 8]),IVarAssign 10 (ICCall ("Prelude","(,)",0) [IVar 9,IVar 3]),IVarAssign 11 (ICCall ("Prelude","[]",0) [])] (IReturn (ICCall ("Prelude",":",0) [IVar 10,IVar 11]))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons 2 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 12] [IVarAssign 12 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqChar",0) [IVar 12,ILit (IChar 'b')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 13,IVarDecl 14,IVarDecl 15,IVarDecl 16,IVarDecl 17] [IVarAssign 13 (IFPCall ("Prelude","isBinDigit",0) 1 []),IVarAssign 14 (IFCall ("Prelude","span",0) [IVar 13,IVar 3]),IVarAssign 15 (ICCall ("","char",0) [ILit (IChar 'b')]),IVarAssign 16 (IFCall ("Prelude","lexLitChar_lexPrefix",0) [IVar 15,IVar 14]),IVarAssign 17 (ICCall ("Prelude","[]",0) [])] (IReturn (ICCall ("Prelude",":",0) [IVar 16,IVar 17]))),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 18] [IVarAssign 18 (ICCall ("","char",0) [IVar 12])] (IReturn (IFCall ("Prelude","lexLitChar_runEsc_2",0) [IVar 18,IVar 3])))]))]))]))),IFunction ("Prelude","lexLitChar_runEsc#P10",0) 3 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2])] (ICaseCons 2 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 1 [0])] (ICaseCons 3 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 6] [IVarAssign 6 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqChar",0) [IVar 5,IVar 6]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (IVar 4)))]))]))]))),IFunction ("Prelude","lexLitChar_lexEsc",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","[]",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","[]",0) []))),IConsBranch ("Prelude",":",1) 2 (IBlock [IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 1 [0]),IVarAssign 3 (IVarAccess 1 [1])] (IReturn (IFCall ("Prelude","lexLitChar_runEsc",0) [IVar 3,IVar 4])))]))),IFunction ("Prelude","lexLitChar",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","[]",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","[]",0) []))),IConsBranch ("Prelude",":",1) 2 (IBlock [IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 1 [0]),IVarAssign 3 (IVarAccess 1 [1])] (ICaseCons 3 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqChar",0) [IVar 5,ILit (IChar '\\')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 6,IVarDecl 7,IVarDecl 8] [IVarAssign 6 (IFCall ("Prelude","lexLitChar#A0",0) [IVar 4]),IVarAssign 7 (IFPCall ("Prelude","lexLitChar#P11",0) 3 []),IVarAssign 8 (IFPCall ("Prelude","id",0) 1 [])] (IReturn (IFCall ("Prelude","build_fold",0) [IVar 7,IVar 8,IVar 6]))),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 9,IVarDecl 10,IVarDecl 11,IVarDecl 12,IVarDecl 13] [IVarAssign 9 (ICCall ("","char",0) [IVar 5]),IVarAssign 10 (ICCall ("Prelude","[]",0) []),IVarAssign 11 (ICCall ("Prelude",":",0) [IVar 9,IVar 10]),IVarAssign 12 (ICCall ("Prelude","(,)",0) [IVar 11,IVar 4]),IVarAssign 13 (ICCall ("Prelude","[]",0) [])] (IReturn (ICCall ("Prelude",":",0) [IVar 12,IVar 13])))]))]))]))),IFunction ("Prelude","lexLitChar#A0",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","[]",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","[]",0) []))),IConsBranch ("Prelude",":",1) 2 (IBlock [IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 1 [0]),IVarAssign 3 (IVarAccess 1 [1])] (IReturn (IFCall ("Prelude","lexLitChar_runEsc",0) [IVar 3,IVar 4])))]))),IFunction ("Prelude","lexLitChar#P11",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (ICCall ("","char",0) [ILit (IChar '\\')]),IVarAssign 6 (IFCall ("Prelude","lexLitChar_lexPrefix",0) [IVar 5,IVar 3])] (IReturn (IFCall ("Prelude","apply",0) [IVar 2,IVar 6,IVar 4])))),IFunction ("Prelude","lex_lexStrItem",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","[]",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","[]",0) []))),IConsBranch ("Prelude",":",1) 2 (IBlock [IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 1 [0]),IVarAssign 3 (IVarAccess 1 [1])] (ICaseCons 3 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqChar",0) [IVar 5,ILit (IChar '\\')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (ICaseCons 4 [IConsBranch ("Prelude","[]",0) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqChar",0) [IVar 5,ILit (IChar '\\')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 33,IVarDecl 34,IVarDecl 35] [IVarAssign 33 (IFPCall ("Prelude","lex_lexStrItem#P13",0) 3 []),IVarAssign 34 (IFPCall ("Prelude","id",0) 1 []),IVarAssign 35 (ICCall ("Prelude","[]",0) [])] (IReturn (IFCall ("Prelude","build_fold",0) [IVar 33,IVar 34,IVar 35]))),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 36,IVarDecl 37,IVarDecl 38,IVarDecl 39,IVarDecl 40,IVarDecl 41] [IVarAssign 36 (ICCall ("","char",0) [IVar 5]),IVarAssign 37 (ICCall ("Prelude","[]",0) []),IVarAssign 38 (ICCall ("Prelude",":",0) [IVar 36,IVar 37]),IVarAssign 39 (ICCall ("Prelude","[]",0) []),IVarAssign 40 (ICCall ("Prelude","(,)",0) [IVar 38,IVar 39]),IVarAssign 41 (ICCall ("Prelude","[]",0) [])] (IReturn (ICCall ("Prelude",":",0) [IVar 40,IVar 41])))])),IConsBranch ("Prelude",":",1) 2 (IBlock [IVarDecl 6,IVarDecl 7] [IVarAssign 7 (IVarAccess 1 [0]),IVarAssign 6 (IVarAccess 1 [1])] (ICaseCons 6 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 8] [IVarAssign 8 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqChar",0) [IVar 8,ILit (IChar '&')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 9,IVarDecl 10,IVarDecl 11] [IVarAssign 9 (ICCall ("StringConst","\\&",0) []),IVarAssign 10 (ICCall ("Prelude","(,)",0) [IVar 9,IVar 7]),IVarAssign 11 (ICCall ("Prelude","[]",0) [])] (IReturn (ICCall ("Prelude",":",0) [IVar 10,IVar 11]))),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 12,IVarDecl (-13)] [IVarAssign 12 (ICCall ("","char",0) [IVar 8]),IVarAssign (-13) (IFCall ("Prelude","isSpace",0) [IVar 12])] (ICaseCons (-13) [IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 14,IVarDecl (-15)] [IVarAssign 14 (IFPCall ("Prelude","isSpace",0) 1 []),IVarAssign (-15) (IFCall ("Prelude","dropWhile",0) [IVar 14,IVar 7])] (ICaseCons (-15) [IConsBranch ("Prelude","[]",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","[]",0) []))),IConsBranch ("Prelude",":",1) 2 (IBlock [IVarDecl 16,IVarDecl 17] [IVarAssign 17 (IVarAccess 1 [0]),IVarAssign 16 (IVarAccess 1 [1])] (ICaseCons 16 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 18] [IVarAssign 18 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqChar",0) [IVar 18,ILit (IChar '\\')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 19,IVarDecl 20,IVarDecl 21] [IVarAssign 19 (ICCall ("StringConst","\\&",0) []),IVarAssign 20 (ICCall ("Prelude","(,)",0) [IVar 19,IVar 17]),IVarAssign 21 (ICCall ("Prelude","[]",0) [])] (IReturn (ICCall ("Prelude",":",0) [IVar 20,IVar 21]))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","[]",0) [])))]))]))])),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqChar",0) [IVar 5,ILit (IChar '\\')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 22,IVarDecl 23,IVarDecl 24,IVarDecl 25] [IVarAssign 22 (ICCall ("","char",0) [IVar 8]),IVarAssign 23 (IFCall ("Prelude","lexLitChar_runEsc",0) [IVar 22,IVar 7]),IVarAssign 24 (IFPCall ("Prelude","lex_lexStrItem#P12",0) 3 []),IVarAssign 25 (IFPCall ("Prelude","id",0) 1 [])] (IReturn (IFCall ("Prelude","build_fold",0) [IVar 24,IVar 25,IVar 23]))),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 26,IVarDecl 27,IVarDecl 28,IVarDecl 29,IVarDecl 30,IVarDecl 31,IVarDecl 32] [IVarAssign 26 (ICCall ("","char",0) [IVar 5]),IVarAssign 27 (ICCall ("Prelude","[]",0) []),IVarAssign 28 (ICCall ("Prelude",":",0) [IVar 26,IVar 27]),IVarAssign 29 (ICCall ("","char",0) [IVar 8]),IVarAssign 30 (ICCall ("Prelude",":",0) [IVar 29,IVar 7]),IVarAssign 31 (ICCall ("Prelude","(,)",0) [IVar 28,IVar 30]),IVarAssign 32 (ICCall ("Prelude","[]",0) [])] (IReturn (ICCall ("Prelude",":",0) [IVar 31,IVar 32])))]))]))]))]))])),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqChar",0) [IVar 5,ILit (IChar '\\')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 42,IVarDecl 43,IVarDecl 44] [IVarAssign 42 (IFCall ("Prelude","lex_lexStrItem#A1",0) [IVar 4]),IVarAssign 43 (IFPCall ("Prelude","lex_lexStrItem#P14",0) 3 []),IVarAssign 44 (IFPCall ("Prelude","id",0) 1 [])] (IReturn (IFCall ("Prelude","build_fold",0) [IVar 43,IVar 44,IVar 42]))),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 45,IVarDecl 46,IVarDecl 47,IVarDecl 48,IVarDecl 49] [IVarAssign 45 (ICCall ("","char",0) [IVar 5]),IVarAssign 46 (ICCall ("Prelude","[]",0) []),IVarAssign 47 (ICCall ("Prelude",":",0) [IVar 45,IVar 46]),IVarAssign 48 (ICCall ("Prelude","(,)",0) [IVar 47,IVar 4]),IVarAssign 49 (ICCall ("Prelude","[]",0) [])] (IReturn (ICCall ("Prelude",":",0) [IVar 48,IVar 49])))]))]))]))]))),IFunction ("Prelude","lex_lexStrItem#A1",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","[]",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","[]",0) []))),IConsBranch ("Prelude",":",1) 2 (IBlock [IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 1 [0]),IVarAssign 3 (IVarAccess 1 [1])] (IReturn (IFCall ("Prelude","lexLitChar_runEsc",0) [IVar 3,IVar 4])))]))),IFunction ("Prelude","lex_lexStrItem#P14",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (ICCall ("","char",0) [ILit (IChar '\\')]),IVarAssign 6 (IFCall ("Prelude","lexLitChar_lexPrefix",0) [IVar 5,IVar 3])] (IReturn (IFCall ("Prelude","apply",0) [IVar 2,IVar 6,IVar 4])))),IFunction ("Prelude","lex_lexStrItem#P13",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (ICCall ("","char",0) [ILit (IChar '\\')]),IVarAssign 6 (IFCall ("Prelude","lexLitChar_lexPrefix",0) [IVar 5,IVar 3])] (IReturn (IFCall ("Prelude","apply",0) [IVar 2,IVar 6,IVar 4])))),IFunction ("Prelude","lex_lexStrItem#P12",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (ICCall ("","char",0) [ILit (IChar '\\')]),IVarAssign 6 (IFCall ("Prelude","lexLitChar_lexPrefix",0) [IVar 5,IVar 3])] (IReturn (IFCall ("Prelude","apply",0) [IVar 2,IVar 6,IVar 4])))),IFunction ("Prelude","lex_lexString_string",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","(,)",0) 2 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7] [IVarAssign 4 (IVarAccess 1 [0]),IVarAssign 3 (IVarAccess 1 [1]),IVarAssign 5 (IFCall ("Prelude","lex_lexString",0) [IVar 4]),IVarAssign 6 (IFPCall ("Prelude","lex_lexString_string#P15",0) 3 [IVar 3]),IVarAssign 7 (IFPCall ("Prelude","id",0) 1 [])] (IReturn (IFCall ("Prelude","build_fold",0) [IVar 6,IVar 7,IVar 5])))]))),IFunction ("Prelude","lex_lexString_string#P15",0) 4 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 5 (IVarAccess 0 [0]),IVarAssign 4 (IVarAccess 0 [1]),IVarAssign 3 (IVarAccess 0 [2]),IVarAssign 2 (IVarAccess 0 [3]),IVarAssign 6 (IFCall ("Prelude","makeTriple",0) [IVar 2,IVar 4])] (IReturn (IFCall ("Prelude","apply",0) [IVar 3,IVar 6,IVar 5])))),IFunction ("Prelude","isAlphaNum",0) 1 Private [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 3] [IVarAssign 3 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [ILit (IChar 'A'),IVar 3]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 3,ILit (IChar 'Z')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [ILit (IChar 'a'),IVar 3]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 3,ILit (IChar 'z')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [ILit (IChar '0'),IVar 3]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 3,ILit (IChar '9')]))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))]))])),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [ILit (IChar '0'),IVar 3]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 3,ILit (IChar '9')]))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))]))]))])),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [ILit (IChar 'a'),IVar 3]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 3,ILit (IChar 'z')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [ILit (IChar '0'),IVar 3]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 3,ILit (IChar '9')]))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))]))])),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [ILit (IChar '0'),IVar 3]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 3,ILit (IChar '9')]))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))]))]))]))]))),IFunction ("Prelude","lex_isIdChar",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl (-3)] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign (-3) (IFCall ("Prelude","isAlphaNum",0) [IVar 2])] (ICaseCons (-3) [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 4 (IFPCall ("Prelude","lex_isIdChar#P16",0) 2 [IVar 2]),IVarAssign 5 (ICCall ("Prelude","False",0) []),IVarAssign 6 (ICCall ("StringConst","_'",0) [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 4,IVar 5,IVar 6])))]))),IFunction ("Prelude","lex_isIdChar#P16",0) 3 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2])] (ICaseCons 2 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 1 [0])] (ICaseCons 3 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 6] [IVarAssign 6 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqChar",0) [IVar 5,IVar 6]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (IVar 4)))]))]))]))),IFunction ("Prelude","nonNull._#lambda452",0) 2 Private [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("Prelude","(,)",0) 2 (IBlock [IVarDecl 4,IVarDecl 5] [IVarAssign 5 (IVarAccess 1 [0]),IVarAssign 4 (IVarAccess 1 [1])] (ICaseCons 4 [IConsBranch ("Prelude","[]",0) 0 (IBlock [] [] (IReturn (IVar 3))),IConsBranch ("Prelude",":",1) 2 (IBlock [IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9] [IVarAssign 7 (IVarAccess 1 [0]),IVarAssign 6 (IVarAccess 1 [1]),IVarAssign 8 (ICCall ("Prelude",":",0) [IVar 6,IVar 7]),IVarAssign 9 (ICCall ("Prelude","(,)",0) [IVar 8,IVar 5])] (IReturn (ICCall ("Prelude",":",0) [IVar 9,IVar 3])))]))]))),IFunction ("Prelude","lexDigits",0) 1 Private [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFPCall ("Prelude","isDigit",0) 1 []),IVarAssign 4 (IFCall ("Prelude","span",0) [IVar 3,IVar 2]),IVarAssign 5 (IFPCall ("Prelude","nonNull._#lambda452",0) 2 []),IVarAssign 6 (ICCall ("Prelude","[]",0) []),IVarAssign 7 (ICCall ("Prelude","[]",0) []),IVarAssign 8 (ICCall ("Prelude",":",0) [IVar 4,IVar 7])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 5,IVar 6,IVar 8])))),IFunction ("Prelude","lex_lexPMExp",0) 2 Public [1] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 3 [IConsBranch ("Prelude","[]",0) 0 (IBlock [IVarDecl 36,IVarDecl 37,IVarDecl 38,IVarDecl 39,IVarDecl 40,IVarDecl 41,IVarDecl 42,IVarDecl 43,IVarDecl 44,IVarDecl 45] [IVarAssign 36 (IFPCall ("Prelude","isDigit",0) 1 []),IVarAssign 37 (ICCall ("Prelude","[]",0) []),IVarAssign 38 (IFCall ("Prelude","span",0) [IVar 36,IVar 37]),IVarAssign 39 (IFPCall ("Prelude","nonNull._#lambda452",0) 2 []),IVarAssign 40 (ICCall ("Prelude","[]",0) []),IVarAssign 41 (ICCall ("Prelude","[]",0) []),IVarAssign 42 (ICCall ("Prelude",":",0) [IVar 38,IVar 41]),IVarAssign 43 (IFCall ("Prelude","foldr",0) [IVar 39,IVar 40,IVar 42]),IVarAssign 44 (IFPCall ("Prelude","lex_lexPMExp#P20",0) 3 [IVar 2]),IVarAssign 45 (IFPCall ("Prelude","id",0) 1 [])] (IReturn (IFCall ("Prelude","build_fold",0) [IVar 44,IVar 45,IVar 43]))),IConsBranch ("Prelude",":",1) 2 (IBlock [IVarDecl 4,IVarDecl 5] [IVarAssign 5 (IVarAccess 1 [0]),IVarAssign 4 (IVarAccess 1 [1])] (ICaseCons 4 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 6] [IVarAssign 6 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqChar",0) [IVar 6,ILit (IChar '+')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10,IVarDecl 11,IVarDecl 12,IVarDecl 13,IVarDecl 14,IVarDecl 15] [IVarAssign 7 (IFPCall ("Prelude","isDigit",0) 1 []),IVarAssign 8 (IFCall ("Prelude","span",0) [IVar 7,IVar 5]),IVarAssign 9 (IFPCall ("Prelude","nonNull._#lambda452",0) 2 []),IVarAssign 10 (ICCall ("Prelude","[]",0) []),IVarAssign 11 (ICCall ("Prelude","[]",0) []),IVarAssign 12 (ICCall ("Prelude",":",0) [IVar 8,IVar 11]),IVarAssign 13 (IFCall ("Prelude","foldr",0) [IVar 9,IVar 10,IVar 12]),IVarAssign 14 (IFPCall ("Prelude","lex_lexPMExp#P17",0) 3 [IVar 2]),IVarAssign 15 (IFPCall ("Prelude","id",0) 1 [])] (IReturn (IFCall ("Prelude","build_fold",0) [IVar 14,IVar 15,IVar 13]))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqChar",0) [IVar 6,ILit (IChar '-')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 16,IVarDecl 17,IVarDecl 18,IVarDecl 19,IVarDecl 20,IVarDecl 21,IVarDecl 22,IVarDecl 23,IVarDecl 24] [IVarAssign 16 (IFPCall ("Prelude","isDigit",0) 1 []),IVarAssign 17 (IFCall ("Prelude","span",0) [IVar 16,IVar 5]),IVarAssign 18 (IFPCall ("Prelude","nonNull._#lambda452",0) 2 []),IVarAssign 19 (ICCall ("Prelude","[]",0) []),IVarAssign 20 (ICCall ("Prelude","[]",0) []),IVarAssign 21 (ICCall ("Prelude",":",0) [IVar 17,IVar 20]),IVarAssign 22 (IFCall ("Prelude","foldr",0) [IVar 18,IVar 19,IVar 21]),IVarAssign 23 (IFPCall ("Prelude","lex_lexPMExp#P18",0) 3 [IVar 2]),IVarAssign 24 (IFPCall ("Prelude","id",0) 1 [])] (IReturn (IFCall ("Prelude","build_fold",0) [IVar 23,IVar 24,IVar 22]))),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 25,IVarDecl 26,IVarDecl 27,IVarDecl 28,IVarDecl 29,IVarDecl 30,IVarDecl 31,IVarDecl 32,IVarDecl 33,IVarDecl 34,IVarDecl 35] [IVarAssign 25 (IFPCall ("Prelude","isDigit",0) 1 []),IVarAssign 26 (ICCall ("","char",0) [IVar 6]),IVarAssign 27 (ICCall ("Prelude",":",0) [IVar 26,IVar 5]),IVarAssign 28 (IFCall ("Prelude","span",0) [IVar 25,IVar 27]),IVarAssign 29 (IFPCall ("Prelude","nonNull._#lambda452",0) 2 []),IVarAssign 30 (ICCall ("Prelude","[]",0) []),IVarAssign 31 (ICCall ("Prelude","[]",0) []),IVarAssign 32 (ICCall ("Prelude",":",0) [IVar 28,IVar 31]),IVarAssign 33 (IFCall ("Prelude","foldr",0) [IVar 29,IVar 30,IVar 32]),IVarAssign 34 (IFPCall ("Prelude","lex_lexPMExp#P19",0) 3 [IVar 2]),IVarAssign 35 (IFPCall ("Prelude","id",0) 1 [])] (IReturn (IFCall ("Prelude","build_fold",0) [IVar 34,IVar 35,IVar 33])))]))]))]))]))),IFunction ("Prelude","lex_lexPMExp#P20",0) 4 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7] [IVarAssign 5 (IVarAccess 0 [0]),IVarAssign 4 (IVarAccess 0 [1]),IVarAssign 3 (IVarAccess 0 [2]),IVarAssign 2 (IVarAccess 0 [3]),IVarAssign 6 (ICCall ("Prelude","[]",0) []),IVarAssign 7 (IFCall ("Prelude","lex_lexPMExp_sgn",0) [IVar 2,IVar 6,IVar 4])] (IReturn (IFCall ("Prelude","apply",0) [IVar 3,IVar 7,IVar 5])))),IFunction ("Prelude","lex_lexPMExp#P19",0) 4 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7] [IVarAssign 5 (IVarAccess 0 [0]),IVarAssign 4 (IVarAccess 0 [1]),IVarAssign 3 (IVarAccess 0 [2]),IVarAssign 2 (IVarAccess 0 [3]),IVarAssign 6 (ICCall ("Prelude","[]",0) []),IVarAssign 7 (IFCall ("Prelude","lex_lexPMExp_sgn",0) [IVar 2,IVar 6,IVar 4])] (IReturn (IFCall ("Prelude","apply",0) [IVar 3,IVar 7,IVar 5])))),IFunction ("Prelude","lex_lexPMExp#P18",0) 4 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7] [IVarAssign 5 (IVarAccess 0 [0]),IVarAssign 4 (IVarAccess 0 [1]),IVarAssign 3 (IVarAccess 0 [2]),IVarAssign 2 (IVarAccess 0 [3]),IVarAssign 6 (ICCall ("StringConst","-",0) []),IVarAssign 7 (IFCall ("Prelude","lex_lexPMExp_sgn",0) [IVar 2,IVar 6,IVar 4])] (IReturn (IFCall ("Prelude","apply",0) [IVar 3,IVar 7,IVar 5])))),IFunction ("Prelude","lex_lexPMExp#P17",0) 4 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7] [IVarAssign 5 (IVarAccess 0 [0]),IVarAssign 4 (IVarAccess 0 [1]),IVarAssign 3 (IVarAccess 0 [2]),IVarAssign 2 (IVarAccess 0 [3]),IVarAssign 6 (ICCall ("StringConst","+",0) []),IVarAssign 7 (IFCall ("Prelude","lex_lexPMExp_sgn",0) [IVar 2,IVar 6,IVar 4])] (IReturn (IFCall ("Prelude","apply",0) [IVar 3,IVar 7,IVar 5])))),IFunction ("Prelude","lex_lexExp",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","[]",0) 0 (IBlock [IVarDecl 13,IVarDecl 14,IVarDecl 15,IVarDecl 16] [IVarAssign 13 (ICCall ("Prelude","[]",0) []),IVarAssign 14 (ICCall ("Prelude","[]",0) []),IVarAssign 15 (ICCall ("Prelude","(,)",0) [IVar 13,IVar 14]),IVarAssign 16 (ICCall ("Prelude","[]",0) [])] (IReturn (ICCall ("Prelude",":",0) [IVar 15,IVar 16]))),IConsBranch ("Prelude",":",1) 2 (IBlock [IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 1 [0]),IVarAssign 3 (IVarAccess 1 [1])] (ICaseCons 3 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqChar",0) [IVar 5,ILit (IChar 'e')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 6] [IVarAssign 6 (ICCall ("","char",0) [IVar 5])] (IReturn (IFCall ("Prelude","lex_lexPMExp",0) [IVar 6,IVar 4]))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqChar",0) [IVar 5,ILit (IChar 'E')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 7] [IVarAssign 7 (ICCall ("","char",0) [IVar 5])] (IReturn (IFCall ("Prelude","lex_lexPMExp",0) [IVar 7,IVar 4]))),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 8,IVarDecl 9,IVarDecl 10,IVarDecl 11,IVarDecl 12] [IVarAssign 8 (ICCall ("Prelude","[]",0) []),IVarAssign 9 (ICCall ("","char",0) [IVar 5]),IVarAssign 10 (ICCall ("Prelude",":",0) [IVar 9,IVar 4]),IVarAssign 11 (ICCall ("Prelude","(,)",0) [IVar 8,IVar 10]),IVarAssign 12 (ICCall ("Prelude","[]",0) [])] (IReturn (ICCall ("Prelude",":",0) [IVar 11,IVar 12])))]))]))]))]))),IFunction ("Prelude","lex_lexFracExp_exp",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","(,)",0) 2 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7] [IVarAssign 4 (IVarAccess 1 [0]),IVarAssign 3 (IVarAccess 1 [1]),IVarAssign 5 (IFCall ("Prelude","lex_lexExp",0) [IVar 4]),IVarAssign 6 (IFPCall ("Prelude","lex_lexFracExp_exp#P21",0) 3 [IVar 3]),IVarAssign 7 (IFPCall ("Prelude","id",0) 1 [])] (IReturn (IFCall ("Prelude","build_fold",0) [IVar 6,IVar 7,IVar 5])))]))),IFunction ("Prelude","lex_lexFracExp_exp#P21",0) 4 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 5 (IVarAccess 0 [0]),IVarAssign 4 (IVarAccess 0 [1]),IVarAssign 3 (IVarAccess 0 [2]),IVarAssign 2 (IVarAccess 0 [3]),IVarAssign 6 (IFCall ("Prelude","makeTriple",0) [IVar 2,IVar 4])] (IReturn (IFCall ("Prelude","apply",0) [IVar 3,IVar 6,IVar 5])))),IFunction ("Prelude","lex_lexFracExp",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","[]",0) 0 (IBlock [IVarDecl 27] [IVarAssign 27 (ICCall ("Prelude","[]",0) [])] (IReturn (IFCall ("Prelude","lex_lexExp",0) [IVar 27]))),IConsBranch ("Prelude",":",1) 2 (IBlock [IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 1 [0]),IVarAssign 3 (IVarAccess 1 [1])] (ICaseCons 3 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqChar",0) [IVar 5,ILit (IChar '.')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (ICaseCons 4 [IConsBranch ("Prelude","[]",0) 0 (IBlock [IVarDecl 22,IVarDecl 23,IVarDecl 24] [IVarAssign 22 (ICCall ("","char",0) [IVar 5]),IVarAssign 23 (ICCall ("Prelude","[]",0) []),IVarAssign 24 (ICCall ("Prelude",":",0) [IVar 22,IVar 23])] (IReturn (IFCall ("Prelude","lex_lexExp",0) [IVar 24]))),IConsBranch ("Prelude",":",1) 2 (IBlock [IVarDecl 6,IVarDecl 7] [IVarAssign 7 (IVarAccess 1 [0]),IVarAssign 6 (IVarAccess 1 [1])] (ICaseCons 6 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 8] [IVarAssign 8 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [ILit (IChar '0'),IVar 8]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 8,ILit (IChar '9')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 9,IVarDecl 10,IVarDecl 11,IVarDecl 12,IVarDecl 13] [IVarAssign 9 (ICCall ("","char",0) [IVar 8]),IVarAssign 10 (ICCall ("Prelude",":",0) [IVar 9,IVar 7]),IVarAssign 11 (IFCall ("Prelude","lexDigits",0) [IVar 10]),IVarAssign 12 (IFPCall ("Prelude","lex_lexFracExp#P22",0) 3 []),IVarAssign 13 (IFPCall ("Prelude","lex_lexFracExp#P23",0) 1 [])] (IReturn (IFCall ("Prelude","build_fold",0) [IVar 12,IVar 13,IVar 11]))),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 14,IVarDecl 15,IVarDecl 16,IVarDecl 17] [IVarAssign 14 (ICCall ("","char",0) [IVar 5]),IVarAssign 15 (ICCall ("","char",0) [IVar 8]),IVarAssign 16 (ICCall ("Prelude",":",0) [IVar 15,IVar 7]),IVarAssign 17 (ICCall ("Prelude",":",0) [IVar 14,IVar 16])] (IReturn (IFCall ("Prelude","lex_lexExp",0) [IVar 17])))])),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 18,IVarDecl 19,IVarDecl 20,IVarDecl 21] [IVarAssign 18 (ICCall ("","char",0) [IVar 5]),IVarAssign 19 (ICCall ("","char",0) [IVar 8]),IVarAssign 20 (ICCall ("Prelude",":",0) [IVar 19,IVar 7]),IVarAssign 21 (ICCall ("Prelude",":",0) [IVar 18,IVar 20])] (IReturn (IFCall ("Prelude","lex_lexExp",0) [IVar 21])))]))]))])),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 25,IVarDecl 26] [IVarAssign 25 (ICCall ("","char",0) [IVar 5]),IVarAssign 26 (ICCall ("Prelude",":",0) [IVar 25,IVar 4])] (IReturn (IFCall ("Prelude","lex_lexExp",0) [IVar 26])))]))]))]))),IFunction ("Prelude","lex_lexFracExp#P23",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (IReturn (IVar 2)))),IFunction ("Prelude","lex_lexFracExp#P22",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFCall ("Prelude","lex_lexFracExp_exp",0) [IVar 3]),IVarAssign 6 (IFPCall ("Prelude","lex_lexFracExp#P22#P24",0) 2 [IVar 2])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 6,IVar 4,IVar 5])))),IFunction ("Prelude","lex_lexFracExp#P22#P24",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFCall ("Prelude","lex_lexFracExp_dot",0) [IVar 3])] (IReturn (IFCall ("Prelude","apply",0) [IVar 2,IVar 5,IVar 4])))),IFunction ("Prelude","lex",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","[]",0) 0 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 3 (ICCall ("Prelude","[]",0) []),IVarAssign 4 (ICCall ("Prelude","[]",0) []),IVarAssign 5 (ICCall ("Prelude","(,)",0) [IVar 3,IVar 4]),IVarAssign 6 (ICCall ("Prelude","[]",0) [])] (IReturn (ICCall ("Prelude",":",0) [IVar 5,IVar 6]))),IConsBranch ("Prelude",":",1) 2 (IBlock [IVarDecl 7,IVarDecl 8] [IVarAssign 8 (IVarAccess 1 [0]),IVarAssign 7 (IVarAccess 1 [1])] (ICaseCons 7 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 9] [IVarAssign 9 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqChar",0) [IVar 9,ILit (IChar '\'')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 10,IVarDecl 11,IVarDecl 12] [IVarAssign 10 (IFCall ("Prelude","lexLitChar",0) [IVar 8]),IVarAssign 11 (IFPCall ("Prelude","lex#P25",0) 3 []),IVarAssign 12 (IFPCall ("Prelude","lex#P26",0) 1 [])] (IReturn (IFCall ("Prelude","build_fold",0) [IVar 11,IVar 12,IVar 10]))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqChar",0) [IVar 9,ILit (IChar '"')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 13,IVarDecl 14,IVarDecl 15] [IVarAssign 13 (IFCall ("Prelude","lex_lexString",0) [IVar 8]),IVarAssign 14 (IFPCall ("Prelude","lex#P27",0) 3 []),IVarAssign 15 (IFPCall ("Prelude","id",0) 1 [])] (IReturn (IFCall ("Prelude","build_fold",0) [IVar 14,IVar 15,IVar 13]))),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 16] [IVarAssign 16 (ICCall ("","char",0) [IVar 9])] (IReturn (IFCall ("Prelude","lex_else",0) [IVar 16,IVar 8])))]))]))]))]))),IFunction ("Prelude","lex#P27",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFCall ("Prelude","lex_lexDoubleQuote",0) [IVar 3])] (IReturn (IFCall ("Prelude","apply",0) [IVar 2,IVar 5,IVar 4])))),IFunction ("Prelude","lex#P26",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (IReturn (IVar 2)))),IFunction ("Prelude","lex#P25",0) 3 Public [1] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2])] (ICaseCons 3 [IConsBranch ("Prelude","(,)",0) 2 (IBlock [IVarDecl 5,IVarDecl 6] [IVarAssign 6 (IVarAccess 1 [0]),IVarAssign 5 (IVarAccess 1 [1])] (ICaseCons 6 [IConsBranch ("Prelude","[]",0) 0 (IBlock [] [] (IReturn (IVar 4))),IConsBranch ("Prelude",":",1) 2 (IBlock [IVarDecl 7,IVarDecl 8] [IVarAssign 8 (IVarAccess 1 [0]),IVarAssign 7 (IVarAccess 1 [1])] (ICaseCons 7 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 9] [IVarAssign 9 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqChar",0) [IVar 9,ILit (IChar '\'')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 10,IVarDecl 11,IVarDecl 12,IVarDecl 13,IVarDecl (-14)] [IVarAssign 10 (IFPCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char",0) 2 []),IVarAssign 11 (IFPCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char",0) 2 []),IVarAssign 12 (ICCall ("Prelude","_Dict#Eq",0) [IVar 10,IVar 11]),IVarAssign 13 (ICCall ("StringConst","'",0) []),IVarAssign (-14) (IFCall ("Prelude","_impl#==#Prelude.Eq#[]",0) [IVar 12,IVar 5,IVar 13])] (ICaseCons (-14) [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IVar 4))),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 15,IVarDecl 16,IVarDecl 17,IVarDecl 18,IVarDecl 19] [IVarAssign 15 (IFPCall ("Prelude","lex#P25#P28",0) 2 [IVar 5]),IVarAssign 16 (IFCall ("Prelude","build",0) [IVar 15]),IVarAssign 17 (ICCall ("","char",0) [IVar 9]),IVarAssign 18 (ICCall ("Prelude",":",0) [IVar 17,IVar 16]),IVarAssign 19 (ICCall ("Prelude","(,)",0) [IVar 18,IVar 8])] (IReturn (IFCall ("Prelude","apply",0) [IVar 2,IVar 19,IVar 4])))])),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (IVar 4)))]))]))]))]))),IFunction ("Prelude","lex#P25#P28",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (ICCall ("StringConst","'",0) []),IVarAssign 6 (IFCall ("Prelude","foldr",0) [IVar 3,IVar 4,IVar 5])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 3,IVar 6,IVar 2])))),IFunction ("Prelude","showChar",0) 2 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (IReturn (ICCall ("Prelude",":",0) [IVar 2,IVar 3])))),IFunction ("Prelude","showParen",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showParen#P29",0) 1 [IVar 3]))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (IVar 3)))]))),IFunction ("Prelude","showParen#P29",0) 2 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1]),IVarAssign 4 (ICCall ("","char",0) [ILit (IChar ')')]),IVarAssign 5 (ICCall ("Prelude",":",0) [IVar 4,IVar 3]),IVarAssign 6 (IFCall ("Prelude","apply",0) [IVar 2,IVar 5]),IVarAssign 7 (ICCall ("","char",0) [ILit (IChar '(')])] (IReturn (ICCall ("Prelude",":",0) [IVar 7,IVar 6])))),IFunction ("Prelude","showSigned",0) 4 Private [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10,IVarDecl 11,IVarDecl 12] [IVarAssign 5 (IVarAccess 0 [0]),IVarAssign 4 (IVarAccess 0 [1]),IVarAssign 3 (IVarAccess 0 [2]),IVarAssign 2 (IVarAccess 0 [3]),IVarAssign 6 (IFCall ("Prelude","showSigned#A5",0) [IVar 2]),IVarAssign 7 (IFCall ("Prelude","<",0) [IVar 6]),IVarAssign 8 (IFCall ("Prelude","showSigned#A4",0) [IVar 2]),IVarAssign 9 (IFCall ("Prelude","fromInt",0) [IVar 8]),IVarAssign 10 (ICCall ("","int",0) [ILit (IInt 0)]),IVarAssign 11 (IFCall ("Prelude","apply",0) [IVar 9,IVar 10]),IVarAssign 12 (IFCall ("Prelude","apply",0) [IVar 7,IVar 5,IVar 11])] (ICaseCons 12 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (ICaseCons 4 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 13] [IVarAssign 13 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqInt",0) [IVar 13,ILit (IInt 6)]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 14,IVarDecl 15,IVarDecl 16,IVarDecl 17] [IVarAssign 14 (IFCall ("Prelude","showSigned#A2",0) [IVar 2]),IVarAssign 15 (IFCall ("Prelude","negate",0) [IVar 14]),IVarAssign 16 (IFCall ("Prelude","apply",0) [IVar 15,IVar 5]),IVarAssign 17 (IFCall ("Prelude","apply",0) [IVar 3,IVar 16])] (IReturn (IFPCall ("Prelude","showSigned#P30",0) 1 [IVar 17]))),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 18,IVarDecl 19,IVarDecl 20,IVarDecl 21] [IVarAssign 18 (IFCall ("Prelude","showSigned#A3",0) [IVar 2]),IVarAssign 19 (IFCall ("Prelude","negate",0) [IVar 18]),IVarAssign 20 (IFCall ("Prelude","apply",0) [IVar 19,IVar 5]),IVarAssign 21 (IFCall ("Prelude","apply",0) [IVar 3,IVar 20])] (IReturn (IFPCall ("Prelude","showSigned#P31",0) 1 [IVar 21])))]))])),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","apply",0) [IVar 3,IVar 5])))]))),IFunction ("Prelude","showSigned#A5",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Real",0) 2 (IBlock [IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 1 [0]),IVarAssign 3 (IVarAccess 1 [1])] (IReturn (IVar 4)))]))),IFunction ("Prelude","showSigned#A4",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Real",0) 2 (IBlock [IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 1 [0]),IVarAssign 3 (IVarAccess 1 [1])] (IReturn (IVar 3)))]))),IFunction ("Prelude","showSigned#A3",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Real",0) 2 (IBlock [IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 1 [0]),IVarAssign 3 (IVarAccess 1 [1])] (IReturn (IVar 3)))]))),IFunction ("Prelude","showSigned#A2",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Real",0) 2 (IBlock [IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 1 [0]),IVarAssign 3 (IVarAccess 1 [1])] (IReturn (IVar 3)))]))),IFunction ("Prelude","showSigned#P31",0) 2 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1]),IVarAssign 4 (ICCall ("","char",0) [ILit (IChar ')')]),IVarAssign 5 (ICCall ("Prelude",":",0) [IVar 4,IVar 3]),IVarAssign 6 (IFCall ("Prelude","apply",0) [IVar 2,IVar 5]),IVarAssign 7 (ICCall ("","char",0) [ILit (IChar '(')]),IVarAssign 8 (ICCall ("","char",0) [ILit (IChar '-')]),IVarAssign 9 (ICCall ("Prelude",":",0) [IVar 8,IVar 6])] (IReturn (ICCall ("Prelude",":",0) [IVar 7,IVar 9])))),IFunction ("Prelude","showSigned#P30",0) 2 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1]),IVarAssign 4 (IFCall ("Prelude","apply",0) [IVar 2,IVar 3]),IVarAssign 5 (ICCall ("","char",0) [ILit (IChar '-')])] (IReturn (ICCall ("Prelude",":",0) [IVar 5,IVar 4])))),IFunction ("Prelude","showString",0) 2 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1]),IVarAssign 4 (IFPCall ("Prelude","showChar",0) 2 [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 4,IVar 3,IVar 2])))),IFunction ("Prelude","shows",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFCall ("Prelude","showsPrec",0) [IVar 2]),IVarAssign 4 (ICCall ("","int",0) [ILit (IInt 0)])] (IReturn (IFCall ("Prelude","apply",0) [IVar 3,IVar 4])))),IFunction ("Prelude","showList'#P32",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFCall ("Prelude","foldr",0) [IVar 3,IVar 4,IVar 2]),IVarAssign 6 (ICCall ("StringConst","[]",0) [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 3,IVar 5,IVar 6])))),IFunction ("Prelude","prim_show",0) 1 Private [] (IExternal "Prelude.prim_show"),IFunction ("Prelude","unwords._#lambda282",0) 2 Private [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1]),IVarAssign 4 (IFPCall ("Prelude","unwords._#lambda282#P33",0) 2 [IVar 2,IVar 3])] (IReturn (IFCall ("Prelude","build",0) [IVar 4])))),IFunction ("Prelude","unwords._#lambda282#P33",0) 4 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8] [IVarAssign 5 (IVarAccess 0 [0]),IVarAssign 4 (IVarAccess 0 [1]),IVarAssign 3 (IVarAccess 0 [2]),IVarAssign 2 (IVarAccess 0 [3]),IVarAssign 6 (ICCall ("","char",0) [ILit (IChar ' ')]),IVarAssign 7 (ICCall ("Prelude",":",0) [IVar 6,IVar 3]),IVarAssign 8 (IFCall ("Prelude","foldr",0) [IVar 4,IVar 5,IVar 7])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 4,IVar 8,IVar 2])))),IFunction ("Prelude","unwords",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl (-5)] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFPCall ("Prelude","null_fold",0) 2 []),IVarAssign 4 (ICCall ("Prelude","True",0) []),IVarAssign (-5) (IFCall ("Prelude","foldr",0) [IVar 3,IVar 4,IVar 2])] (ICaseCons (-5) [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","[]",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 6] [IVarAssign 6 (IFPCall ("Prelude","unwords._#lambda282",0) 2 [])] (IReturn (IFCall ("Prelude","foldr1",0) [IVar 6,IVar 2])))]))),IFunction ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Either",0) 4 Public [3] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5] [IVarAssign 5 (IVarAccess 0 [0]),IVarAssign 4 (IVarAccess 0 [1]),IVarAssign 3 (IVarAccess 0 [2]),IVarAssign 2 (IVarAccess 0 [3])] (ICaseCons 5 [IConsBranch ("Prelude","Right",0) 1 (IBlock [IVarDecl 14] [IVarAssign 14 (IVarAccess 1 [0])] (ICaseCons 4 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 15] [IVarAssign 15 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqInt",0) [IVar 15,ILit (IInt 10)]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 16,IVarDecl 17,IVarDecl 18] [IVarAssign 16 (IFCall ("Prelude","showsPrec",0) [IVar 3]),IVarAssign 17 (ICCall ("","int",0) [ILit (IInt 11)]),IVarAssign 18 (IFCall ("Prelude","apply",0) [IVar 16,IVar 17,IVar 14])] (IReturn (IFPCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Either#P36",0) 1 [IVar 18]))),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 19,IVarDecl 20,IVarDecl 21] [IVarAssign 19 (IFCall ("Prelude","showsPrec",0) [IVar 3]),IVarAssign 20 (ICCall ("","int",0) [ILit (IInt 11)]),IVarAssign 21 (IFCall ("Prelude","apply",0) [IVar 19,IVar 20,IVar 14])] (IReturn (IFPCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Either#P37",0) 1 [IVar 21])))]))])),IConsBranch ("Prelude","Left",1) 1 (IBlock [IVarDecl 6] [IVarAssign 6 (IVarAccess 1 [0])] (ICaseCons 4 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 7] [IVarAssign 7 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqInt",0) [IVar 7,ILit (IInt 10)]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 8,IVarDecl 9,IVarDecl 10] [IVarAssign 8 (IFCall ("Prelude","showsPrec",0) [IVar 2]),IVarAssign 9 (ICCall ("","int",0) [ILit (IInt 11)]),IVarAssign 10 (IFCall ("Prelude","apply",0) [IVar 8,IVar 9,IVar 6])] (IReturn (IFPCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Either#P34",0) 1 [IVar 10]))),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 11,IVarDecl 12,IVarDecl 13] [IVarAssign 11 (IFCall ("Prelude","showsPrec",0) [IVar 2]),IVarAssign 12 (ICCall ("","int",0) [ILit (IInt 11)]),IVarAssign 13 (IFCall ("Prelude","apply",0) [IVar 11,IVar 12,IVar 6])] (IReturn (IFPCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Either#P35",0) 1 [IVar 13])))]))]))]))),IFunction ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Either#P37",0) 2 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1]),IVarAssign 4 (ICCall ("","char",0) [ILit (IChar ')')]),IVarAssign 5 (ICCall ("Prelude",":",0) [IVar 4,IVar 3]),IVarAssign 6 (IFCall ("Prelude","apply",0) [IVar 2,IVar 5]),IVarAssign 7 (IFPCall ("Prelude","showChar",0) 2 []),IVarAssign 8 (ICCall ("StringConst","Right ",0) []),IVarAssign 9 (IFCall ("Prelude","foldr",0) [IVar 7,IVar 6,IVar 8]),IVarAssign 10 (ICCall ("","char",0) [ILit (IChar '(')])] (IReturn (ICCall ("Prelude",":",0) [IVar 10,IVar 9])))),IFunction ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Either#P36",0) 2 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1]),IVarAssign 4 (IFCall ("Prelude","apply",0) [IVar 2,IVar 3]),IVarAssign 5 (IFPCall ("Prelude","showChar",0) 2 []),IVarAssign 6 (ICCall ("StringConst","Right ",0) [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 5,IVar 4,IVar 6])))),IFunction ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Either#P35",0) 2 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1]),IVarAssign 4 (ICCall ("","char",0) [ILit (IChar ')')]),IVarAssign 5 (ICCall ("Prelude",":",0) [IVar 4,IVar 3]),IVarAssign 6 (IFCall ("Prelude","apply",0) [IVar 2,IVar 5]),IVarAssign 7 (IFPCall ("Prelude","showChar",0) 2 []),IVarAssign 8 (ICCall ("StringConst","Left ",0) []),IVarAssign 9 (IFCall ("Prelude","foldr",0) [IVar 7,IVar 6,IVar 8]),IVarAssign 10 (ICCall ("","char",0) [ILit (IChar '(')])] (IReturn (ICCall ("Prelude",":",0) [IVar 10,IVar 9])))),IFunction ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Either#P34",0) 2 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1]),IVarAssign 4 (IFCall ("Prelude","apply",0) [IVar 2,IVar 3]),IVarAssign 5 (IFPCall ("Prelude","showChar",0) 2 []),IVarAssign 6 (ICCall ("StringConst","Left ",0) [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 5,IVar 4,IVar 6])))),IFunction ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Maybe",0) 3 Public [2] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2])] (ICaseCons 4 [IConsBranch ("Prelude","Nothing",0) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Maybe#P38",0) 1 []))),IConsBranch ("Prelude","Just",1) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 1 [0])] (ICaseCons 3 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 6] [IVarAssign 6 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqInt",0) [IVar 6,ILit (IInt 10)]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 7,IVarDecl 8,IVarDecl 9] [IVarAssign 7 (IFCall ("Prelude","showsPrec",0) [IVar 2]),IVarAssign 8 (ICCall ("","int",0) [ILit (IInt 11)]),IVarAssign 9 (IFCall ("Prelude","apply",0) [IVar 7,IVar 8,IVar 5])] (IReturn (IFPCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Maybe#P39",0) 1 [IVar 9]))),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 10,IVarDecl 11,IVarDecl 12] [IVarAssign 10 (IFCall ("Prelude","showsPrec",0) [IVar 2]),IVarAssign 11 (ICCall ("","int",0) [ILit (IInt 11)]),IVarAssign 12 (IFCall ("Prelude","apply",0) [IVar 10,IVar 11,IVar 5])] (IReturn (IFPCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Maybe#P40",0) 1 [IVar 12])))]))]))]))),IFunction ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Maybe#P40",0) 2 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1]),IVarAssign 4 (ICCall ("","char",0) [ILit (IChar ')')]),IVarAssign 5 (ICCall ("Prelude",":",0) [IVar 4,IVar 3]),IVarAssign 6 (IFCall ("Prelude","apply",0) [IVar 2,IVar 5]),IVarAssign 7 (IFPCall ("Prelude","showChar",0) 2 []),IVarAssign 8 (ICCall ("StringConst","Just ",0) []),IVarAssign 9 (IFCall ("Prelude","foldr",0) [IVar 7,IVar 6,IVar 8]),IVarAssign 10 (ICCall ("","char",0) [ILit (IChar '(')])] (IReturn (ICCall ("Prelude",":",0) [IVar 10,IVar 9])))),IFunction ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Maybe#P39",0) 2 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1]),IVarAssign 4 (IFCall ("Prelude","apply",0) [IVar 2,IVar 3]),IVarAssign 5 (IFPCall ("Prelude","showChar",0) 2 []),IVarAssign 6 (ICCall ("StringConst","Just ",0) [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 5,IVar 4,IVar 6])))),IFunction ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Maybe#P38",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFPCall ("Prelude","showChar",0) 2 []),IVarAssign 4 (ICCall ("StringConst","Nothing",0) [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 3,IVar 2,IVar 4])))),IFunction ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Ordering",0) 2 Public [1] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 3 [IConsBranch ("Prelude","LT",0) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Ordering#P41",0) 1 []))),IConsBranch ("Prelude","GT",1) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Ordering#P43",0) 1 []))),IConsBranch ("Prelude","EQ",2) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Ordering#P42",0) 1 [])))]))),IFunction ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Ordering#P43",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFPCall ("Prelude","showChar",0) 2 []),IVarAssign 4 (ICCall ("StringConst","GT",0) [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 3,IVar 2,IVar 4])))),IFunction ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Ordering#P42",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFPCall ("Prelude","showChar",0) 2 []),IVarAssign 4 (ICCall ("StringConst","EQ",0) [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 3,IVar 2,IVar 4])))),IFunction ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Ordering#P41",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFPCall ("Prelude","showChar",0) 2 []),IVarAssign 4 (ICCall ("StringConst","LT",0) [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 3,IVar 2,IVar 4])))),IFunction ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Bool",0) 2 Public [1] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 3 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Bool#P45",0) 1 []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Bool#P44",0) 1 [])))]))),IFunction ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Bool#P45",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFPCall ("Prelude","showChar",0) 2 []),IVarAssign 4 (ICCall ("StringConst","True",0) [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 3,IVar 2,IVar 4])))),IFunction ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Bool#P44",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFPCall ("Prelude","showChar",0) 2 []),IVarAssign 4 (ICCall ("StringConst","False",0) [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 3,IVar 2,IVar 4])))),IFunction ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Float",0) 2 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1]),IVarAssign 4 (IFCall ("Prelude","_inst#Prelude.Real#Prelude.Float",0) []),IVarAssign 5 (IFPCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Float#P46",0) 2 [])] (IReturn (IFCall ("Prelude","showSigned",0) [IVar 4,IVar 5,IVar 2,IVar 3])))),IFunction ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Float#P46",0) 2 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1]),IVarAssign 4 (IFPCall ("Prelude","prim_show",0) 1 []),IVarAssign 5 (IFCall ("Prelude","$##",0) [IVar 4,IVar 2]),IVarAssign 6 (IFPCall ("Prelude","showChar",0) 2 [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 6,IVar 3,IVar 5])))),IFunction ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Int",0) 2 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1]),IVarAssign 4 (IFCall ("Prelude","_inst#Prelude.Real#Prelude.Int",0) []),IVarAssign 5 (IFPCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Int#P47",0) 2 [])] (IReturn (IFCall ("Prelude","showSigned",0) [IVar 4,IVar 5,IVar 2,IVar 3])))),IFunction ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Int#P47",0) 2 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1]),IVarAssign 4 (IFPCall ("Prelude","prim_show",0) 1 []),IVarAssign 5 (IFCall ("Prelude","$##",0) [IVar 4,IVar 2]),IVarAssign 6 (IFPCall ("Prelude","showChar",0) 2 [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 6,IVar 3,IVar 5])))),IFunction ("Prelude","_impl#showList#Prelude.Show#Prelude.Char",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl (-5)] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFPCall ("Prelude","null_fold",0) 2 []),IVarAssign 4 (ICCall ("Prelude","True",0) []),IVarAssign (-5) (IFCall ("Prelude","foldr",0) [IVar 3,IVar 4,IVar 2])] (ICaseCons (-5) [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Char#P48",0) 1 []))),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 6,IVarDecl 7] [IVarAssign 6 (IFPCall ("Prelude","prim_show",0) 1 []),IVarAssign 7 (IFCall ("Prelude","$##",0) [IVar 6,IVar 2])] (IReturn (IFPCall ("Prelude","showString",0) 1 [IVar 7])))]))),IFunction ("Prelude","_impl#showList#Prelude.Show#Prelude.Char#P48",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFPCall ("Prelude","showChar",0) 2 []),IVarAssign 4 (ICCall ("StringConst","\"\"",0) [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 3,IVar 2,IVar 4])))),IFunction ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Char",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFPCall ("Prelude","prim_show",0) 1 []),IVarAssign 6 (IFCall ("Prelude","$##",0) [IVar 5,IVar 3]),IVarAssign 7 (IFPCall ("Prelude","showChar",0) 2 [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 7,IVar 4,IVar 6])))),IFunction ("Prelude","_impl#showsPrec#Prelude.Show#[]",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Show",0) 3 (IBlock [IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 6 (IVarAccess 1 [0]),IVarAssign 5 (IVarAccess 1 [1]),IVarAssign 4 (IVarAccess 1 [2])] (IReturn (IVar 6)))]))),IFunction ("Prelude","_def#showList#Prelude.Show",0) 3 Public [1] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2])] (ICaseCons 3 [IConsBranch ("Prelude","[]",0) 0 (IBlock [IVarDecl 5] [IVarAssign 5 (IFPCall ("Prelude","_def#showList#Prelude.Show#P49",0) 2 [IVar 4])] (IReturn (IFCall ("Prelude","build",0) [IVar 5]))),IConsBranch ("Prelude",":",1) 2 (IBlock [IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10,IVarDecl 11,IVarDecl 12,IVarDecl 13] [IVarAssign 7 (IVarAccess 1 [0]),IVarAssign 6 (IVarAccess 1 [1]),IVarAssign 8 (IFCall ("Prelude","showsPrec",0) [IVar 2]),IVarAssign 9 (ICCall ("","int",0) [ILit (IInt 0)]),IVarAssign 10 (IFCall ("Prelude","apply",0) [IVar 8,IVar 9]),IVarAssign 11 (IFCall ("Prelude","showList'.showl.429",0) [IVar 4,IVar 10,IVar 7]),IVarAssign 12 (IFCall ("Prelude","apply",0) [IVar 10,IVar 6,IVar 11]),IVarAssign 13 (ICCall ("","char",0) [ILit (IChar '[')])] (IReturn (ICCall ("Prelude",":",0) [IVar 13,IVar 12])))]))),IFunction ("Prelude","_def#showList#Prelude.Show#P49",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFCall ("Prelude","foldr",0) [IVar 3,IVar 4,IVar 2]),IVarAssign 6 (ICCall ("StringConst","[]",0) [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 3,IVar 5,IVar 6])))),IFunction ("Prelude","_def#show#Prelude.Show",0) 2 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1]),IVarAssign 4 (IFCall ("Prelude","showsPrec",0) [IVar 2]),IVarAssign 5 (ICCall ("","int",0) [ILit (IInt 0)]),IVarAssign 6 (IFCall ("Prelude","apply",0) [IVar 4,IVar 5]),IVarAssign 7 (ICCall ("Prelude","[]",0) [])] (IReturn (IFCall ("Prelude","apply",0) [IVar 6,IVar 3,IVar 7])))),IFunction ("Prelude","_inst#Prelude.Show#Prelude.Either",0) 2 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1]),IVarAssign 4 (IFPCall ("Prelude","_impl#show#Prelude.Show#Prelude.Either",0) 1 [IVar 2,IVar 3]),IVarAssign 5 (IFPCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Either",0) 2 [IVar 2,IVar 3]),IVarAssign 6 (IFPCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Either",0) 2 [IVar 2,IVar 3])] (IReturn (ICCall ("Prelude","_Dict#Show",0) [IVar 4,IVar 6,IVar 5])))),IFunction ("Prelude","_inst#Prelude.Show#Prelude.Maybe",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFPCall ("Prelude","_impl#show#Prelude.Show#Prelude.Maybe",0) 1 [IVar 2]),IVarAssign 4 (IFPCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Maybe",0) 2 [IVar 2]),IVarAssign 5 (IFPCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Maybe",0) 2 [IVar 2])] (IReturn (ICCall ("Prelude","_Dict#Show",0) [IVar 3,IVar 5,IVar 4])))),IFunction ("Prelude","_inst#Prelude.Show#Prelude.Ordering",0) 0 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 2 (IFPCall ("Prelude","_impl#show#Prelude.Show#Prelude.Ordering",0) 1 []),IVarAssign 3 (IFPCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Ordering",0) 2 []),IVarAssign 4 (IFPCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Ordering",0) 2 [])] (IReturn (ICCall ("Prelude","_Dict#Show",0) [IVar 2,IVar 4,IVar 3])))),IFunction ("Prelude","_inst#Prelude.Show#Prelude.Bool",0) 0 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 2 (IFPCall ("Prelude","_impl#show#Prelude.Show#Prelude.Bool",0) 1 []),IVarAssign 3 (IFPCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Bool",0) 2 []),IVarAssign 4 (IFPCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Bool",0) 2 [])] (IReturn (ICCall ("Prelude","_Dict#Show",0) [IVar 2,IVar 4,IVar 3])))),IFunction ("Prelude","_inst#Prelude.Show#Prelude.Float",0) 0 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 2 (IFPCall ("Prelude","_impl#show#Prelude.Show#Prelude.Float",0) 1 []),IVarAssign 3 (IFPCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Float",0) 2 []),IVarAssign 4 (IFPCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Float",0) 2 [])] (IReturn (ICCall ("Prelude","_Dict#Show",0) [IVar 2,IVar 4,IVar 3])))),IFunction ("Prelude","_inst#Prelude.Show#Prelude.Int",0) 0 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 2 (IFPCall ("Prelude","_impl#show#Prelude.Show#Prelude.Int",0) 1 []),IVarAssign 3 (IFPCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Int",0) 2 []),IVarAssign 4 (IFPCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Int",0) 2 [])] (IReturn (ICCall ("Prelude","_Dict#Show",0) [IVar 2,IVar 4,IVar 3])))),IFunction ("Prelude","_impl#show#Prelude.Show#Prelude.Char",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFCall ("Prelude","_inst#Prelude.Show#Prelude.Char",0) []),IVarAssign 4 (IFCall ("Prelude","showsPrec",0) [IVar 3]),IVarAssign 5 (ICCall ("","int",0) [ILit (IInt 0)]),IVarAssign 6 (IFCall ("Prelude","apply",0) [IVar 4,IVar 5]),IVarAssign 7 (ICCall ("Prelude","[]",0) [])] (IReturn (IFCall ("Prelude","apply",0) [IVar 6,IVar 2,IVar 7])))),IFunction ("Prelude","_inst#Prelude.Show#[]",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFPCall ("Prelude","_impl#show#Prelude.Show#[]",0) 1 [IVar 2]),IVarAssign 4 (IFPCall ("Prelude","_impl#showList#Prelude.Show#[]",0) 2 [IVar 2]),IVarAssign 5 (IFPCall ("Prelude","_impl#showsPrec#Prelude.Show#[]",0) 1 [IVar 2])] (IReturn (ICCall ("Prelude","_Dict#Show",0) [IVar 3,IVar 5,IVar 4])))),IFunction ("Prelude","words",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl (-9)] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFPCall ("Prelude","isSpace",0) 1 []),IVarAssign 4 (IFCall ("Prelude","dropWhile",0) [IVar 3,IVar 2]),IVarAssign 5 (IFPCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char",0) 2 []),IVarAssign 6 (IFPCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char",0) 2 []),IVarAssign 7 (ICCall ("Prelude","_Dict#Eq",0) [IVar 5,IVar 6]),IVarAssign 8 (ICCall ("Prelude","[]",0) []),IVarAssign (-9) (IFCall ("Prelude","_impl#==#Prelude.Eq#[]",0) [IVar 7,IVar 4,IVar 8])] (ICaseCons (-9) [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","[]",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 10,IVarDecl (-11)] [IVarAssign 10 (IFPCall ("Prelude","words#P50",0) 1 []),IVarAssign (-11) (IFCall ("Prelude","span",0) [IVar 10,IVar 4])] (ICaseCons (-11) [IConsBranch ("Prelude","(,)",0) 2 (IBlock [IVarDecl 12,IVarDecl 13,IVarDecl 14] [IVarAssign 13 (IVarAccess 1 [0]),IVarAssign 12 (IVarAccess 1 [1]),IVarAssign 14 (IFCall ("Prelude","words",0) [IVar 13])] (IReturn (ICCall ("Prelude",":",0) [IVar 12,IVar 14])))]))]))),IFunction ("Prelude","words#P50",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl (-3)] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign (-3) (IFCall ("Prelude","isSpace",0) [IVar 2])] (ICaseCons (-3) [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) [])))]))),IFunction ("Prelude","splitline",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","[]",0) 0 (IBlock [IVarDecl 3,IVarDecl 4] [IVarAssign 3 (ICCall ("Prelude","[]",0) []),IVarAssign 4 (ICCall ("Prelude","[]",0) [])] (IReturn (ICCall ("Prelude","(,)",0) [IVar 3,IVar 4]))),IConsBranch ("Prelude",":",1) 2 (IBlock [IVarDecl 5,IVarDecl 6] [IVarAssign 6 (IVarAccess 1 [0]),IVarAssign 5 (IVarAccess 1 [1])] (ICaseCons 5 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 7] [IVarAssign 7 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqChar",0) [IVar 7,ILit (IChar '\n')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 8] [IVarAssign 8 (ICCall ("Prelude","[]",0) [])] (IReturn (ICCall ("Prelude","(,)",0) [IVar 8,IVar 6]))),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl (-9)] [IVarAssign (-9) (IFCall ("Prelude","splitline",0) [IVar 6])] (ICaseCons (-9) [IConsBranch ("Prelude","(,)",0) 2 (IBlock [IVarDecl 10,IVarDecl 11,IVarDecl 12,IVarDecl 13] [IVarAssign 11 (IVarAccess 1 [0]),IVarAssign 10 (IVarAccess 1 [1]),IVarAssign 12 (ICCall ("","char",0) [IVar 7]),IVarAssign 13 (ICCall ("Prelude",":",0) [IVar 12,IVar 10])] (IReturn (ICCall ("Prelude","(,)",0) [IVar 13,IVar 11])))]))]))]))]))),IFunction ("Prelude","lines",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","[]",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","[]",0) []))),IConsBranch ("Prelude",":",1) 2 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl (-6)] [IVarAssign 4 (IVarAccess 1 [0]),IVarAssign 3 (IVarAccess 1 [1]),IVarAssign 5 (ICCall ("Prelude",":",0) [IVar 3,IVar 4]),IVarAssign (-6) (IFCall ("Prelude","splitline",0) [IVar 5])] (ICaseCons (-6) [IConsBranch ("Prelude","(,)",0) 2 (IBlock [IVarDecl 7,IVarDecl 8,IVarDecl 9] [IVarAssign 8 (IVarAccess 1 [0]),IVarAssign 7 (IVarAccess 1 [1]),IVarAssign 9 (IFCall ("Prelude","lines",0) [IVar 8])] (IReturn (ICCall ("Prelude",":",0) [IVar 7,IVar 9])))]))]))),IFunction ("Prelude","lex_lexString",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","[]",0) 0 (IBlock [IVarDecl 14,IVarDecl 15,IVarDecl 16,IVarDecl 17] [IVarAssign 14 (ICCall ("Prelude","[]",0) []),IVarAssign 15 (IFCall ("Prelude","lex_lexStrItem",0) [IVar 14]),IVarAssign 16 (IFPCall ("Prelude","lex_lexString#P53",0) 3 []),IVarAssign 17 (IFPCall ("Prelude","lex_lexString#P54",0) 1 [])] (IReturn (IFCall ("Prelude","build_fold",0) [IVar 16,IVar 17,IVar 15]))),IConsBranch ("Prelude",":",1) 2 (IBlock [IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 1 [0]),IVarAssign 3 (IVarAccess 1 [1])] (ICaseCons 3 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqChar",0) [IVar 5,ILit (IChar '"')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 6,IVarDecl 7,IVarDecl 8] [IVarAssign 6 (ICCall ("StringConst","\"",0) []),IVarAssign 7 (ICCall ("Prelude","(,)",0) [IVar 6,IVar 4]),IVarAssign 8 (ICCall ("Prelude","[]",0) [])] (IReturn (ICCall ("Prelude",":",0) [IVar 7,IVar 8]))),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 9,IVarDecl 10,IVarDecl 11,IVarDecl 12,IVarDecl 13] [IVarAssign 9 (ICCall ("","char",0) [IVar 5]),IVarAssign 10 (ICCall ("Prelude",":",0) [IVar 9,IVar 4]),IVarAssign 11 (IFCall ("Prelude","lex_lexStrItem",0) [IVar 10]),IVarAssign 12 (IFPCall ("Prelude","lex_lexString#P51",0) 3 []),IVarAssign 13 (IFPCall ("Prelude","lex_lexString#P52",0) 1 [])] (IReturn (IFCall ("Prelude","build_fold",0) [IVar 12,IVar 13,IVar 11])))]))]))]))),IFunction ("Prelude","lex_lexString#P54",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (IReturn (IVar 2)))),IFunction ("Prelude","lex_lexString#P53",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFCall ("Prelude","lex_lexString_string",0) [IVar 3]),IVarAssign 6 (IFPCall ("Prelude","lex_lexString#P53#P55",0) 2 [IVar 2])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 6,IVar 4,IVar 5])))),IFunction ("Prelude","lex_lexString#P53#P55",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFCall ("Prelude","lex_lexString_build",0) [IVar 3])] (IReturn (IFCall ("Prelude","apply",0) [IVar 2,IVar 5,IVar 4])))),IFunction ("Prelude","lex_lexString#P52",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (IReturn (IVar 2)))),IFunction ("Prelude","lex_lexString#P51",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFCall ("Prelude","lex_lexString_string",0) [IVar 3]),IVarAssign 6 (IFPCall ("Prelude","lex_lexString#P51#P56",0) 2 [IVar 2])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 6,IVar 4,IVar 5])))),IFunction ("Prelude","lex_lexString#P51#P56",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFCall ("Prelude","lex_lexString_build",0) [IVar 3])] (IReturn (IFCall ("Prelude","apply",0) [IVar 2,IVar 5,IVar 4])))),IFunction ("Prelude","lex_else",0) 2 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl (-4)] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1]),IVarAssign (-4) (IFCall ("Prelude","isSpace",0) [IVar 2])] (ICaseCons (-4) [IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 5,IVarDecl 6] [IVarAssign 5 (IFPCall ("Prelude","isSpace",0) 1 []),IVarAssign 6 (IFCall ("Prelude","dropWhile",0) [IVar 5,IVar 3])] (IReturn (IFCall ("Prelude","lex",0) [IVar 6]))),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl (-10)] [IVarAssign 7 (IFPCall ("Prelude","lex_else#P62",0) 2 [IVar 2]),IVarAssign 8 (ICCall ("Prelude","False",0) []),IVarAssign 9 (ICCall ("StringConst",",;()[]{}_",0) []),IVarAssign (-10) (IFCall ("Prelude","foldr",0) [IVar 7,IVar 8,IVar 9])] (ICaseCons (-10) [IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 11,IVarDecl 12,IVarDecl 13,IVarDecl 14] [IVarAssign 11 (ICCall ("Prelude","[]",0) []),IVarAssign 12 (ICCall ("Prelude",":",0) [IVar 2,IVar 11]),IVarAssign 13 (ICCall ("Prelude","(,)",0) [IVar 12,IVar 3]),IVarAssign 14 (ICCall ("Prelude","[]",0) [])] (IReturn (ICCall ("Prelude",":",0) [IVar 13,IVar 14]))),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 15,IVarDecl 16,IVarDecl 17,IVarDecl (-18)] [IVarAssign 15 (IFPCall ("Prelude","lex_else#P61",0) 2 [IVar 2]),IVarAssign 16 (ICCall ("Prelude","False",0) []),IVarAssign 17 (ICCall ("StringConst","!@#$&+./<=?\\^|:~",0) []),IVarAssign (-18) (IFCall ("Prelude","foldr",0) [IVar 15,IVar 16,IVar 17])] (ICaseCons (-18) [IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 19,IVarDecl (-20)] [IVarAssign 19 (IFPCall ("Prelude","lex_isSym",0) 1 []),IVarAssign (-20) (IFCall ("Prelude","span",0) [IVar 19,IVar 3])] (ICaseCons (-20) [IConsBranch ("Prelude","(,)",0) 2 (IBlock [IVarDecl 21,IVarDecl 22,IVarDecl 23,IVarDecl 24,IVarDecl 25] [IVarAssign 22 (IVarAccess 1 [0]),IVarAssign 21 (IVarAccess 1 [1]),IVarAssign 23 (ICCall ("Prelude",":",0) [IVar 2,IVar 21]),IVarAssign 24 (ICCall ("Prelude","(,)",0) [IVar 23,IVar 22]),IVarAssign 25 (ICCall ("Prelude","[]",0) [])] (IReturn (ICCall ("Prelude",":",0) [IVar 24,IVar 25])))])),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons 2 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 26] [IVarAssign 26 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [ILit (IChar 'A'),IVar 26]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 26,ILit (IChar 'Z')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 27,IVarDecl (-28)] [IVarAssign 27 (IFPCall ("Prelude","lex_isSym",0) 1 []),IVarAssign (-28) (IFCall ("Prelude","span",0) [IVar 27,IVar 3])] (ICaseCons (-28) [IConsBranch ("Prelude","(,)",0) 2 (IBlock [IVarDecl 29,IVarDecl 30,IVarDecl 31,IVarDecl 32,IVarDecl 33,IVarDecl 34] [IVarAssign 30 (IVarAccess 1 [0]),IVarAssign 29 (IVarAccess 1 [1]),IVarAssign 31 (ICCall ("","char",0) [IVar 26]),IVarAssign 32 (ICCall ("Prelude",":",0) [IVar 31,IVar 29]),IVarAssign 33 (ICCall ("Prelude","(,)",0) [IVar 32,IVar 30]),IVarAssign 34 (ICCall ("Prelude","[]",0) [])] (IReturn (ICCall ("Prelude",":",0) [IVar 33,IVar 34])))])),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [ILit (IChar 'a'),IVar 26]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 26,ILit (IChar 'z')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 35,IVarDecl (-36)] [IVarAssign 35 (IFPCall ("Prelude","lex_isSym",0) 1 []),IVarAssign (-36) (IFCall ("Prelude","span",0) [IVar 35,IVar 3])] (ICaseCons (-36) [IConsBranch ("Prelude","(,)",0) 2 (IBlock [IVarDecl 37,IVarDecl 38,IVarDecl 39,IVarDecl 40,IVarDecl 41,IVarDecl 42] [IVarAssign 38 (IVarAccess 1 [0]),IVarAssign 37 (IVarAccess 1 [1]),IVarAssign 39 (ICCall ("","char",0) [IVar 26]),IVarAssign 40 (ICCall ("Prelude",":",0) [IVar 39,IVar 37]),IVarAssign 41 (ICCall ("Prelude","(,)",0) [IVar 40,IVar 38]),IVarAssign 42 (ICCall ("Prelude","[]",0) [])] (IReturn (ICCall ("Prelude",":",0) [IVar 41,IVar 42])))])),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [ILit (IChar '0'),IVar 26]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 26,ILit (IChar '9')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 43,IVarDecl (-44)] [IVarAssign 43 (IFPCall ("Prelude","isDigit",0) 1 []),IVarAssign (-44) (IFCall ("Prelude","span",0) [IVar 43,IVar 3])] (ICaseCons (-44) [IConsBranch ("Prelude","(,)",0) 2 (IBlock [IVarDecl 45,IVarDecl 46,IVarDecl 47,IVarDecl 48,IVarDecl 49] [IVarAssign 46 (IVarAccess 1 [0]),IVarAssign 45 (IVarAccess 1 [1]),IVarAssign 47 (IFCall ("Prelude","lex_lexFracExp",0) [IVar 46]),IVarAssign 48 (IFPCall ("Prelude","lex_else#P57",0) 3 [IVar 26,IVar 45]),IVarAssign 49 (IFPCall ("Prelude","id",0) 1 [])] (IReturn (IFCall ("Prelude","build_fold",0) [IVar 48,IVar 49,IVar 47])))])),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","[]",0) [])))])),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","[]",0) [])))]))])),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [ILit (IChar '0'),IVar 26]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 26,ILit (IChar '9')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 50,IVarDecl (-51)] [IVarAssign 50 (IFPCall ("Prelude","isDigit",0) 1 []),IVarAssign (-51) (IFCall ("Prelude","span",0) [IVar 50,IVar 3])] (ICaseCons (-51) [IConsBranch ("Prelude","(,)",0) 2 (IBlock [IVarDecl 52,IVarDecl 53,IVarDecl 54,IVarDecl 55,IVarDecl 56] [IVarAssign 53 (IVarAccess 1 [0]),IVarAssign 52 (IVarAccess 1 [1]),IVarAssign 54 (IFCall ("Prelude","lex_lexFracExp",0) [IVar 53]),IVarAssign 55 (IFPCall ("Prelude","lex_else#P58",0) 3 [IVar 26,IVar 52]),IVarAssign 56 (IFPCall ("Prelude","id",0) 1 [])] (IReturn (IFCall ("Prelude","build_fold",0) [IVar 55,IVar 56,IVar 54])))])),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","[]",0) [])))])),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","[]",0) [])))]))]))])),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [ILit (IChar 'a'),IVar 26]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 26,ILit (IChar 'z')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 57,IVarDecl (-58)] [IVarAssign 57 (IFPCall ("Prelude","lex_isSym",0) 1 []),IVarAssign (-58) (IFCall ("Prelude","span",0) [IVar 57,IVar 3])] (ICaseCons (-58) [IConsBranch ("Prelude","(,)",0) 2 (IBlock [IVarDecl 59,IVarDecl 60,IVarDecl 61,IVarDecl 62,IVarDecl 63,IVarDecl 64] [IVarAssign 60 (IVarAccess 1 [0]),IVarAssign 59 (IVarAccess 1 [1]),IVarAssign 61 (ICCall ("","char",0) [IVar 26]),IVarAssign 62 (ICCall ("Prelude",":",0) [IVar 61,IVar 59]),IVarAssign 63 (ICCall ("Prelude","(,)",0) [IVar 62,IVar 60]),IVarAssign 64 (ICCall ("Prelude","[]",0) [])] (IReturn (ICCall ("Prelude",":",0) [IVar 63,IVar 64])))])),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [ILit (IChar '0'),IVar 26]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 26,ILit (IChar '9')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 65,IVarDecl (-66)] [IVarAssign 65 (IFPCall ("Prelude","isDigit",0) 1 []),IVarAssign (-66) (IFCall ("Prelude","span",0) [IVar 65,IVar 3])] (ICaseCons (-66) [IConsBranch ("Prelude","(,)",0) 2 (IBlock [IVarDecl 67,IVarDecl 68,IVarDecl 69,IVarDecl 70,IVarDecl 71] [IVarAssign 68 (IVarAccess 1 [0]),IVarAssign 67 (IVarAccess 1 [1]),IVarAssign 69 (IFCall ("Prelude","lex_lexFracExp",0) [IVar 68]),IVarAssign 70 (IFPCall ("Prelude","lex_else#P59",0) 3 [IVar 26,IVar 67]),IVarAssign 71 (IFPCall ("Prelude","id",0) 1 [])] (IReturn (IFCall ("Prelude","build_fold",0) [IVar 70,IVar 71,IVar 69])))])),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","[]",0) [])))])),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","[]",0) [])))]))])),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [ILit (IChar '0'),IVar 26]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 26,ILit (IChar '9')]))),IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 72,IVarDecl (-73)] [IVarAssign 72 (IFPCall ("Prelude","isDigit",0) 1 []),IVarAssign (-73) (IFCall ("Prelude","span",0) [IVar 72,IVar 3])] (ICaseCons (-73) [IConsBranch ("Prelude","(,)",0) 2 (IBlock [IVarDecl 74,IVarDecl 75,IVarDecl 76,IVarDecl 77,IVarDecl 78] [IVarAssign 75 (IVarAccess 1 [0]),IVarAssign 74 (IVarAccess 1 [1]),IVarAssign 76 (IFCall ("Prelude","lex_lexFracExp",0) [IVar 75]),IVarAssign 77 (IFPCall ("Prelude","lex_else#P60",0) 3 [IVar 26,IVar 74]),IVarAssign 78 (IFPCall ("Prelude","id",0) 1 [])] (IReturn (IFCall ("Prelude","build_fold",0) [IVar 77,IVar 78,IVar 76])))])),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","[]",0) [])))])),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","[]",0) [])))]))]))]))]))]))]))]))),IFunction ("Prelude","lex_else#P62",0) 3 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2])] (ICaseCons 2 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 1 [0])] (ICaseCons 3 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 6] [IVarAssign 6 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqChar",0) [IVar 5,IVar 6]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (IVar 4)))]))]))]))),IFunction ("Prelude","lex_else#P61",0) 3 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2])] (ICaseCons 2 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 1 [0])] (ICaseCons 3 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 6] [IVarAssign 6 (IVarAccess 1 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqChar",0) [IVar 5,IVar 6]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (IVar 4)))]))]))]))),IFunction ("Prelude","lex_else#P60",0) 5 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8] [IVarAssign 6 (IVarAccess 0 [0]),IVarAssign 5 (IVarAccess 0 [1]),IVarAssign 4 (IVarAccess 0 [2]),IVarAssign 3 (IVarAccess 0 [3]),IVarAssign 2 (IVarAccess 0 [4]),IVarAssign 7 (ICCall ("","char",0) [IVar 2]),IVarAssign 8 (IFCall ("Prelude","lex_else_frac",0) [IVar 7,IVar 3,IVar 5])] (IReturn (IFCall ("Prelude","apply",0) [IVar 4,IVar 8,IVar 6])))),IFunction ("Prelude","lex_else#P59",0) 5 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8] [IVarAssign 6 (IVarAccess 0 [0]),IVarAssign 5 (IVarAccess 0 [1]),IVarAssign 4 (IVarAccess 0 [2]),IVarAssign 3 (IVarAccess 0 [3]),IVarAssign 2 (IVarAccess 0 [4]),IVarAssign 7 (ICCall ("","char",0) [IVar 2]),IVarAssign 8 (IFCall ("Prelude","lex_else_frac",0) [IVar 7,IVar 3,IVar 5])] (IReturn (IFCall ("Prelude","apply",0) [IVar 4,IVar 8,IVar 6])))),IFunction ("Prelude","lex_else#P58",0) 5 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8] [IVarAssign 6 (IVarAccess 0 [0]),IVarAssign 5 (IVarAccess 0 [1]),IVarAssign 4 (IVarAccess 0 [2]),IVarAssign 3 (IVarAccess 0 [3]),IVarAssign 2 (IVarAccess 0 [4]),IVarAssign 7 (ICCall ("","char",0) [IVar 2]),IVarAssign 8 (IFCall ("Prelude","lex_else_frac",0) [IVar 7,IVar 3,IVar 5])] (IReturn (IFCall ("Prelude","apply",0) [IVar 4,IVar 8,IVar 6])))),IFunction ("Prelude","lex_else#P57",0) 5 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8] [IVarAssign 6 (IVarAccess 0 [0]),IVarAssign 5 (IVarAccess 0 [1]),IVarAssign 4 (IVarAccess 0 [2]),IVarAssign 3 (IVarAccess 0 [3]),IVarAssign 2 (IVarAccess 0 [4]),IVarAssign 7 (ICCall ("","char",0) [IVar 2]),IVarAssign 8 (IFCall ("Prelude","lex_else_frac",0) [IVar 7,IVar 3,IVar 5])] (IReturn (IFCall ("Prelude","apply",0) [IVar 4,IVar 8,IVar 6])))),IFunction ("Prelude","showList'.showl.429",0) 3 Private [2] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2])] (ICaseCons 4 [IConsBranch ("Prelude","[]",0) 0 (IBlock [IVarDecl 5] [IVarAssign 5 (ICCall ("","char",0) [ILit (IChar ']')])] (IReturn (ICCall ("Prelude",":",0) [IVar 5,IVar 2]))),IConsBranch ("Prelude",":",1) 2 (IBlock [IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10] [IVarAssign 7 (IVarAccess 1 [0]),IVarAssign 6 (IVarAccess 1 [1]),IVarAssign 8 (IFCall ("Prelude","showList'.showl.429",0) [IVar 2,IVar 3,IVar 7]),IVarAssign 9 (IFCall ("Prelude","apply",0) [IVar 3,IVar 6,IVar 8]),IVarAssign 10 (ICCall ("","char",0) [ILit (IChar ',')])] (IReturn (ICCall ("Prelude",":",0) [IVar 10,IVar 9])))]))),IFunction ("Prelude","_impl#showList#Prelude.Show#Prelude.Either",0) 4 Public [2] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5] [IVarAssign 5 (IVarAccess 0 [0]),IVarAssign 4 (IVarAccess 0 [1]),IVarAssign 3 (IVarAccess 0 [2]),IVarAssign 2 (IVarAccess 0 [3])] (ICaseCons 4 [IConsBranch ("Prelude","[]",0) 0 (IBlock [IVarDecl 6] [IVarAssign 6 (IFPCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Either#P63",0) 2 [IVar 5])] (IReturn (IFCall ("Prelude","build",0) [IVar 6]))),IConsBranch ("Prelude",":",1) 2 (IBlock [IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10,IVarDecl 11,IVarDecl 12,IVarDecl 13,IVarDecl 14,IVarDecl 15] [IVarAssign 8 (IVarAccess 1 [0]),IVarAssign 7 (IVarAccess 1 [1]),IVarAssign 9 (ICCall ("","int",0) [ILit (IInt 0)]),IVarAssign 10 (IFPCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Either",0) 1 [IVar 2,IVar 3,IVar 9]),IVarAssign 11 (IFCall ("Prelude","showList'.showl.429",0) [IVar 5,IVar 10,IVar 8]),IVarAssign 12 (ICCall ("","int",0) [ILit (IInt 0)]),IVarAssign 13 (IFCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Either",0) [IVar 2,IVar 3,IVar 12,IVar 7]),IVarAssign 14 (IFCall ("Prelude","apply",0) [IVar 13,IVar 11]),IVarAssign 15 (ICCall ("","char",0) [ILit (IChar '[')])] (IReturn (ICCall ("Prelude",":",0) [IVar 15,IVar 14])))]))),IFunction ("Prelude","_impl#showList#Prelude.Show#Prelude.Either#P63",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFCall ("Prelude","foldr",0) [IVar 3,IVar 4,IVar 2]),IVarAssign 6 (ICCall ("StringConst","[]",0) [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 3,IVar 5,IVar 6])))),IFunction ("Prelude","_impl#show#Prelude.Show#Prelude.Either",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (ICCall ("","int",0) [ILit (IInt 0)]),IVarAssign 6 (IFCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Either",0) [IVar 2,IVar 3,IVar 5,IVar 4]),IVarAssign 7 (ICCall ("Prelude","[]",0) [])] (IReturn (IFCall ("Prelude","apply",0) [IVar 6,IVar 7])))),IFunction ("Prelude","_impl#showList#Prelude.Show#Prelude.Maybe",0) 3 Public [1] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2])] (ICaseCons 3 [IConsBranch ("Prelude","[]",0) 0 (IBlock [IVarDecl 5] [IVarAssign 5 (IFPCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Maybe#P64",0) 2 [IVar 4])] (IReturn (IFCall ("Prelude","build",0) [IVar 5]))),IConsBranch ("Prelude",":",1) 2 (IBlock [IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10,IVarDecl 11,IVarDecl 12,IVarDecl 13,IVarDecl 14] [IVarAssign 7 (IVarAccess 1 [0]),IVarAssign 6 (IVarAccess 1 [1]),IVarAssign 8 (ICCall ("","int",0) [ILit (IInt 0)]),IVarAssign 9 (IFPCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Maybe",0) 1 [IVar 2,IVar 8]),IVarAssign 10 (IFCall ("Prelude","showList'.showl.429",0) [IVar 4,IVar 9,IVar 7]),IVarAssign 11 (ICCall ("","int",0) [ILit (IInt 0)]),IVarAssign 12 (IFCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Maybe",0) [IVar 2,IVar 11,IVar 6]),IVarAssign 13 (IFCall ("Prelude","apply",0) [IVar 12,IVar 10]),IVarAssign 14 (ICCall ("","char",0) [ILit (IChar '[')])] (IReturn (ICCall ("Prelude",":",0) [IVar 14,IVar 13])))]))),IFunction ("Prelude","_impl#showList#Prelude.Show#Prelude.Maybe#P64",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFCall ("Prelude","foldr",0) [IVar 3,IVar 4,IVar 2]),IVarAssign 6 (ICCall ("StringConst","[]",0) [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 3,IVar 5,IVar 6])))),IFunction ("Prelude","_impl#show#Prelude.Show#Prelude.Maybe",0) 2 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1]),IVarAssign 4 (ICCall ("","int",0) [ILit (IInt 0)]),IVarAssign 5 (IFCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Maybe",0) [IVar 2,IVar 4,IVar 3]),IVarAssign 6 (ICCall ("Prelude","[]",0) [])] (IReturn (IFCall ("Prelude","apply",0) [IVar 5,IVar 6])))),IFunction ("Prelude","_impl#showList#Prelude.Show#Prelude.Ordering",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("Prelude","[]",0) 0 (IBlock [IVarDecl 4] [IVarAssign 4 (IFPCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Ordering#P65",0) 2 [IVar 3])] (IReturn (IFCall ("Prelude","build",0) [IVar 4]))),IConsBranch ("Prelude",":",1) 2 (IBlock [IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10,IVarDecl 11,IVarDecl 12] [IVarAssign 6 (IVarAccess 1 [0]),IVarAssign 5 (IVarAccess 1 [1]),IVarAssign 7 (IFPCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Ordering#P66",0) 1 []),IVarAssign 8 (IFCall ("Prelude","showList'.showl.429",0) [IVar 3,IVar 7,IVar 6]),IVarAssign 9 (ICCall ("","int",0) [ILit (IInt 0)]),IVarAssign 10 (IFCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Ordering",0) [IVar 9,IVar 5]),IVarAssign 11 (IFCall ("Prelude","apply",0) [IVar 10,IVar 8]),IVarAssign 12 (ICCall ("","char",0) [ILit (IChar '[')])] (IReturn (ICCall ("Prelude",":",0) [IVar 12,IVar 11])))]))),IFunction ("Prelude","_impl#showList#Prelude.Show#Prelude.Ordering#P66",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","LT",0) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Ordering#P66#P67",0) 1 []))),IConsBranch ("Prelude","GT",1) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Ordering#P66#P69",0) 1 []))),IConsBranch ("Prelude","EQ",2) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Ordering#P66#P68",0) 1 [])))]))),IFunction ("Prelude","_impl#showList#Prelude.Show#Prelude.Ordering#P66#P69",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFPCall ("Prelude","showChar",0) 2 []),IVarAssign 4 (ICCall ("StringConst","GT",0) [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 3,IVar 2,IVar 4])))),IFunction ("Prelude","_impl#showList#Prelude.Show#Prelude.Ordering#P66#P68",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFPCall ("Prelude","showChar",0) 2 []),IVarAssign 4 (ICCall ("StringConst","EQ",0) [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 3,IVar 2,IVar 4])))),IFunction ("Prelude","_impl#showList#Prelude.Show#Prelude.Ordering#P66#P67",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFPCall ("Prelude","showChar",0) 2 []),IVarAssign 4 (ICCall ("StringConst","LT",0) [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 3,IVar 2,IVar 4])))),IFunction ("Prelude","_impl#showList#Prelude.Show#Prelude.Ordering#P65",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFCall ("Prelude","foldr",0) [IVar 3,IVar 4,IVar 2]),IVarAssign 6 (ICCall ("StringConst","[]",0) [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 3,IVar 5,IVar 6])))),IFunction ("Prelude","_impl#show#Prelude.Show#Prelude.Ordering",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (ICCall ("","int",0) [ILit (IInt 0)]),IVarAssign 4 (IFCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Ordering",0) [IVar 3,IVar 2]),IVarAssign 5 (ICCall ("Prelude","[]",0) [])] (IReturn (IFCall ("Prelude","apply",0) [IVar 4,IVar 5])))),IFunction ("Prelude","_impl#showList#Prelude.Show#Prelude.Bool",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("Prelude","[]",0) 0 (IBlock [IVarDecl 4] [IVarAssign 4 (IFPCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Bool#P70",0) 2 [IVar 3])] (IReturn (IFCall ("Prelude","build",0) [IVar 4]))),IConsBranch ("Prelude",":",1) 2 (IBlock [IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10,IVarDecl 11,IVarDecl 12] [IVarAssign 6 (IVarAccess 1 [0]),IVarAssign 5 (IVarAccess 1 [1]),IVarAssign 7 (IFPCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Bool#P71",0) 1 []),IVarAssign 8 (IFCall ("Prelude","showList'.showl.429",0) [IVar 3,IVar 7,IVar 6]),IVarAssign 9 (ICCall ("","int",0) [ILit (IInt 0)]),IVarAssign 10 (IFCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Bool",0) [IVar 9,IVar 5]),IVarAssign 11 (IFCall ("Prelude","apply",0) [IVar 10,IVar 8]),IVarAssign 12 (ICCall ("","char",0) [ILit (IChar '[')])] (IReturn (ICCall ("Prelude",":",0) [IVar 12,IVar 11])))]))),IFunction ("Prelude","_impl#showList#Prelude.Show#Prelude.Bool#P71",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Bool#P71#P73",0) 1 []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Bool#P71#P72",0) 1 [])))]))),IFunction ("Prelude","_impl#showList#Prelude.Show#Prelude.Bool#P71#P73",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFPCall ("Prelude","showChar",0) 2 []),IVarAssign 4 (ICCall ("StringConst","True",0) [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 3,IVar 2,IVar 4])))),IFunction ("Prelude","_impl#showList#Prelude.Show#Prelude.Bool#P71#P72",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFPCall ("Prelude","showChar",0) 2 []),IVarAssign 4 (ICCall ("StringConst","False",0) [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 3,IVar 2,IVar 4])))),IFunction ("Prelude","_impl#showList#Prelude.Show#Prelude.Bool#P70",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFCall ("Prelude","foldr",0) [IVar 3,IVar 4,IVar 2]),IVarAssign 6 (ICCall ("StringConst","[]",0) [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 3,IVar 5,IVar 6])))),IFunction ("Prelude","_impl#show#Prelude.Show#Prelude.Bool",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (ICCall ("","int",0) [ILit (IInt 0)]),IVarAssign 4 (IFCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Bool",0) [IVar 3,IVar 2]),IVarAssign 5 (ICCall ("Prelude","[]",0) [])] (IReturn (IFCall ("Prelude","apply",0) [IVar 4,IVar 5])))),IFunction ("Prelude","_impl#showList#Prelude.Show#Prelude.Float",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("Prelude","[]",0) 0 (IBlock [IVarDecl 4] [IVarAssign 4 (IFPCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Float#P74",0) 2 [IVar 3])] (IReturn (IFCall ("Prelude","build",0) [IVar 4]))),IConsBranch ("Prelude",":",1) 2 (IBlock [IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10,IVarDecl 11,IVarDecl 12,IVarDecl 13,IVarDecl 14] [IVarAssign 6 (IVarAccess 1 [0]),IVarAssign 5 (IVarAccess 1 [1]),IVarAssign 7 (IFPCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Float#P76",0) 1 []),IVarAssign 8 (IFCall ("Prelude","showList'.showl.429",0) [IVar 3,IVar 7,IVar 6]),IVarAssign 9 (IFCall ("Prelude","_inst#Prelude.Real#Prelude.Float",0) []),IVarAssign 10 (IFPCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Float#P75",0) 2 []),IVarAssign 11 (ICCall ("","int",0) [ILit (IInt 0)]),IVarAssign 12 (IFCall ("Prelude","showSigned",0) [IVar 9,IVar 10,IVar 11,IVar 5]),IVarAssign 13 (IFCall ("Prelude","apply",0) [IVar 12,IVar 8]),IVarAssign 14 (ICCall ("","char",0) [ILit (IChar '[')])] (IReturn (ICCall ("Prelude",":",0) [IVar 14,IVar 13])))]))),IFunction ("Prelude","_impl#showList#Prelude.Show#Prelude.Float#P76",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFCall ("Prelude","_inst#Prelude.Real#Prelude.Float",0) []),IVarAssign 4 (IFPCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Float#P76#P77",0) 2 []),IVarAssign 5 (ICCall ("","int",0) [ILit (IInt 0)])] (IReturn (IFCall ("Prelude","showSigned",0) [IVar 3,IVar 4,IVar 5,IVar 2])))),IFunction ("Prelude","_impl#showList#Prelude.Show#Prelude.Float#P76#P77",0) 2 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1]),IVarAssign 4 (IFPCall ("Prelude","prim_show",0) 1 []),IVarAssign 5 (IFCall ("Prelude","$##",0) [IVar 4,IVar 2]),IVarAssign 6 (IFPCall ("Prelude","showChar",0) 2 [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 6,IVar 3,IVar 5])))),IFunction ("Prelude","_impl#showList#Prelude.Show#Prelude.Float#P75",0) 2 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1]),IVarAssign 4 (IFPCall ("Prelude","prim_show",0) 1 []),IVarAssign 5 (IFCall ("Prelude","$##",0) [IVar 4,IVar 2]),IVarAssign 6 (IFPCall ("Prelude","showChar",0) 2 [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 6,IVar 3,IVar 5])))),IFunction ("Prelude","_impl#showList#Prelude.Show#Prelude.Float#P74",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFCall ("Prelude","foldr",0) [IVar 3,IVar 4,IVar 2]),IVarAssign 6 (ICCall ("StringConst","[]",0) [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 3,IVar 5,IVar 6])))),IFunction ("Prelude","_impl#show#Prelude.Show#Prelude.Float",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFCall ("Prelude","_inst#Prelude.Real#Prelude.Float",0) []),IVarAssign 4 (IFPCall ("Prelude","_impl#show#Prelude.Show#Prelude.Float#P78",0) 2 []),IVarAssign 5 (ICCall ("","int",0) [ILit (IInt 0)]),IVarAssign 6 (IFCall ("Prelude","showSigned",0) [IVar 3,IVar 4,IVar 5,IVar 2]),IVarAssign 7 (ICCall ("Prelude","[]",0) [])] (IReturn (IFCall ("Prelude","apply",0) [IVar 6,IVar 7])))),IFunction ("Prelude","_impl#show#Prelude.Show#Prelude.Float#P78",0) 2 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1]),IVarAssign 4 (IFPCall ("Prelude","prim_show",0) 1 []),IVarAssign 5 (IFCall ("Prelude","$##",0) [IVar 4,IVar 2]),IVarAssign 6 (IFPCall ("Prelude","showChar",0) 2 [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 6,IVar 3,IVar 5])))),IFunction ("Prelude","_impl#showList#Prelude.Show#Prelude.Int",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("Prelude","[]",0) 0 (IBlock [IVarDecl 4] [IVarAssign 4 (IFPCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Int#P79",0) 2 [IVar 3])] (IReturn (IFCall ("Prelude","build",0) [IVar 4]))),IConsBranch ("Prelude",":",1) 2 (IBlock [IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10,IVarDecl 11,IVarDecl 12,IVarDecl 13,IVarDecl 14] [IVarAssign 6 (IVarAccess 1 [0]),IVarAssign 5 (IVarAccess 1 [1]),IVarAssign 7 (IFPCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Int#P81",0) 1 []),IVarAssign 8 (IFCall ("Prelude","showList'.showl.429",0) [IVar 3,IVar 7,IVar 6]),IVarAssign 9 (IFCall ("Prelude","_inst#Prelude.Real#Prelude.Int",0) []),IVarAssign 10 (IFPCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Int#P80",0) 2 []),IVarAssign 11 (ICCall ("","int",0) [ILit (IInt 0)]),IVarAssign 12 (IFCall ("Prelude","showSigned",0) [IVar 9,IVar 10,IVar 11,IVar 5]),IVarAssign 13 (IFCall ("Prelude","apply",0) [IVar 12,IVar 8]),IVarAssign 14 (ICCall ("","char",0) [ILit (IChar '[')])] (IReturn (ICCall ("Prelude",":",0) [IVar 14,IVar 13])))]))),IFunction ("Prelude","_impl#showList#Prelude.Show#Prelude.Int#P81",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFCall ("Prelude","_inst#Prelude.Real#Prelude.Int",0) []),IVarAssign 4 (IFPCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Int#P81#P82",0) 2 []),IVarAssign 5 (ICCall ("","int",0) [ILit (IInt 0)])] (IReturn (IFCall ("Prelude","showSigned",0) [IVar 3,IVar 4,IVar 5,IVar 2])))),IFunction ("Prelude","_impl#showList#Prelude.Show#Prelude.Int#P81#P82",0) 2 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1]),IVarAssign 4 (IFPCall ("Prelude","prim_show",0) 1 []),IVarAssign 5 (IFCall ("Prelude","$##",0) [IVar 4,IVar 2]),IVarAssign 6 (IFPCall ("Prelude","showChar",0) 2 [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 6,IVar 3,IVar 5])))),IFunction ("Prelude","_impl#showList#Prelude.Show#Prelude.Int#P80",0) 2 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1]),IVarAssign 4 (IFPCall ("Prelude","prim_show",0) 1 []),IVarAssign 5 (IFCall ("Prelude","$##",0) [IVar 4,IVar 2]),IVarAssign 6 (IFPCall ("Prelude","showChar",0) 2 [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 6,IVar 3,IVar 5])))),IFunction ("Prelude","_impl#showList#Prelude.Show#Prelude.Int#P79",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFCall ("Prelude","foldr",0) [IVar 3,IVar 4,IVar 2]),IVarAssign 6 (ICCall ("StringConst","[]",0) [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 3,IVar 5,IVar 6])))),IFunction ("Prelude","_impl#show#Prelude.Show#Prelude.Int",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFCall ("Prelude","_inst#Prelude.Real#Prelude.Int",0) []),IVarAssign 4 (IFPCall ("Prelude","_impl#show#Prelude.Show#Prelude.Int#P83",0) 2 []),IVarAssign 5 (ICCall ("","int",0) [ILit (IInt 0)]),IVarAssign 6 (IFCall ("Prelude","showSigned",0) [IVar 3,IVar 4,IVar 5,IVar 2]),IVarAssign 7 (ICCall ("Prelude","[]",0) [])] (IReturn (IFCall ("Prelude","apply",0) [IVar 6,IVar 7])))),IFunction ("Prelude","_impl#show#Prelude.Show#Prelude.Int#P83",0) 2 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1]),IVarAssign 4 (IFPCall ("Prelude","prim_show",0) 1 []),IVarAssign 5 (IFCall ("Prelude","$##",0) [IVar 4,IVar 2]),IVarAssign 6 (IFPCall ("Prelude","showChar",0) 2 [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 6,IVar 3,IVar 5])))),IFunction ("Prelude","_inst#Prelude.Show#Prelude.Char",0) 0 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 2 (IFPCall ("Prelude","_impl#show#Prelude.Show#Prelude.Char",0) 1 []),IVarAssign 3 (IFPCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Char",0) 3 []),IVarAssign 4 (IFPCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Char",0) 1 [])] (IReturn (ICCall ("Prelude","_Dict#Show",0) [IVar 2,IVar 3,IVar 4])))),IFunction ("Prelude","_impl#showList#Prelude.Show#[]",0) 3 Public [1] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2])] (ICaseCons 3 [IConsBranch ("Prelude","[]",0) 0 (IBlock [IVarDecl 5] [IVarAssign 5 (IFPCall ("Prelude","_impl#showList#Prelude.Show#[]#P84",0) 2 [IVar 4])] (IReturn (IFCall ("Prelude","build",0) [IVar 5]))),IConsBranch ("Prelude",":",1) 2 (IBlock [IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10,IVarDecl 11,IVarDecl 12] [IVarAssign 7 (IVarAccess 1 [0]),IVarAssign 6 (IVarAccess 1 [1]),IVarAssign 8 (ICCall ("","int",0) [ILit (IInt 0)]),IVarAssign 9 (IFCall ("Prelude","_impl#showsPrec#Prelude.Show#[]",0) [IVar 2,IVar 8]),IVarAssign 10 (IFCall ("Prelude","showList'.showl.429",0) [IVar 4,IVar 9,IVar 7]),IVarAssign 11 (IFCall ("Prelude","apply",0) [IVar 9,IVar 6,IVar 10]),IVarAssign 12 (ICCall ("","char",0) [ILit (IChar '[')])] (IReturn (ICCall ("Prelude",":",0) [IVar 12,IVar 11])))]))),IFunction ("Prelude","_impl#showList#Prelude.Show#[]#P84",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFCall ("Prelude","foldr",0) [IVar 3,IVar 4,IVar 2]),IVarAssign 6 (ICCall ("StringConst","[]",0) [])] (IReturn (IFCall ("Prelude","foldr",0) [IVar 3,IVar 5,IVar 6])))),IFunction ("Prelude","_impl#show#Prelude.Show#[]",0) 2 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1]),IVarAssign 4 (ICCall ("","int",0) [ILit (IInt 0)]),IVarAssign 5 (IFCall ("Prelude","_impl#showsPrec#Prelude.Show#[]",0) [IVar 2,IVar 4]),IVarAssign 6 (ICCall ("Prelude","[]",0) [])] (IReturn (IFCall ("Prelude","apply",0) [IVar 5,IVar 3,IVar 6]))))]