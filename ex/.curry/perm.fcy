Prog "perm" ["Prelude"] [] [Func ("perm","perm") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Comb FuncCall ("perm","insert") [Var 2,Comb FuncCall ("perm","perm") [Var 3]])])),Func ("perm","insert") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [3,4]) (Or (Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Var 4]]) (Comb ConsCall ("Prelude",":") [Var 3,Comb FuncCall ("perm","insert") [Var 1,Var 4]]))])),Func ("perm","main") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (Rule [] (Comb FuncCall ("perm","perm") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Int") [],Lit (Intc 1)],Lit (Intc 8)]]))] []