Prog "liter" ["Prelude"] [] [Func ("liter","test") 2 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TVar 0))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Case Flex (Var 3) [Branch (LPattern (Charc 'a')) (Case Flex (Var 4) [Branch (Pattern ("Prelude",":") [5,6]) (Case Flex (Var 5) [Branch (LPattern (Charc 'b')) (Case Flex (Var 6) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 1)])])])])])])),Func ("liter","asciiToInt") 2 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TCons ("Prelude","Char") []) (TVar 0))) (Rule [1,2] (Case Flex (Var 2) [Branch (LPattern (Charc 'A')) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 65)]),Branch (LPattern (Charc 'B')) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 66)]),Branch (LPattern (Charc 'Z')) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 90)])])),Func ("liter","intToAscii") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Char") [])) (Rule [1] (Case Flex (Var 1) [Branch (LPattern (Intc 65)) (Lit (Charc 'A')),Branch (LPattern (Intc 66)) (Lit (Charc 'B')),Branch (LPattern (Intc 90)) (Lit (Charc 'Z'))])),Func ("liter","main") 0 Public (TCons ("Prelude","Char") []) (Rule [] (Comb FuncCall ("liter","intToAscii") [Lit (Intc 65)]))] []