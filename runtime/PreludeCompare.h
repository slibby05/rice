#ifndef PreludeCompare_H
#define PreludeCompare_H

#include "runtime.h"
#include "PreludeBase.h"

void Prelude__LT_hnf(field root);
void Prelude__GT_hnf(field root);
void Prelude_min_hnf(field root);
void Prelude_max_hnf(field root);
void Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOBool_hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOBool_hnf(field root);
void Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOBool_hnf(field root);
void Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOBool_hnf(field root);
void Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool_hnf(field root);
void Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool_hnf(field root);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOBool_hnf(field root);
void Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOChar_hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOChar_hnf(field root);
void Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOChar_hnf(field root);
void Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOChar_hnf(field root);
void Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar_hnf(field root);
void Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar_hnf(field root);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOChar_hnf(field root);
void Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOFloat_hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOFloat_hnf(field root);
void Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOFloat_hnf(field root);
void Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOFloat_hnf(field root);
void Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat_hnf(field root);
void Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat_hnf(field root);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOFloat_hnf(field root);
void Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOInt_hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOInt_hnf(field root);
void Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOInt_hnf(field root);
void Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOInt_hnf(field root);
void Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt_hnf(field root);
void Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt_hnf(field root);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOInt_hnf(field root);
void Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOChar_hnf(field root);
void Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOChar_hnf(field root);
void Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOChar_hnf(field root);
void Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOChar_hnf(field root);
void Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOFloat_hnf(field root);
void Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOFloat_hnf(field root);
void Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOFloat_hnf(field root);
void Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOFloat_hnf(field root);
void Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOInt_hnf(field root);
void Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOInt_hnf(field root);
void Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOInt_hnf(field root);
void Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOInt_hnf(field root);
void Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool_hnf(field root);
void Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOBool_hnf(field root);
void Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOBool_hnf(field root);
void Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOBool_hnf(field root);
void Prelude__GT_EQ_hnf(field root);
void Prelude__LT_EQ_hnf(field root);
void Prelude_compare_hnf(field root);
void Prelude__USdef_HT_LT_EQ_HTPrelude_DOOrd_hnf(field root);
void Prelude__USsuper_HTPrelude_DOOrd_HTPrelude_DOEq_hnf(field root);
void Prelude__FS_EQ_hnf(field root);
void Prelude__USdef_HT_EQ_EQ_HTPrelude_DOEq_hnf(field root);
void Prelude__EQ_EQ_hnf(field root);
void Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOEither_hnf(field root);
void Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOEither_hnf(field root);
void Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe_hnf(field root);
void Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe_hnf(field root);
void Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering_hnf(field root);
void Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering_hnf(field root);
void Prelude__USdef_HTmax_HTPrelude_DOOrd_hnf(field root);
void Prelude__USdef_HTmin_HTPrelude_DOOrd_hnf(field root);
void Prelude__USdef_HT_GT_HTPrelude_DOOrd_hnf(field root);
void Prelude__USdef_HT_LT_HTPrelude_DOOrd_hnf(field root);
void Prelude__USdef_HT_LT_HTPrelude_DOOrd_HTA0_hnf(field root);
void Prelude__USdef_HT_GT_EQ_HTPrelude_DOOrd_hnf(field root);
void Prelude__USdef_HTcompare_HTPrelude_DOOrd_hnf(field root);
void Prelude__USdef_HTcompare_HTPrelude_DOOrd_HTA1_hnf(field root);
void Prelude__USdef_HT_FS_EQ_HTPrelude_DOEq_hnf(field root);
void Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOEither_hnf(field root);
void Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOEither_hnf(field root);
void Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe_hnf(field root);
void Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOMaybe_hnf(field root);
void Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering_hnf(field root);
void Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOOrdering_hnf(field root);
void Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOEither_hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOEither_hnf(field root);
void Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOEither_hnf(field root);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither_hnf(field root);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither_HTA2_hnf(field root);
void Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOEither_hnf(field root);
void Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOEither_hnf(field root);
void Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither_hnf(field root);
void Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither_HTA3_hnf(field root);
void Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOMaybe_hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe_hnf(field root);
void Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOMaybe_hnf(field root);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOMaybe_hnf(field root);
void Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe_hnf(field root);
void Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOMaybe_hnf(field root);
void Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOMaybe_hnf(field root);
void Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOOrdering_hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering_hnf(field root);
void Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOOrdering_hnf(field root);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering_hnf(field root);
void Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering_hnf(field root);
void Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOOrdering_hnf(field root);
void Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOOrdering_hnf(field root);
void Prelude__LT__hnf(field root);
void Prelude__LT__0_hnf(field root);
Node* Prelude__LT_RET_hnf(Node* backup);
void Prelude__GT__hnf(field root);
void Prelude__GT__0_hnf(field root);
Node* Prelude__GT_RET_hnf(Node* backup);
void Prelude_min__hnf(field root);
void Prelude_min__0_hnf(field root);
Node* Prelude_min_RET_hnf(Node* backup);
void Prelude_max__hnf(field root);
void Prelude_max__0_hnf(field root);
Node* Prelude_max_RET_hnf(Node* backup);
void Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOBool__hnf(field root);
void Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOBool__0_hnf(field root);
void Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOBool__1_hnf(field root);
Node* Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOBool_RET_hnf(Node* backup);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOBool__hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOBool__0_hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOBool__1_hnf(field root);
Node* Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOBool_RET_hnf(Node* backup);
void Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOBool__hnf(field root);
void Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOBool__1_hnf(field root);
Node* Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOBool_RET_hnf(Node* backup);
void Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOBool__hnf(field root);
void Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOBool__1_hnf(field root);
Node* Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOBool_RET_hnf(Node* backup);
void Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool__hnf(field root);
void Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool__0_hnf(field root);
Node* Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool_RET_hnf(Node* backup);
void Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool__hnf(field root);
void Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool__0_hnf(field root);
Node* Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool_RET_hnf(Node* backup);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOBool__hnf(field root);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOBool__0_hnf(field root);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOBool__1_hnf(field root);
Node* Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOBool_RET_hnf(Node* backup);
void Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOChar__hnf(field root);
void Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOChar__0_hnf(field root);
void Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOChar__0_0_0_hnf(field root);
void Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOChar__0_0_1_hnf(field root);
Node* Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOChar_RET_hnf(Node* backup);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOChar__hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOChar__0_hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOChar__0_0_0_hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOChar__0_0_1_hnf(field root);
Node* Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOChar_RET_hnf(Node* backup);
void Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOChar__hnf(field root);
void Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOChar__0_hnf(field root);
Node* Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOChar_RET_hnf(Node* backup);
void Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOChar__hnf(field root);
void Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOChar__0_hnf(field root);
Node* Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOChar_RET_hnf(Node* backup);
void Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar__hnf(field root);
void Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar__0_hnf(field root);
Node* Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar_RET_hnf(Node* backup);
void Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar__hnf(field root);
void Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar__0_hnf(field root);
Node* Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar_RET_hnf(Node* backup);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOChar__hnf(field root);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOChar__0_hnf(field root);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOChar__0_0_1_hnf(field root);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOChar__0_0_1_0_hnf(field root);
Node* Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOChar_RET_hnf(Node* backup);
void Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOFloat__hnf(field root);
void Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOFloat__0_hnf(field root);
void Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOFloat__0_0_0_hnf(field root);
void Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOFloat__0_0_1_hnf(field root);
Node* Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOFloat_RET_hnf(Node* backup);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOFloat__hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOFloat__0_hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOFloat__0_0_0_hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOFloat__0_0_1_hnf(field root);
Node* Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOFloat_RET_hnf(Node* backup);
void Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOFloat__hnf(field root);
void Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOFloat__0_hnf(field root);
Node* Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOFloat_RET_hnf(Node* backup);
void Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOFloat__hnf(field root);
void Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOFloat__0_hnf(field root);
Node* Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOFloat_RET_hnf(Node* backup);
void Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat__hnf(field root);
void Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat__0_hnf(field root);
Node* Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat_RET_hnf(Node* backup);
void Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat__hnf(field root);
void Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat__0_hnf(field root);
Node* Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat_RET_hnf(Node* backup);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOFloat__hnf(field root);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOFloat__0_hnf(field root);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOFloat__0_0_1_hnf(field root);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOFloat__0_0_1_0_hnf(field root);
Node* Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOFloat_RET_hnf(Node* backup);
void Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOInt__hnf(field root);
void Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOInt__0_hnf(field root);
void Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOInt__0_0_0_hnf(field root);
void Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOInt__0_0_1_hnf(field root);
Node* Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOInt_RET_hnf(Node* backup);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOInt__hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOInt__0_hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOInt__0_0_0_hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOInt__0_0_1_hnf(field root);
Node* Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOInt_RET_hnf(Node* backup);
void Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOInt__hnf(field root);
void Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOInt__0_hnf(field root);
Node* Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOInt_RET_hnf(Node* backup);
void Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOInt__hnf(field root);
void Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOInt__0_hnf(field root);
Node* Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOInt_RET_hnf(Node* backup);
void Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt__hnf(field root);
void Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt__0_hnf(field root);
Node* Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt_RET_hnf(Node* backup);
void Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt__hnf(field root);
void Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt__0_hnf(field root);
Node* Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt_RET_hnf(Node* backup);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOInt__hnf(field root);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOInt__0_hnf(field root);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOInt__0_0_1_hnf(field root);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOInt__0_0_1_0_hnf(field root);
Node* Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOInt_RET_hnf(Node* backup);
void Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOChar__hnf(field root);
void Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOChar__0_hnf(field root);
Node* Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOChar_RET_hnf(Node* backup);
void Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOChar__hnf(field root);
void Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOChar__0_hnf(field root);
Node* Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOChar_RET_hnf(Node* backup);
Node* Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOChar_RET_hnf(Node* backup);
Node* Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOChar_RET_hnf(Node* backup);
void Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOFloat__hnf(field root);
void Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOFloat__0_hnf(field root);
Node* Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOFloat_RET_hnf(Node* backup);
void Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOFloat__hnf(field root);
void Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOFloat__0_hnf(field root);
Node* Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOFloat_RET_hnf(Node* backup);
Node* Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOFloat_RET_hnf(Node* backup);
Node* Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOFloat_RET_hnf(Node* backup);
void Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOInt__hnf(field root);
void Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOInt__0_hnf(field root);
Node* Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOInt_RET_hnf(Node* backup);
void Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOInt__hnf(field root);
void Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOInt__0_hnf(field root);
Node* Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOInt_RET_hnf(Node* backup);
Node* Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOInt_RET_hnf(Node* backup);
Node* Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOInt_RET_hnf(Node* backup);
void Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool__hnf(field root);
void Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool__0_hnf(field root);
void Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool__0_1_hnf(field root);
void Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool__1_hnf(field root);
void Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool__1_0_hnf(field root);
void Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool__1_1_hnf(field root);
Node* Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool_RET_hnf(Node* backup);
void Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOBool__hnf(field root);
void Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOBool__0_hnf(field root);
void Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOBool__1_hnf(field root);
void Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOBool__1_0_hnf(field root);
Node* Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOBool_RET_hnf(Node* backup);
Node* Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOBool_RET_hnf(Node* backup);
Node* Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOBool_RET_hnf(Node* backup);
void Prelude__GT_EQ__hnf(field root);
void Prelude__GT_EQ__0_hnf(field root);
Node* Prelude__GT_EQ_RET_hnf(Node* backup);
void Prelude__LT_EQ__hnf(field root);
void Prelude__LT_EQ__0_hnf(field root);
Node* Prelude__LT_EQ_RET_hnf(Node* backup);
void Prelude_compare__hnf(field root);
void Prelude_compare__0_hnf(field root);
Node* Prelude_compare_RET_hnf(Node* backup);
void Prelude__USdef_HT_LT_EQ_HTPrelude_DOOrd__hnf(field root);
Node* Prelude__USdef_HT_LT_EQ_HTPrelude_DOOrd_RET_hnf(Node* backup);
void Prelude__USsuper_HTPrelude_DOOrd_HTPrelude_DOEq__hnf(field root);
void Prelude__USsuper_HTPrelude_DOOrd_HTPrelude_DOEq__0_hnf(field root);
Node* Prelude__USsuper_HTPrelude_DOOrd_HTPrelude_DOEq_RET_hnf(Node* backup);
void Prelude__FS_EQ__hnf(field root);
void Prelude__FS_EQ__0_hnf(field root);
Node* Prelude__FS_EQ_RET_hnf(Node* backup);
void Prelude__USdef_HT_EQ_EQ_HTPrelude_DOEq__hnf(field root);
Node* Prelude__USdef_HT_EQ_EQ_HTPrelude_DOEq_RET_hnf(Node* backup);
void Prelude__EQ_EQ__hnf(field root);
void Prelude__EQ_EQ__0_hnf(field root);
Node* Prelude__EQ_EQ_RET_hnf(Node* backup);
void Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOEither__hnf(field root);
void Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOEither__0_hnf(field root);
void Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOEither__1_hnf(field root);
Node* Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOEither_RET_hnf(Node* backup);
void Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOEither__hnf(field root);
void Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOEither__0_hnf(field root);
void Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOEither__1_hnf(field root);
Node* Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOEither_RET_hnf(Node* backup);
void Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe__hnf(field root);
void Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe__0_hnf(field root);
void Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_hnf(field root);
Node* Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe_RET_hnf(Node* backup);
void Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe__hnf(field root);
void Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe__0_hnf(field root);
void Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe__1_hnf(field root);
Node* Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe_RET_hnf(Node* backup);
void Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__hnf(field root);
void Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_hnf(field root);
void Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_hnf(field root);
void Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__2_hnf(field root);
Node* Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering_RET_hnf(Node* backup);
void Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering__hnf(field root);
void Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering__0_hnf(field root);
void Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering__1_hnf(field root);
void Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering__2_hnf(field root);
Node* Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering_RET_hnf(Node* backup);
void Prelude__USdef_HTmax_HTPrelude_DOOrd__hnf(field root);
void Prelude__USdef_HTmax_HTPrelude_DOOrd__0_hnf(field root);
void Prelude__USdef_HTmax_HTPrelude_DOOrd__1_hnf(field root);
Node* Prelude__USdef_HTmax_HTPrelude_DOOrd_RET_hnf(Node* backup);
void Prelude__USdef_HTmin_HTPrelude_DOOrd__hnf(field root);
void Prelude__USdef_HTmin_HTPrelude_DOOrd__0_hnf(field root);
void Prelude__USdef_HTmin_HTPrelude_DOOrd__1_hnf(field root);
Node* Prelude__USdef_HTmin_HTPrelude_DOOrd_RET_hnf(Node* backup);
void Prelude__USdef_HT_GT_HTPrelude_DOOrd__hnf(field root);
Node* Prelude__USdef_HT_GT_HTPrelude_DOOrd_RET_hnf(Node* backup);
void Prelude__USdef_HT_LT_HTPrelude_DOOrd__hnf(field root);
void Prelude__USdef_HT_LT_HTPrelude_DOOrd__1_hnf(field root);
Node* Prelude__USdef_HT_LT_HTPrelude_DOOrd_RET_hnf(Node* backup);
void Prelude__USdef_HT_LT_HTPrelude_DOOrd_HTA0__hnf(field root);
void Prelude__USdef_HT_LT_HTPrelude_DOOrd_HTA0__0_hnf(field root);
Node* Prelude__USdef_HT_LT_HTPrelude_DOOrd_HTA0_RET_hnf(Node* backup);
Node* Prelude__USdef_HT_GT_EQ_HTPrelude_DOOrd_RET_hnf(Node* backup);
void Prelude__USdef_HTcompare_HTPrelude_DOOrd__hnf(field root);
void Prelude__USdef_HTcompare_HTPrelude_DOOrd__1_hnf(field root);
Node* Prelude__USdef_HTcompare_HTPrelude_DOOrd_RET_hnf(Node* backup);
void Prelude__USdef_HTcompare_HTPrelude_DOOrd_HTA1__hnf(field root);
void Prelude__USdef_HTcompare_HTPrelude_DOOrd_HTA1__0_hnf(field root);
Node* Prelude__USdef_HTcompare_HTPrelude_DOOrd_HTA1_RET_hnf(Node* backup);
void Prelude__USdef_HT_FS_EQ_HTPrelude_DOEq__hnf(field root);
Node* Prelude__USdef_HT_FS_EQ_HTPrelude_DOEq_RET_hnf(Node* backup);
void Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOEither__hnf(field root);
Node* Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOEither_RET_hnf(Node* backup);
Node* Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOEither_RET_hnf(Node* backup);
void Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe__hnf(field root);
Node* Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe_RET_hnf(Node* backup);
Node* Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOMaybe_RET_hnf(Node* backup);
void Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering__hnf(field root);
Node* Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering_RET_hnf(Node* backup);
Node* Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOOrdering_RET_hnf(Node* backup);
Node* Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOEither_RET_hnf(Node* backup);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOEither__hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOEither__0_hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOEither__1_hnf(field root);
Node* Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOEither_RET_hnf(Node* backup);
void Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOEither__hnf(field root);
void Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOEither__0_hnf(field root);
void Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOEither__1_hnf(field root);
Node* Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOEither_RET_hnf(Node* backup);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither__hnf(field root);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither__1_hnf(field root);
Node* Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither_RET_hnf(Node* backup);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither_HTA2__hnf(field root);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither_HTA2__0_hnf(field root);
Node* Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither_HTA2_RET_hnf(Node* backup);
Node* Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOEither_RET_hnf(Node* backup);
void Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOEither__hnf(field root);
Node* Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOEither_RET_hnf(Node* backup);
void Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither__hnf(field root);
void Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither__1_hnf(field root);
Node* Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither_RET_hnf(Node* backup);
void Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither_HTA3__hnf(field root);
void Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither_HTA3__0_hnf(field root);
Node* Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither_HTA3_RET_hnf(Node* backup);
Node* Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOMaybe_RET_hnf(Node* backup);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__0_hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__0_0_hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__0_1_hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_0_hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1_hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1_0_hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1_1_hnf(field root);
Node* Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe_RET_hnf(Node* backup);
void Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOMaybe__hnf(field root);
void Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOMaybe__0_hnf(field root);
void Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_hnf(field root);
Node* Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOMaybe_RET_hnf(Node* backup);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOMaybe__hnf(field root);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_hnf(field root);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_0_hnf(field root);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1_hnf(field root);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1_1_hnf(field root);
Node* Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOMaybe_RET_hnf(Node* backup);
void Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe__hnf(field root);
void Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe__0_hnf(field root);
void Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_hnf(field root);
Node* Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe_RET_hnf(Node* backup);
void Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOMaybe__hnf(field root);
void Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOMaybe__0_hnf(field root);
void Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_hnf(field root);
void Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1_hnf(field root);
Node* Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOMaybe_RET_hnf(Node* backup);
void Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOMaybe__hnf(field root);
void Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOMaybe__0_hnf(field root);
void Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_hnf(field root);
void Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1_hnf(field root);
void Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1_1_hnf(field root);
Node* Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOMaybe_RET_hnf(Node* backup);
Node* Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOOrdering_RET_hnf(Node* backup);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_0_hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_1_hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_2_hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_0_hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_1_hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_2_hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__2_hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__2_0_hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__2_1_hnf(field root);
void Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__2_2_hnf(field root);
Node* Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering_RET_hnf(Node* backup);
void Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOOrdering__hnf(field root);
void Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_hnf(field root);
void Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_hnf(field root);
Node* Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOOrdering_RET_hnf(Node* backup);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__hnf(field root);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_hnf(field root);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_0_hnf(field root);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_0_0_hnf(field root);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_0_1_hnf(field root);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_0_2_hnf(field root);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_1_hnf(field root);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_1_0_hnf(field root);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_1_2_hnf(field root);
void Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_2_hnf(field root);
Node* Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering_RET_hnf(Node* backup);
void Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__hnf(field root);
void Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_hnf(field root);
void Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_hnf(field root);
void Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__2_hnf(field root);
Node* Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering_RET_hnf(Node* backup);
void Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOOrdering__hnf(field root);
void Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_hnf(field root);
void Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_hnf(field root);
void Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOOrdering__2_hnf(field root);
Node* Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOOrdering_RET_hnf(Node* backup);
void Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOOrdering__hnf(field root);
void Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_hnf(field root);
void Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_hnf(field root);
void Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOOrdering__2_hnf(field root);
Node* Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOOrdering_RET_hnf(Node* backup);

static Symbol Prelude__LT_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "<", .hnf = &Prelude__LT_hnf, .hnf_RET = &Prelude__LT_RET_hnf};
static Symbol Prelude__GT_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = ">", .hnf = &Prelude__GT_hnf, .hnf_RET = &Prelude__GT_RET_hnf};
static Symbol Prelude_min_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "min", .hnf = &Prelude_min_hnf, .hnf_RET = &Prelude_min_RET_hnf};
static Symbol Prelude_max_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "max", .hnf = &Prelude_max_hnf, .hnf_RET = &Prelude_max_RET_hnf};
static Symbol Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOBool_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#max#Prelude.Ord#Prelude.Bool", .hnf = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOBool_hnf, .hnf_RET = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOBool_RET_hnf};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOBool_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#min#Prelude.Ord#Prelude.Bool", .hnf = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOBool_hnf, .hnf_RET = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOBool_RET_hnf};
static Symbol Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOBool_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#>#Prelude.Ord#Prelude.Bool", .hnf = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOBool_hnf, .hnf_RET = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOBool_RET_hnf};
static Symbol Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOBool_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#<#Prelude.Ord#Prelude.Bool", .hnf = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOBool_hnf, .hnf_RET = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOBool_RET_hnf};
static Symbol Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#>=#Prelude.Ord#Prelude.Bool", .hnf = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool_hnf, .hnf_RET = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool_RET_hnf};
static Symbol Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#<=#Prelude.Ord#Prelude.Bool", .hnf = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool_hnf, .hnf_RET = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool_RET_hnf};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOBool_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#compare#Prelude.Ord#Prelude.Bool", .hnf = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOBool_hnf, .hnf_RET = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOBool_RET_hnf};
static Symbol Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOChar_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#max#Prelude.Ord#Prelude.Char", .hnf = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOChar_hnf, .hnf_RET = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOChar_RET_hnf};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOChar_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#min#Prelude.Ord#Prelude.Char", .hnf = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOChar_hnf, .hnf_RET = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOChar_RET_hnf};
static Symbol Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOChar_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#>#Prelude.Ord#Prelude.Char", .hnf = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOChar_hnf, .hnf_RET = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOChar_RET_hnf};
static Symbol Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOChar_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#<#Prelude.Ord#Prelude.Char", .hnf = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOChar_hnf, .hnf_RET = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOChar_RET_hnf};
static Symbol Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#>=#Prelude.Ord#Prelude.Char", .hnf = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar_hnf, .hnf_RET = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar_RET_hnf};
static Symbol Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#<=#Prelude.Ord#Prelude.Char", .hnf = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar_hnf, .hnf_RET = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar_RET_hnf};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOChar_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#compare#Prelude.Ord#Prelude.Char", .hnf = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOChar_hnf, .hnf_RET = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOChar_RET_hnf};
static Symbol Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOFloat_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#max#Prelude.Ord#Prelude.Float", .hnf = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOFloat_hnf, .hnf_RET = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOFloat_RET_hnf};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOFloat_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#min#Prelude.Ord#Prelude.Float", .hnf = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOFloat_hnf, .hnf_RET = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOFloat_RET_hnf};
static Symbol Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOFloat_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#>#Prelude.Ord#Prelude.Float", .hnf = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOFloat_hnf, .hnf_RET = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOFloat_RET_hnf};
static Symbol Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOFloat_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#<#Prelude.Ord#Prelude.Float", .hnf = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOFloat_hnf, .hnf_RET = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOFloat_RET_hnf};
static Symbol Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#>=#Prelude.Ord#Prelude.Float", .hnf = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat_hnf, .hnf_RET = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat_RET_hnf};
static Symbol Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#<=#Prelude.Ord#Prelude.Float", .hnf = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat_hnf, .hnf_RET = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat_RET_hnf};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOFloat_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#compare#Prelude.Ord#Prelude.Float", .hnf = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOFloat_hnf, .hnf_RET = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOFloat_RET_hnf};
static Symbol Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOInt_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#max#Prelude.Ord#Prelude.Int", .hnf = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOInt_hnf, .hnf_RET = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOInt_RET_hnf};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOInt_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#min#Prelude.Ord#Prelude.Int", .hnf = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOInt_hnf, .hnf_RET = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOInt_RET_hnf};
static Symbol Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOInt_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#>#Prelude.Ord#Prelude.Int", .hnf = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOInt_hnf, .hnf_RET = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOInt_RET_hnf};
static Symbol Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOInt_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#<#Prelude.Ord#Prelude.Int", .hnf = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOInt_hnf, .hnf_RET = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOInt_RET_hnf};
static Symbol Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#>=#Prelude.Ord#Prelude.Int", .hnf = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt_hnf, .hnf_RET = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt_RET_hnf};
static Symbol Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#<=#Prelude.Ord#Prelude.Int", .hnf = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt_hnf, .hnf_RET = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt_RET_hnf};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOInt_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#compare#Prelude.Ord#Prelude.Int", .hnf = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOInt_hnf, .hnf_RET = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOInt_RET_hnf};
static Symbol Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOChar_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#/=#Prelude.Eq#Prelude.Char", .hnf = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOChar_hnf, .hnf_RET = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOChar_RET_hnf};
static Symbol Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOChar_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#==#Prelude.Eq#Prelude.Char", .hnf = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOChar_hnf, .hnf_RET = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOChar_RET_hnf};
static Symbol Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOChar_symbol = {.tag = FUNCTION_TAG, .arity = 0, .name = "_inst#Prelude.Eq#Prelude.Char", .hnf = &Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOChar_hnf, .hnf_RET = &Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOChar_RET_hnf};
static Symbol Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOChar_symbol = {.tag = FUNCTION_TAG, .arity = 0, .name = "_inst#Prelude.Ord#Prelude.Char", .hnf = &Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOChar_hnf, .hnf_RET = &Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOChar_RET_hnf};
static Symbol Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOFloat_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#/=#Prelude.Eq#Prelude.Float", .hnf = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOFloat_hnf, .hnf_RET = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOFloat_RET_hnf};
static Symbol Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOFloat_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#==#Prelude.Eq#Prelude.Float", .hnf = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOFloat_hnf, .hnf_RET = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOFloat_RET_hnf};
static Symbol Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOFloat_symbol = {.tag = FUNCTION_TAG, .arity = 0, .name = "_inst#Prelude.Eq#Prelude.Float", .hnf = &Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOFloat_hnf, .hnf_RET = &Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOFloat_RET_hnf};
static Symbol Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOFloat_symbol = {.tag = FUNCTION_TAG, .arity = 0, .name = "_inst#Prelude.Ord#Prelude.Float", .hnf = &Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOFloat_hnf, .hnf_RET = &Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOFloat_RET_hnf};
static Symbol Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOInt_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#/=#Prelude.Eq#Prelude.Int", .hnf = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOInt_hnf, .hnf_RET = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOInt_RET_hnf};
static Symbol Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOInt_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#==#Prelude.Eq#Prelude.Int", .hnf = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOInt_hnf, .hnf_RET = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOInt_RET_hnf};
static Symbol Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOInt_symbol = {.tag = FUNCTION_TAG, .arity = 0, .name = "_inst#Prelude.Eq#Prelude.Int", .hnf = &Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOInt_hnf, .hnf_RET = &Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOInt_RET_hnf};
static Symbol Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOInt_symbol = {.tag = FUNCTION_TAG, .arity = 0, .name = "_inst#Prelude.Ord#Prelude.Int", .hnf = &Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOInt_hnf, .hnf_RET = &Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOInt_RET_hnf};
static Symbol Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#/=#Prelude.Eq#Prelude.Bool", .hnf = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool_hnf, .hnf_RET = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool_RET_hnf};
static Symbol Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOBool_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#==#Prelude.Eq#Prelude.Bool", .hnf = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOBool_hnf, .hnf_RET = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOBool_RET_hnf};
static Symbol Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOBool_symbol = {.tag = FUNCTION_TAG, .arity = 0, .name = "_inst#Prelude.Eq#Prelude.Bool", .hnf = &Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOBool_hnf, .hnf_RET = &Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOBool_RET_hnf};
static Symbol Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOBool_symbol = {.tag = FUNCTION_TAG, .arity = 0, .name = "_inst#Prelude.Ord#Prelude.Bool", .hnf = &Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOBool_hnf, .hnf_RET = &Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOBool_RET_hnf};
static Symbol Prelude__GT_EQ_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = ">=", .hnf = &Prelude__GT_EQ_hnf, .hnf_RET = &Prelude__GT_EQ_RET_hnf};
static Symbol Prelude__LT_EQ_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "<=", .hnf = &Prelude__LT_EQ_hnf, .hnf_RET = &Prelude__LT_EQ_RET_hnf};
static Symbol Prelude_compare_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "compare", .hnf = &Prelude_compare_hnf, .hnf_RET = &Prelude_compare_RET_hnf};
static Symbol Prelude__USdef_HT_LT_EQ_HTPrelude_DOOrd_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_def#<=#Prelude.Ord", .hnf = &Prelude__USdef_HT_LT_EQ_HTPrelude_DOOrd_hnf, .hnf_RET = &Prelude__USdef_HT_LT_EQ_HTPrelude_DOOrd_RET_hnf};
static Symbol Prelude__USsuper_HTPrelude_DOOrd_HTPrelude_DOEq_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_super#Prelude.Ord#Prelude.Eq", .hnf = &Prelude__USsuper_HTPrelude_DOOrd_HTPrelude_DOEq_hnf, .hnf_RET = &Prelude__USsuper_HTPrelude_DOOrd_HTPrelude_DOEq_RET_hnf};
static Symbol Prelude__FS_EQ_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "/=", .hnf = &Prelude__FS_EQ_hnf, .hnf_RET = &Prelude__FS_EQ_RET_hnf};
static Symbol Prelude__USdef_HT_EQ_EQ_HTPrelude_DOEq_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_def#==#Prelude.Eq", .hnf = &Prelude__USdef_HT_EQ_EQ_HTPrelude_DOEq_hnf, .hnf_RET = &Prelude__USdef_HT_EQ_EQ_HTPrelude_DOEq_RET_hnf};
static Symbol Prelude__EQ_EQ_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "==", .hnf = &Prelude__EQ_EQ_hnf, .hnf_RET = &Prelude__EQ_EQ_RET_hnf};
static Symbol Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOEither_symbol = {.tag = FUNCTION_TAG, .arity = 4, .name = "_impl#<=#Prelude.Ord#Prelude.Either", .hnf = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOEither_hnf, .hnf_RET = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOEither_RET_hnf};
static Symbol Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOEither_symbol = {.tag = FUNCTION_TAG, .arity = 4, .name = "_impl#==#Prelude.Eq#Prelude.Either", .hnf = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOEither_hnf, .hnf_RET = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOEither_RET_hnf};
static Symbol Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#<=#Prelude.Ord#Prelude.Maybe", .hnf = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe_hnf, .hnf_RET = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe_RET_hnf};
static Symbol Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#==#Prelude.Eq#Prelude.Maybe", .hnf = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe_hnf, .hnf_RET = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe_RET_hnf};
static Symbol Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#<=#Prelude.Ord#Prelude.Ordering", .hnf = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering_hnf, .hnf_RET = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering_RET_hnf};
static Symbol Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#==#Prelude.Eq#Prelude.Ordering", .hnf = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering_hnf, .hnf_RET = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering_RET_hnf};
static Symbol Prelude__USdef_HTmax_HTPrelude_DOOrd_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_def#max#Prelude.Ord", .hnf = &Prelude__USdef_HTmax_HTPrelude_DOOrd_hnf, .hnf_RET = &Prelude__USdef_HTmax_HTPrelude_DOOrd_RET_hnf};
static Symbol Prelude__USdef_HTmin_HTPrelude_DOOrd_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_def#min#Prelude.Ord", .hnf = &Prelude__USdef_HTmin_HTPrelude_DOOrd_hnf, .hnf_RET = &Prelude__USdef_HTmin_HTPrelude_DOOrd_RET_hnf};
static Symbol Prelude__USdef_HT_GT_HTPrelude_DOOrd_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_def#>#Prelude.Ord", .hnf = &Prelude__USdef_HT_GT_HTPrelude_DOOrd_hnf, .hnf_RET = &Prelude__USdef_HT_GT_HTPrelude_DOOrd_RET_hnf};
static Symbol Prelude__USdef_HT_LT_HTPrelude_DOOrd_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_def#<#Prelude.Ord", .hnf = &Prelude__USdef_HT_LT_HTPrelude_DOOrd_hnf, .hnf_RET = &Prelude__USdef_HT_LT_HTPrelude_DOOrd_RET_hnf};
static Symbol Prelude__USdef_HT_LT_HTPrelude_DOOrd_HTA0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_def#<#Prelude.Ord#A0", .hnf = &Prelude__USdef_HT_LT_HTPrelude_DOOrd_HTA0_hnf, .hnf_RET = &Prelude__USdef_HT_LT_HTPrelude_DOOrd_HTA0_RET_hnf};
static Symbol Prelude__USdef_HT_GT_EQ_HTPrelude_DOOrd_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_def#>=#Prelude.Ord", .hnf = &Prelude__USdef_HT_GT_EQ_HTPrelude_DOOrd_hnf, .hnf_RET = &Prelude__USdef_HT_GT_EQ_HTPrelude_DOOrd_RET_hnf};
static Symbol Prelude__USdef_HTcompare_HTPrelude_DOOrd_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_def#compare#Prelude.Ord", .hnf = &Prelude__USdef_HTcompare_HTPrelude_DOOrd_hnf, .hnf_RET = &Prelude__USdef_HTcompare_HTPrelude_DOOrd_RET_hnf};
static Symbol Prelude__USdef_HTcompare_HTPrelude_DOOrd_HTA1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_def#compare#Prelude.Ord#A1", .hnf = &Prelude__USdef_HTcompare_HTPrelude_DOOrd_HTA1_hnf, .hnf_RET = &Prelude__USdef_HTcompare_HTPrelude_DOOrd_HTA1_RET_hnf};
static Symbol Prelude__USdef_HT_FS_EQ_HTPrelude_DOEq_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_def#/=#Prelude.Eq", .hnf = &Prelude__USdef_HT_FS_EQ_HTPrelude_DOEq_hnf, .hnf_RET = &Prelude__USdef_HT_FS_EQ_HTPrelude_DOEq_RET_hnf};
static Symbol Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOEither_symbol = {.tag = FUNCTION_TAG, .arity = 4, .name = "_impl#/=#Prelude.Eq#Prelude.Either", .hnf = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOEither_hnf, .hnf_RET = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOEither_RET_hnf};
static Symbol Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOEither_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_inst#Prelude.Ord#Prelude.Either", .hnf = &Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOEither_hnf, .hnf_RET = &Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOEither_RET_hnf};
static Symbol Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#/=#Prelude.Eq#Prelude.Maybe", .hnf = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe_hnf, .hnf_RET = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe_RET_hnf};
static Symbol Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOMaybe_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_inst#Prelude.Ord#Prelude.Maybe", .hnf = &Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOMaybe_hnf, .hnf_RET = &Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOMaybe_RET_hnf};
static Symbol Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#/=#Prelude.Eq#Prelude.Ordering", .hnf = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering_hnf, .hnf_RET = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering_RET_hnf};
static Symbol Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOOrdering_symbol = {.tag = FUNCTION_TAG, .arity = 0, .name = "_inst#Prelude.Ord#Prelude.Ordering", .hnf = &Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOOrdering_hnf, .hnf_RET = &Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOOrdering_RET_hnf};
static Symbol Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOEither_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_inst#Prelude.Eq#Prelude.Either", .hnf = &Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOEither_hnf, .hnf_RET = &Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOEither_RET_hnf};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOEither_symbol = {.tag = FUNCTION_TAG, .arity = 4, .name = "_impl#min#Prelude.Ord#Prelude.Either", .hnf = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOEither_hnf, .hnf_RET = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOEither_RET_hnf};
static Symbol Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOEither_symbol = {.tag = FUNCTION_TAG, .arity = 4, .name = "_impl#max#Prelude.Ord#Prelude.Either", .hnf = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOEither_hnf, .hnf_RET = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOEither_RET_hnf};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither_symbol = {.tag = FUNCTION_TAG, .arity = 4, .name = "_impl#compare#Prelude.Ord#Prelude.Either", .hnf = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither_hnf, .hnf_RET = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither_RET_hnf};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither_HTA2_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#compare#Prelude.Ord#Prelude.Either#A2", .hnf = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither_HTA2_hnf, .hnf_RET = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither_HTA2_RET_hnf};
static Symbol Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOEither_symbol = {.tag = FUNCTION_TAG, .arity = 4, .name = "_impl#>=#Prelude.Ord#Prelude.Either", .hnf = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOEither_hnf, .hnf_RET = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOEither_RET_hnf};
static Symbol Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOEither_symbol = {.tag = FUNCTION_TAG, .arity = 4, .name = "_impl#>#Prelude.Ord#Prelude.Either", .hnf = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOEither_hnf, .hnf_RET = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOEither_RET_hnf};
static Symbol Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither_symbol = {.tag = FUNCTION_TAG, .arity = 4, .name = "_impl#<#Prelude.Ord#Prelude.Either", .hnf = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither_hnf, .hnf_RET = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither_RET_hnf};
static Symbol Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither_HTA3_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#<#Prelude.Ord#Prelude.Either#A3", .hnf = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither_HTA3_hnf, .hnf_RET = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither_HTA3_RET_hnf};
static Symbol Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOMaybe_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_inst#Prelude.Eq#Prelude.Maybe", .hnf = &Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOMaybe_hnf, .hnf_RET = &Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOMaybe_RET_hnf};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#min#Prelude.Ord#Prelude.Maybe", .hnf = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe_hnf, .hnf_RET = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe_RET_hnf};
static Symbol Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOMaybe_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#max#Prelude.Ord#Prelude.Maybe", .hnf = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOMaybe_hnf, .hnf_RET = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOMaybe_RET_hnf};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOMaybe_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#compare#Prelude.Ord#Prelude.Maybe", .hnf = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOMaybe_hnf, .hnf_RET = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOMaybe_RET_hnf};
static Symbol Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#>=#Prelude.Ord#Prelude.Maybe", .hnf = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe_hnf, .hnf_RET = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe_RET_hnf};
static Symbol Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOMaybe_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#>#Prelude.Ord#Prelude.Maybe", .hnf = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOMaybe_hnf, .hnf_RET = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOMaybe_RET_hnf};
static Symbol Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOMaybe_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#<#Prelude.Ord#Prelude.Maybe", .hnf = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOMaybe_hnf, .hnf_RET = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOMaybe_RET_hnf};
static Symbol Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOOrdering_symbol = {.tag = FUNCTION_TAG, .arity = 0, .name = "_inst#Prelude.Eq#Prelude.Ordering", .hnf = &Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOOrdering_hnf, .hnf_RET = &Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOOrdering_RET_hnf};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#min#Prelude.Ord#Prelude.Ordering", .hnf = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering_hnf, .hnf_RET = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering_RET_hnf};
static Symbol Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOOrdering_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#max#Prelude.Ord#Prelude.Ordering", .hnf = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOOrdering_hnf, .hnf_RET = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOOrdering_RET_hnf};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#compare#Prelude.Ord#Prelude.Ordering", .hnf = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering_hnf, .hnf_RET = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering_RET_hnf};
static Symbol Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#>=#Prelude.Ord#Prelude.Ordering", .hnf = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering_hnf, .hnf_RET = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering_RET_hnf};
static Symbol Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOOrdering_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#>#Prelude.Ord#Prelude.Ordering", .hnf = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOOrdering_hnf, .hnf_RET = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOOrdering_RET_hnf};
static Symbol Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOOrdering_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#<#Prelude.Ord#Prelude.Ordering", .hnf = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOOrdering_hnf, .hnf_RET = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOOrdering_RET_hnf};
static Symbol Prelude__LT__symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "<@[]", .hnf = Prelude__LT__hnf, .hnf_RET = NULL};
static Symbol Prelude__LT__0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "<@[0]", .hnf = Prelude__LT__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__GT__symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = ">@[]", .hnf = Prelude__GT__hnf, .hnf_RET = NULL};
static Symbol Prelude__GT__0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = ">@[0]", .hnf = Prelude__GT__0_hnf, .hnf_RET = NULL};
static Symbol Prelude_min__symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "min@[]", .hnf = Prelude_min__hnf, .hnf_RET = NULL};
static Symbol Prelude_min__0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "min@[0]", .hnf = Prelude_min__0_hnf, .hnf_RET = NULL};
static Symbol Prelude_max__symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "max@[]", .hnf = Prelude_max__hnf, .hnf_RET = NULL};
static Symbol Prelude_max__0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "max@[0]", .hnf = Prelude_max__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOBool__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#max#Prelude.Ord#Prelude.Bool@[]", .hnf = Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOBool__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOBool__0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#max#Prelude.Ord#Prelude.Bool@[0]", .hnf = Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOBool__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOBool__1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#max#Prelude.Ord#Prelude.Bool@[1]", .hnf = Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOBool__1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOBool__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#min#Prelude.Ord#Prelude.Bool@[]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOBool__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOBool__0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#min#Prelude.Ord#Prelude.Bool@[0]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOBool__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOBool__1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#min#Prelude.Ord#Prelude.Bool@[1]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOBool__1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOBool__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#>#Prelude.Ord#Prelude.Bool@[]", .hnf = Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOBool__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOBool__1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#>#Prelude.Ord#Prelude.Bool@[1]", .hnf = Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOBool__1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOBool__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#<#Prelude.Ord#Prelude.Bool@[]", .hnf = Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOBool__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOBool__1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#<#Prelude.Ord#Prelude.Bool@[1]", .hnf = Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOBool__1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#>=#Prelude.Ord#Prelude.Bool@[]", .hnf = Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool__0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#>=#Prelude.Ord#Prelude.Bool@[0]", .hnf = Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#<=#Prelude.Ord#Prelude.Bool@[]", .hnf = Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool__0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#<=#Prelude.Ord#Prelude.Bool@[0]", .hnf = Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOBool__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#compare#Prelude.Ord#Prelude.Bool@[]", .hnf = Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOBool__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOBool__0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#compare#Prelude.Ord#Prelude.Bool@[0]", .hnf = Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOBool__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOBool__1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#compare#Prelude.Ord#Prelude.Bool@[1]", .hnf = Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOBool__1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOChar__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#max#Prelude.Ord#Prelude.Char@[]", .hnf = Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOChar__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOChar__0_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#max#Prelude.Ord#Prelude.Char@[0]", .hnf = Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOChar__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOChar__0_0_0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#max#Prelude.Ord#Prelude.Char@[0,0,0]", .hnf = Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOChar__0_0_0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOChar__0_0_1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#max#Prelude.Ord#Prelude.Char@[0,0,1]", .hnf = Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOChar__0_0_1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOChar__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#min#Prelude.Ord#Prelude.Char@[]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOChar__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOChar__0_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#min#Prelude.Ord#Prelude.Char@[0]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOChar__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOChar__0_0_0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#min#Prelude.Ord#Prelude.Char@[0,0,0]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOChar__0_0_0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOChar__0_0_1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#min#Prelude.Ord#Prelude.Char@[0,0,1]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOChar__0_0_1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOChar__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#>#Prelude.Ord#Prelude.Char@[]", .hnf = Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOChar__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOChar__0_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#>#Prelude.Ord#Prelude.Char@[0]", .hnf = Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOChar__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOChar__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#<#Prelude.Ord#Prelude.Char@[]", .hnf = Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOChar__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOChar__0_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#<#Prelude.Ord#Prelude.Char@[0]", .hnf = Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOChar__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#>=#Prelude.Ord#Prelude.Char@[]", .hnf = Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar__0_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#>=#Prelude.Ord#Prelude.Char@[0]", .hnf = Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#<=#Prelude.Ord#Prelude.Char@[]", .hnf = Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar__0_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#<=#Prelude.Ord#Prelude.Char@[0]", .hnf = Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOChar__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#compare#Prelude.Ord#Prelude.Char@[]", .hnf = Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOChar__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOChar__0_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#compare#Prelude.Ord#Prelude.Char@[0]", .hnf = Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOChar__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOChar__0_0_1_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#compare#Prelude.Ord#Prelude.Char@[0,0,1]", .hnf = Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOChar__0_0_1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOChar__0_0_1_0_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#compare#Prelude.Ord#Prelude.Char@[0,0,1,0]", .hnf = Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOChar__0_0_1_0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOFloat__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#max#Prelude.Ord#Prelude.Float@[]", .hnf = Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOFloat__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOFloat__0_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#max#Prelude.Ord#Prelude.Float@[0]", .hnf = Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOFloat__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOFloat__0_0_0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#max#Prelude.Ord#Prelude.Float@[0,0,0]", .hnf = Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOFloat__0_0_0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOFloat__0_0_1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#max#Prelude.Ord#Prelude.Float@[0,0,1]", .hnf = Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOFloat__0_0_1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOFloat__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#min#Prelude.Ord#Prelude.Float@[]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOFloat__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOFloat__0_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#min#Prelude.Ord#Prelude.Float@[0]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOFloat__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOFloat__0_0_0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#min#Prelude.Ord#Prelude.Float@[0,0,0]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOFloat__0_0_0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOFloat__0_0_1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#min#Prelude.Ord#Prelude.Float@[0,0,1]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOFloat__0_0_1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOFloat__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#>#Prelude.Ord#Prelude.Float@[]", .hnf = Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOFloat__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOFloat__0_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#>#Prelude.Ord#Prelude.Float@[0]", .hnf = Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOFloat__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOFloat__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#<#Prelude.Ord#Prelude.Float@[]", .hnf = Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOFloat__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOFloat__0_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#<#Prelude.Ord#Prelude.Float@[0]", .hnf = Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOFloat__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#>=#Prelude.Ord#Prelude.Float@[]", .hnf = Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat__0_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#>=#Prelude.Ord#Prelude.Float@[0]", .hnf = Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#<=#Prelude.Ord#Prelude.Float@[]", .hnf = Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat__0_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#<=#Prelude.Ord#Prelude.Float@[0]", .hnf = Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOFloat__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#compare#Prelude.Ord#Prelude.Float@[]", .hnf = Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOFloat__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOFloat__0_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#compare#Prelude.Ord#Prelude.Float@[0]", .hnf = Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOFloat__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOFloat__0_0_1_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#compare#Prelude.Ord#Prelude.Float@[0,0,1]", .hnf = Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOFloat__0_0_1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOFloat__0_0_1_0_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#compare#Prelude.Ord#Prelude.Float@[0,0,1,0]", .hnf = Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOFloat__0_0_1_0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOInt__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#max#Prelude.Ord#Prelude.Int@[]", .hnf = Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOInt__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOInt__0_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#max#Prelude.Ord#Prelude.Int@[0]", .hnf = Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOInt__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOInt__0_0_0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#max#Prelude.Ord#Prelude.Int@[0,0,0]", .hnf = Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOInt__0_0_0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOInt__0_0_1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#max#Prelude.Ord#Prelude.Int@[0,0,1]", .hnf = Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOInt__0_0_1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOInt__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#min#Prelude.Ord#Prelude.Int@[]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOInt__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOInt__0_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#min#Prelude.Ord#Prelude.Int@[0]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOInt__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOInt__0_0_0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#min#Prelude.Ord#Prelude.Int@[0,0,0]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOInt__0_0_0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOInt__0_0_1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#min#Prelude.Ord#Prelude.Int@[0,0,1]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOInt__0_0_1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOInt__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#>#Prelude.Ord#Prelude.Int@[]", .hnf = Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOInt__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOInt__0_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#>#Prelude.Ord#Prelude.Int@[0]", .hnf = Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOInt__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOInt__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#<#Prelude.Ord#Prelude.Int@[]", .hnf = Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOInt__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOInt__0_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#<#Prelude.Ord#Prelude.Int@[0]", .hnf = Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOInt__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#>=#Prelude.Ord#Prelude.Int@[]", .hnf = Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt__0_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#>=#Prelude.Ord#Prelude.Int@[0]", .hnf = Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#<=#Prelude.Ord#Prelude.Int@[]", .hnf = Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt__0_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#<=#Prelude.Ord#Prelude.Int@[0]", .hnf = Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOInt__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#compare#Prelude.Ord#Prelude.Int@[]", .hnf = Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOInt__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOInt__0_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#compare#Prelude.Ord#Prelude.Int@[0]", .hnf = Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOInt__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOInt__0_0_1_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#compare#Prelude.Ord#Prelude.Int@[0,0,1]", .hnf = Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOInt__0_0_1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOInt__0_0_1_0_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#compare#Prelude.Ord#Prelude.Int@[0,0,1,0]", .hnf = Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOInt__0_0_1_0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOChar__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#/=#Prelude.Eq#Prelude.Char@[]", .hnf = Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOChar__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOChar__0_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#/=#Prelude.Eq#Prelude.Char@[0]", .hnf = Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOChar__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOChar__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#==#Prelude.Eq#Prelude.Char@[]", .hnf = Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOChar__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOChar__0_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#==#Prelude.Eq#Prelude.Char@[0]", .hnf = Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOChar__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOFloat__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#/=#Prelude.Eq#Prelude.Float@[]", .hnf = Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOFloat__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOFloat__0_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#/=#Prelude.Eq#Prelude.Float@[0]", .hnf = Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOFloat__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOFloat__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#==#Prelude.Eq#Prelude.Float@[]", .hnf = Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOFloat__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOFloat__0_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#==#Prelude.Eq#Prelude.Float@[0]", .hnf = Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOFloat__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOInt__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#/=#Prelude.Eq#Prelude.Int@[]", .hnf = Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOInt__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOInt__0_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#/=#Prelude.Eq#Prelude.Int@[0]", .hnf = Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOInt__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOInt__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#==#Prelude.Eq#Prelude.Int@[]", .hnf = Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOInt__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOInt__0_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#==#Prelude.Eq#Prelude.Int@[0]", .hnf = Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOInt__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#/=#Prelude.Eq#Prelude.Bool@[]", .hnf = Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool__0_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#/=#Prelude.Eq#Prelude.Bool@[0]", .hnf = Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool__0_1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#/=#Prelude.Eq#Prelude.Bool@[0,1]", .hnf = Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool__0_1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool__1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#/=#Prelude.Eq#Prelude.Bool@[1]", .hnf = Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool__1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool__1_0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#/=#Prelude.Eq#Prelude.Bool@[1,0]", .hnf = Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool__1_0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool__1_1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#/=#Prelude.Eq#Prelude.Bool@[1,1]", .hnf = Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool__1_1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOBool__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#==#Prelude.Eq#Prelude.Bool@[]", .hnf = Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOBool__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOBool__0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#==#Prelude.Eq#Prelude.Bool@[0]", .hnf = Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOBool__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOBool__1_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#==#Prelude.Eq#Prelude.Bool@[1]", .hnf = Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOBool__1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOBool__1_0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#==#Prelude.Eq#Prelude.Bool@[1,0]", .hnf = Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOBool__1_0_hnf, .hnf_RET = NULL};
static Symbol Prelude__GT_EQ__symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = ">=@[]", .hnf = Prelude__GT_EQ__hnf, .hnf_RET = NULL};
static Symbol Prelude__GT_EQ__0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = ">=@[0]", .hnf = Prelude__GT_EQ__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__LT_EQ__symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "<=@[]", .hnf = Prelude__LT_EQ__hnf, .hnf_RET = NULL};
static Symbol Prelude__LT_EQ__0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "<=@[0]", .hnf = Prelude__LT_EQ__0_hnf, .hnf_RET = NULL};
static Symbol Prelude_compare__symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "compare@[]", .hnf = Prelude_compare__hnf, .hnf_RET = NULL};
static Symbol Prelude_compare__0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "compare@[0]", .hnf = Prelude_compare__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USdef_HT_LT_EQ_HTPrelude_DOOrd__symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_def#<=#Prelude.Ord@[]", .hnf = Prelude__USdef_HT_LT_EQ_HTPrelude_DOOrd__hnf, .hnf_RET = NULL};
static Symbol Prelude__USsuper_HTPrelude_DOOrd_HTPrelude_DOEq__symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_super#Prelude.Ord#Prelude.Eq@[]", .hnf = Prelude__USsuper_HTPrelude_DOOrd_HTPrelude_DOEq__hnf, .hnf_RET = NULL};
static Symbol Prelude__USsuper_HTPrelude_DOOrd_HTPrelude_DOEq__0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_super#Prelude.Ord#Prelude.Eq@[0]", .hnf = Prelude__USsuper_HTPrelude_DOOrd_HTPrelude_DOEq__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__FS_EQ__symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "/=@[]", .hnf = Prelude__FS_EQ__hnf, .hnf_RET = NULL};
static Symbol Prelude__FS_EQ__0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "/=@[0]", .hnf = Prelude__FS_EQ__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USdef_HT_EQ_EQ_HTPrelude_DOEq__symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_def#==#Prelude.Eq@[]", .hnf = Prelude__USdef_HT_EQ_EQ_HTPrelude_DOEq__hnf, .hnf_RET = NULL};
static Symbol Prelude__EQ_EQ__symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "==@[]", .hnf = Prelude__EQ_EQ__hnf, .hnf_RET = NULL};
static Symbol Prelude__EQ_EQ__0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "==@[0]", .hnf = Prelude__EQ_EQ__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOEither__symbol = {.tag = FUNCTION_TAG, .arity = 4, .name = "_impl#<=#Prelude.Ord#Prelude.Either@[]", .hnf = Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOEither__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOEither__0_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#<=#Prelude.Ord#Prelude.Either@[0]", .hnf = Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOEither__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOEither__1_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#<=#Prelude.Ord#Prelude.Either@[1]", .hnf = Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOEither__1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOEither__symbol = {.tag = FUNCTION_TAG, .arity = 4, .name = "_impl#==#Prelude.Eq#Prelude.Either@[]", .hnf = Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOEither__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOEither__0_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#==#Prelude.Eq#Prelude.Either@[0]", .hnf = Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOEither__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOEither__1_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#==#Prelude.Eq#Prelude.Either@[1]", .hnf = Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOEither__1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe__symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#<=#Prelude.Ord#Prelude.Maybe@[]", .hnf = Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe__0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#<=#Prelude.Ord#Prelude.Maybe@[0]", .hnf = Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#<=#Prelude.Ord#Prelude.Maybe@[1]", .hnf = Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe__symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#==#Prelude.Eq#Prelude.Maybe@[]", .hnf = Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe__0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#==#Prelude.Eq#Prelude.Maybe@[0]", .hnf = Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe__1_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#==#Prelude.Eq#Prelude.Maybe@[1]", .hnf = Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe__1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#<=#Prelude.Ord#Prelude.Ordering@[]", .hnf = Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#<=#Prelude.Ord#Prelude.Ordering@[0]", .hnf = Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#<=#Prelude.Ord#Prelude.Ordering@[1]", .hnf = Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__2_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#<=#Prelude.Ord#Prelude.Ordering@[2]", .hnf = Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__2_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#==#Prelude.Eq#Prelude.Ordering@[]", .hnf = Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering__0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#==#Prelude.Eq#Prelude.Ordering@[0]", .hnf = Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering__1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#==#Prelude.Eq#Prelude.Ordering@[1]", .hnf = Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering__1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering__2_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#==#Prelude.Eq#Prelude.Ordering@[2]", .hnf = Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering__2_hnf, .hnf_RET = NULL};
static Symbol Prelude__USdef_HTmax_HTPrelude_DOOrd__symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_def#max#Prelude.Ord@[]", .hnf = Prelude__USdef_HTmax_HTPrelude_DOOrd__hnf, .hnf_RET = NULL};
static Symbol Prelude__USdef_HTmax_HTPrelude_DOOrd__0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_def#max#Prelude.Ord@[0]", .hnf = Prelude__USdef_HTmax_HTPrelude_DOOrd__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USdef_HTmax_HTPrelude_DOOrd__1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_def#max#Prelude.Ord@[1]", .hnf = Prelude__USdef_HTmax_HTPrelude_DOOrd__1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USdef_HTmin_HTPrelude_DOOrd__symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_def#min#Prelude.Ord@[]", .hnf = Prelude__USdef_HTmin_HTPrelude_DOOrd__hnf, .hnf_RET = NULL};
static Symbol Prelude__USdef_HTmin_HTPrelude_DOOrd__0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_def#min#Prelude.Ord@[0]", .hnf = Prelude__USdef_HTmin_HTPrelude_DOOrd__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USdef_HTmin_HTPrelude_DOOrd__1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_def#min#Prelude.Ord@[1]", .hnf = Prelude__USdef_HTmin_HTPrelude_DOOrd__1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USdef_HT_GT_HTPrelude_DOOrd__symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_def#>#Prelude.Ord@[]", .hnf = Prelude__USdef_HT_GT_HTPrelude_DOOrd__hnf, .hnf_RET = NULL};
static Symbol Prelude__USdef_HT_LT_HTPrelude_DOOrd__symbol = {.tag = FUNCTION_TAG, .arity = 4, .name = "_def#<#Prelude.Ord@[]", .hnf = Prelude__USdef_HT_LT_HTPrelude_DOOrd__hnf, .hnf_RET = NULL};
static Symbol Prelude__USdef_HT_LT_HTPrelude_DOOrd__1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_def#<#Prelude.Ord@[1]", .hnf = Prelude__USdef_HT_LT_HTPrelude_DOOrd__1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USdef_HT_LT_HTPrelude_DOOrd_HTA0__symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_def#<#Prelude.Ord#A0@[]", .hnf = Prelude__USdef_HT_LT_HTPrelude_DOOrd_HTA0__hnf, .hnf_RET = NULL};
static Symbol Prelude__USdef_HT_LT_HTPrelude_DOOrd_HTA0__0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_def#<#Prelude.Ord#A0@[0]", .hnf = Prelude__USdef_HT_LT_HTPrelude_DOOrd_HTA0__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USdef_HTcompare_HTPrelude_DOOrd__symbol = {.tag = FUNCTION_TAG, .arity = 4, .name = "_def#compare#Prelude.Ord@[]", .hnf = Prelude__USdef_HTcompare_HTPrelude_DOOrd__hnf, .hnf_RET = NULL};
static Symbol Prelude__USdef_HTcompare_HTPrelude_DOOrd__1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_def#compare#Prelude.Ord@[1]", .hnf = Prelude__USdef_HTcompare_HTPrelude_DOOrd__1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USdef_HTcompare_HTPrelude_DOOrd_HTA1__symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_def#compare#Prelude.Ord#A1@[]", .hnf = Prelude__USdef_HTcompare_HTPrelude_DOOrd_HTA1__hnf, .hnf_RET = NULL};
static Symbol Prelude__USdef_HTcompare_HTPrelude_DOOrd_HTA1__0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_def#compare#Prelude.Ord#A1@[0]", .hnf = Prelude__USdef_HTcompare_HTPrelude_DOOrd_HTA1__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USdef_HT_FS_EQ_HTPrelude_DOEq__symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_def#/=#Prelude.Eq@[]", .hnf = Prelude__USdef_HT_FS_EQ_HTPrelude_DOEq__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOEither__symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#/=#Prelude.Eq#Prelude.Either@[]", .hnf = Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOEither__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe__symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#/=#Prelude.Eq#Prelude.Maybe@[]", .hnf = Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering__symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#/=#Prelude.Eq#Prelude.Ordering@[]", .hnf = Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOEither__symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#min#Prelude.Ord#Prelude.Either@[]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOEither__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOEither__0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#min#Prelude.Ord#Prelude.Either@[0]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOEither__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOEither__1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#min#Prelude.Ord#Prelude.Either@[1]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOEither__1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOEither__symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#max#Prelude.Ord#Prelude.Either@[]", .hnf = Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOEither__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOEither__0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#max#Prelude.Ord#Prelude.Either@[0]", .hnf = Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOEither__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOEither__1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#max#Prelude.Ord#Prelude.Either@[1]", .hnf = Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOEither__1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither__symbol = {.tag = FUNCTION_TAG, .arity = 4, .name = "_impl#compare#Prelude.Ord#Prelude.Either@[]", .hnf = Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither__1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#compare#Prelude.Ord#Prelude.Either@[1]", .hnf = Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither__1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither_HTA2__symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#compare#Prelude.Ord#Prelude.Either#A2@[]", .hnf = Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither_HTA2__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither_HTA2__0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#compare#Prelude.Ord#Prelude.Either#A2@[0]", .hnf = Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither_HTA2__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOEither__symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#>#Prelude.Ord#Prelude.Either@[]", .hnf = Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOEither__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither__symbol = {.tag = FUNCTION_TAG, .arity = 4, .name = "_impl#<#Prelude.Ord#Prelude.Either@[]", .hnf = Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither__1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#<#Prelude.Ord#Prelude.Either@[1]", .hnf = Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither__1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither_HTA3__symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#<#Prelude.Ord#Prelude.Either#A3@[]", .hnf = Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither_HTA3__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither_HTA3__0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#<#Prelude.Ord#Prelude.Either#A3@[0]", .hnf = Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither_HTA3__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#min#Prelude.Ord#Prelude.Maybe@[]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__0_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#min#Prelude.Ord#Prelude.Maybe@[0]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__0_0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#min#Prelude.Ord#Prelude.Maybe@[0,0]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__0_0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__0_1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#min#Prelude.Ord#Prelude.Maybe@[0,1]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__0_1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_symbol = {.tag = FUNCTION_TAG, .arity = 4, .name = "_impl#min#Prelude.Ord#Prelude.Maybe@[1]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#min#Prelude.Ord#Prelude.Maybe@[1,0]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#min#Prelude.Ord#Prelude.Maybe@[1,1]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1_0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#min#Prelude.Ord#Prelude.Maybe@[1,1,0]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1_0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1_1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#min#Prelude.Ord#Prelude.Maybe@[1,1,1]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1_1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOMaybe__symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#max#Prelude.Ord#Prelude.Maybe@[]", .hnf = Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOMaybe__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOMaybe__0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#max#Prelude.Ord#Prelude.Maybe@[0]", .hnf = Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOMaybe__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#max#Prelude.Ord#Prelude.Maybe@[1]", .hnf = Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOMaybe__symbol = {.tag = FUNCTION_TAG, .arity = 4, .name = "_impl#compare#Prelude.Ord#Prelude.Maybe@[]", .hnf = Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOMaybe__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#compare#Prelude.Ord#Prelude.Maybe@[1]", .hnf = Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#compare#Prelude.Ord#Prelude.Maybe@[1,0]", .hnf = Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#compare#Prelude.Ord#Prelude.Maybe@[1,1]", .hnf = Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1_1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#compare#Prelude.Ord#Prelude.Maybe@[1,1,1]", .hnf = Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1_1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe__symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#>=#Prelude.Ord#Prelude.Maybe@[]", .hnf = Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe__0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#>=#Prelude.Ord#Prelude.Maybe@[0]", .hnf = Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#>=#Prelude.Ord#Prelude.Maybe@[1]", .hnf = Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOMaybe__symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#>#Prelude.Ord#Prelude.Maybe@[]", .hnf = Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOMaybe__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOMaybe__0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#>#Prelude.Ord#Prelude.Maybe@[0]", .hnf = Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOMaybe__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#>#Prelude.Ord#Prelude.Maybe@[1]", .hnf = Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#>#Prelude.Ord#Prelude.Maybe@[1,1]", .hnf = Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOMaybe__symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#<#Prelude.Ord#Prelude.Maybe@[]", .hnf = Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOMaybe__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOMaybe__0_symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#<#Prelude.Ord#Prelude.Maybe@[0]", .hnf = Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOMaybe__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_symbol = {.tag = FUNCTION_TAG, .arity = 4, .name = "_impl#<#Prelude.Ord#Prelude.Maybe@[1]", .hnf = Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1_symbol = {.tag = FUNCTION_TAG, .arity = 4, .name = "_impl#<#Prelude.Ord#Prelude.Maybe@[1,1]", .hnf = Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1_1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#<#Prelude.Ord#Prelude.Maybe@[1,1,1]", .hnf = Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1_1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#min#Prelude.Ord#Prelude.Ordering@[]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#min#Prelude.Ord#Prelude.Ordering@[0]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#min#Prelude.Ord#Prelude.Ordering@[0,0]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#min#Prelude.Ord#Prelude.Ordering@[0,1]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_2_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#min#Prelude.Ord#Prelude.Ordering@[0,2]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_2_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#min#Prelude.Ord#Prelude.Ordering@[1]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#min#Prelude.Ord#Prelude.Ordering@[1,0]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#min#Prelude.Ord#Prelude.Ordering@[1,1]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_2_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#min#Prelude.Ord#Prelude.Ordering@[1,2]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_2_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__2_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#min#Prelude.Ord#Prelude.Ordering@[2]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__2_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__2_0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#min#Prelude.Ord#Prelude.Ordering@[2,0]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__2_0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__2_1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#min#Prelude.Ord#Prelude.Ordering@[2,1]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__2_1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__2_2_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#min#Prelude.Ord#Prelude.Ordering@[2,2]", .hnf = Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__2_2_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOOrdering__symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#max#Prelude.Ord#Prelude.Ordering@[]", .hnf = Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOOrdering__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#max#Prelude.Ord#Prelude.Ordering@[0]", .hnf = Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#max#Prelude.Ord#Prelude.Ordering@[1]", .hnf = Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__symbol = {.tag = FUNCTION_TAG, .arity = 3, .name = "_impl#compare#Prelude.Ord#Prelude.Ordering@[]", .hnf = Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#compare#Prelude.Ord#Prelude.Ordering@[1]", .hnf = Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_0_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#compare#Prelude.Ord#Prelude.Ordering@[1,0]", .hnf = Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_0_0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#compare#Prelude.Ord#Prelude.Ordering@[1,0,0]", .hnf = Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_0_0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_0_1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#compare#Prelude.Ord#Prelude.Ordering@[1,0,1]", .hnf = Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_0_1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_0_2_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#compare#Prelude.Ord#Prelude.Ordering@[1,0,2]", .hnf = Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_0_2_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_1_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#compare#Prelude.Ord#Prelude.Ordering@[1,1]", .hnf = Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_1_0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#compare#Prelude.Ord#Prelude.Ordering@[1,1,0]", .hnf = Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_1_0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_1_2_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#compare#Prelude.Ord#Prelude.Ordering@[1,1,2]", .hnf = Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_1_2_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_2_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#compare#Prelude.Ord#Prelude.Ordering@[1,2]", .hnf = Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_2_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#>=#Prelude.Ord#Prelude.Ordering@[]", .hnf = Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#>=#Prelude.Ord#Prelude.Ordering@[0]", .hnf = Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#>=#Prelude.Ord#Prelude.Ordering@[1]", .hnf = Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__2_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#>=#Prelude.Ord#Prelude.Ordering@[2]", .hnf = Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__2_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOOrdering__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#>#Prelude.Ord#Prelude.Ordering@[]", .hnf = Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOOrdering__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#>#Prelude.Ord#Prelude.Ordering@[0]", .hnf = Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#>#Prelude.Ord#Prelude.Ordering@[1]", .hnf = Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOOrdering__2_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#>#Prelude.Ord#Prelude.Ordering@[2]", .hnf = Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOOrdering__2_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOOrdering__symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#<#Prelude.Ord#Prelude.Ordering@[]", .hnf = Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOOrdering__hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#<#Prelude.Ord#Prelude.Ordering@[0]", .hnf = Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_symbol = {.tag = FUNCTION_TAG, .arity = 1, .name = "_impl#<#Prelude.Ord#Prelude.Ordering@[1]", .hnf = Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_hnf, .hnf_RET = NULL};
static Symbol Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOOrdering__2_symbol = {.tag = FUNCTION_TAG, .arity = 2, .name = "_impl#<#Prelude.Ord#Prelude.Ordering@[2]", .hnf = Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOOrdering__2_hnf, .hnf_RET = NULL};

// <
__attribute__((always_inline)) 
static inline void set_Prelude__LT(field root, field v1, int missing)
{
  root.n->symbol = &Prelude__LT_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v1;
  child_at(root, 1).n = NULL;
  child_at(root, 2).n = NULL;
}

// >
__attribute__((always_inline)) 
static inline void set_Prelude__GT(field root, field v1, int missing)
{
  root.n->symbol = &Prelude__GT_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v1;
  child_at(root, 1).n = NULL;
  child_at(root, 2).n = NULL;
}

// min
__attribute__((always_inline)) 
static inline void set_Prelude_min(field root, field v1, int missing)
{
  root.n->symbol = &Prelude_min_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v1;
  child_at(root, 1).n = NULL;
  child_at(root, 2).n = NULL;
}

// max
__attribute__((always_inline)) 
static inline void set_Prelude_max(field root, field v1, int missing)
{
  root.n->symbol = &Prelude_max_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v1;
  child_at(root, 1).n = NULL;
  child_at(root, 2).n = NULL;
}

// implementation of max in Ord for Bool
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOBool(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOBool_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of min in Ord for Bool
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOBool(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOBool_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of > in Ord for Bool
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOBool(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOBool_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of < in Ord for Bool
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOBool(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOBool_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of >= in Ord for Bool
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of <= in Ord for Bool
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of compare in Ord for Bool
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOBool(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOBool_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of max in Ord for Char
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOChar(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOChar_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of min in Ord for Char
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOChar(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOChar_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of > in Ord for Char
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOChar(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOChar_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of < in Ord for Char
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOChar(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOChar_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of >= in Ord for Char
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of <= in Ord for Char
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of compare in Ord for Char
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOChar(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOChar_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of max in Ord for Float
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOFloat(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOFloat_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of min in Ord for Float
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOFloat(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOFloat_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of > in Ord for Float
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOFloat(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOFloat_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of < in Ord for Float
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOFloat(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOFloat_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of >= in Ord for Float
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of <= in Ord for Float
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of compare in Ord for Float
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOFloat(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOFloat_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of max in Ord for Int
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOInt(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOInt_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of min in Ord for Int
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOInt(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOInt_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of > in Ord for Int
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOInt(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOInt_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of < in Ord for Int
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOInt(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOInt_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of >= in Ord for Int
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of <= in Ord for Int
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of compare in Ord for Int
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOInt(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOInt_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of /= in Eq for Char
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOChar(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOChar_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of == in Eq for Char
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOChar(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOChar_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// instance of Eq for Char
__attribute__((always_inline)) 
static inline void set_Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOChar(field root, int missing)
{
  root.n->symbol = &Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOChar_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0).n = NULL;
  child_at(root, 1).n = NULL;
  child_at(root, 2).n = NULL;
}

// instance of Ord for Char
__attribute__((always_inline)) 
static inline void set_Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOChar(field root, int missing)
{
  root.n->symbol = &Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOChar_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0).n = NULL;
  child_at(root, 1).n = NULL;
  child_at(root, 2).n = NULL;
}

// implementation of /= in Eq for Float
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOFloat(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOFloat_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of == in Eq for Float
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOFloat(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOFloat_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// instance of Eq for Float
__attribute__((always_inline)) 
static inline void set_Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOFloat(field root, int missing)
{
  root.n->symbol = &Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOFloat_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0).n = NULL;
  child_at(root, 1).n = NULL;
  child_at(root, 2).n = NULL;
}

// instance of Ord for Float
__attribute__((always_inline)) 
static inline void set_Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOFloat(field root, int missing)
{
  root.n->symbol = &Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOFloat_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0).n = NULL;
  child_at(root, 1).n = NULL;
  child_at(root, 2).n = NULL;
}

// implementation of /= in Eq for Int
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOInt(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOInt_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of == in Eq for Int
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOInt(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOInt_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// instance of Eq for Int
__attribute__((always_inline)) 
static inline void set_Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOInt(field root, int missing)
{
  root.n->symbol = &Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOInt_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0).n = NULL;
  child_at(root, 1).n = NULL;
  child_at(root, 2).n = NULL;
}

// instance of Ord for Int
__attribute__((always_inline)) 
static inline void set_Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOInt(field root, int missing)
{
  root.n->symbol = &Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOInt_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0).n = NULL;
  child_at(root, 1).n = NULL;
  child_at(root, 2).n = NULL;
}

// implementation of /= in Eq for Bool
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of == in Eq for Bool
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOBool(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOBool_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// instance of Eq for Bool
__attribute__((always_inline)) 
static inline void set_Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOBool(field root, int missing)
{
  root.n->symbol = &Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOBool_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0).n = NULL;
  child_at(root, 1).n = NULL;
  child_at(root, 2).n = NULL;
}

// instance of Ord for Bool
__attribute__((always_inline)) 
static inline void set_Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOBool(field root, int missing)
{
  root.n->symbol = &Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOBool_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0).n = NULL;
  child_at(root, 1).n = NULL;
  child_at(root, 2).n = NULL;
}

// >=
__attribute__((always_inline)) 
static inline void set_Prelude__GT_EQ(field root, field v1, int missing)
{
  root.n->symbol = &Prelude__GT_EQ_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v1;
  child_at(root, 1).n = NULL;
  child_at(root, 2).n = NULL;
}

// <=
__attribute__((always_inline)) 
static inline void set_Prelude__LT_EQ(field root, field v1, int missing)
{
  root.n->symbol = &Prelude__LT_EQ_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v1;
  child_at(root, 1).n = NULL;
  child_at(root, 2).n = NULL;
}

// compare
__attribute__((always_inline)) 
static inline void set_Prelude_compare(field root, field v1, int missing)
{
  root.n->symbol = &Prelude_compare_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v1;
  child_at(root, 1).n = NULL;
  child_at(root, 2).n = NULL;
}

// default for <= in Ord
__attribute__((always_inline)) 
static inline void set_Prelude__USdef_HT_LT_EQ_HTPrelude_DOOrd(field root, field v1, field v2, field v3, int missing)
{
  root.n->symbol = &Prelude__USdef_HT_LT_EQ_HTPrelude_DOOrd_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
}

// _super#Prelude.Ord#Prelude.Eq
__attribute__((always_inline)) 
static inline void set_Prelude__USsuper_HTPrelude_DOOrd_HTPrelude_DOEq(field root, field v1, int missing)
{
  root.n->symbol = &Prelude__USsuper_HTPrelude_DOOrd_HTPrelude_DOEq_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v1;
  child_at(root, 1).n = NULL;
  child_at(root, 2).n = NULL;
}

// /=
__attribute__((always_inline)) 
static inline void set_Prelude__FS_EQ(field root, field v1, int missing)
{
  root.n->symbol = &Prelude__FS_EQ_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v1;
  child_at(root, 1).n = NULL;
  child_at(root, 2).n = NULL;
}

// default for == in Eq
__attribute__((always_inline)) 
static inline void set_Prelude__USdef_HT_EQ_EQ_HTPrelude_DOEq(field root, field v1, field v2, field v3, int missing)
{
  root.n->symbol = &Prelude__USdef_HT_EQ_EQ_HTPrelude_DOEq_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
}

// ==
__attribute__((always_inline)) 
static inline void set_Prelude__EQ_EQ(field root, field v1, int missing)
{
  root.n->symbol = &Prelude__EQ_EQ_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v1;
  child_at(root, 1).n = NULL;
  child_at(root, 2).n = NULL;
}

// implementation of <= in Ord for Either
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOEither(field root, field v1, field v2, field v3, field v4, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOEither_symbol;
  root.n->missing = missing;
  root.n->children[3].a = (field*)alloc(sizeof(field));
  child_at(root, 0) = v4;
  child_at(root, 1) = v3;
  child_at(root, 2) = v2;
  child_at(root, 3) = v1;
}

// implementation of == in Eq for Either
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOEither(field root, field v1, field v2, field v3, field v4, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOEither_symbol;
  root.n->missing = missing;
  root.n->children[3].a = (field*)alloc(sizeof(field));
  child_at(root, 0) = v4;
  child_at(root, 1) = v3;
  child_at(root, 2) = v2;
  child_at(root, 3) = v1;
}

// implementation of <= in Ord for Maybe
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe(field root, field v1, field v2, field v3, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
}

// implementation of == in Eq for Maybe
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe(field root, field v1, field v2, field v3, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
}

// implementation of <= in Ord for Ordering
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of == in Eq for Ordering
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// default for max in Ord
__attribute__((always_inline)) 
static inline void set_Prelude__USdef_HTmax_HTPrelude_DOOrd(field root, field v1, field v2, field v3, int missing)
{
  root.n->symbol = &Prelude__USdef_HTmax_HTPrelude_DOOrd_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
}

// default for min in Ord
__attribute__((always_inline)) 
static inline void set_Prelude__USdef_HTmin_HTPrelude_DOOrd(field root, field v1, field v2, field v3, int missing)
{
  root.n->symbol = &Prelude__USdef_HTmin_HTPrelude_DOOrd_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
}

// default for > in Ord
__attribute__((always_inline)) 
static inline void set_Prelude__USdef_HT_GT_HTPrelude_DOOrd(field root, field v1, field v2, field v3, int missing)
{
  root.n->symbol = &Prelude__USdef_HT_GT_HTPrelude_DOOrd_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
}

// default for < in Ord
__attribute__((always_inline)) 
static inline void set_Prelude__USdef_HT_LT_HTPrelude_DOOrd(field root, field v1, field v2, field v3, int missing)
{
  root.n->symbol = &Prelude__USdef_HT_LT_HTPrelude_DOOrd_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
}

// default for < in Ord
__attribute__((always_inline)) 
static inline void set_Prelude__USdef_HT_LT_HTPrelude_DOOrd_HTA0(field root, field v1, int missing)
{
  root.n->symbol = &Prelude__USdef_HT_LT_HTPrelude_DOOrd_HTA0_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v1;
  child_at(root, 1).n = NULL;
  child_at(root, 2).n = NULL;
}

// default for >= in Ord
__attribute__((always_inline)) 
static inline void set_Prelude__USdef_HT_GT_EQ_HTPrelude_DOOrd(field root, field v1, field v2, field v3, int missing)
{
  root.n->symbol = &Prelude__USdef_HT_GT_EQ_HTPrelude_DOOrd_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
}

// default for compare in Ord
__attribute__((always_inline)) 
static inline void set_Prelude__USdef_HTcompare_HTPrelude_DOOrd(field root, field v1, field v2, field v3, int missing)
{
  root.n->symbol = &Prelude__USdef_HTcompare_HTPrelude_DOOrd_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
}

// default for compare in Ord
__attribute__((always_inline)) 
static inline void set_Prelude__USdef_HTcompare_HTPrelude_DOOrd_HTA1(field root, field v1, int missing)
{
  root.n->symbol = &Prelude__USdef_HTcompare_HTPrelude_DOOrd_HTA1_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v1;
  child_at(root, 1).n = NULL;
  child_at(root, 2).n = NULL;
}

// default for /= in Eq
__attribute__((always_inline)) 
static inline void set_Prelude__USdef_HT_FS_EQ_HTPrelude_DOEq(field root, field v1, field v2, field v3, int missing)
{
  root.n->symbol = &Prelude__USdef_HT_FS_EQ_HTPrelude_DOEq_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
}

// implementation of /= in Eq for Either
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOEither(field root, field v1, field v2, field v3, field v4, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOEither_symbol;
  root.n->missing = missing;
  root.n->children[3].a = (field*)alloc(sizeof(field));
  child_at(root, 0) = v4;
  child_at(root, 1) = v3;
  child_at(root, 2) = v2;
  child_at(root, 3) = v1;
}

// instance of Ord for Either
__attribute__((always_inline)) 
static inline void set_Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOEither(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOEither_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of /= in Eq for Maybe
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe(field root, field v1, field v2, field v3, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
}

// instance of Ord for Maybe
__attribute__((always_inline)) 
static inline void set_Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOMaybe(field root, field v1, int missing)
{
  root.n->symbol = &Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOMaybe_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v1;
  child_at(root, 1).n = NULL;
  child_at(root, 2).n = NULL;
}

// implementation of /= in Eq for Ordering
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// instance of Ord for Ordering
__attribute__((always_inline)) 
static inline void set_Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOOrdering(field root, int missing)
{
  root.n->symbol = &Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOOrdering_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0).n = NULL;
  child_at(root, 1).n = NULL;
  child_at(root, 2).n = NULL;
}

// instance of Eq for Either
__attribute__((always_inline)) 
static inline void set_Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOEither(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOEither_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of min in Ord for Either
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOEither(field root, field v1, field v2, field v3, field v4, int missing)
{
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOEither_symbol;
  root.n->missing = missing;
  root.n->children[3].a = (field*)alloc(sizeof(field));
  child_at(root, 0) = v4;
  child_at(root, 1) = v3;
  child_at(root, 2) = v2;
  child_at(root, 3) = v1;
}

// implementation of max in Ord for Either
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOEither(field root, field v1, field v2, field v3, field v4, int missing)
{
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOEither_symbol;
  root.n->missing = missing;
  root.n->children[3].a = (field*)alloc(sizeof(field));
  child_at(root, 0) = v4;
  child_at(root, 1) = v3;
  child_at(root, 2) = v2;
  child_at(root, 3) = v1;
}

// implementation of compare in Ord for Either
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither(field root, field v1, field v2, field v3, field v4, int missing)
{
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither_symbol;
  root.n->missing = missing;
  root.n->children[3].a = (field*)alloc(sizeof(field));
  child_at(root, 0) = v4;
  child_at(root, 1) = v3;
  child_at(root, 2) = v2;
  child_at(root, 3) = v1;
}

// implementation of compare in Ord for Either
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither_HTA2(field root, field v1, int missing)
{
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither_HTA2_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v1;
  child_at(root, 1).n = NULL;
  child_at(root, 2).n = NULL;
}

// implementation of >= in Ord for Either
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOEither(field root, field v1, field v2, field v3, field v4, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOEither_symbol;
  root.n->missing = missing;
  root.n->children[3].a = (field*)alloc(sizeof(field));
  child_at(root, 0) = v4;
  child_at(root, 1) = v3;
  child_at(root, 2) = v2;
  child_at(root, 3) = v1;
}

// implementation of > in Ord for Either
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOEither(field root, field v1, field v2, field v3, field v4, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOEither_symbol;
  root.n->missing = missing;
  root.n->children[3].a = (field*)alloc(sizeof(field));
  child_at(root, 0) = v4;
  child_at(root, 1) = v3;
  child_at(root, 2) = v2;
  child_at(root, 3) = v1;
}

// implementation of < in Ord for Either
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither(field root, field v1, field v2, field v3, field v4, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither_symbol;
  root.n->missing = missing;
  root.n->children[3].a = (field*)alloc(sizeof(field));
  child_at(root, 0) = v4;
  child_at(root, 1) = v3;
  child_at(root, 2) = v2;
  child_at(root, 3) = v1;
}

// implementation of < in Ord for Either
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither_HTA3(field root, field v1, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither_HTA3_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v1;
  child_at(root, 1).n = NULL;
  child_at(root, 2).n = NULL;
}

// instance of Eq for Maybe
__attribute__((always_inline)) 
static inline void set_Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOMaybe(field root, field v1, int missing)
{
  root.n->symbol = &Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOMaybe_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v1;
  child_at(root, 1).n = NULL;
  child_at(root, 2).n = NULL;
}

// implementation of min in Ord for Maybe
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe(field root, field v1, field v2, field v3, int missing)
{
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
}

// implementation of max in Ord for Maybe
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOMaybe(field root, field v1, field v2, field v3, int missing)
{
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOMaybe_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
}

// implementation of compare in Ord for Maybe
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOMaybe(field root, field v1, field v2, field v3, int missing)
{
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOMaybe_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
}

// implementation of >= in Ord for Maybe
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe(field root, field v1, field v2, field v3, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
}

// implementation of > in Ord for Maybe
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOMaybe(field root, field v1, field v2, field v3, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOMaybe_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
}

// implementation of < in Ord for Maybe
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOMaybe(field root, field v1, field v2, field v3, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOMaybe_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
}

// instance of Eq for Ordering
__attribute__((always_inline)) 
static inline void set_Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOOrdering(field root, int missing)
{
  root.n->symbol = &Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOOrdering_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0).n = NULL;
  child_at(root, 1).n = NULL;
  child_at(root, 2).n = NULL;
}

// implementation of min in Ord for Ordering
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of max in Ord for Ordering
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOOrdering(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOOrdering_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of compare in Ord for Ordering
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of >= in Ord for Ordering
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of > in Ord for Ordering
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOOrdering(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOOrdering_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// implementation of < in Ord for Ordering
__attribute__((always_inline)) 
static inline void set_Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOOrdering(field root, field v1, field v2, int missing)
{
  root.n->symbol = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOOrdering_symbol;
  root.n->missing = missing;
  root.n->children[3].a = NULL;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  child_at(root, 2).n = NULL;
}

// <
__attribute__((always_inline)) 
static inline field make_Prelude__LT(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__LT_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// >
__attribute__((always_inline)) 
static inline field make_Prelude__GT(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__GT_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// min
__attribute__((always_inline)) 
static inline field make_Prelude_min(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude_min_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// max
__attribute__((always_inline)) 
static inline field make_Prelude_max(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude_max_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of max in Ord for Bool
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOBool(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOBool_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of min in Ord for Bool
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOBool(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOBool_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of > in Ord for Bool
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOBool(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOBool_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of < in Ord for Bool
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOBool(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOBool_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of >= in Ord for Bool
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of <= in Ord for Bool
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of compare in Ord for Bool
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOBool(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOBool_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of max in Ord for Char
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOChar(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOChar_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of min in Ord for Char
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOChar(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOChar_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of > in Ord for Char
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOChar(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOChar_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of < in Ord for Char
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOChar(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOChar_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of >= in Ord for Char
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of <= in Ord for Char
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of compare in Ord for Char
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOChar(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOChar_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of max in Ord for Float
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOFloat(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOFloat_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of min in Ord for Float
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOFloat(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOFloat_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of > in Ord for Float
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOFloat(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOFloat_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of < in Ord for Float
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOFloat(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOFloat_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of >= in Ord for Float
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of <= in Ord for Float
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of compare in Ord for Float
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOFloat(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOFloat_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of max in Ord for Int
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOInt(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOInt_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of min in Ord for Int
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOInt(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOInt_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of > in Ord for Int
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOInt(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOInt_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of < in Ord for Int
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOInt(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOInt_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of >= in Ord for Int
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of <= in Ord for Int
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of compare in Ord for Int
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOInt(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOInt_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of /= in Eq for Char
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOChar(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOChar_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of == in Eq for Char
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOChar(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOChar_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// instance of Eq for Char
__attribute__((always_inline)) 
static inline field make_Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOChar(int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOChar_symbol;
  root.n->missing = missing;
  return root;
}

// instance of Ord for Char
__attribute__((always_inline)) 
static inline field make_Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOChar(int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOChar_symbol;
  root.n->missing = missing;
  return root;
}

// implementation of /= in Eq for Float
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOFloat(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOFloat_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of == in Eq for Float
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOFloat(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOFloat_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// instance of Eq for Float
__attribute__((always_inline)) 
static inline field make_Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOFloat(int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOFloat_symbol;
  root.n->missing = missing;
  return root;
}

// instance of Ord for Float
__attribute__((always_inline)) 
static inline field make_Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOFloat(int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOFloat_symbol;
  root.n->missing = missing;
  return root;
}

// implementation of /= in Eq for Int
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOInt(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOInt_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of == in Eq for Int
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOInt(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOInt_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// instance of Eq for Int
__attribute__((always_inline)) 
static inline field make_Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOInt(int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOInt_symbol;
  root.n->missing = missing;
  return root;
}

// instance of Ord for Int
__attribute__((always_inline)) 
static inline field make_Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOInt(int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOInt_symbol;
  root.n->missing = missing;
  return root;
}

// implementation of /= in Eq for Bool
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of == in Eq for Bool
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOBool(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOBool_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// instance of Eq for Bool
__attribute__((always_inline)) 
static inline field make_Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOBool(int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOBool_symbol;
  root.n->missing = missing;
  return root;
}

// instance of Ord for Bool
__attribute__((always_inline)) 
static inline field make_Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOBool(int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOBool_symbol;
  root.n->missing = missing;
  return root;
}

// >=
__attribute__((always_inline)) 
static inline field make_Prelude__GT_EQ(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__GT_EQ_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// <=
__attribute__((always_inline)) 
static inline field make_Prelude__LT_EQ(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__LT_EQ_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// compare
__attribute__((always_inline)) 
static inline field make_Prelude_compare(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude_compare_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// default for <= in Ord
__attribute__((always_inline)) 
static inline field make_Prelude__USdef_HT_LT_EQ_HTPrelude_DOOrd(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USdef_HT_LT_EQ_HTPrelude_DOOrd_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// _super#Prelude.Ord#Prelude.Eq
__attribute__((always_inline)) 
static inline field make_Prelude__USsuper_HTPrelude_DOOrd_HTPrelude_DOEq(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USsuper_HTPrelude_DOOrd_HTPrelude_DOEq_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// /=
__attribute__((always_inline)) 
static inline field make_Prelude__FS_EQ(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__FS_EQ_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// default for == in Eq
__attribute__((always_inline)) 
static inline field make_Prelude__USdef_HT_EQ_EQ_HTPrelude_DOEq(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USdef_HT_EQ_EQ_HTPrelude_DOEq_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// ==
__attribute__((always_inline)) 
static inline field make_Prelude__EQ_EQ(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__EQ_EQ_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of <= in Ord for Either
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOEither(field v1, field v2, field v3, field v4, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOEither_symbol;
  root.n->missing = missing;
  root.n->children[3].a = (field*)alloc(sizeof(field));
  child_at(root, 0) = v4;
  child_at(root, 1) = v3;
  child_at(root, 2) = v2;
  child_at(root, 3) = v1;
  return root;
}

// implementation of == in Eq for Either
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOEither(field v1, field v2, field v3, field v4, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOEither_symbol;
  root.n->missing = missing;
  root.n->children[3].a = (field*)alloc(sizeof(field));
  child_at(root, 0) = v4;
  child_at(root, 1) = v3;
  child_at(root, 2) = v2;
  child_at(root, 3) = v1;
  return root;
}

// implementation of <= in Ord for Maybe
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of == in Eq for Maybe
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of <= in Ord for Ordering
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of == in Eq for Ordering
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// default for max in Ord
__attribute__((always_inline)) 
static inline field make_Prelude__USdef_HTmax_HTPrelude_DOOrd(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USdef_HTmax_HTPrelude_DOOrd_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// default for min in Ord
__attribute__((always_inline)) 
static inline field make_Prelude__USdef_HTmin_HTPrelude_DOOrd(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USdef_HTmin_HTPrelude_DOOrd_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// default for > in Ord
__attribute__((always_inline)) 
static inline field make_Prelude__USdef_HT_GT_HTPrelude_DOOrd(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USdef_HT_GT_HTPrelude_DOOrd_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// default for < in Ord
__attribute__((always_inline)) 
static inline field make_Prelude__USdef_HT_LT_HTPrelude_DOOrd(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USdef_HT_LT_HTPrelude_DOOrd_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// default for < in Ord
__attribute__((always_inline)) 
static inline field make_Prelude__USdef_HT_LT_HTPrelude_DOOrd_HTA0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USdef_HT_LT_HTPrelude_DOOrd_HTA0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// default for >= in Ord
__attribute__((always_inline)) 
static inline field make_Prelude__USdef_HT_GT_EQ_HTPrelude_DOOrd(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USdef_HT_GT_EQ_HTPrelude_DOOrd_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// default for compare in Ord
__attribute__((always_inline)) 
static inline field make_Prelude__USdef_HTcompare_HTPrelude_DOOrd(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USdef_HTcompare_HTPrelude_DOOrd_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// default for compare in Ord
__attribute__((always_inline)) 
static inline field make_Prelude__USdef_HTcompare_HTPrelude_DOOrd_HTA1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USdef_HTcompare_HTPrelude_DOOrd_HTA1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// default for /= in Eq
__attribute__((always_inline)) 
static inline field make_Prelude__USdef_HT_FS_EQ_HTPrelude_DOEq(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USdef_HT_FS_EQ_HTPrelude_DOEq_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of /= in Eq for Either
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOEither(field v1, field v2, field v3, field v4, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOEither_symbol;
  root.n->missing = missing;
  root.n->children[3].a = (field*)alloc(sizeof(field));
  child_at(root, 0) = v4;
  child_at(root, 1) = v3;
  child_at(root, 2) = v2;
  child_at(root, 3) = v1;
  return root;
}

// instance of Ord for Either
__attribute__((always_inline)) 
static inline field make_Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOEither(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOEither_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of /= in Eq for Maybe
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// instance of Ord for Maybe
__attribute__((always_inline)) 
static inline field make_Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOMaybe(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOMaybe_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of /= in Eq for Ordering
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// instance of Ord for Ordering
__attribute__((always_inline)) 
static inline field make_Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOOrdering(int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USinst_HTPrelude_DOOrd_HTPrelude_DOOrdering_symbol;
  root.n->missing = missing;
  return root;
}

// instance of Eq for Either
__attribute__((always_inline)) 
static inline field make_Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOEither(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOEither_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of min in Ord for Either
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOEither(field v1, field v2, field v3, field v4, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOEither_symbol;
  root.n->missing = missing;
  root.n->children[3].a = (field*)alloc(sizeof(field));
  child_at(root, 0) = v4;
  child_at(root, 1) = v3;
  child_at(root, 2) = v2;
  child_at(root, 3) = v1;
  return root;
}

// implementation of max in Ord for Either
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOEither(field v1, field v2, field v3, field v4, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOEither_symbol;
  root.n->missing = missing;
  root.n->children[3].a = (field*)alloc(sizeof(field));
  child_at(root, 0) = v4;
  child_at(root, 1) = v3;
  child_at(root, 2) = v2;
  child_at(root, 3) = v1;
  return root;
}

// implementation of compare in Ord for Either
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither(field v1, field v2, field v3, field v4, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither_symbol;
  root.n->missing = missing;
  root.n->children[3].a = (field*)alloc(sizeof(field));
  child_at(root, 0) = v4;
  child_at(root, 1) = v3;
  child_at(root, 2) = v2;
  child_at(root, 3) = v1;
  return root;
}

// implementation of compare in Ord for Either
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither_HTA2(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither_HTA2_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of >= in Ord for Either
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOEither(field v1, field v2, field v3, field v4, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOEither_symbol;
  root.n->missing = missing;
  root.n->children[3].a = (field*)alloc(sizeof(field));
  child_at(root, 0) = v4;
  child_at(root, 1) = v3;
  child_at(root, 2) = v2;
  child_at(root, 3) = v1;
  return root;
}

// implementation of > in Ord for Either
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOEither(field v1, field v2, field v3, field v4, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOEither_symbol;
  root.n->missing = missing;
  root.n->children[3].a = (field*)alloc(sizeof(field));
  child_at(root, 0) = v4;
  child_at(root, 1) = v3;
  child_at(root, 2) = v2;
  child_at(root, 3) = v1;
  return root;
}

// implementation of < in Ord for Either
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither(field v1, field v2, field v3, field v4, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither_symbol;
  root.n->missing = missing;
  root.n->children[3].a = (field*)alloc(sizeof(field));
  child_at(root, 0) = v4;
  child_at(root, 1) = v3;
  child_at(root, 2) = v2;
  child_at(root, 3) = v1;
  return root;
}

// implementation of < in Ord for Either
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither_HTA3(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither_HTA3_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// instance of Eq for Maybe
__attribute__((always_inline)) 
static inline field make_Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOMaybe(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOMaybe_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of min in Ord for Maybe
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of max in Ord for Maybe
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOMaybe(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOMaybe_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of compare in Ord for Maybe
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOMaybe(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOMaybe_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of >= in Ord for Maybe
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of > in Ord for Maybe
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOMaybe(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOMaybe_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of < in Ord for Maybe
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOMaybe(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOMaybe_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// instance of Eq for Ordering
__attribute__((always_inline)) 
static inline field make_Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOOrdering(int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USinst_HTPrelude_DOEq_HTPrelude_DOOrdering_symbol;
  root.n->missing = missing;
  return root;
}

// implementation of min in Ord for Ordering
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of max in Ord for Ordering
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOOrdering(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOOrdering_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of compare in Ord for Ordering
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of >= in Ord for Ordering
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of > in Ord for Ordering
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOOrdering(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOOrdering_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of < in Ord for Ordering
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOOrdering(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOOrdering_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// < @ []
__attribute__((always_inline)) 
static inline field make_Prelude__LT_(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__LT__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// < @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__LT__0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__LT__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// > @ []
__attribute__((always_inline)) 
static inline field make_Prelude__GT_(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__GT__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// > @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__GT__0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__GT__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// min @ []
__attribute__((always_inline)) 
static inline field make_Prelude_min_(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude_min__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// min @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude_min__0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude_min__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// max @ []
__attribute__((always_inline)) 
static inline field make_Prelude_max_(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude_max__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// max @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude_max__0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude_max__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of max in Ord for Bool @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOBool_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOBool__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of max in Ord for Bool @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOBool__0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOBool__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of max in Ord for Bool @ [1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOBool__1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOBool__1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of min in Ord for Bool @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOBool_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOBool__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of min in Ord for Bool @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOBool__0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOBool__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of min in Ord for Bool @ [1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOBool__1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOBool__1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of > in Ord for Bool @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOBool_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOBool__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of > in Ord for Bool @ [1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOBool__1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOBool__1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of < in Ord for Bool @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOBool_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOBool__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of < in Ord for Bool @ [1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOBool__1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOBool__1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of >= in Ord for Bool @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of >= in Ord for Bool @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool__0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of <= in Ord for Bool @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of <= in Ord for Bool @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool__0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOBool__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of compare in Ord for Bool @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOBool_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOBool__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of compare in Ord for Bool @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOBool__0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOBool__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of compare in Ord for Bool @ [1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOBool__1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOBool__1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of max in Ord for Char @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOChar_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOChar__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of max in Ord for Char @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOChar__0(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOChar__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of max in Ord for Char @ [0,0,0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOChar__0_0_0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOChar__0_0_0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of max in Ord for Char @ [0,0,1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOChar__0_0_1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOChar__0_0_1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of min in Ord for Char @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOChar_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOChar__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of min in Ord for Char @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOChar__0(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOChar__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of min in Ord for Char @ [0,0,0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOChar__0_0_0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOChar__0_0_0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of min in Ord for Char @ [0,0,1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOChar__0_0_1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOChar__0_0_1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of > in Ord for Char @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOChar_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOChar__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of > in Ord for Char @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOChar__0(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOChar__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of < in Ord for Char @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOChar_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOChar__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of < in Ord for Char @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOChar__0(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOChar__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of >= in Ord for Char @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of >= in Ord for Char @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar__0(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of <= in Ord for Char @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of <= in Ord for Char @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar__0(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOChar__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of compare in Ord for Char @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOChar_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOChar__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of compare in Ord for Char @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOChar__0(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOChar__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of compare in Ord for Char @ [0,0,1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOChar__0_0_1(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOChar__0_0_1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of compare in Ord for Char @ [0,0,1,0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOChar__0_0_1_0(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOChar__0_0_1_0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of max in Ord for Float @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOFloat_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOFloat__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of max in Ord for Float @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOFloat__0(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOFloat__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of max in Ord for Float @ [0,0,0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOFloat__0_0_0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOFloat__0_0_0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of max in Ord for Float @ [0,0,1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOFloat__0_0_1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOFloat__0_0_1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of min in Ord for Float @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOFloat_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOFloat__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of min in Ord for Float @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOFloat__0(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOFloat__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of min in Ord for Float @ [0,0,0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOFloat__0_0_0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOFloat__0_0_0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of min in Ord for Float @ [0,0,1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOFloat__0_0_1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOFloat__0_0_1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of > in Ord for Float @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOFloat_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOFloat__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of > in Ord for Float @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOFloat__0(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOFloat__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of < in Ord for Float @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOFloat_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOFloat__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of < in Ord for Float @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOFloat__0(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOFloat__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of >= in Ord for Float @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of >= in Ord for Float @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat__0(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of <= in Ord for Float @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of <= in Ord for Float @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat__0(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOFloat__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of compare in Ord for Float @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOFloat_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOFloat__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of compare in Ord for Float @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOFloat__0(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOFloat__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of compare in Ord for Float @ [0,0,1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOFloat__0_0_1(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOFloat__0_0_1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of compare in Ord for Float @ [0,0,1,0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOFloat__0_0_1_0(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOFloat__0_0_1_0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of max in Ord for Int @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOInt_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOInt__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of max in Ord for Int @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOInt__0(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOInt__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of max in Ord for Int @ [0,0,0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOInt__0_0_0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOInt__0_0_0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of max in Ord for Int @ [0,0,1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOInt__0_0_1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOInt__0_0_1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of min in Ord for Int @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOInt_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOInt__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of min in Ord for Int @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOInt__0(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOInt__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of min in Ord for Int @ [0,0,0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOInt__0_0_0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOInt__0_0_0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of min in Ord for Int @ [0,0,1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOInt__0_0_1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOInt__0_0_1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of > in Ord for Int @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOInt_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOInt__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of > in Ord for Int @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOInt__0(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOInt__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of < in Ord for Int @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOInt_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOInt__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of < in Ord for Int @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOInt__0(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOInt__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of >= in Ord for Int @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of >= in Ord for Int @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt__0(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of <= in Ord for Int @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of <= in Ord for Int @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt__0(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOInt__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of compare in Ord for Int @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOInt_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOInt__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of compare in Ord for Int @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOInt__0(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOInt__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of compare in Ord for Int @ [0,0,1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOInt__0_0_1(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOInt__0_0_1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of compare in Ord for Int @ [0,0,1,0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOInt__0_0_1_0(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOInt__0_0_1_0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of /= in Eq for Char @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOChar_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOChar__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of /= in Eq for Char @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOChar__0(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOChar__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of == in Eq for Char @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOChar_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOChar__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of == in Eq for Char @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOChar__0(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOChar__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of /= in Eq for Float @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOFloat_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOFloat__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of /= in Eq for Float @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOFloat__0(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOFloat__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of == in Eq for Float @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOFloat_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOFloat__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of == in Eq for Float @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOFloat__0(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOFloat__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of /= in Eq for Int @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOInt_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOInt__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of /= in Eq for Int @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOInt__0(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOInt__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of == in Eq for Int @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOInt_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOInt__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of == in Eq for Int @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOInt__0(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOInt__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of /= in Eq for Bool @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of /= in Eq for Bool @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool__0(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of /= in Eq for Bool @ [0,1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool__0_1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool__0_1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of /= in Eq for Bool @ [1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool__1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool__1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of /= in Eq for Bool @ [1,0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool__1_0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool__1_0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of /= in Eq for Bool @ [1,1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool__1_1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOBool__1_1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of == in Eq for Bool @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOBool_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOBool__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of == in Eq for Bool @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOBool__0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOBool__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of == in Eq for Bool @ [1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOBool__1(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOBool__1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of == in Eq for Bool @ [1,0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOBool__1_0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOBool__1_0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// >= @ []
__attribute__((always_inline)) 
static inline field make_Prelude__GT_EQ_(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__GT_EQ__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// >= @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__GT_EQ__0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__GT_EQ__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// <= @ []
__attribute__((always_inline)) 
static inline field make_Prelude__LT_EQ_(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__LT_EQ__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// <= @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__LT_EQ__0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__LT_EQ__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// compare @ []
__attribute__((always_inline)) 
static inline field make_Prelude_compare_(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude_compare__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// compare @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude_compare__0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude_compare__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// default for <= in Ord @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USdef_HT_LT_EQ_HTPrelude_DOOrd_(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USdef_HT_LT_EQ_HTPrelude_DOOrd__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// _super#Prelude.Ord#Prelude.Eq @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USsuper_HTPrelude_DOOrd_HTPrelude_DOEq_(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USsuper_HTPrelude_DOOrd_HTPrelude_DOEq__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// _super#Prelude.Ord#Prelude.Eq @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USsuper_HTPrelude_DOOrd_HTPrelude_DOEq__0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USsuper_HTPrelude_DOOrd_HTPrelude_DOEq__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// /= @ []
__attribute__((always_inline)) 
static inline field make_Prelude__FS_EQ_(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__FS_EQ__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// /= @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__FS_EQ__0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__FS_EQ__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// default for == in Eq @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USdef_HT_EQ_EQ_HTPrelude_DOEq_(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USdef_HT_EQ_EQ_HTPrelude_DOEq__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// == @ []
__attribute__((always_inline)) 
static inline field make_Prelude__EQ_EQ_(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__EQ_EQ__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// == @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__EQ_EQ__0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__EQ_EQ__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of <= in Ord for Either @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOEither_(field v1, field v2, field v3, field v4, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOEither__symbol;
  root.n->missing = missing;
  root.n->children[3].a = (field*)alloc(sizeof(field));
  child_at(root, 0) = v4;
  child_at(root, 1) = v3;
  child_at(root, 2) = v2;
  child_at(root, 3) = v1;
  return root;
}

// implementation of <= in Ord for Either @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOEither__0(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOEither__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of <= in Ord for Either @ [1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOEither__1(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOEither__1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of == in Eq for Either @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOEither_(field v1, field v2, field v3, field v4, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOEither__symbol;
  root.n->missing = missing;
  root.n->children[3].a = (field*)alloc(sizeof(field));
  child_at(root, 0) = v4;
  child_at(root, 1) = v3;
  child_at(root, 2) = v2;
  child_at(root, 3) = v1;
  return root;
}

// implementation of == in Eq for Either @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOEither__0(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOEither__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of == in Eq for Either @ [1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOEither__1(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOEither__1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of <= in Ord for Maybe @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe_(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of <= in Ord for Maybe @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe__0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of <= in Ord for Maybe @ [1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe__1(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of == in Eq for Maybe @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe_(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of == in Eq for Maybe @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe__0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of == in Eq for Maybe @ [1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe__1(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe__1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of <= in Ord for Ordering @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of <= in Ord for Ordering @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of <= in Ord for Ordering @ [1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of <= in Ord for Ordering @ [2]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__2(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__2_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of == in Eq for Ordering @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of == in Eq for Ordering @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering__0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of == in Eq for Ordering @ [1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering__1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering__1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of == in Eq for Ordering @ [2]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering__2(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_EQ_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering__2_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// default for max in Ord @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USdef_HTmax_HTPrelude_DOOrd_(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USdef_HTmax_HTPrelude_DOOrd__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// default for max in Ord @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USdef_HTmax_HTPrelude_DOOrd__0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USdef_HTmax_HTPrelude_DOOrd__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// default for max in Ord @ [1]
__attribute__((always_inline)) 
static inline field make_Prelude__USdef_HTmax_HTPrelude_DOOrd__1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USdef_HTmax_HTPrelude_DOOrd__1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// default for min in Ord @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USdef_HTmin_HTPrelude_DOOrd_(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USdef_HTmin_HTPrelude_DOOrd__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// default for min in Ord @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USdef_HTmin_HTPrelude_DOOrd__0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USdef_HTmin_HTPrelude_DOOrd__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// default for min in Ord @ [1]
__attribute__((always_inline)) 
static inline field make_Prelude__USdef_HTmin_HTPrelude_DOOrd__1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USdef_HTmin_HTPrelude_DOOrd__1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// default for > in Ord @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USdef_HT_GT_HTPrelude_DOOrd_(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USdef_HT_GT_HTPrelude_DOOrd__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// default for < in Ord @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USdef_HT_LT_HTPrelude_DOOrd_(field v1, field v2, field v3, field v4, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USdef_HT_LT_HTPrelude_DOOrd__symbol;
  root.n->missing = missing;
  root.n->children[3].a = (field*)alloc(sizeof(field));
  child_at(root, 0) = v4;
  child_at(root, 1) = v3;
  child_at(root, 2) = v2;
  child_at(root, 3) = v1;
  return root;
}

// default for < in Ord @ [1]
__attribute__((always_inline)) 
static inline field make_Prelude__USdef_HT_LT_HTPrelude_DOOrd__1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USdef_HT_LT_HTPrelude_DOOrd__1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// default for < in Ord @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USdef_HT_LT_HTPrelude_DOOrd_HTA0_(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USdef_HT_LT_HTPrelude_DOOrd_HTA0__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// default for < in Ord @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USdef_HT_LT_HTPrelude_DOOrd_HTA0__0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USdef_HT_LT_HTPrelude_DOOrd_HTA0__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// default for compare in Ord @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USdef_HTcompare_HTPrelude_DOOrd_(field v1, field v2, field v3, field v4, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USdef_HTcompare_HTPrelude_DOOrd__symbol;
  root.n->missing = missing;
  root.n->children[3].a = (field*)alloc(sizeof(field));
  child_at(root, 0) = v4;
  child_at(root, 1) = v3;
  child_at(root, 2) = v2;
  child_at(root, 3) = v1;
  return root;
}

// default for compare in Ord @ [1]
__attribute__((always_inline)) 
static inline field make_Prelude__USdef_HTcompare_HTPrelude_DOOrd__1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USdef_HTcompare_HTPrelude_DOOrd__1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// default for compare in Ord @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USdef_HTcompare_HTPrelude_DOOrd_HTA1_(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USdef_HTcompare_HTPrelude_DOOrd_HTA1__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// default for compare in Ord @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USdef_HTcompare_HTPrelude_DOOrd_HTA1__0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USdef_HTcompare_HTPrelude_DOOrd_HTA1__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// default for /= in Eq @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USdef_HT_FS_EQ_HTPrelude_DOEq_(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USdef_HT_FS_EQ_HTPrelude_DOEq__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of /= in Eq for Either @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOEither_(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOEither__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of /= in Eq for Maybe @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe_(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOMaybe__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of /= in Eq for Ordering @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering_(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_FS_EQ_HTPrelude_DOEq_HTPrelude_DOOrdering__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of min in Ord for Either @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOEither_(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOEither__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of min in Ord for Either @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOEither__0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOEither__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of min in Ord for Either @ [1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOEither__1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOEither__1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of max in Ord for Either @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOEither_(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOEither__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of max in Ord for Either @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOEither__0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOEither__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of max in Ord for Either @ [1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOEither__1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOEither__1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of compare in Ord for Either @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither_(field v1, field v2, field v3, field v4, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither__symbol;
  root.n->missing = missing;
  root.n->children[3].a = (field*)alloc(sizeof(field));
  child_at(root, 0) = v4;
  child_at(root, 1) = v3;
  child_at(root, 2) = v2;
  child_at(root, 3) = v1;
  return root;
}

// implementation of compare in Ord for Either @ [1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither__1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither__1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of compare in Ord for Either @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither_HTA2_(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither_HTA2__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of compare in Ord for Either @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither_HTA2__0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOEither_HTA2__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of > in Ord for Either @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOEither_(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOEither__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of < in Ord for Either @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither_(field v1, field v2, field v3, field v4, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither__symbol;
  root.n->missing = missing;
  root.n->children[3].a = (field*)alloc(sizeof(field));
  child_at(root, 0) = v4;
  child_at(root, 1) = v3;
  child_at(root, 2) = v2;
  child_at(root, 3) = v1;
  return root;
}

// implementation of < in Ord for Either @ [1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither__1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither__1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of < in Ord for Either @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither_HTA3_(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither_HTA3__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of < in Ord for Either @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither_HTA3__0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOEither_HTA3__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of min in Ord for Maybe @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe_(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of min in Ord for Maybe @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__0(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of min in Ord for Maybe @ [0,0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__0_0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__0_0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of min in Ord for Maybe @ [0,1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__0_1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__0_1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of min in Ord for Maybe @ [1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__1(field v1, field v2, field v3, field v4, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_symbol;
  root.n->missing = missing;
  root.n->children[3].a = (field*)alloc(sizeof(field));
  child_at(root, 0) = v4;
  child_at(root, 1) = v3;
  child_at(root, 2) = v2;
  child_at(root, 3) = v1;
  return root;
}

// implementation of min in Ord for Maybe @ [1,0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of min in Ord for Maybe @ [1,1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of min in Ord for Maybe @ [1,1,0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1_0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1_0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of min in Ord for Maybe @ [1,1,1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1_1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1_1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of max in Ord for Maybe @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOMaybe_(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOMaybe__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of max in Ord for Maybe @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOMaybe__0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOMaybe__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of max in Ord for Maybe @ [1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOMaybe__1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of compare in Ord for Maybe @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOMaybe_(field v1, field v2, field v3, field v4, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOMaybe__symbol;
  root.n->missing = missing;
  root.n->children[3].a = (field*)alloc(sizeof(field));
  child_at(root, 0) = v4;
  child_at(root, 1) = v3;
  child_at(root, 2) = v2;
  child_at(root, 3) = v1;
  return root;
}

// implementation of compare in Ord for Maybe @ [1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOMaybe__1(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of compare in Ord for Maybe @ [1,0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of compare in Ord for Maybe @ [1,1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of compare in Ord for Maybe @ [1,1,1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1_1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1_1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of >= in Ord for Maybe @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe_(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of >= in Ord for Maybe @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe__0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of >= in Ord for Maybe @ [1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe__1(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of > in Ord for Maybe @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOMaybe_(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOMaybe__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of > in Ord for Maybe @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOMaybe__0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOMaybe__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of > in Ord for Maybe @ [1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOMaybe__1(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of > in Ord for Maybe @ [1,1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of < in Ord for Maybe @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOMaybe_(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOMaybe__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of < in Ord for Maybe @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOMaybe__0(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOMaybe__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of < in Ord for Maybe @ [1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOMaybe__1(field v1, field v2, field v3, field v4, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_symbol;
  root.n->missing = missing;
  root.n->children[3].a = (field*)alloc(sizeof(field));
  child_at(root, 0) = v4;
  child_at(root, 1) = v3;
  child_at(root, 2) = v2;
  child_at(root, 3) = v1;
  return root;
}

// implementation of < in Ord for Maybe @ [1,1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1(field v1, field v2, field v3, field v4, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1_symbol;
  root.n->missing = missing;
  root.n->children[3].a = (field*)alloc(sizeof(field));
  child_at(root, 0) = v4;
  child_at(root, 1) = v3;
  child_at(root, 2) = v2;
  child_at(root, 3) = v1;
  return root;
}

// implementation of < in Ord for Maybe @ [1,1,1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1_1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOMaybe__1_1_1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of min in Ord for Ordering @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of min in Ord for Ordering @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__0(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of min in Ord for Ordering @ [0,0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of min in Ord for Ordering @ [0,1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of min in Ord for Ordering @ [0,2]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_2(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_2_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of min in Ord for Ordering @ [1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of min in Ord for Ordering @ [1,0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of min in Ord for Ordering @ [1,1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of min in Ord for Ordering @ [1,2]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_2(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_2_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of min in Ord for Ordering @ [2]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__2(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__2_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of min in Ord for Ordering @ [2,0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__2_0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__2_0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of min in Ord for Ordering @ [2,1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__2_1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__2_1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of min in Ord for Ordering @ [2,2]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__2_2(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmin_HTPrelude_DOOrd_HTPrelude_DOOrdering__2_2_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of max in Ord for Ordering @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOOrdering_(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOOrdering__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of max in Ord for Ordering @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOOrdering__0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of max in Ord for Ordering @ [1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOOrdering__1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTmax_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of compare in Ord for Ordering @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering_(field v1, field v2, field v3, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v3;
  child_at(root, 1) = v2;
  child_at(root, 2) = v1;
  return root;
}

// implementation of compare in Ord for Ordering @ [1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of compare in Ord for Ordering @ [1,0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_0(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of compare in Ord for Ordering @ [1,0,0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_0_0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_0_0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of compare in Ord for Ordering @ [1,0,1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_0_1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_0_1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of compare in Ord for Ordering @ [1,0,2]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_0_2(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_0_2_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of compare in Ord for Ordering @ [1,1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_1(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of compare in Ord for Ordering @ [1,1,0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_1_0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_1_0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of compare in Ord for Ordering @ [1,1,2]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_1_2(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_1_2_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of compare in Ord for Ordering @ [1,2]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_2(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HTcompare_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_2_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of >= in Ord for Ordering @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of >= in Ord for Ordering @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of >= in Ord for Ordering @ [1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of >= in Ord for Ordering @ [2]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__2(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_EQ_HTPrelude_DOOrd_HTPrelude_DOOrdering__2_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of > in Ord for Ordering @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOOrdering_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOOrdering__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of > in Ord for Ordering @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOOrdering__0(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of > in Ord for Ordering @ [1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOOrdering__1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of > in Ord for Ordering @ [2]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOOrdering__2(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_GT_HTPrelude_DOOrd_HTPrelude_DOOrdering__2_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of < in Ord for Ordering @ []
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOOrdering_(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOOrdering__symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of < in Ord for Ordering @ [0]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOOrdering__0(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOOrdering__0_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

// implementation of < in Ord for Ordering @ [1]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOOrdering__1(field v1, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOOrdering__1_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v1;
  return root;
}

// implementation of < in Ord for Ordering @ [2]
__attribute__((always_inline)) 
static inline field make_Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOOrdering__2(field v1, field v2, int missing)
{
  field root;
  root.n = (Node*)alloc(sizeof(Node));
  root.n->symbol = &Prelude__USimpl_HT_LT_HTPrelude_DOOrd_HTPrelude_DOOrdering__2_symbol;
  root.n->missing = missing;
  child_at(root, 0) = v2;
  child_at(root, 1) = v1;
  return root;
}

#endif //PreludeCompare_H