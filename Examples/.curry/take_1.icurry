interface take_1 where {
import Prelude;
main 0 :: (Prelude.Enum a, Prelude.Num a) => [a];
mytake 2 :: (Prelude.Eq a, Prelude.Num a) => a -> [b] -> [b];
hiding class Prelude.Enum a;
hiding class Prelude.Num a;
hiding class Prelude.Eq a;
instance Prelude.Enum () {
  enumFromThenTo 3;
  enumFromTo 2;
  enumFromThen 2;
  enumFrom 1;
  fromEnum 1;
  toEnum 1;
  pred 1;
  succ 1
} {-# MODULE Prelude #-};
instance Prelude.Enum Prelude.Bool {
  enumFromThen 0;
  enumFrom 0;
  fromEnum 1;
  toEnum 1;
  pred 1;
  succ 1
} {-# MODULE Prelude #-};
instance Prelude.Enum Prelude.Char {
  enumFromThen 0;
  enumFrom 0;
  fromEnum 0;
  toEnum 0;
  pred 1;
  succ 1
} {-# MODULE Prelude #-};
instance Prelude.Enum Prelude.Int {
  enumFromThenTo 0;
  enumFromThen 0;
  enumFromTo 0;
  enumFrom 0;
  fromEnum 1;
  toEnum 1;
  pred 1;
  succ 1
} {-# MODULE Prelude #-};
instance Prelude.Enum Prelude.Ordering {
  enumFromThen 0;
  enumFrom 0;
  fromEnum 1;
  toEnum 1;
  pred 1;
  succ 1
} {-# MODULE Prelude #-};
instance Prelude.Num Prelude.Float {
  fromInt 1;
  signum 1;
  abs 1;
  negate 1;
  (*) 2;
  (-) 2;
  (+) 2
} {-# MODULE Prelude #-};
instance Prelude.Num Prelude.Int {
  fromInt 1;
  signum 1;
  abs 1;
  negate 1;
  (*) 2;
  (-) 2;
  (+) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq () {
  (==) 2
} {-# MODULE Prelude #-};
instance (Prelude.Eq a, Prelude.Eq b) => Prelude.Eq (a, b) {
  (==) 2
} {-# MODULE Prelude #-};
instance (Prelude.Eq a, Prelude.Eq b,
          Prelude.Eq c) => Prelude.Eq (a, b, c) {
  (==) 2
} {-# MODULE Prelude #-};
instance (Prelude.Eq a, Prelude.Eq b, Prelude.Eq c,
          Prelude.Eq d) => Prelude.Eq (a, b, c, d) {
  (==) 2
} {-# MODULE Prelude #-};
instance (Prelude.Eq a, Prelude.Eq b, Prelude.Eq c, Prelude.Eq d,
          Prelude.Eq e) => Prelude.Eq (a, b, c, d, e) {
  (==) 2
} {-# MODULE Prelude #-};
instance (Prelude.Eq a, Prelude.Eq b, Prelude.Eq c, Prelude.Eq d,
          Prelude.Eq e, Prelude.Eq f) => Prelude.Eq (a, b, c, d, e, f) {
  (==) 2
} {-# MODULE Prelude #-};
instance (Prelude.Eq a, Prelude.Eq b, Prelude.Eq c, Prelude.Eq d,
          Prelude.Eq e, Prelude.Eq f, Prelude.Eq g) => Prelude.Eq (a, b, c,
                                                                   d, e, f, g) {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq a => Prelude.Eq [a] {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.Bool {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.Char {
  (==) 2
} {-# MODULE Prelude #-};
instance (Prelude.Eq a,
          Prelude.Eq b) => Prelude.Eq (Prelude.Either a b) {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.Float {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.IOError {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.Int {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq a => Prelude.Eq (Prelude.Maybe a) {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.Ordering {
  (==) 2
} {-# MODULE Prelude #-};
hiding data Prelude.Bool;
hiding data Prelude.Char;
hiding data Prelude.Int;
hiding data Prelude.Ordering;
hiding data Prelude.Float;
hiding data Prelude.Either a b;
hiding data Prelude.IOError;
hiding data Prelude.Maybe a
}