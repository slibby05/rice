Prog "FlatRewrite" ["Control.SetFunctions","FlatCurry.Types","List","Prelude","Util"] [TypeSyn ("FlatRewrite","Path") Public [] (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])] [Func ("FlatRewrite","subexpr") 1 Public (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry.Types","Expr") []])) (Rule [1] (Or (Case Flex (Var 1) [Branch (Pattern ("FlatCurry.Types","Free") [2,3]) (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Util","mapFst") [Comb (ConsPartCall 1) ("Prelude",":") [Lit (Intc 0)]],Comb FuncCall ("FlatRewrite","subexpr") [Var 3]]),Branch (Pattern ("FlatCurry.Types","Or") [4,5]) (Or (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Util","mapFst") [Comb (ConsPartCall 1) ("Prelude",":") [Lit (Intc 0)]],Comb FuncCall ("FlatRewrite","subexpr") [Var 4]]) (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Util","mapFst") [Comb (ConsPartCall 1) ("Prelude",":") [Lit (Intc 1)]],Comb FuncCall ("FlatRewrite","subexpr") [Var 5]])),Branch (Pattern ("FlatCurry.Types","Let") [6,7]) (Or (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Util","mapFst") [Comb (ConsPartCall 1) ("Prelude",":") [Comb FuncCall ("Prelude","_impl#negate#Prelude.Num#Prelude.Int") [Lit (Intc 1)]]],Comb FuncCall ("FlatRewrite","subexpr") [Var 7]]) (Free [8,9] (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:<=") [Comb FuncCall ("Prelude","++") [Var 8,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","unknown") []]],Var 6],Comb FuncCall ("Prelude","$") [Comb FuncCall ("Util","mapFst") [Comb (ConsPartCall 1) ("Prelude",":") [Comb FuncCall ("Prelude","length") [Var 8]]],Comb FuncCall ("FlatRewrite","subexpr") [Comb FuncCall ("Prelude","snd") [Var 9]]]]))),Branch (Pattern ("FlatCurry.Types","Typed") [10,11]) (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Util","mapFst") [Comb (ConsPartCall 1) ("Prelude",":") [Comb FuncCall ("Prelude","_impl#negate#Prelude.Num#Prelude.Int") [Lit (Intc 1)]]],Comb FuncCall ("FlatRewrite","subexpr") [Var 10]]),Branch (Pattern ("FlatCurry.Types","Case") [12,13,14]) (Or (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Util","mapFst") [Comb (ConsPartCall 1) ("Prelude",":") [Comb FuncCall ("Prelude","_impl#negate#Prelude.Num#Prelude.Int") [Lit (Intc 1)]]],Comb FuncCall ("FlatRewrite","subexpr") [Var 13]]) (Free [15,16] (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:<=") [Comb FuncCall ("Prelude","++") [Var 15,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry.Types","Branch") [Comb FuncCall ("Prelude","unknown") [],Var 16],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","unknown") []]],Var 14],Comb FuncCall ("Prelude","$") [Comb FuncCall ("Util","mapFst") [Comb (ConsPartCall 1) ("Prelude",":") [Comb FuncCall ("Prelude","length") [Var 15]]],Comb FuncCall ("FlatRewrite","subexpr") [Var 16]]]))),Branch (Pattern ("FlatCurry.Types","Comb") [17,18,19]) (Free [20,21] (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:<=") [Comb FuncCall ("Prelude","++") [Var 20,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","unknown") []]],Var 19],Comb FuncCall ("Prelude","$") [Comb FuncCall ("Util","mapFst") [Comb (ConsPartCall 1) ("Prelude",":") [Comb FuncCall ("Prelude","length") [Var 20]]],Comb FuncCall ("FlatRewrite","subexpr") [Var 21]]]))]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Var 1]))),Func ("FlatRewrite","replace") 3 Public (FuncType (TCons ("FlatCurry.Types","Expr") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("FlatCurry.Types","Expr") [])))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Var 3),Branch (Pattern ("Prelude",":") [4,5]) (Case Flex (Var 1) [Branch (Pattern ("FlatCurry.Types","Free") [6,7]) (Case Flex (Var 4) [Branch (LPattern (Intc 0)) (Comb ConsCall ("FlatCurry.Types","Free") [Var 6,Comb FuncCall ("FlatRewrite","replace") [Var 7,Var 5,Var 3]])]),Branch (Pattern ("FlatCurry.Types","Or") [8,9]) (Case Flex (Var 4) [Branch (LPattern (Intc 0)) (Comb ConsCall ("FlatCurry.Types","Or") [Comb FuncCall ("FlatRewrite","replace") [Var 8,Var 5,Var 3],Var 9]),Branch (LPattern (Intc 1)) (Comb ConsCall ("FlatCurry.Types","Or") [Var 8,Comb FuncCall ("FlatRewrite","replace") [Var 9,Var 5,Var 3]])]),Branch (Pattern ("FlatCurry.Types","Typed") [10,11]) (Case Flex (Var 4) [Branch (LPattern (Intc (-1))) (Comb ConsCall ("FlatCurry.Types","Typed") [Comb FuncCall ("FlatRewrite","replace") [Var 10,Var 5,Var 3],Var 11])]),Branch (Pattern ("FlatCurry.Types","Comb") [12,13,14]) (Free [15,16,17] (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:<=") [Comb FuncCall ("Prelude","++") [Var 15,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude","[]") []],Var 17]],Var 14],Case Rigid (Comb FuncCall ("Prelude","=:=") [Var 4,Comb FuncCall ("Prelude","length") [Var 15]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("FlatCurry.Types","Comb") [Var 12,Var 13,Comb FuncCall ("Prelude","++") [Var 15,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatRewrite","replace") [Var 16,Var 5,Var 3],Comb ConsCall ("Prelude","[]") []],Var 17]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])]])),Branch (Pattern ("FlatCurry.Types","Let") [18,19]) (Or (Case Flex (Var 4) [Branch (LPattern (Intc (-1))) (Comb ConsCall ("FlatCurry.Types","Let") [Var 18,Comb FuncCall ("FlatRewrite","replace") [Var 19,Var 5,Var 3]])]) (Free [20,21,22,23] (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:<=") [Comb FuncCall ("Prelude","++") [Var 20,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 21,Var 22],Comb ConsCall ("Prelude","[]") []],Var 23]],Var 18],Case Rigid (Comb FuncCall ("Prelude","=:=") [Var 4,Comb FuncCall ("Prelude","length") [Var 20]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("FlatCurry.Types","Let") [Comb FuncCall ("Prelude","++") [Var 20,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 21,Comb FuncCall ("FlatRewrite","replace") [Var 22,Var 5,Var 3]],Comb ConsCall ("Prelude","[]") []],Var 23]],Var 19]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])]]))),Branch (Pattern ("FlatCurry.Types","Case") [24,25,26]) (Or (Case Flex (Var 4) [Branch (LPattern (Intc (-1))) (Comb ConsCall ("FlatCurry.Types","Case") [Var 24,Comb FuncCall ("FlatRewrite","replace") [Var 25,Var 5,Var 3],Var 26])]) (Free [27,28,29,30] (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:<=") [Comb FuncCall ("Prelude","++") [Var 27,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry.Types","Branch") [Var 28,Var 29],Comb ConsCall ("Prelude","[]") []],Var 30]],Var 26],Case Rigid (Comb FuncCall ("Prelude","=:=") [Var 4,Comb FuncCall ("Prelude","length") [Var 27]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("FlatCurry.Types","Case") [Var 24,Var 25,Comb FuncCall ("Prelude","++") [Var 27,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry.Types","Branch") [Var 28,Comb FuncCall ("FlatRewrite","replace") [Var 29,Var 5,Var 3]],Comb ConsCall ("Prelude","[]") []],Var 30]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])]])))])])),Func ("FlatRewrite","arbitrary") 0 Public (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("FlatCurry.Types","Expr") [])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","snd") [],Comb (FuncPartCall 1) ("FlatRewrite","subexpr") []])),Func ("FlatRewrite","fix") 2 Public (FuncType (FuncType (TVar 0) (TVar 0)) (FuncType (TVar 0) (TVar 0))) (Rule [1,2] (Let [(3,Comb FuncCall ("Control.SetFunctions","set1") [Var 1,Var 2])] (Case Rigid (Comb FuncCall ("Control.SetFunctions","isEmpty") [Var 3]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("FlatRewrite","fix") [Var 1,Comb FuncCall ("Prelude","fst") [Comb FuncCall ("Control.SetFunctions","select") [Var 3]]])]))),Func ("FlatRewrite","step") 2 Public (FuncType (FuncType (TCons ("FlatCurry.Types","Expr") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("FlatCurry.Types","Expr") []))) (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("FlatCurry.Types","Expr") []))) (Rule [1,2] (Free [3,4,5] (Case Rigid (Comb FuncCall ("Prelude","&") [Comb FuncCall ("Prelude","=:=") [Comb FuncCall ("FlatRewrite","subexpr") [Var 2],Comb ConsCall ("Prelude","(,)") [Var 3,Var 4]],Comb FuncCall ("Prelude","=:=") [Var 5,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 4],Var 3]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("FlatRewrite","replace") [Var 2,Var 3,Var 5]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])]))),Func ("FlatRewrite","allValues0") 1 Private (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Control.SetFunctions","sortValuesBy") [Comb (FuncPartCall 1) ("Prelude","const") [Comb (FuncPartCall 1) ("Prelude","const") [Comb ConsCall ("Prelude","True") []]]],Comb FuncCall ("Control.SetFunctions","set0") [Var 1]])),Func ("FlatRewrite","allValues1") 2 Private (FuncType (FuncType (TVar 0) (TVar 0)) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Control.SetFunctions","sortValuesBy") [Comb (FuncPartCall 1) ("Prelude","const") [Comb (FuncPartCall 1) ("Prelude","const") [Comb ConsCall ("Prelude","True") []]]],Comb FuncCall ("Control.SetFunctions","set1") [Var 1,Var 2]])),Func ("FlatRewrite","withSubexpr") 1 Private (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("FlatCurry.Types","Expr") [])) (Rule [1] (Comb FuncCall ("Prelude","?") [Var 1,Comb FuncCall ("Prelude","?") [Comb ConsCall ("FlatCurry.Types","Comb") [Comb FuncCall ("Prelude","unknown") [],Comb FuncCall ("Prelude","unknown") [],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","unknown") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatRewrite","withSubexpr") [Var 1],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","unknown") []]]],Comb FuncCall ("Prelude","?") [Comb ConsCall ("FlatCurry.Types","Let") [Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","unknown") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","unknown") [],Comb FuncCall ("FlatRewrite","withSubexpr") [Var 1]],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","unknown") []]],Comb FuncCall ("Prelude","unknown") []],Comb FuncCall ("Prelude","?") [Comb ConsCall ("FlatCurry.Types","Let") [Comb FuncCall ("Prelude","unknown") [],Comb FuncCall ("FlatRewrite","withSubexpr") [Var 1]],Comb FuncCall ("Prelude","?") [Comb ConsCall ("FlatCurry.Types","Free") [Comb FuncCall ("Prelude","unknown") [],Comb FuncCall ("FlatRewrite","withSubexpr") [Var 1]],Comb FuncCall ("Prelude","?") [Comb ConsCall ("FlatCurry.Types","Or") [Comb FuncCall ("FlatRewrite","withSubexpr") [Var 1],Comb FuncCall ("Prelude","unknown") []],Comb FuncCall ("Prelude","?") [Comb ConsCall ("FlatCurry.Types","Or") [Comb FuncCall ("Prelude","unknown") [],Comb FuncCall ("FlatRewrite","withSubexpr") [Var 1]],Comb FuncCall ("Prelude","?") [Comb ConsCall ("FlatCurry.Types","Case") [Comb FuncCall ("Prelude","unknown") [],Comb FuncCall ("Prelude","unknown") [],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","unknown") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry.Types","Branch") [Comb FuncCall ("Prelude","unknown") [],Comb FuncCall ("FlatRewrite","withSubexpr") [Var 1]],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","unknown") []]]],Comb FuncCall ("Prelude","?") [Comb ConsCall ("FlatCurry.Types","Case") [Comb FuncCall ("Prelude","unknown") [],Comb FuncCall ("FlatRewrite","withSubexpr") [Var 1],Comb FuncCall ("Prelude","unknown") []],Comb ConsCall ("FlatCurry.Types","Typed") [Comb FuncCall ("FlatRewrite","withSubexpr") [Var 1],Comb FuncCall ("Prelude","unknown") []]]]]]]]]]])),Func ("FlatRewrite","isVar") 1 Private (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("Prelude","Int") [])) (Rule [1] (Free [2] (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:<=") [Comb FuncCall ("FlatRewrite","withSubexpr") [Comb ConsCall ("FlatCurry.Types","Var") [Var 2]],Var 1],Var 2]))),Func ("FlatRewrite","declVar") 1 Private (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("Prelude","Int") [])) (Rule [1] (Or (Or (Free [2] (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:<=") [Comb FuncCall ("FlatRewrite","withSubexpr") [Comb ConsCall ("FlatCurry.Types","Let") [Var 2,Comb FuncCall ("Prelude","unknown") []]],Var 1],Comb FuncCall ("Prelude","$") [Comb FuncCall ("Prelude","anyOf") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","fst") [],Var 2]]])) (Free [3] (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:<=") [Comb FuncCall ("FlatRewrite","withSubexpr") [Comb ConsCall ("FlatCurry.Types","Free") [Var 3,Comb FuncCall ("Prelude","unknown") []]],Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","anyOf") [],Var 3]]))) (Free [4] (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:<=") [Comb FuncCall ("FlatRewrite","withSubexpr") [Comb ConsCall ("FlatCurry.Types","Case") [Comb FuncCall ("Prelude","unknown") [],Comb FuncCall ("Prelude","unknown") [],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","unknown") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry.Types","Branch") [Comb ConsCall ("FlatCurry.Types","Pattern") [Comb FuncCall ("Prelude","unknown") [],Var 4],Comb FuncCall ("Prelude","unknown") []],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","unknown") []]]]],Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","anyOf") [],Var 4]])))),Func ("FlatRewrite","allDecls") 0 Private (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("List","nub") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Int") []],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Int") []],Comb (FuncPartCall 1) ("Control.SetFunctions","set1") [Comb (FuncPartCall 1) ("FlatRewrite","declVar") []]]])),Func ("FlatRewrite","allVars") 0 Public (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("List","nub") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Int") []],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Int") []],Comb (FuncPartCall 1) ("Control.SetFunctions","set1") [Comb (FuncPartCall 1) ("FlatRewrite","isVar") []]]])),Func ("FlatRewrite","freeVars") 1 Public (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Comb FuncCall ("List","\\\\") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Int") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatRewrite","allVars") [],Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatRewrite","allDecls") [],Var 1]]))] []