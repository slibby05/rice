Prog "PreludeNum" ["PreludeBase","PreludeCompare"] [] [Func ("Prelude","powaux") 3 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Float") [])))) (Rule [-2,3,-4] (Case Flex (Var 2) [Branch (Pattern ("","float") [5]) (Case Flex (Var 4) [Branch (Pattern ("","int") [6]) (Comb FuncCall ("Prelude","powaux#worker") [Var 3,Var 5,Var 6])])])),Func ("Prelude","_def#+#Prelude.Num") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [2] (Let [(3,Comb (FuncPartCall 1) ("Prelude","prim_error") [])] (Let [(4,Comb ConsCall ("StringConst","No instance or default method for class operation `+'") [])] (Comb FuncCall ("Prelude","$##") [Var 3,Var 4])))),Func ("Prelude","_def#*#Prelude.Num") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [2] (Let [(3,Comb (FuncPartCall 1) ("Prelude","prim_error") [])] (Let [(4,Comb ConsCall ("StringConst","No instance or default method for class operation `*'") [])] (Comb FuncCall ("Prelude","$##") [Var 3,Var 4])))),Func ("Prelude","_def#abs#Prelude.Num") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (TVar 0))) (Rule [2] (Let [(3,Comb (FuncPartCall 1) ("Prelude","prim_error") [])] (Let [(4,Comb ConsCall ("StringConst","No instance or default method for class operation `abs'") [])] (Comb FuncCall ("Prelude","$##") [Var 3,Var 4])))),Func ("Prelude","_def#signum#Prelude.Num") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (TVar 0))) (Rule [2] (Let [(3,Comb (FuncPartCall 1) ("Prelude","prim_error") [])] (Let [(4,Comb ConsCall ("StringConst","No instance or default method for class operation `signum'") [])] (Comb FuncCall ("Prelude","$##") [Var 3,Var 4])))),Func ("Prelude","_def#fromInt#Prelude.Num") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (TVar 0))) (Rule [2] (Let [(3,Comb (FuncPartCall 1) ("Prelude","prim_error") [])] (Let [(4,Comb ConsCall ("StringConst","No instance or default method for class operation `fromInt'") [])] (Comb FuncCall ("Prelude","$##") [Var 3,Var 4])))),Func ("Prelude","_def#fromFloat#Prelude.Fractional") 1 Public (FuncType (TCons ("Prelude","_Dict#Fractional") [TVar 0]) (FuncType (TCons ("Prelude","Float") []) (TVar 0))) (Rule [2] (Let [(3,Comb (FuncPartCall 1) ("Prelude","prim_error") [])] (Let [(4,Comb ConsCall ("StringConst","No instance or default method for class operation `fromFloat'") [])] (Comb FuncCall ("Prelude","$##") [Var 3,Var 4])))),Func ("Prelude","_def#divMod#Prelude.Integral") 1 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 0,TVar 0])))) (Rule [2] (Let [(3,Comb (FuncPartCall 1) ("Prelude","prim_error") [])] (Let [(4,Comb ConsCall ("StringConst","No instance or default method for class operation `divMod'") [])] (Comb FuncCall ("Prelude","$##") [Var 3,Var 4])))),Func ("Prelude","_def#quotRem#Prelude.Integral") 1 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 0,TVar 0])))) (Rule [2] (Let [(3,Comb (FuncPartCall 1) ("Prelude","prim_error") [])] (Let [(4,Comb ConsCall ("StringConst","No instance or default method for class operation `quotRem'") [])] (Comb FuncCall ("Prelude","$##") [Var 3,Var 4])))),Func ("Prelude","abs") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (TVar 0))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Num") [3,4,5,6,7,8,9]) (Var 7)])),Func ("Prelude","signum") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (TVar 0))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Num") [3,4,5,6,7,8,9]) (Var 8)])),Func ("Prelude","fromFloat") 1 Public (FuncType (TCons ("Prelude","_Dict#Fractional") [TVar 0]) (FuncType (TCons ("Prelude","Float") []) (TVar 0))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Fractional") [3,4,5,6]) (Var 6)])),Func ("Prelude","_super#Prelude.Real#Prelude.Num") 1 Public (FuncType (TCons ("Prelude","_Dict#Real") [TVar 0]) (TCons ("Prelude","_Dict#Num") [TVar 0])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Real") [3,4]) (Var 3)])),Func ("Prelude","_super#Prelude.Real#Prelude.Ord") 1 Public (FuncType (TCons ("Prelude","_Dict#Real") [TVar 0]) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Real") [3,4]) (Var 4)])),Func ("Prelude","_super#Prelude.Integral#Prelude.Real") 1 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (TCons ("Prelude","_Dict#Real") [TVar 0])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Integral") [3,4,5,6,7,8,9]) (Var 3)])),Func ("Prelude","div") 1 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Integral") [3,4,5,6,7,8,9]) (Var 4)])),Func ("Prelude","mod") 1 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Integral") [3,4,5,6,7,8,9]) (Var 5)])),Func ("Prelude","quot") 1 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Integral") [3,4,5,6,7,8,9]) (Var 6)])),Func ("Prelude","rem") 1 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Integral") [3,4,5,6,7,8,9]) (Var 7)])),Func ("Prelude","_impl#fromInt#Prelude.Num#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [-2] (Var 2)),Func ("Prelude","/.") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","float") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","float") [5]) (Let [(6,Comb FuncCall ("Prelude","primDivFloat") [Var 4,Var 5])] (Comb ConsCall ("","float") [Var 6]))])])),Func ("Prelude","*.") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","float") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","float") [5]) (Let [(6,Comb FuncCall ("Prelude","primMulFloat") [Var 4,Var 5])] (Comb ConsCall ("","float") [Var 6]))])])),Func ("Prelude","-.") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","float") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","float") [5]) (Let [(6,Comb FuncCall ("Prelude","primSubFloat") [Var 4,Var 5])] (Comb ConsCall ("","float") [Var 6]))])])),Func ("Prelude","+.") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","float") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","float") [5]) (Let [(6,Comb FuncCall ("Prelude","primAddFloat") [Var 4,Var 5])] (Comb ConsCall ("","float") [Var 6]))])])),Func ("Prelude","negateFloat") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("","float") [3]) (Let [(4,Comb FuncCall ("Prelude","primNegateFloat") [Var 3])] (Comb ConsCall ("","float") [Var 4]))])),Func ("Prelude","rem_") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","int") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","int") [5]) (Let [(6,Comb FuncCall ("Prelude","primRemInt") [Var 4,Var 5])] (Comb ConsCall ("","int") [Var 6]))])])),Func ("Prelude","_impl#rem#Prelude.Integral#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","int") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","int") [5]) (Let [(6,Comb FuncCall ("Prelude","primRemInt") [Var 4,Var 5])] (Comb ConsCall ("","int") [Var 6]))])])),Func ("Prelude","quot_") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","int") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","int") [5]) (Let [(6,Comb FuncCall ("Prelude","primQuotInt") [Var 4,Var 5])] (Comb ConsCall ("","int") [Var 6]))])])),Func ("Prelude","_impl#quotRem#Prelude.Integral#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","quot_") [Var 2,Var 3])] (Let [(5,Comb FuncCall ("Prelude","rem_") [Var 2,Var 3])] (Comb ConsCall ("Prelude","(,)") [Var 4,Var 5])))),Func ("Prelude","_impl#quot#Prelude.Integral#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","int") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","int") [5]) (Let [(6,Comb FuncCall ("Prelude","primQuotInt") [Var 4,Var 5])] (Comb ConsCall ("","int") [Var 6]))])])),Func ("Prelude","mod_") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","int") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","int") [5]) (Let [(6,Comb FuncCall ("Prelude","primModInt") [Var 4,Var 5])] (Comb ConsCall ("","int") [Var 6]))])])),Func ("Prelude","_impl#mod#Prelude.Integral#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","int") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","int") [5]) (Let [(6,Comb FuncCall ("Prelude","primModInt") [Var 4,Var 5])] (Comb ConsCall ("","int") [Var 6]))])])),Func ("Prelude","div_") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","int") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","int") [5]) (Let [(6,Comb FuncCall ("Prelude","primDivInt") [Var 4,Var 5])] (Comb ConsCall ("","int") [Var 6]))])])),Func ("Prelude","_impl#divMod#Prelude.Integral#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","div_") [Var 2,Var 3])] (Let [(5,Comb FuncCall ("Prelude","mod_") [Var 2,Var 3])] (Comb ConsCall ("Prelude","(,)") [Var 4,Var 5])))),Func ("Prelude","_impl#div#Prelude.Integral#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","int") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","int") [5]) (Let [(6,Comb FuncCall ("Prelude","primDivInt") [Var 4,Var 5])] (Comb ConsCall ("","int") [Var 6]))])])),Func ("Prelude","halve") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [2] (Case Rigid (Var 2) [Branch (Pattern ("","int") [3]) (Let [(4,Comb FuncCall ("Prelude","primDivInt") [Var 3,Lit (Intc 2)])] (Comb ConsCall ("","int") [Var 4]))])),Func ("Prelude","*$") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","int") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","int") [5]) (Let [(6,Comb FuncCall ("Prelude","primMulInt") [Var 4,Var 5])] (Comb ConsCall ("","int") [Var 6]))])])),Func ("Prelude","_impl#*#Prelude.Num#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","int") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","int") [5]) (Let [(6,Comb FuncCall ("Prelude","primMulInt") [Var 4,Var 5])] (Comb ConsCall ("","int") [Var 6]))])])),Func ("Prelude","-$") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","int") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","int") [5]) (Let [(6,Comb FuncCall ("Prelude","primSubInt") [Var 4,Var 5])] (Comb ConsCall ("","int") [Var 6]))])])),Func ("Prelude","_impl#negate#Prelude.Num#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("","int") [3]) (Let [(4,Comb FuncCall ("Prelude","primSubInt") [Lit (Intc 0),Var 3])] (Comb ConsCall ("","int") [Var 4]))])),Func ("Prelude","_impl#signum#Prelude.Num#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("","int") [3]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Var 3,Lit (Intc 0)]),Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqInt") [Var 3,Lit (Intc 0)]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("","int") [Lit (Intc 0)]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("","int") [Lit (Intc (-1))])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("","int") [Lit (Intc 1)])])])),Func ("Prelude","_impl#abs#Prelude.Num#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("","int") [3]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Lit (Intc 0),Var 3]),Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Let [(4,Comb FuncCall ("Prelude","primSubInt") [Lit (Intc 0),Var 3])] (Comb ConsCall ("","int") [Var 4]))])])),Func ("Prelude","_impl#-#Prelude.Num#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","int") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","int") [5]) (Let [(6,Comb FuncCall ("Prelude","primSubInt") [Var 4,Var 5])] (Comb ConsCall ("","int") [Var 6]))])])),Func ("Prelude","negate_") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("","int") [3]) (Let [(4,Comb FuncCall ("Prelude","primSubInt") [Lit (Intc 0),Var 3])] (Comb ConsCall ("","int") [Var 4]))])),Func ("Prelude","+$") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","int") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","int") [5]) (Let [(6,Comb FuncCall ("Prelude","primAddInt") [Var 4,Var 5])] (Comb ConsCall ("","int") [Var 6]))])])),Func ("Prelude","_impl#+#Prelude.Num#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","int") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","int") [5]) (Let [(6,Comb FuncCall ("Prelude","primAddInt") [Var 4,Var 5])] (Comb ConsCall ("","int") [Var 6]))])])),Func ("Prelude","_inst#Prelude.Num#Prelude.Int") 0 Public (TCons ("Prelude","_Dict#Num") [TCons ("Prelude","Int") []]) (Rule [] (Let [(2,Comb (FuncPartCall 2) ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [])] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#*#Prelude.Num#Prelude.Int") [])] (Let [(5,Comb (FuncPartCall 1) ("Prelude","_impl#negate#Prelude.Num#Prelude.Int") [])] (Let [(6,Comb (FuncPartCall 1) ("Prelude","_impl#abs#Prelude.Num#Prelude.Int") [])] (Let [(7,Comb (FuncPartCall 1) ("Prelude","_impl#signum#Prelude.Num#Prelude.Int") [])] (Let [(8,Comb (FuncPartCall 1) ("Prelude","_impl#fromInt#Prelude.Num#Prelude.Int") [])] (Comb ConsCall ("Prelude","_Dict#Num") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8]))))))))),Func ("Prelude","_inst#Prelude.Real#Prelude.Int") 0 Public (TCons ("Prelude","_Dict#Real") [TCons ("Prelude","Int") []]) (Rule [] (Let [(2,Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Int") [])] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#*#Prelude.Num#Prelude.Int") [])] (Let [(6,Comb (FuncPartCall 1) ("Prelude","_impl#negate#Prelude.Num#Prelude.Int") [])] (Let [(7,Comb (FuncPartCall 1) ("Prelude","_impl#abs#Prelude.Num#Prelude.Int") [])] (Let [(8,Comb (FuncPartCall 1) ("Prelude","_impl#signum#Prelude.Num#Prelude.Int") [])] (Let [(9,Comb (FuncPartCall 1) ("Prelude","_impl#fromInt#Prelude.Num#Prelude.Int") [])] (Let [(10,Comb ConsCall ("Prelude","_Dict#Num") [Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 9])] (Comb ConsCall ("Prelude","_Dict#Real") [Var 10,Var 2]))))))))))),Func ("Prelude","_inst#Prelude.Integral#Prelude.Int") 0 Public (TCons ("Prelude","_Dict#Integral") [TCons ("Prelude","Int") []]) (Rule [] (Let [(2,Comb FuncCall ("Prelude","_inst#Prelude.Real#Prelude.Int") [])] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#div#Prelude.Integral#Prelude.Int") [])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#mod#Prelude.Integral#Prelude.Int") [])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#quot#Prelude.Integral#Prelude.Int") [])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","_impl#rem#Prelude.Integral#Prelude.Int") [])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","_impl#divMod#Prelude.Integral#Prelude.Int") [])] (Let [(8,Comb (FuncPartCall 2) ("Prelude","_impl#quotRem#Prelude.Integral#Prelude.Int") [])] (Comb ConsCall ("Prelude","_Dict#Integral") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8]))))))))),Func ("Prelude","i2f") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Float") [])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("","int") [3]) (Let [(4,Comb FuncCall ("Prelude","primI2F") [Var 3])] (Comb ConsCall ("","float") [Var 4]))])),Func ("Prelude","quotRem") 1 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 0,TVar 0])))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Integral") [3,4,5,6,7,8,9]) (Var 9)])),Func ("Prelude","divMod") 1 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 0,TVar 0])))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Integral") [3,4,5,6,7,8,9]) (Var 8)])),Func ("Prelude","recip") 1 Public (FuncType (TCons ("Prelude","_Dict#Fractional") [TVar 0]) (FuncType (TVar 0) (TVar 0))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Fractional") [3,4,5,6]) (Var 5)])),Func ("Prelude","/") 1 Public (FuncType (TCons ("Prelude","_Dict#Fractional") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Fractional") [3,4,5,6]) (Var 4)])),Func ("Prelude","_super#Prelude.Fractional#Prelude.Num") 1 Public (FuncType (TCons ("Prelude","_Dict#Fractional") [TVar 0]) (TCons ("Prelude","_Dict#Num") [TVar 0])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Fractional") [3,4,5,6]) (Var 3)])),Func ("Prelude","fromInt") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (TVar 0))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Num") [3,4,5,6,7,8,9]) (Var 9)])),Func ("Prelude","_def#recip#Prelude.Fractional") 2 Public (FuncType (TCons ("Prelude","_Dict#Fractional") [TVar 0]) (FuncType (TVar 0) (TVar 0))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","/") [Var 2])] (Let [(5,Comb FuncCall ("Prelude","_def#recip#Prelude.Fractional#A0") [Var 2])] (Let [(6,Comb FuncCall ("Prelude","fromInt") [Var 5])] (Let [(7,Comb ConsCall ("","int") [Lit (Intc 1)])] (Let [(8,Comb FuncCall ("Prelude","apply") [Var 6,Var 7])] (Comb FuncCall ("Prelude","apply") [Var 4,Var 8,Var 3]))))))),Func ("Prelude","_def#recip#Prelude.Fractional#A0") 1 Public (TVar 0) (Rule [2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Fractional") [3,4,5,6]) (Var 3)])),Func ("Prelude","negate") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (TVar 0))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Num") [3,4,5,6,7,8,9]) (Var 6)])),Func ("Prelude","*") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Num") [3,4,5,6,7,8,9]) (Var 5)])),Func ("Prelude","_def#/#Prelude.Fractional") 3 Public (FuncType (TCons ("Prelude","_Dict#Fractional") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","_def#/#Prelude.Fractional#A1") [Var 2])] (Let [(6,Comb FuncCall ("Prelude","*") [Var 5])] (Let [(7,Comb FuncCall ("Prelude","recip") [Var 2])] (Let [(8,Comb FuncCall ("Prelude","apply") [Var 7,Var 4])] (Comb FuncCall ("Prelude","apply") [Var 6,Var 3,Var 8])))))),Func ("Prelude","_def#/#Prelude.Fractional#A1") 1 Public (TVar 0) (Rule [2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Fractional") [3,4,5,6]) (Var 3)])),Func ("Prelude","-") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Num") [3,4,5,6,7,8,9]) (Var 4)])),Func ("Prelude","_def#negate#Prelude.Num") 2 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (TVar 0))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","-") [Var 2])] (Let [(5,Comb FuncCall ("Prelude","fromInt") [Var 2])] (Let [(6,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(7,Comb FuncCall ("Prelude","apply") [Var 5,Var 6])] (Comb FuncCall ("Prelude","apply") [Var 4,Var 7,Var 3])))))),Func ("Prelude","+") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Num") [3,4,5,6,7,8,9]) (Var 3)])),Func ("Prelude","_def#-#Prelude.Num") 3 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","+") [Var 2])] (Let [(6,Comb FuncCall ("Prelude","negate") [Var 2])] (Let [(7,Comb FuncCall ("Prelude","apply") [Var 6,Var 4])] (Comb FuncCall ("Prelude","apply") [Var 5,Var 3,Var 7]))))),Func ("Prelude","_def#rem#Prelude.Integral") 3 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","quotRem") [Var 2])] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 5,Var 3,Var 4])] (Case Flex (Var 6) [Branch (Pattern ("Prelude","(,)") [7,8]) (Var 8)])))),Func ("Prelude","_def#quot#Prelude.Integral") 3 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","quotRem") [Var 2])] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 5,Var 3,Var 4])] (Case Flex (Var 6) [Branch (Pattern ("Prelude","(,)") [7,8]) (Var 7)])))),Func ("Prelude","_def#mod#Prelude.Integral") 3 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","divMod") [Var 2])] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 5,Var 3,Var 4])] (Case Flex (Var 6) [Branch (Pattern ("Prelude","(,)") [7,8]) (Var 8)])))),Func ("Prelude","_def#div#Prelude.Integral") 3 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","divMod") [Var 2])] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 5,Var 3,Var 4])] (Case Flex (Var 6) [Branch (Pattern ("Prelude","(,)") [7,8]) (Var 7)])))),Func ("Prelude","_impl#fromFloat#Prelude.Fractional#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [-2] (Var 2)),Func ("Prelude","_impl#/#Prelude.Fractional#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","float") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","float") [5]) (Let [(6,Comb FuncCall ("Prelude","primDivFloat") [Var 4,Var 5])] (Comb ConsCall ("","float") [Var 6]))])])),Func ("Prelude","_impl#recip#Prelude.Fractional#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("","float") [3]) (Let [(4,Comb FuncCall ("Prelude","primDivFloat") [Lit (Floatc 1.0),Var 3])] (Comb ConsCall ("","float") [Var 4]))])),Func ("Prelude","_impl#fromInt#Prelude.Num#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Float") [])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("","int") [3]) (Let [(4,Comb FuncCall ("Prelude","primI2F") [Var 3])] (Comb ConsCall ("","float") [Var 4]))])),Func ("Prelude","_impl#negate#Prelude.Num#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("","float") [3]) (Let [(4,Comb FuncCall ("Prelude","primNegateFloat") [Var 3])] (Comb ConsCall ("","float") [Var 4]))])),Func ("Prelude","_impl#signum#Prelude.Num#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("","float") [3]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqFloat") [Var 3,Lit (Floatc 0.0)]),Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqFloat") [Var 3,Lit (Floatc 0.0)]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("","float") [Lit (Floatc 0.0)]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("","float") [Lit (Floatc (-1.0))])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("","float") [Lit (Floatc 1.0)])])])),Func ("Prelude","_impl#abs#Prelude.Num#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("","float") [3]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqFloat") [Lit (Floatc 0.0),Var 3]),Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Let [(4,Comb FuncCall ("Prelude","primNegateFloat") [Var 3])] (Comb ConsCall ("","float") [Var 4]))])])),Func ("Prelude","_impl#*#Prelude.Num#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","float") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","float") [5]) (Let [(6,Comb FuncCall ("Prelude","primMulFloat") [Var 4,Var 5])] (Comb ConsCall ("","float") [Var 6]))])])),Func ("Prelude","square") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("","float") [3]) (Let [(4,Comb FuncCall ("Prelude","primMulFloat") [Var 3,Var 3])] (Comb ConsCall ("","float") [Var 4]))])),Func ("Prelude","pow") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Float") []))) (Rule [2,-3] (Case Rigid (Var 3) [Branch (Pattern ("","int") [4]) (Case Flex (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primLtEqInt") [Lit (Intc 0),Var 4]),Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","powaux#worker") [Var 2,Lit (Floatc 1.0),Var 4]),Branch (Pattern ("Prelude","False") []) (Let [(5,Comb FuncCall ("Prelude","primSubInt") [Lit (Intc 0),Var 4])] (Let [(-6,Comb FuncCall ("Prelude","powaux#worker") [Var 2,Lit (Floatc 1.0),Var 5])] (Case Rigid (Var (-6)) [Branch (Pattern ("","float") [7]) (Let [(8,Comb FuncCall ("Prelude","primDivFloat") [Lit (Floatc 1.0),Var 7])] (Comb ConsCall ("","float") [Var 8]))])))])])),Func ("Prelude","_impl#-#Prelude.Num#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","float") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","float") [5]) (Let [(6,Comb FuncCall ("Prelude","primSubFloat") [Var 4,Var 5])] (Comb ConsCall ("","float") [Var 6]))])])),Func ("Prelude","_impl#+#Prelude.Num#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","float") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","float") [5]) (Let [(6,Comb FuncCall ("Prelude","primAddFloat") [Var 4,Var 5])] (Comb ConsCall ("","float") [Var 6]))])])),Func ("Prelude","_inst#Prelude.Num#Prelude.Float") 0 Public (TCons ("Prelude","_Dict#Num") [TCons ("Prelude","Float") []]) (Rule [] (Let [(2,Comb (FuncPartCall 2) ("Prelude","_impl#+#Prelude.Num#Prelude.Float") [])] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#-#Prelude.Num#Prelude.Float") [])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#*#Prelude.Num#Prelude.Float") [])] (Let [(5,Comb (FuncPartCall 1) ("Prelude","_impl#negate#Prelude.Num#Prelude.Float") [])] (Let [(6,Comb (FuncPartCall 1) ("Prelude","_impl#abs#Prelude.Num#Prelude.Float") [])] (Let [(7,Comb (FuncPartCall 1) ("Prelude","_impl#signum#Prelude.Num#Prelude.Float") [])] (Let [(8,Comb (FuncPartCall 1) ("Prelude","_impl#fromInt#Prelude.Num#Prelude.Float") [])] (Comb ConsCall ("Prelude","_Dict#Num") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8]))))))))),Func ("Prelude","_inst#Prelude.Real#Prelude.Float") 0 Public (TCons ("Prelude","_Dict#Real") [TCons ("Prelude","Float") []]) (Rule [] (Let [(2,Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Float") [])] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#+#Prelude.Num#Prelude.Float") [])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#-#Prelude.Num#Prelude.Float") [])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#*#Prelude.Num#Prelude.Float") [])] (Let [(6,Comb (FuncPartCall 1) ("Prelude","_impl#negate#Prelude.Num#Prelude.Float") [])] (Let [(7,Comb (FuncPartCall 1) ("Prelude","_impl#abs#Prelude.Num#Prelude.Float") [])] (Let [(8,Comb (FuncPartCall 1) ("Prelude","_impl#signum#Prelude.Num#Prelude.Float") [])] (Let [(9,Comb (FuncPartCall 1) ("Prelude","_impl#fromInt#Prelude.Num#Prelude.Float") [])] (Let [(10,Comb ConsCall ("Prelude","_Dict#Num") [Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 9])] (Comb ConsCall ("Prelude","_Dict#Real") [Var 10,Var 2]))))))))))),Func ("Prelude","_inst#Prelude.Fractional#Prelude.Float") 0 Public (TCons ("Prelude","_Dict#Fractional") [TCons ("Prelude","Float") []]) (Rule [] (Let [(2,Comb (FuncPartCall 2) ("Prelude","_impl#+#Prelude.Num#Prelude.Float") [])] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#-#Prelude.Num#Prelude.Float") [])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#*#Prelude.Num#Prelude.Float") [])] (Let [(5,Comb (FuncPartCall 1) ("Prelude","_impl#negate#Prelude.Num#Prelude.Float") [])] (Let [(6,Comb (FuncPartCall 1) ("Prelude","_impl#abs#Prelude.Num#Prelude.Float") [])] (Let [(7,Comb (FuncPartCall 1) ("Prelude","_impl#signum#Prelude.Num#Prelude.Float") [])] (Let [(8,Comb (FuncPartCall 1) ("Prelude","_impl#fromInt#Prelude.Num#Prelude.Float") [])] (Let [(9,Comb ConsCall ("Prelude","_Dict#Num") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8])] (Let [(10,Comb (FuncPartCall 2) ("Prelude","_impl#/#Prelude.Fractional#Prelude.Float") [])] (Let [(11,Comb (FuncPartCall 1) ("Prelude","_impl#recip#Prelude.Fractional#Prelude.Float") [])] (Let [(12,Comb (FuncPartCall 1) ("Prelude","_impl#fromFloat#Prelude.Fractional#Prelude.Float") [])] (Comb ConsCall ("Prelude","_Dict#Fractional") [Var 9,Var 10,Var 11,Var 12]))))))))))))),Func ("Prelude","powaux#worker") 3 Private (TVar 0) (Rule [2,3,4] (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqInt") [Var 4,Lit (Intc 0)]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("","float") [Var 3]),Branch (Pattern ("Prelude","False") []) (Let [(5,Comb FuncCall ("Prelude","primModInt") [Var 4,Lit (Intc 2)])] (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqInt") [Var 5,Lit (Intc 1)]),Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 2) [Branch (Pattern ("","float") [6]) (Let [(7,Comb FuncCall ("Prelude","primDivInt") [Var 4,Lit (Intc 2)])] (Let [(8,Comb FuncCall ("Prelude","primMulFloat") [Var 3,Var 6])] (Let [(9,Comb FuncCall ("Prelude","primMulFloat") [Var 6,Var 6])] (Let [(10,Comb ConsCall ("","float") [Var 9])] (Comb FuncCall ("Prelude","powaux#worker") [Var 10,Var 8,Var 7])))))]),Branch (Pattern ("Prelude","False") []) (Let [(11,Comb FuncCall ("Prelude","primDivInt") [Var 4,Lit (Intc 2)])] (Let [(12,Comb FuncCall ("Prelude","square") [Var 2])] (Comb FuncCall ("Prelude","powaux#worker") [Var 12,Var 3,Var 11])))]))]))] []