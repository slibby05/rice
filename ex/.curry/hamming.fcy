Prog "hamming" ["Prelude"] [] [Func ("hamming","hamming") 2 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 1)],Comb FuncCall ("hamming","merge") [Var 2,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb FuncCall ("Prelude","*") [Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 2)]],Comb FuncCall ("hamming","hamming") [Var 1,Var 2]],Comb FuncCall ("hamming","merge") [Var 2,Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","*") [Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 3)]],Comb FuncCall ("hamming","hamming") [Var 1,Var 2]],Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","*") [Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 5)]],Comb FuncCall ("hamming","hamming") [Var 1,Var 2]]]]])),Func ("hamming","merge") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude",":") [4,5]) (Case Flex (Var 3) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 1]],Var 4],Var 6]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 4,Comb FuncCall ("hamming","merge") [Var 1,Var 5,Var 7]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","<") [Var 1],Var 4],Var 6]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 4,Comb FuncCall ("hamming","merge") [Var 1,Var 5,Comb ConsCall ("Prelude",":") [Var 6,Var 7]]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 6,Comb FuncCall ("hamming","merge") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Var 5],Var 7]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])])),Func ("hamming","main") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (Rule [] (Comb FuncCall ("Prelude","take") [Lit (Intc 8),Comb FuncCall ("hamming","hamming") [Comb FuncCall ("Prelude","_inst#Prelude.Num#Prelude.Int") [],Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Int") []]]))] []