Prog "RegExp" ["Prelude"] [Type ("RegExp","RE") Public [0] [Cons ("RegExp","Lit") 1 Public [TVar 0],Cons ("RegExp","Alt") 2 Public [TCons ("RegExp","RE") [TVar 0],TCons ("RegExp","RE") [TVar 0]],Cons ("RegExp","Conc") 2 Public [TCons ("RegExp","RE") [TVar 0],TCons ("RegExp","RE") [TVar 0]],Cons ("RegExp","Star") 1 Public [TCons ("RegExp","RE") [TVar 0]]],Type ("RegExp","Chr") Public [] [Cons ("RegExp","A") 0 Public [],Cons ("RegExp","B") 0 Public [],Cons ("RegExp","C") 0 Public [],Cons ("RegExp","D") 0 Public [],Cons ("RegExp","E") 0 Public []]] [Func ("RegExp","abc") 0 Public (TCons ("RegExp","RE") [TCons ("RegExp","Chr") []]) (Rule [] (Comb ConsCall ("RegExp","Alt") [Comb ConsCall ("RegExp","Alt") [Comb ConsCall ("RegExp","Lit") [Comb ConsCall ("RegExp","A") []],Comb ConsCall ("RegExp","Lit") [Comb ConsCall ("RegExp","B") []]],Comb ConsCall ("RegExp","Lit") [Comb ConsCall ("RegExp","C") []]])),Func ("RegExp","abstar") 0 Public (TCons ("RegExp","RE") [TCons ("RegExp","Chr") []]) (Rule [] (Comb ConsCall ("RegExp","Conc") [Comb ConsCall ("RegExp","Lit") [Comb ConsCall ("RegExp","A") []],Comb ConsCall ("RegExp","Star") [Comb ConsCall ("RegExp","Lit") [Comb ConsCall ("RegExp","B") []]]])),Func ("RegExp","abstarc") 0 Public (TCons ("RegExp","RE") [TCons ("RegExp","Chr") []]) (Rule [] (Comb ConsCall ("RegExp","Conc") [Comb FuncCall ("RegExp","abstar") [],Comb ConsCall ("RegExp","Lit") [Comb ConsCall ("RegExp","C") []]])),Func ("RegExp","plus") 1 Public (FuncType (TCons ("RegExp","RE") [TVar 0]) (TCons ("RegExp","RE") [TVar 0])) (Rule [1] (Comb ConsCall ("RegExp","Conc") [Var 1,Comb ConsCall ("RegExp","Star") [Var 1]])),Func ("RegExp","sem") 2 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TCons ("RegExp","RE") [TVar 1]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("RegExp","Lit") [3]) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 1)],Comb ConsCall ("Prelude","[]") []])]))] []