Prog "take3" ["Prelude"] [] [Func ("take3","take3") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [4,5]) (Case Flex (Var 5) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude",":") [6,7]) (Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []]]])])])])),Func ("take3","third") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","Int") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Var 6)])])])),Func ("take3","main") 0 Public (TCons ("Prelude","Int") []) (Rule [] (Comb FuncCall ("take3","third") [Comb ConsCall ("Prelude",":") [Lit (Intc 1),Comb ConsCall ("Prelude",":") [Lit (Intc 2),Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","?") [Lit (Intc 3),Lit (Intc 4)],Comb ConsCall ("Prelude",":") [Lit (Intc 4),Comb ConsCall ("Prelude",":") [Lit (Intc 5),Comb ConsCall ("Prelude","[]") []]]]]]]))] []