Prog "forjson" ["Prelude"] [Type ("forjson","AB") Public [] [Cons ("forjson","A") 0 Public [],Cons ("forjson","B") 1 Public [TCons ("Prelude","Int") []]]] [Func ("forjson","f") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("forjson","AB") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Or (Case Flex (Var 1) [Branch (LPattern (Intc 0)) (Lit (Intc 0))]) (Comb FuncCall ("forjson","g") [Var 2]))),Func ("forjson","g") 1 Public (FuncType (TCons ("forjson","AB") []) (TCons ("Prelude","Int") [])) (Rule [1] (Case Rigid (Var 1) [Branch (Pattern ("forjson","A") []) (Comb FuncCall ("Prelude","_impl#negate#Prelude.Num#Prelude.Int") [Lit (Intc 1)]),Branch (Pattern ("forjson","B") [2]) (Var 2)])),Func ("forjson","main") 0 Public (TCons ("Prelude","Int") []) (Rule [] (Comb FuncCall ("forjson","f") [Lit (Intc 1),Comb ConsCall ("forjson","A") []]))] []