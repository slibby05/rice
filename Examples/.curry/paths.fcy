Prog "paths" ["Prelude"] [Type ("paths","Nat") Public [] [Cons ("paths","Zero") 0 Public [],Cons ("paths","Succ") 1 Public [TCons ("paths","Nat") []]]] [Func ("paths","f") 3 Public (FuncType (TCons ("paths","Nat") []) (FuncType (TCons ("paths","Nat") []) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TCons ("paths","Nat") [],TVar 0])))) (Rule [1,2,3] (Case Flex (Var 1) [Branch (Pattern ("paths","Succ") [4]) (Case Flex (Var 2) [Branch (Pattern ("paths","Zero") []) (Comb ConsCall ("Prelude","(,)") [Var 4,Var 3])])])),Func ("paths","g") 2 Public (FuncType (TCons ("paths","Nat") []) (FuncType (TCons ("Prelude","(,)") [TCons ("paths","Nat") [],TCons ("paths","Nat") []]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("paths","Zero") []) (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Flex (Var 3) [Branch (Pattern ("paths","Succ") [5]) (Case Flex (Var 4) [Branch (Pattern ("paths","Succ") [6]) (Case Flex (Var 6) [Branch (Pattern ("paths","Succ") [7]) (Comb ConsCall ("Prelude","[]") [])])])])])])),Func ("paths","clen") 2 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TVar 0))) (Rule [1,2] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 0)]),Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","+") [Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 1)]],Comb FuncCall ("paths","clen") [Var 1,Var 4]])])),Func ("paths","notyet") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (TVar 0)) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","?") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 6)],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 7)],Comb ConsCall ("Prelude","[]") []]]]) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 22)]),Branch (Pattern ("Prelude",":") [2,3]) (Comb FuncCall ("Prelude","head") [Var 3])])),Func ("paths","h") 2 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Let [(3,Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 1)],Var 2])] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude",":") [4,5]) (Comb ConsCall ("Prelude","True") [])])))] []