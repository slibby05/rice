Prog "PreludeBase" [] [Type ("Prelude","()") Public [] [Cons ("Prelude","()") 0 Public []],Type ("Prelude","(,)") Public [0,1] [Cons ("Prelude","(,)") 2 Public [TVar 0,TVar 1]],Type ("Prelude","(,,)") Public [0,1,2] [Cons ("Prelude","(,,)") 3 Public [TVar 0,TVar 1,TVar 2]],Type ("Prelude","(,,,)") Public [0,1,2,3] [Cons ("Prelude","(,,,)") 4 Public [TVar 0,TVar 1,TVar 2,TVar 3]],Type ("Prelude","(,,,,)") Public [0,1,2,3,4] [Cons ("Prelude","(,,,,)") 5 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]],Type ("Prelude","(,,,,,)") Public [0,1,2,3,4,5] [Cons ("Prelude","(,,,,,)") 6 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5]],Type ("Prelude","(,,,,,,)") Public [0,1,2,3,4,5,6] [Cons ("Prelude","(,,,,,,)") 7 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6]],Type ("Prelude","(,,,,,,,)") Public [0,1,2,3,4,5,6,7] [Cons ("Prelude","(,,,,,,,)") 8 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6,TVar 7]],Type ("Prelude","(,,,,,,,,)") Public [0,1,2,3,4,5,6,7,8] [Cons ("Prelude","(,,,,,,,,)") 9 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6,TVar 7,TVar 8]],Type ("Prelude","(,,,,,,,,,)") Public [0,1,2,3,4,5,6,7,8,9] [Cons ("Prelude","(,,,,,,,,,)") 10 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6,TVar 7,TVar 8,TVar 9]],Type ("Prelude","(,,,,,,,,,,)") Public [0,1,2,3,4,5,6,7,8,9,10] [Cons ("Prelude","(,,,,,,,,,,)") 11 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6,TVar 7,TVar 8,TVar 9,TVar 10]],Type ("Prelude","(,,,,,,,,,,,)") Public [0,1,2,3,4,5,6,7,8,9,10,11] [Cons ("Prelude","(,,,,,,,,,,,)") 12 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6,TVar 7,TVar 8,TVar 9,TVar 10,TVar 11]],Type ("Prelude","(,,,,,,,,,,,,)") Public [0,1,2,3,4,5,6,7,8,9,10,11,12] [Cons ("Prelude","(,,,,,,,,,,,,)") 13 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6,TVar 7,TVar 8,TVar 9,TVar 10,TVar 11,TVar 12]],Type ("Prelude","(,,,,,,,,,,,,,)") Public [0,1,2,3,4,5,6,7,8,9,10,11,12,13] [Cons ("Prelude","(,,,,,,,,,,,,,)") 14 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6,TVar 7,TVar 8,TVar 9,TVar 10,TVar 11,TVar 12,TVar 13]],Type ("Prelude","(,,,,,,,,,,,,,,)") Public [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14] [Cons ("Prelude","(,,,,,,,,,,,,,,)") 15 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6,TVar 7,TVar 8,TVar 9,TVar 10,TVar 11,TVar 12,TVar 13,TVar 14]],Type ("Prelude","(->)") Public [0,1] [],Type ("Prelude","Bool") Public [] [Cons ("Prelude","False") 0 Public [],Cons ("Prelude","True") 0 Public []],Type ("Prelude","Char") Public [] [],TypeSyn ("Prelude","DET") Public [0] (TVar 0),Type ("Prelude","Either") Public [0,1] [Cons ("Prelude","Left") 1 Public [TVar 0],Cons ("Prelude","Right") 1 Public [TVar 1]],Type ("Prelude","Float") Public [] [],Type ("Prelude","IO") Public [0] [],Type ("Prelude","IOError") Public [] [Cons ("Prelude","IOError") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("Prelude","UserError") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("Prelude","FailError") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("Prelude","NondetError") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Type ("Prelude","Int") Public [] [],Type ("Prelude","Maybe") Public [0] [Cons ("Prelude","Nothing") 0 Public [],Cons ("Prelude","Just") 1 Public [TVar 0]],Type ("Prelude","Ordering") Public [] [Cons ("Prelude","LT") 0 Public [],Cons ("Prelude","EQ") 0 Public [],Cons ("Prelude","GT") 0 Public []],TypeSyn ("Prelude","ReadS") Public [0] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])),TypeSyn ("Prelude","ShowS") Public [] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])),TypeSyn ("Prelude","String") Public [] (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]),TypeSyn ("Prelude","Success") Public [] (TCons ("Prelude","Bool") []),Type ("Prelude","[]") Public [0] [Cons ("Prelude","[]") 0 Public [],Cons ("Prelude",":") 2 Public [TVar 0,TCons ("Prelude","[]") [TVar 0]]],Type ("Prelude","_Dict#Bounded") Public [0] [Cons ("Prelude","_Dict#Bounded") 2 Public [FuncType (TCons ("Prelude","()") []) (TVar 0),FuncType (TCons ("Prelude","()") []) (TVar 0)]],Type ("Prelude","_Dict#Enum") Public [0] [Cons ("Prelude","_Dict#Enum") 8 Public [FuncType (TVar 0) (TVar 0),FuncType (TVar 0) (TVar 0),FuncType (TCons ("Prelude","Int") []) (TVar 0),FuncType (TVar 0) (TCons ("Prelude","Int") []),FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])),FuncType (TVar 0) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])))]],Type ("Prelude","_Dict#Eq") Public [0] [Cons ("Prelude","_Dict#Eq") 2 Public [FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))]],Type ("Prelude","_Dict#Fractional") Public [0] [Cons ("Prelude","_Dict#Fractional") 4 Public [TCons ("Prelude","_Dict#Num") [TVar 0],FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (TVar 0),FuncType (TCons ("Prelude","Float") []) (TVar 0)]],Type ("Prelude","_Dict#Functor") Public [0] [Cons ("Prelude","_Dict#Functor") 1 Public [ForallType [1,2] (FuncType (FuncType (TVar 1) (TVar 2)) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TVar 2])))]],Type ("Prelude","_Dict#Integral") Public [0] [Cons ("Prelude","_Dict#Integral") 7 Public [TCons ("Prelude","_Dict#Real") [TVar 0],FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 0,TVar 0])),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 0,TVar 0]))]],Type ("Prelude","_Dict#Monad") Public [0] [Cons ("Prelude","_Dict#Monad") 4 Public [ForallType [1,2] (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TVar 2])) (TCons ("Prelude","Apply") [TVar 0,TVar 2]))),ForallType [1,2] (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 2]) (TCons ("Prelude","Apply") [TVar 0,TVar 2]))),ForallType [1] (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TVar 1])),ForallType [1] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Apply") [TVar 0,TVar 1]))]],Type ("Prelude","_Dict#Num") Public [0] [Cons ("Prelude","_Dict#Num") 7 Public [FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (TVar 0),FuncType (TVar 0) (TVar 0),FuncType (TVar 0) (TVar 0),FuncType (TCons ("Prelude","Int") []) (TVar 0)]],Type ("Prelude","_Dict#Ord") Public [0] [Cons ("Prelude","_Dict#Ord") 8 Public [TCons ("Prelude","_Dict#Eq") [TVar 0],FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Ordering") [])),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])),FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))]],Type ("Prelude","_Dict#Read") Public [0] [Cons ("Prelude","_Dict#Read") 2 Public [FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])),FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])]],Type ("Prelude","_Dict#Real") Public [0] [Cons ("Prelude","_Dict#Real") 2 Public [TCons ("Prelude","_Dict#Num") [TVar 0],TCons ("Prelude","_Dict#Ord") [TVar 0]]],Type ("Prelude","_Dict#Show") Public [0] [Cons ("Prelude","_Dict#Show") 3 Public [FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]),FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))),FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))]]] [Func ("Prelude","flip") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 2))) (FuncType (TVar 1) (FuncType (TVar 0) (TVar 2)))) (Rule [2,3,4] (Comb FuncCall ("Prelude","apply") [Var 2,Var 4,Var 3])),Func ("Prelude","$") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TVar 0) (TVar 1))) (Rule [2,3] (Comb FuncCall ("Prelude","apply") [Var 2,Var 3])),Func ("Prelude","failed") 0 Public (TVar 0) (External "Prelude.failed"),Func ("Prelude","&&") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [-2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])])),Func ("Prelude","||") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [-2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","False") []) (Var 3)])),Func ("Prelude","not") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") [])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])])),Func ("Prelude","otherwise") 0 Public (TCons ("Prelude","Bool") []) (Rule [] (Comb ConsCall ("Prelude","True") [])),Func ("Prelude","if_then_else") 3 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [-2,3,4] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Var 4)])),Func ("Prelude","solve") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") [])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("","EXEMPT") [])])),Func ("Prelude","&>") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TVar 0) (TVar 0))) (Rule [-2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("","EXEMPT") [])])),Func ("Prelude","=:=") 2 Public (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (External "Prelude.=:="),Func ("Prelude","fst") 1 Public (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TVar 0)) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Var 3)])),Func ("Prelude","snd") 1 Public (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TVar 1)) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Var 4)])),Func ("Prelude","head") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0)) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Var 3),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("","EXEMPT") [])])),Func ("Prelude","tail") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Var 4),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("","EXEMPT") [])])),Func ("Prelude","success") 0 Public (TCons ("Prelude","Bool") []) (Rule [] (Comb ConsCall ("Prelude","True") [])),Func ("Prelude","catch") 2 Public (FuncType (TCons ("Prelude","IO") [TVar 0]) (FuncType (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","IO") [TVar 0])) (TCons ("Prelude","IO") [TVar 0]))) (External "Prelude.catch"),Func ("Prelude","?") 2 Public (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))) (Rule [2,3] (Or (Var 2) (Var 3))),Func ("Prelude","unknown") 0 Public (TVar 0) (Rule [] (Free [2] (Var 2))),Func ("Prelude","PEVAL") 1 Public (FuncType (TVar 0) (TVar 0)) (Rule [-2] (Var 2)),Func ("Prelude","letrec") 2 Public (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (External "Prelude.letrec"),Func ("Prelude","=:<=") 2 Public (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (External "Prelude.=:<="),Func ("Prelude","=:<<=") 2 Public (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (External "Prelude.=:<<="),Func ("Prelude","&") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [-2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("","EXEMPT") [])])),Func ("Prelude","eqChar") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","char") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","char") [5]) (Comb FuncCall ("Prelude","primEqChar") [Var 4,Var 5])])])),Func ("Prelude","eqInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","int") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","int") [5]) (Comb FuncCall ("Prelude","primEqInt") [Var 4,Var 5])])])),Func ("Prelude","eqFloat") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","float") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","float") [5]) (Comb FuncCall ("Prelude","primEqFloat") [Var 4,Var 5])])])),Func ("Prelude","ltEqChar") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","char") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","char") [5]) (Comb FuncCall ("Prelude","primLtEqChar") [Var 4,Var 5])])])),Func ("Prelude","ltEqInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","int") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","int") [5]) (Comb FuncCall ("Prelude","primLtEqInt") [Var 4,Var 5])])])),Func ("Prelude","ltEqFloat") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [-2,-3] (Case Rigid (Var 2) [Branch (Pattern ("","float") [4]) (Case Rigid (Var 3) [Branch (Pattern ("","float") [5]) (Comb FuncCall ("Prelude","primLtEqFloat") [Var 4,Var 5])])])),Func ("Prelude","ord") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Int") [])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("","char") [3]) (Let [(4,Comb FuncCall ("Prelude","primOrd") [Var 3])] (Comb ConsCall ("","int") [Var 4]))])),Func ("Prelude","chr") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Char") [])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("","int") [3]) (Let [(4,Comb FuncCall ("Prelude","primChr") [Var 3])] (Comb ConsCall ("","char") [Var 4]))])),Func ("Prelude","cond") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TVar 0) (TVar 0))) (Rule [-2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("","EXEMPT") [])])),Func ("Prelude","build") 1 Public (FuncType (FuncType (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TVar 2))) (TVar 2)) (Rule [2] (Let [(3,Comb (ConsPartCall 2) ("Prelude",":") [])] (Let [(4,Comb ConsCall ("Prelude","[]") [])] (Comb FuncCall ("Prelude","apply") [Var 2,Var 3,Var 4])))),Func ("Prelude","mk_build") 5 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 2))) (FuncType (FuncType (TVar 3) (TVar 0)) (FuncType (FuncType (TVar 4) (TVar 1)) (FuncType (TVar 3) (FuncType (TVar 4) (TVar 2)))))) (Rule [2,3,4,5,6] (Let [(7,Comb FuncCall ("Prelude","apply") [Var 3,Var 5])] (Let [(8,Comb FuncCall ("Prelude","apply") [Var 4,Var 6])] (Comb FuncCall ("Prelude","apply") [Var 2,Var 7,Var 8])))),Func ("Prelude","prim_appendFile") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (External "Prelude.prim_appendFile"),Func ("Prelude","prim_writeFile") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (External "Prelude.prim_writeFile"),Func ("Prelude","prim_readFile") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (External "Prelude.prim_readFile"),Func ("Prelude","prim_putChar") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (External "Prelude.prim_putChar"),Func ("Prelude","putChar") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("","char") [3]) (Comb FuncCall ("Prelude","prim_putChar") [Var 3])])),Func ("Prelude","build_fold") 3 Public (FuncType (FuncType (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (FuncType (TVar 1) (FuncType (TVar 2) (TVar 2)))) (FuncType (FuncType (TCons ("Prelude","[]") [TVar 3]) (TVar 2)) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TVar 2)))) (Rule [2,3,4] (Let [(5,Comb (ConsPartCall 2) ("Prelude",":") [])] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 2,Var 5])] (Let [(7,Comb ConsCall ("Prelude","[]") [])] (Let [(8,Comb FuncCall ("Prelude","apply") [Var 3,Var 7])] (Comb FuncCall ("Prelude","foldr") [Var 6,Var 8,Var 4])))))),Func ("Prelude","prim_error") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TVar 0)) (External "Prelude.prim_error"),Func ("Prelude","$##") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TVar 0) (TVar 1))) (External "Prelude.$##"),Func ("Prelude","appendFile") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [2,3] (Let [(4,Comb (FuncPartCall 2) ("Prelude","prim_appendFile") [])] (Let [(5,Comb FuncCall ("Prelude","$##") [Var 4,Var 2])] (Comb FuncCall ("Prelude","apply") [Var 5,Var 3])))),Func ("Prelude","writeFile") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [2,3] (Let [(4,Comb (FuncPartCall 2) ("Prelude","prim_writeFile") [])] (Let [(5,Comb FuncCall ("Prelude","$##") [Var 4,Var 2])] (Comb FuncCall ("Prelude","apply") [Var 5,Var 3])))),Func ("Prelude","readFile") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [-2] (Let [(3,Comb (FuncPartCall 1) ("Prelude","prim_readFile") [])] (Comb FuncCall ("Prelude","$##") [Var 3,Var 2]))),Func ("Prelude","error") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TVar 0)) (Rule [-2] (Let [(3,Comb (FuncPartCall 1) ("Prelude","prim_error") [])] (Comb FuncCall ("Prelude","$##") [Var 3,Var 2]))),Func ("Prelude","$!!") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TVar 0) (TVar 1))) (External "Prelude.$!!"),Func ("Prelude","$!") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TVar 0) (TVar 1))) (External "Prelude.$!"),Func ("Prelude","ensureNotFree") 1 Public (FuncType (TVar 0) (TVar 0)) (External "Prelude.ensureNotFree"),Func ("Prelude","$#") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TVar 0) (TVar 1))) (Rule [-2,-3] (Let [(4,Comb FuncCall ("Prelude","ensureNotFree") [Var 3])] (Comb FuncCall ("Prelude","$!") [Var 2,Var 4]))),Func ("Prelude","ensureSpine") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (Rule [2] (Let [(3,Comb FuncCall ("Prelude","ensureNotFree") [Var 2])] (Comb FuncCall ("Prelude","ensureSpine.ensureList.20") [Var 3]))),Func ("Prelude","const") 2 Public (FuncType (TVar 0) (FuncType (TVar 1) (TVar 0))) (Rule [-2,3] (Var 2)),Func ("Prelude","asTypeOf") 2 Public (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))) (Rule [2,3] (Var 2)),Func ("Prelude","seq") 2 Public (FuncType (TVar 0) (FuncType (TVar 1) (TVar 1))) (Rule [-2,3] (Let [(4,Comb (FuncPartCall 1) ("Prelude","const") [Var 3])] (Comb FuncCall ("Prelude","$!") [Var 4,Var 2]))),Func ("Prelude","id") 1 Public (FuncType (TVar 0) (TVar 0)) (Rule [-2] (Var 2)),Func ("Prelude","groundNormalForm") 1 Public (FuncType (TVar 0) (TVar 0)) (Rule [-2] (Let [(3,Comb (FuncPartCall 1) ("Prelude","id") [])] (Comb FuncCall ("Prelude","$##") [Var 3,Var 2]))),Func ("Prelude","normalForm") 1 Public (FuncType (TVar 0) (TVar 0)) (Rule [-2] (Let [(3,Comb (FuncPartCall 1) ("Prelude","id") [])] (Comb FuncCall ("Prelude","$!!") [Var 3,Var 2]))),Func ("Prelude",".") 3 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (FuncType (TVar 2) (TVar 0)) (FuncType (TVar 2) (TVar 1)))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","apply") [Var 3,Var 4])] (Comb FuncCall ("Prelude","apply") [Var 2,Var 5]))),Func ("Prelude","foldr") 3 Private (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 1))) (FuncType (TVar 1) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 1)))) (Rule [2,3,-4] (Case Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Var 3),Branch (Pattern ("Prelude",":") [5,6]) (Let [(7,Comb FuncCall ("Prelude","foldr") [Var 2,Var 3,Var 6])] (Comb FuncCall ("Prelude","apply") [Var 2,Var 5,Var 7]))])),Func ("Prelude","ensureSpine.ensureList.20") 1 Private (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Let [(5,Comb FuncCall ("Prelude","ensureNotFree") [Var 4])] (Let [(6,Comb FuncCall ("Prelude","ensureSpine.ensureList.20") [Var 5])] (Comb ConsCall ("Prelude",":") [Var 3,Var 6])))])),Func ("Prelude","until") 3 Private (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (FuncType (TVar 0) (TVar 0)) (FuncType (TVar 0) (TVar 0)))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","apply") [Var 2,Var 4])] (Case Rigid (Var 5) [Branch (Pattern ("Prelude","True") []) (Var 4),Branch (Pattern ("Prelude","False") []) (Let [(6,Comb FuncCall ("Prelude","apply") [Var 3,Var 4])] (Comb FuncCall ("Prelude","until") [Var 2,Var 3,Var 6]))])))] []