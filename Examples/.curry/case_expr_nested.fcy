Prog "case_expr_nested" ["Prelude"] [Type ("case_expr_nested","T") Public [] [Cons ("case_expr_nested","A") 0 Public [],Cons ("case_expr_nested","B") 0 Public []]] [Func ("case_expr_nested","f") 2 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TCons ("case_expr_nested","T") []) (TVar 0))) (Rule [1,2] (Case Rigid (Comb FuncCall ("case_expr_nested","g") [Var 2]) [Branch (Pattern ("case_expr_nested","A") []) (Case Rigid (Comb FuncCall ("case_expr_nested","h") [Var 2]) [Branch (Pattern ("case_expr_nested","B") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 23)])]),Branch (Pattern ("case_expr_nested","B") []) (Case Rigid (Comb FuncCall ("case_expr_nested","j") [Var 2]) [Branch (Pattern ("case_expr_nested","A") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 45)])])])),Func ("case_expr_nested","g") 1 Public (FuncType (TVar 0) (TVar 0)) (Rule [1] (Var 1)),Func ("case_expr_nested","h") 1 Public (FuncType (TVar 0) (TVar 0)) (Rule [1] (Var 1)),Func ("case_expr_nested","j") 1 Public (FuncType (TVar 0) (TVar 0)) (Rule [1] (Var 1))] []