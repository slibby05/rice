module test
  ( BOOL (..), LIST (..), eqbool, eqlist, append, ifte, ift, last )
  where

import Prelude

data BOOL
  = TRUE
  | FALSE

data LIST a
  = NIL
  | CONS a (LIST a)

eqbool :: BOOL -> BOOL -> BOOL
eqbool v1 v2 = fcase v1 of
    TRUE -> fcase v2 of
        TRUE -> TRUE
        FALSE -> FALSE
    FALSE -> fcase v2 of
        TRUE -> FALSE
        FALSE -> TRUE

eqlist :: LIST BOOL -> LIST BOOL -> BOOL
eqlist v1 v2 = fcase v1 of
    NIL -> fcase v2 of
        NIL -> TRUE
        CONS v3 v4 -> FALSE
    CONS v5 v6 -> fcase v2 of
        NIL -> FALSE
        CONS v7 v8 -> ifte (eqbool v5 v7) (eqlist v6 v8) FALSE

append :: LIST a -> LIST a -> LIST a
append v1 v2 = fcase v1 of
    NIL -> v2
    CONS v3 v4 -> CONS v3 (append v4 v2)

ifte :: BOOL -> a -> a -> a
ifte v1 v2 v3 = fcase v1 of
    TRUE -> v2
    FALSE -> v3

ift :: BOOL -> a -> a
ift v1 v2 = fcase v1 of
    TRUE -> v2

last :: LIST BOOL -> BOOL
last v1 = let v2, v3 free in ift (eqlist v1 (append v3 (CONS v2 NIL))) v2