(Prog "PreludeTuple" ["PreludeBase","PreludeCompare","PreludeNum","PreludeList","PreludeString","PreludeRead","PreludeMonad"] [] [(Func ("Prelude","_inst#Prelude.Show#()") 0 Public (TCons ("Prelude","_Dict#Show") [(TCons ("Prelude","()") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [(Comb FuncCall ("Prelude","_impl#show#Prelude.Show#()") []),(Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#()") []),(Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#()") [])]))),(Func ("Prelude","_impl#show#Prelude.Show#()") 0 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [(Comb FuncCall ("Prelude","_inst#Prelude.Show#()") [])]))),(Func ("Prelude","_impl#showsPrec#Prelude.Show#()") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])))) (Rule [1,2] (Case Flex (Var 2) [(Branch (Pattern ("Prelude","()") []) (Comb (FuncPartCall 1) ("Prelude","showString") [(Comb ConsCall ("Prelude",":") [(Lit (Charc '(')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ')')),(Comb ConsCall ("Prelude","[]") [])])])]))]))),(Func ("Prelude","_impl#showList#Prelude.Show#()") 0 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","()") [])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [(Comb FuncCall ("Prelude","_inst#Prelude.Show#()") [])]))),(Func ("Prelude","_inst#Prelude.Show#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 1)]) (TCons ("Prelude","_Dict#Show") [(TCons ("Prelude","(,)") [(TVar 0),(TVar 1)])]))) (Rule [1,2] (Comb ConsCall ("Prelude","_Dict#Show") [(Comb FuncCall ("Prelude","_impl#show#Prelude.Show#(,)") [(Var 1),(Var 2)]),(Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#(,)") [(Var 1),(Var 2)]),(Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#(,)") [(Var 1),(Var 2)])]))),(Func ("Prelude","_impl#show#Prelude.Show#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 1)]) (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TVar 1)]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])))) (Rule [1,2] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [(Comb FuncCall ("Prelude","_inst#Prelude.Show#(,)") [(Var 1),(Var 2)])]))),(Func ("Prelude","_impl#showsPrec#Prelude.Show#(,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 1)]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TVar 1)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])))))) (Rule [1,2,3,4] (Case Flex (Var 4) [(Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","showTuple") [(Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","shows") [(Var 1)]),(Var 5)]),(Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","shows") [(Var 2)]),(Var 6)]),(Comb ConsCall ("Prelude","[]") [])])])]))]))),(Func ("Prelude","_impl#showList#Prelude.Show#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 1)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TVar 1)])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))))) (Rule [1,2] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [(Comb FuncCall ("Prelude","_inst#Prelude.Show#(,)") [(Var 1),(Var 2)])]))),(Func ("Prelude","_inst#Prelude.Show#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 2)]) (TCons ("Prelude","_Dict#Show") [(TCons ("Prelude","(,,)") [(TVar 0),(TVar 1),(TVar 2)])])))) (Rule [1,2,3] (Comb ConsCall ("Prelude","_Dict#Show") [(Comb FuncCall ("Prelude","_impl#show#Prelude.Show#(,,)") [(Var 1),(Var 2),(Var 3)]),(Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#(,,)") [(Var 1),(Var 2),(Var 3)]),(Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#(,,)") [(Var 1),(Var 2),(Var 3)])]))),(Func ("Prelude","_impl#show#Prelude.Show#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 2)]) (FuncType (TCons ("Prelude","(,,)") [(TVar 0),(TVar 1),(TVar 2)]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))))) (Rule [1,2,3] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [(Comb FuncCall ("Prelude","_inst#Prelude.Show#(,,)") [(Var 1),(Var 2),(Var 3)])]))),(Func ("Prelude","_impl#showsPrec#Prelude.Show#(,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 2)]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,,)") [(TVar 0),(TVar 1),(TVar 2)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))))))) (Rule [1,2,3,4,5] (Case Flex (Var 5) [(Branch (Pattern ("Prelude","(,,)") [6,7,8]) (Comb FuncCall ("Prelude","showTuple") [(Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","shows") [(Var 1)]),(Var 6)]),(Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","shows") [(Var 2)]),(Var 7)]),(Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","shows") [(Var 3)]),(Var 8)]),(Comb ConsCall ("Prelude","[]") [])])])])]))]))),(Func ("Prelude","_impl#showList#Prelude.Show#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 2)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,,)") [(TVar 0),(TVar 1),(TVar 2)])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])))))) (Rule [1,2,3] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [(Comb FuncCall ("Prelude","_inst#Prelude.Show#(,,)") [(Var 1),(Var 2),(Var 3)])]))),(Func ("Prelude","_inst#Prelude.Show#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 3)]) (TCons ("Prelude","_Dict#Show") [(TCons ("Prelude","(,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3)])]))))) (Rule [1,2,3,4] (Comb ConsCall ("Prelude","_Dict#Show") [(Comb FuncCall ("Prelude","_impl#show#Prelude.Show#(,,,)") [(Var 1),(Var 2),(Var 3),(Var 4)]),(Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#(,,,)") [(Var 1),(Var 2),(Var 3),(Var 4)]),(Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#(,,,)") [(Var 1),(Var 2),(Var 3),(Var 4)])]))),(Func ("Prelude","_impl#show#Prelude.Show#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 3)]) (FuncType (TCons ("Prelude","(,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3)]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])))))) (Rule [1,2,3,4] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [(Comb FuncCall ("Prelude","_inst#Prelude.Show#(,,,)") [(Var 1),(Var 2),(Var 3),(Var 4)])]))),(Func ("Prelude","_impl#showsPrec#Prelude.Show#(,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 3)]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])))))))) (Rule [1,2,3,4,5,6] (Case Flex (Var 6) [(Branch (Pattern ("Prelude","(,,,)") [7,8,9,10]) (Comb FuncCall ("Prelude","showTuple") [(Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","shows") [(Var 1)]),(Var 7)]),(Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","shows") [(Var 2)]),(Var 8)]),(Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","shows") [(Var 3)]),(Var 9)]),(Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","shows") [(Var 4)]),(Var 10)]),(Comb ConsCall ("Prelude","[]") [])])])])])]))]))),(Func ("Prelude","_impl#showList#Prelude.Show#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 3)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3)])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))))))) (Rule [1,2,3,4] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [(Comb FuncCall ("Prelude","_inst#Prelude.Show#(,,,)") [(Var 1),(Var 2),(Var 3),(Var 4)])]))),(Func ("Prelude","_inst#Prelude.Show#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 4)]) (TCons ("Prelude","_Dict#Show") [(TCons ("Prelude","(,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4)])])))))) (Rule [1,2,3,4,5] (Comb ConsCall ("Prelude","_Dict#Show") [(Comb FuncCall ("Prelude","_impl#show#Prelude.Show#(,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5)]),(Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5)]),(Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#(,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5)])]))),(Func ("Prelude","_impl#show#Prelude.Show#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 4)]) (FuncType (TCons ("Prelude","(,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4)]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))))))) (Rule [1,2,3,4,5] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [(Comb FuncCall ("Prelude","_inst#Prelude.Show#(,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5)])]))),(Func ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,)") 7 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 4)]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))))))))) (Rule [1,2,3,4,5,6,7] (Case Flex (Var 7) [(Branch (Pattern ("Prelude","(,,,,)") [8,9,10,11,12]) (Comb FuncCall ("Prelude","showTuple") [(Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","shows") [(Var 1)]),(Var 8)]),(Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","shows") [(Var 2)]),(Var 9)]),(Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","shows") [(Var 3)]),(Var 10)]),(Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","shows") [(Var 4)]),(Var 11)]),(Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","shows") [(Var 5)]),(Var 12)]),(Comb ConsCall ("Prelude","[]") [])])])])])])]))]))),(Func ("Prelude","_impl#showList#Prelude.Show#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 4)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4)])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])))))))) (Rule [1,2,3,4,5] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [(Comb FuncCall ("Prelude","_inst#Prelude.Show#(,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5)])]))),(Func ("Prelude","_inst#Prelude.Show#(,,,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 4)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 5)]) (TCons ("Prelude","_Dict#Show") [(TCons ("Prelude","(,,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4),(TVar 5)])]))))))) (Rule [1,2,3,4,5,6] (Comb ConsCall ("Prelude","_Dict#Show") [(Comb FuncCall ("Prelude","_impl#show#Prelude.Show#(,,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5),(Var 6)]),(Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5),(Var 6)]),(Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#(,,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5),(Var 6)])]))),(Func ("Prelude","_impl#show#Prelude.Show#(,,,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 4)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 5)]) (FuncType (TCons ("Prelude","(,,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4),(TVar 5)]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])))))))) (Rule [1,2,3,4,5,6] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [(Comb FuncCall ("Prelude","_inst#Prelude.Show#(,,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5),(Var 6)])]))),(Func ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,,)") 8 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 4)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 5)]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4),(TVar 5)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])))))))))) (Rule [1,2,3,4,5,6,7,8] (Case Flex (Var 8) [(Branch (Pattern ("Prelude","(,,,,,)") [9,10,11,12,13,14]) (Comb FuncCall ("Prelude","showTuple") [(Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","shows") [(Var 1)]),(Var 9)]),(Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","shows") [(Var 2)]),(Var 10)]),(Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","shows") [(Var 3)]),(Var 11)]),(Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","shows") [(Var 4)]),(Var 12)]),(Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","shows") [(Var 5)]),(Var 13)]),(Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","shows") [(Var 6)]),(Var 14)]),(Comb ConsCall ("Prelude","[]") [])])])])])])])]))]))),(Func ("Prelude","_impl#showList#Prelude.Show#(,,,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 4)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 5)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4),(TVar 5)])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))))))))) (Rule [1,2,3,4,5,6] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [(Comb FuncCall ("Prelude","_inst#Prelude.Show#(,,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5),(Var 6)])]))),(Func ("Prelude","_inst#Prelude.Show#(,,,,,,)") 7 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 4)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 5)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 6)]) (TCons ("Prelude","_Dict#Show") [(TCons ("Prelude","(,,,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4),(TVar 5),(TVar 6)])])))))))) (Rule [1,2,3,4,5,6,7] (Comb ConsCall ("Prelude","_Dict#Show") [(Comb FuncCall ("Prelude","_impl#show#Prelude.Show#(,,,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5),(Var 6),(Var 7)]),(Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5),(Var 6),(Var 7)]),(Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#(,,,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5),(Var 6),(Var 7)])]))),(Func ("Prelude","_impl#show#Prelude.Show#(,,,,,,)") 7 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 4)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 5)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 6)]) (FuncType (TCons ("Prelude","(,,,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4),(TVar 5),(TVar 6)]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))))))))) (Rule [1,2,3,4,5,6,7] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [(Comb FuncCall ("Prelude","_inst#Prelude.Show#(,,,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5),(Var 6),(Var 7)])]))),(Func ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,,,)") 9 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 4)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 5)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 6)]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,,,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4),(TVar 5),(TVar 6)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))))))))))) (Rule [1,2,3,4,5,6,7,8,9] (Case Flex (Var 9) [(Branch (Pattern ("Prelude","(,,,,,,)") [10,11,12,13,14,15,16]) (Comb FuncCall ("Prelude","showTuple") [(Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","shows") [(Var 1)]),(Var 10)]),(Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","shows") [(Var 2)]),(Var 11)]),(Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","shows") [(Var 3)]),(Var 12)]),(Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","shows") [(Var 4)]),(Var 13)]),(Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","shows") [(Var 5)]),(Var 14)]),(Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","shows") [(Var 6)]),(Var 15)]),(Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","shows") [(Var 7)]),(Var 16)]),(Comb ConsCall ("Prelude","[]") [])])])])])])])])]))]))),(Func ("Prelude","_impl#showList#Prelude.Show#(,,,,,,)") 7 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 4)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 5)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 6)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,,,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4),(TVar 5),(TVar 6)])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])))))))))) (Rule [1,2,3,4,5,6,7] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [(Comb FuncCall ("Prelude","_inst#Prelude.Show#(,,,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5),(Var 6),(Var 7)])]))),(Func ("Prelude","_inst#Prelude.Show#(,,,,,,,)") 8 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 4)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 5)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 6)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 7)]) (TCons ("Prelude","_Dict#Show") [(TCons ("Prelude","(,,,,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4),(TVar 5),(TVar 6),(TVar 7)])]))))))))) (Rule [1,2,3,4,5,6,7,8] (Comb ConsCall ("Prelude","_Dict#Show") [(Comb FuncCall ("Prelude","_impl#show#Prelude.Show#(,,,,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5),(Var 6),(Var 7),(Var 8)]),(Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5),(Var 6),(Var 7),(Var 8)]),(Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#(,,,,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5),(Var 6),(Var 7),(Var 8)])]))),(Func ("Prelude","_impl#show#Prelude.Show#(,,,,,,,)") 8 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 4)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 5)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 6)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 7)]) (FuncType (TCons ("Prelude","(,,,,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4),(TVar 5),(TVar 6),(TVar 7)]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])))))))))) (Rule [1,2,3,4,5,6,7,8] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [(Comb FuncCall ("Prelude","_inst#Prelude.Show#(,,,,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5),(Var 6),(Var 7),(Var 8)])]))),(Func ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,,,,)") 10 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 4)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 5)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 6)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 7)]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,,,,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4),(TVar 5),(TVar 6),(TVar 7)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])))))))))))) (Rule [1,2,3,4,5,6,7,8,9,10] (Case Flex (Var 10) [(Branch (Pattern ("Prelude","(,,,,,,,)") [11,12,13,14,15,16,17,18]) (Comb FuncCall ("Prelude","showTuple") [(Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","shows") [(Var 1)]),(Var 11)]),(Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","shows") [(Var 2)]),(Var 12)]),(Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","shows") [(Var 3)]),(Var 13)]),(Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","shows") [(Var 4)]),(Var 14)]),(Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","shows") [(Var 5)]),(Var 15)]),(Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","shows") [(Var 6)]),(Var 16)]),(Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","shows") [(Var 7)]),(Var 17)]),(Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","shows") [(Var 8)]),(Var 18)]),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])]))]))),(Func ("Prelude","_impl#showList#Prelude.Show#(,,,,,,,)") 8 Public (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 4)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 5)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 6)]) (FuncType (TCons ("Prelude","_Dict#Show") [(TVar 7)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,,,,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4),(TVar 5),(TVar 6),(TVar 7)])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))))))))))) (Rule [1,2,3,4,5,6,7,8] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [(Comb FuncCall ("Prelude","_inst#Prelude.Show#(,,,,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5),(Var 6),(Var 7),(Var 8)])]))),(Func ("Prelude","_inst#Prelude.Bounded#()") 0 Public (TCons ("Prelude","_Dict#Bounded") [(TCons ("Prelude","()") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Bounded") [(Comb (FuncPartCall 1) ("Prelude","_impl#minBound#Prelude.Bounded#()") []),(Comb (FuncPartCall 1) ("Prelude","_impl#maxBound#Prelude.Bounded#()") [])]))),(Func ("Prelude","_impl#minBound#Prelude.Bounded#()") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","()") [])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","()") []))]))),(Func ("Prelude","_impl#maxBound#Prelude.Bounded#()") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","()") [])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","()") []))]))),(Func ("Prelude","_inst#Prelude.Enum#()") 0 Public (TCons ("Prelude","_Dict#Enum") [(TCons ("Prelude","()") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Enum") [(Comb (FuncPartCall 1) ("Prelude","_impl#succ#Prelude.Enum#()") []),(Comb (FuncPartCall 1) ("Prelude","_impl#pred#Prelude.Enum#()") []),(Comb (FuncPartCall 1) ("Prelude","_impl#toEnum#Prelude.Enum#()") []),(Comb (FuncPartCall 1) ("Prelude","_impl#fromEnum#Prelude.Enum#()") []),(Comb (FuncPartCall 1) ("Prelude","_impl#enumFrom#Prelude.Enum#()") []),(Comb (FuncPartCall 2) ("Prelude","_impl#enumFromThen#Prelude.Enum#()") []),(Comb (FuncPartCall 2) ("Prelude","_impl#enumFromTo#Prelude.Enum#()") []),(Comb (FuncPartCall 3) ("Prelude","_impl#enumFromThenTo#Prelude.Enum#()") [])]))),(Func ("Prelude","_impl#succ#Prelude.Enum#()") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","()") [])) (Rule [1] (Comb FuncCall ("Prelude","error") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'P')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '.')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'E')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '.')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '(')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ')')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '.')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ':')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'b')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'g')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])]))),(Func ("Prelude","_impl#pred#Prelude.Enum#()") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","()") [])) (Rule [1] (Comb FuncCall ("Prelude","error") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'P')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '.')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'E')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '.')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '(')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ')')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '.')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'p')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ':')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'b')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'g')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])]))),(Func ("Prelude","_impl#toEnum#Prelude.Enum#()") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","()") [])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") [(Var 1),(Lit (Intc 0))]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","()") [])),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","error") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'P')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '.')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'E')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '.')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '(')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ')')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '.')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'E')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ':')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'b')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'g')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))),(Func ("Prelude","_impl#fromEnum#Prelude.Enum#()") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Int") [])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","()") []) (Lit (Intc 0)))]))),(Func ("Prelude","_impl#enumFrom#Prelude.Enum#()") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","[]") [(TCons ("Prelude","()") [])])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","()") []),(Comb ConsCall ("Prelude","[]") [])]))]))),(Func ("Prelude","_impl#enumFromThen#Prelude.Enum#()") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","[]") [(TCons ("Prelude","()") [])]))) (Rule [1,2] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","()") []) (Case Flex (Var 2) [(Branch (Pattern ("Prelude","()") []) (Let [(3,(Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","()") []),(Var 3)]))] (Var 3)))]))]))),(Func ("Prelude","_impl#enumFromTo#Prelude.Enum#()") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","[]") [(TCons ("Prelude","()") [])]))) (Rule [1,2] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","()") []) (Case Flex (Var 2) [(Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","()") []),(Comb ConsCall ("Prelude","[]") [])]))]))]))),(Func ("Prelude","_impl#enumFromThenTo#Prelude.Enum#()") 3 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","[]") [(TCons ("Prelude","()") [])])))) (Rule [1,2,3] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","()") []) (Case Flex (Var 2) [(Branch (Pattern ("Prelude","()") []) (Case Flex (Var 3) [(Branch (Pattern ("Prelude","()") []) (Let [(4,(Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","()") []),(Var 4)]))] (Var 4)))]))]))]))),(Func ("Prelude","_inst#Prelude.Bounded#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 1)]) (TCons ("Prelude","_Dict#Bounded") [(TCons ("Prelude","(,)") [(TVar 0),(TVar 1)])]))) (Rule [1,2] (Comb ConsCall ("Prelude","_Dict#Bounded") [(Comb (FuncPartCall 1) ("Prelude","_impl#minBound#Prelude.Bounded#(,)") [(Var 1),(Var 2)]),(Comb (FuncPartCall 1) ("Prelude","_impl#maxBound#Prelude.Bounded#(,)") [(Var 1),(Var 2)])]))),(Func ("Prelude","_impl#minBound#Prelude.Bounded#(,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 1)]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","(,)") [(TVar 0),(TVar 1)])))) (Rule [1,2,3] (Case Flex (Var 3) [(Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","(,)") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","minBound") [(Var 1)]),(Comb ConsCall ("Prelude","()") [])]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","minBound") [(Var 2)]),(Comb ConsCall ("Prelude","()") [])])]))]))),(Func ("Prelude","_impl#maxBound#Prelude.Bounded#(,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 1)]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","(,)") [(TVar 0),(TVar 1)])))) (Rule [1,2,3] (Case Flex (Var 3) [(Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","(,)") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","maxBound") [(Var 1)]),(Comb ConsCall ("Prelude","()") [])]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","maxBound") [(Var 2)]),(Comb ConsCall ("Prelude","()") [])])]))]))),(Func ("Prelude","_inst#Prelude.Bounded#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 2)]) (TCons ("Prelude","_Dict#Bounded") [(TCons ("Prelude","(,,)") [(TVar 0),(TVar 1),(TVar 2)])])))) (Rule [1,2,3] (Comb ConsCall ("Prelude","_Dict#Bounded") [(Comb (FuncPartCall 1) ("Prelude","_impl#minBound#Prelude.Bounded#(,,)") [(Var 1),(Var 2),(Var 3)]),(Comb (FuncPartCall 1) ("Prelude","_impl#maxBound#Prelude.Bounded#(,,)") [(Var 1),(Var 2),(Var 3)])]))),(Func ("Prelude","_impl#minBound#Prelude.Bounded#(,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 2)]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","(,,)") [(TVar 0),(TVar 1),(TVar 2)]))))) (Rule [1,2,3,4] (Case Flex (Var 4) [(Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","(,,)") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","minBound") [(Var 1)]),(Comb ConsCall ("Prelude","()") [])]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","minBound") [(Var 2)]),(Comb ConsCall ("Prelude","()") [])]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","minBound") [(Var 3)]),(Comb ConsCall ("Prelude","()") [])])]))]))),(Func ("Prelude","_impl#maxBound#Prelude.Bounded#(,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 2)]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","(,,)") [(TVar 0),(TVar 1),(TVar 2)]))))) (Rule [1,2,3,4] (Case Flex (Var 4) [(Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","(,,)") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","maxBound") [(Var 1)]),(Comb ConsCall ("Prelude","()") [])]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","maxBound") [(Var 2)]),(Comb ConsCall ("Prelude","()") [])]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","maxBound") [(Var 3)]),(Comb ConsCall ("Prelude","()") [])])]))]))),(Func ("Prelude","_inst#Prelude.Bounded#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 3)]) (TCons ("Prelude","_Dict#Bounded") [(TCons ("Prelude","(,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3)])]))))) (Rule [1,2,3,4] (Comb ConsCall ("Prelude","_Dict#Bounded") [(Comb (FuncPartCall 1) ("Prelude","_impl#minBound#Prelude.Bounded#(,,,)") [(Var 1),(Var 2),(Var 3),(Var 4)]),(Comb (FuncPartCall 1) ("Prelude","_impl#maxBound#Prelude.Bounded#(,,,)") [(Var 1),(Var 2),(Var 3),(Var 4)])]))),(Func ("Prelude","_impl#minBound#Prelude.Bounded#(,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 3)]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","(,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3)])))))) (Rule [1,2,3,4,5] (Case Flex (Var 5) [(Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","(,,,)") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","minBound") [(Var 1)]),(Comb ConsCall ("Prelude","()") [])]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","minBound") [(Var 2)]),(Comb ConsCall ("Prelude","()") [])]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","minBound") [(Var 3)]),(Comb ConsCall ("Prelude","()") [])]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","minBound") [(Var 4)]),(Comb ConsCall ("Prelude","()") [])])]))]))),(Func ("Prelude","_impl#maxBound#Prelude.Bounded#(,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 3)]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","(,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3)])))))) (Rule [1,2,3,4,5] (Case Flex (Var 5) [(Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","(,,,)") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","maxBound") [(Var 1)]),(Comb ConsCall ("Prelude","()") [])]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","maxBound") [(Var 2)]),(Comb ConsCall ("Prelude","()") [])]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","maxBound") [(Var 3)]),(Comb ConsCall ("Prelude","()") [])]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","maxBound") [(Var 4)]),(Comb ConsCall ("Prelude","()") [])])]))]))),(Func ("Prelude","_inst#Prelude.Bounded#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 4)]) (TCons ("Prelude","_Dict#Bounded") [(TCons ("Prelude","(,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4)])])))))) (Rule [1,2,3,4,5] (Comb ConsCall ("Prelude","_Dict#Bounded") [(Comb (FuncPartCall 1) ("Prelude","_impl#minBound#Prelude.Bounded#(,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5)]),(Comb (FuncPartCall 1) ("Prelude","_impl#maxBound#Prelude.Bounded#(,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5)])]))),(Func ("Prelude","_impl#minBound#Prelude.Bounded#(,,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 4)]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","(,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4)]))))))) (Rule [1,2,3,4,5,6] (Case Flex (Var 6) [(Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","(,,,,)") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","minBound") [(Var 1)]),(Comb ConsCall ("Prelude","()") [])]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","minBound") [(Var 2)]),(Comb ConsCall ("Prelude","()") [])]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","minBound") [(Var 3)]),(Comb ConsCall ("Prelude","()") [])]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","minBound") [(Var 4)]),(Comb ConsCall ("Prelude","()") [])]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","minBound") [(Var 5)]),(Comb ConsCall ("Prelude","()") [])])]))]))),(Func ("Prelude","_impl#maxBound#Prelude.Bounded#(,,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Bounded") [(TVar 4)]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","(,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4)]))))))) (Rule [1,2,3,4,5,6] (Case Flex (Var 6) [(Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","(,,,,)") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","maxBound") [(Var 1)]),(Comb ConsCall ("Prelude","()") [])]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","maxBound") [(Var 2)]),(Comb ConsCall ("Prelude","()") [])]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","maxBound") [(Var 3)]),(Comb ConsCall ("Prelude","()") [])]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","maxBound") [(Var 4)]),(Comb ConsCall ("Prelude","()") [])]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","maxBound") [(Var 5)]),(Comb ConsCall ("Prelude","()") [])])]))]))),(Func ("Prelude","curry") 3 Public (FuncType (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TVar 1)]) (TVar 2)) (FuncType (TVar 0) (FuncType (TVar 1) (TVar 2)))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [(Var 1),(Comb ConsCall ("Prelude","(,)") [(Var 2),(Var 3)])]))),(Func ("Prelude","uncurry") 2 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 2))) (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TVar 1)]) (TVar 2))) (Rule [1,2] (Case Flex (Var 2) [(Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Var 1),(Var 3)]),(Var 4)]))]))),(Func ("Prelude","zip3") 3 Public (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 1)]) (FuncType (TCons ("Prelude","[]") [(TVar 2)]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,,)") [(TVar 0),(TVar 1),(TVar 2)])])))) (Rule [1,2,3] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])),(Branch (Pattern ("Prelude",":") [4,5]) (Case Flex (Var 2) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])),(Branch (Pattern ("Prelude",":") [6,7]) (Case Flex (Var 3) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])),(Branch (Pattern ("Prelude",":") [8,9]) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,,)") [(Var 4),(Var 6),(Var 8)]),(Comb FuncCall ("Prelude","zip3") [(Var 5),(Var 7),(Var 9)])]))]))]))]))),(Func ("Prelude","zipWith3") 4 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (TVar 3)))) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 1)]) (FuncType (TCons ("Prelude","[]") [(TVar 2)]) (TCons ("Prelude","[]") [(TVar 3)]))))) (Rule [1,2,3,4] (Case Flex (Var 2) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])),(Branch (Pattern ("Prelude",":") [5,6]) (Case Flex (Var 3) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])),(Branch (Pattern ("Prelude",":") [7,8]) (Case Flex (Var 4) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])),(Branch (Pattern ("Prelude",":") [9,10]) (Comb ConsCall ("Prelude",":") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Var 1),(Var 5)]),(Var 7)]),(Var 9)]),(Comb FuncCall ("Prelude","zipWith3") [(Var 1),(Var 6),(Var 8),(Var 10)])]))]))]))]))),(Func ("Prelude","unzip") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TVar 1)])]) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TVar 1)])])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude","[]") []),(Comb ConsCall ("Prelude","[]") [])])),(Branch (Pattern ("Prelude",":") [2,3]) (Case Flex (Var 2) [(Branch (Pattern ("Prelude","(,)") [4,5]) (Let [(6,(Comb FuncCall ("Prelude","unzip") [(Var 3)])),(7,(Comb FuncCall ("Prelude","unzip._#selFP10#xs") [(Var 6)])),(8,(Comb FuncCall ("Prelude","unzip._#selFP11#ys") [(Var 6)]))] (Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude",":") [(Var 4),(Var 7)]),(Comb ConsCall ("Prelude",":") [(Var 5),(Var 8)])])))]))]))),(Func ("Prelude","unzip._#selFP10#xs") 1 Private (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TVar 1)])]) (TCons ("Prelude","[]") [(TVar 0)])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2))]))),(Func ("Prelude","unzip._#selFP11#ys") 1 Private (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TVar 1)])]) (TCons ("Prelude","[]") [(TVar 1)])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3))]))),(Func ("Prelude","unzip3") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,,)") [(TVar 0),(TVar 1),(TVar 2)])]) (TCons ("Prelude","(,,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TVar 1)]),(TCons ("Prelude","[]") [(TVar 2)])])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,,)") [(Comb ConsCall ("Prelude","[]") []),(Comb ConsCall ("Prelude","[]") []),(Comb ConsCall ("Prelude","[]") [])])),(Branch (Pattern ("Prelude",":") [2,3]) (Case Flex (Var 2) [(Branch (Pattern ("Prelude","(,,)") [4,5,6]) (Let [(7,(Comb FuncCall ("Prelude","unzip3") [(Var 3)])),(8,(Comb FuncCall ("Prelude","unzip3._#selFP13#xs") [(Var 7)])),(9,(Comb FuncCall ("Prelude","unzip3._#selFP14#ys") [(Var 7)])),(10,(Comb FuncCall ("Prelude","unzip3._#selFP15#zs") [(Var 7)]))] (Comb ConsCall ("Prelude","(,,)") [(Comb ConsCall ("Prelude",":") [(Var 4),(Var 8)]),(Comb ConsCall ("Prelude",":") [(Var 5),(Var 9)]),(Comb ConsCall ("Prelude",":") [(Var 6),(Var 10)])])))]))]))),(Func ("Prelude","unzip3._#selFP13#xs") 1 Private (FuncType (TCons ("Prelude","(,,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TVar 1)]),(TCons ("Prelude","[]") [(TVar 2)])]) (TCons ("Prelude","[]") [(TVar 0)])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 2))]))),(Func ("Prelude","unzip3._#selFP14#ys") 1 Private (FuncType (TCons ("Prelude","(,,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TVar 1)]),(TCons ("Prelude","[]") [(TVar 2)])]) (TCons ("Prelude","[]") [(TVar 1)])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 3))]))),(Func ("Prelude","unzip3._#selFP15#zs") 1 Private (FuncType (TCons ("Prelude","(,,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TVar 1)]),(TCons ("Prelude","[]") [(TVar 2)])]) (TCons ("Prelude","[]") [(TVar 2)])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 4))]))),(Func ("Prelude","showTuple") 1 Private (FuncType (TCons ("Prelude","[]") [(FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))) (Rule [1] (Comb FuncCall ("Prelude",".") [(Comb (FuncPartCall 1) ("Prelude","showChar") [(Lit (Charc '('))]),(Comb FuncCall ("Prelude",".") [(Comb FuncCall ("Prelude","foldr1") [(Comb (FuncPartCall 2) ("Prelude","showTuple._#lambda297") []),(Var 1)]),(Comb (FuncPartCall 1) ("Prelude","showChar") [(Lit (Charc ')'))])])]))),(Func ("Prelude","showTuple._#lambda297") 2 Private (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])) (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])))) (Rule [1,2] (Comb FuncCall ("Prelude",".") [(Var 1),(Comb FuncCall ("Prelude",".") [(Comb (FuncPartCall 1) ("Prelude","showChar") [(Lit (Charc ','))]),(Var 2)])]))),(Func ("Prelude","_inst#Prelude.Eq#()") 0 Public (TCons ("Prelude","_Dict#Eq") [(TCons ("Prelude","()") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [(Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#()") []),(Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#()") [])]))),(Func ("Prelude","_impl#==#Prelude.Eq#()") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","()") []) (Case Flex (Var 2) [(Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","True") []))]))]))),(Func ("Prelude","_impl#/=#Prelude.Eq#()") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","()") []) (Case Flex (Var 2) [(Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","False") []))]))]))),(Func ("Prelude","_inst#Prelude.Eq#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 1)]) (TCons ("Prelude","_Dict#Eq") [(TCons ("Prelude","(,)") [(TVar 0),(TVar 1)])]))) (Rule [1,2] (Comb ConsCall ("Prelude","_Dict#Eq") [(Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#(,)") [(Var 1),(Var 2)]),(Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#(,)") [(Var 1),(Var 2)])]))),(Func ("Prelude","_impl#==#Prelude.Eq#(,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 1)]) (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TVar 1)]) (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TVar 1)]) (TCons ("Prelude","Bool") []))))) (Rule [1,2,3,4] (Case Flex (Var 3) [(Branch (Pattern ("Prelude","(,)") [5,6]) (Case Flex (Var 4) [(Branch (Pattern ("Prelude","(,)") [7,8]) (Comb FuncCall ("Prelude","&&") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","==") [(Var 1)]),(Var 5)]),(Var 7)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","==") [(Var 2)]),(Var 6)]),(Var 8)])]))]))]))),(Func ("Prelude","_impl#/=#Prelude.Eq#(,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 1)]) (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TVar 1)]) (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TVar 1)]) (TCons ("Prelude","Bool") []))))) (Rule [1,2,3,4] (Case Flex (Var 3) [(Branch (Pattern ("Prelude","(,)") [5,6]) (Case Flex (Var 4) [(Branch (Pattern ("Prelude","(,)") [7,8]) (Comb FuncCall ("Prelude","||") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","/=") [(Var 1)]),(Var 5)]),(Var 7)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","/=") [(Var 2)]),(Var 6)]),(Var 8)])]))]))]))),(Func ("Prelude","_inst#Prelude.Eq#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 2)]) (TCons ("Prelude","_Dict#Eq") [(TCons ("Prelude","(,,)") [(TVar 0),(TVar 1),(TVar 2)])])))) (Rule [1,2,3] (Comb ConsCall ("Prelude","_Dict#Eq") [(Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#(,,)") [(Var 1),(Var 2),(Var 3)]),(Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#(,,)") [(Var 1),(Var 2),(Var 3)])]))),(Func ("Prelude","_impl#==#Prelude.Eq#(,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 2)]) (FuncType (TCons ("Prelude","(,,)") [(TVar 0),(TVar 1),(TVar 2)]) (FuncType (TCons ("Prelude","(,,)") [(TVar 0),(TVar 1),(TVar 2)]) (TCons ("Prelude","Bool") [])))))) (Rule [1,2,3,4,5] (Case Flex (Var 4) [(Branch (Pattern ("Prelude","(,,)") [6,7,8]) (Case Flex (Var 5) [(Branch (Pattern ("Prelude","(,,)") [9,10,11]) (Comb FuncCall ("Prelude","&&") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","==") [(Var 1)]),(Var 6)]),(Var 9)]),(Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#(,)") [(Var 2),(Var 3),(Comb ConsCall ("Prelude","(,)") [(Var 7),(Var 8)]),(Comb ConsCall ("Prelude","(,)") [(Var 10),(Var 11)])])]))]))]))),(Func ("Prelude","_impl#/=#Prelude.Eq#(,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 2)]) (FuncType (TCons ("Prelude","(,,)") [(TVar 0),(TVar 1),(TVar 2)]) (FuncType (TCons ("Prelude","(,,)") [(TVar 0),(TVar 1),(TVar 2)]) (TCons ("Prelude","Bool") [])))))) (Rule [1,2,3,4,5] (Case Flex (Var 4) [(Branch (Pattern ("Prelude","(,,)") [6,7,8]) (Case Flex (Var 5) [(Branch (Pattern ("Prelude","(,,)") [9,10,11]) (Comb FuncCall ("Prelude","||") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","/=") [(Var 1)]),(Var 6)]),(Var 9)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#(,)") [(Var 2),(Var 3)]),(Comb ConsCall ("Prelude","(,)") [(Var 7),(Var 8)])]),(Comb ConsCall ("Prelude","(,)") [(Var 10),(Var 11)])])]))]))]))),(Func ("Prelude","_inst#Prelude.Eq#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 3)]) (TCons ("Prelude","_Dict#Eq") [(TCons ("Prelude","(,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3)])]))))) (Rule [1,2,3,4] (Comb ConsCall ("Prelude","_Dict#Eq") [(Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#(,,,)") [(Var 1),(Var 2),(Var 3),(Var 4)]),(Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#(,,,)") [(Var 1),(Var 2),(Var 3),(Var 4)])]))),(Func ("Prelude","_impl#==#Prelude.Eq#(,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 3)]) (FuncType (TCons ("Prelude","(,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3)]) (FuncType (TCons ("Prelude","(,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3)]) (TCons ("Prelude","Bool") []))))))) (Rule [1,2,3,4,5,6] (Case Flex (Var 5) [(Branch (Pattern ("Prelude","(,,,)") [7,8,9,10]) (Case Flex (Var 6) [(Branch (Pattern ("Prelude","(,,,)") [11,12,13,14]) (Comb FuncCall ("Prelude","&&") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","==") [(Var 1)]),(Var 7)]),(Var 11)]),(Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#(,,)") [(Var 2),(Var 3),(Var 4),(Comb ConsCall ("Prelude","(,,)") [(Var 8),(Var 9),(Var 10)]),(Comb ConsCall ("Prelude","(,,)") [(Var 12),(Var 13),(Var 14)])])]))]))]))),(Func ("Prelude","_impl#/=#Prelude.Eq#(,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 3)]) (FuncType (TCons ("Prelude","(,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3)]) (FuncType (TCons ("Prelude","(,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3)]) (TCons ("Prelude","Bool") []))))))) (Rule [1,2,3,4,5,6] (Case Flex (Var 5) [(Branch (Pattern ("Prelude","(,,,)") [7,8,9,10]) (Case Flex (Var 6) [(Branch (Pattern ("Prelude","(,,,)") [11,12,13,14]) (Comb FuncCall ("Prelude","||") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","/=") [(Var 1)]),(Var 7)]),(Var 11)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#(,,)") [(Var 2),(Var 3),(Var 4)]),(Comb ConsCall ("Prelude","(,,)") [(Var 8),(Var 9),(Var 10)])]),(Comb ConsCall ("Prelude","(,,)") [(Var 12),(Var 13),(Var 14)])])]))]))]))),(Func ("Prelude","_inst#Prelude.Eq#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 4)]) (TCons ("Prelude","_Dict#Eq") [(TCons ("Prelude","(,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4)])])))))) (Rule [1,2,3,4,5] (Comb ConsCall ("Prelude","_Dict#Eq") [(Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#(,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5)]),(Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#(,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5)])]))),(Func ("Prelude","_impl#==#Prelude.Eq#(,,,,)") 7 Public (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 4)]) (FuncType (TCons ("Prelude","(,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4)]) (FuncType (TCons ("Prelude","(,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4)]) (TCons ("Prelude","Bool") [])))))))) (Rule [1,2,3,4,5,6,7] (Case Flex (Var 6) [(Branch (Pattern ("Prelude","(,,,,)") [8,9,10,11,12]) (Case Flex (Var 7) [(Branch (Pattern ("Prelude","(,,,,)") [13,14,15,16,17]) (Comb FuncCall ("Prelude","&&") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","==") [(Var 1)]),(Var 8)]),(Var 13)]),(Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#(,,,)") [(Var 2),(Var 3),(Var 4),(Var 5),(Comb ConsCall ("Prelude","(,,,)") [(Var 9),(Var 10),(Var 11),(Var 12)]),(Comb ConsCall ("Prelude","(,,,)") [(Var 14),(Var 15),(Var 16),(Var 17)])])]))]))]))),(Func ("Prelude","_impl#/=#Prelude.Eq#(,,,,)") 7 Public (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 4)]) (FuncType (TCons ("Prelude","(,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4)]) (FuncType (TCons ("Prelude","(,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4)]) (TCons ("Prelude","Bool") [])))))))) (Rule [1,2,3,4,5,6,7] (Case Flex (Var 6) [(Branch (Pattern ("Prelude","(,,,,)") [8,9,10,11,12]) (Case Flex (Var 7) [(Branch (Pattern ("Prelude","(,,,,)") [13,14,15,16,17]) (Comb FuncCall ("Prelude","||") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","/=") [(Var 1)]),(Var 8)]),(Var 13)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#(,,,)") [(Var 2),(Var 3),(Var 4),(Var 5)]),(Comb ConsCall ("Prelude","(,,,)") [(Var 9),(Var 10),(Var 11),(Var 12)])]),(Comb ConsCall ("Prelude","(,,,)") [(Var 14),(Var 15),(Var 16),(Var 17)])])]))]))]))),(Func ("Prelude","_inst#Prelude.Eq#(,,,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 4)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 5)]) (TCons ("Prelude","_Dict#Eq") [(TCons ("Prelude","(,,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4),(TVar 5)])]))))))) (Rule [1,2,3,4,5,6] (Comb ConsCall ("Prelude","_Dict#Eq") [(Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#(,,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5),(Var 6)]),(Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#(,,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5),(Var 6)])]))),(Func ("Prelude","_impl#==#Prelude.Eq#(,,,,,)") 8 Public (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 4)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 5)]) (FuncType (TCons ("Prelude","(,,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4),(TVar 5)]) (FuncType (TCons ("Prelude","(,,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4),(TVar 5)]) (TCons ("Prelude","Bool") []))))))))) (Rule [1,2,3,4,5,6,7,8] (Case Flex (Var 7) [(Branch (Pattern ("Prelude","(,,,,,)") [9,10,11,12,13,14]) (Case Flex (Var 8) [(Branch (Pattern ("Prelude","(,,,,,)") [15,16,17,18,19,20]) (Comb FuncCall ("Prelude","&&") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","==") [(Var 1)]),(Var 9)]),(Var 15)]),(Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#(,,,,)") [(Var 2),(Var 3),(Var 4),(Var 5),(Var 6),(Comb ConsCall ("Prelude","(,,,,)") [(Var 10),(Var 11),(Var 12),(Var 13),(Var 14)]),(Comb ConsCall ("Prelude","(,,,,)") [(Var 16),(Var 17),(Var 18),(Var 19),(Var 20)])])]))]))]))),(Func ("Prelude","_impl#/=#Prelude.Eq#(,,,,,)") 8 Public (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 4)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 5)]) (FuncType (TCons ("Prelude","(,,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4),(TVar 5)]) (FuncType (TCons ("Prelude","(,,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4),(TVar 5)]) (TCons ("Prelude","Bool") []))))))))) (Rule [1,2,3,4,5,6,7,8] (Case Flex (Var 7) [(Branch (Pattern ("Prelude","(,,,,,)") [9,10,11,12,13,14]) (Case Flex (Var 8) [(Branch (Pattern ("Prelude","(,,,,,)") [15,16,17,18,19,20]) (Comb FuncCall ("Prelude","||") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","/=") [(Var 1)]),(Var 9)]),(Var 15)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#(,,,,)") [(Var 2),(Var 3),(Var 4),(Var 5),(Var 6)]),(Comb ConsCall ("Prelude","(,,,,)") [(Var 10),(Var 11),(Var 12),(Var 13),(Var 14)])]),(Comb ConsCall ("Prelude","(,,,,)") [(Var 16),(Var 17),(Var 18),(Var 19),(Var 20)])])]))]))]))),(Func ("Prelude","_inst#Prelude.Eq#(,,,,,,)") 7 Public (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 4)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 5)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 6)]) (TCons ("Prelude","_Dict#Eq") [(TCons ("Prelude","(,,,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4),(TVar 5),(TVar 6)])])))))))) (Rule [1,2,3,4,5,6,7] (Comb ConsCall ("Prelude","_Dict#Eq") [(Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#(,,,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5),(Var 6),(Var 7)]),(Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#(,,,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5),(Var 6),(Var 7)])]))),(Func ("Prelude","_impl#==#Prelude.Eq#(,,,,,,)") 9 Public (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 4)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 5)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 6)]) (FuncType (TCons ("Prelude","(,,,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4),(TVar 6),(TVar 5)]) (FuncType (TCons ("Prelude","(,,,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4),(TVar 6),(TVar 5)]) (TCons ("Prelude","Bool") [])))))))))) (Rule [1,2,3,4,5,6,7,8,9] (Case Flex (Var 8) [(Branch (Pattern ("Prelude","(,,,,,,)") [10,11,12,13,14,15,16]) (Case Flex (Var 9) [(Branch (Pattern ("Prelude","(,,,,,,)") [17,18,19,20,21,22,23]) (Comb FuncCall ("Prelude","&&") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","==") [(Var 1)]),(Var 10)]),(Var 17)]),(Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#(,,,,,)") [(Var 2),(Var 3),(Var 4),(Var 5),(Var 7),(Var 6),(Comb ConsCall ("Prelude","(,,,,,)") [(Var 11),(Var 12),(Var 13),(Var 14),(Var 15),(Var 16)]),(Comb ConsCall ("Prelude","(,,,,,)") [(Var 18),(Var 19),(Var 20),(Var 21),(Var 22),(Var 23)])])]))]))]))),(Func ("Prelude","_impl#/=#Prelude.Eq#(,,,,,,)") 9 Public (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 4)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 5)]) (FuncType (TCons ("Prelude","_Dict#Eq") [(TVar 6)]) (FuncType (TCons ("Prelude","(,,,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4),(TVar 6),(TVar 5)]) (FuncType (TCons ("Prelude","(,,,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4),(TVar 6),(TVar 5)]) (TCons ("Prelude","Bool") [])))))))))) (Rule [1,2,3,4,5,6,7,8,9] (Case Flex (Var 8) [(Branch (Pattern ("Prelude","(,,,,,,)") [10,11,12,13,14,15,16]) (Case Flex (Var 9) [(Branch (Pattern ("Prelude","(,,,,,,)") [17,18,19,20,21,22,23]) (Comb FuncCall ("Prelude","||") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","/=") [(Var 1)]),(Var 10)]),(Var 17)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#(,,,,,)") [(Var 2),(Var 3),(Var 4),(Var 5),(Var 7),(Var 6)]),(Comb ConsCall ("Prelude","(,,,,,)") [(Var 11),(Var 12),(Var 13),(Var 14),(Var 15),(Var 16)])]),(Comb ConsCall ("Prelude","(,,,,,)") [(Var 18),(Var 19),(Var 20),(Var 21),(Var 22),(Var 23)])])]))]))]))),(Func ("Prelude","_inst#Prelude.Ord#()") 0 Public (TCons ("Prelude","_Dict#Ord") [(TCons ("Prelude","()") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Ord") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#()") []),(Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#()") []),(Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#()") []),(Comb (FuncPartCall 2) ("Prelude","_impl#>=#Prelude.Ord#()") []),(Comb (FuncPartCall 2) ("Prelude","_impl#<#Prelude.Ord#()") []),(Comb (FuncPartCall 2) ("Prelude","_impl#>#Prelude.Ord#()") []),(Comb (FuncPartCall 2) ("Prelude","_impl#min#Prelude.Ord#()") []),(Comb (FuncPartCall 2) ("Prelude","_impl#max#Prelude.Ord#()") [])]))),(Func ("Prelude","_impl#compare#Prelude.Ord#()") 0 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#compare#Prelude.Ord") [(Comb FuncCall ("Prelude","_inst#Prelude.Ord#()") [])]))),(Func ("Prelude","_impl#<=#Prelude.Ord#()") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb ConsCall ("Prelude","True") []))),(Func ("Prelude","_impl#>=#Prelude.Ord#()") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb ConsCall ("Prelude","True") []))),(Func ("Prelude","_impl#<#Prelude.Ord#()") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb ConsCall ("Prelude","False") []))),(Func ("Prelude","_impl#>#Prelude.Ord#()") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb ConsCall ("Prelude","False") []))),(Func ("Prelude","_impl#min#Prelude.Ord#()") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","()") []))) (Rule [1,2] (Comb ConsCall ("Prelude","()") []))),(Func ("Prelude","_impl#max#Prelude.Ord#()") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","()") []))) (Rule [1,2] (Comb ConsCall ("Prelude","()") []))),(Func ("Prelude","_inst#Prelude.Ord#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (TCons ("Prelude","_Dict#Ord") [(TCons ("Prelude","(,)") [(TVar 0),(TVar 1)])]))) (Rule [1,2] (Comb ConsCall ("Prelude","_Dict#Ord") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#(,)") [(Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [(Var 1)]),(Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [(Var 2)])]),(Comb (FuncPartCall 2) ("Prelude","_impl#compare#Prelude.Ord#(,)") [(Var 1),(Var 2)]),(Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#(,)") [(Var 1),(Var 2)]),(Comb (FuncPartCall 2) ("Prelude","_impl#>=#Prelude.Ord#(,)") [(Var 1),(Var 2)]),(Comb (FuncPartCall 2) ("Prelude","_impl#<#Prelude.Ord#(,)") [(Var 1),(Var 2)]),(Comb (FuncPartCall 2) ("Prelude","_impl#>#Prelude.Ord#(,)") [(Var 1),(Var 2)]),(Comb (FuncPartCall 2) ("Prelude","_impl#min#Prelude.Ord#(,)") [(Var 1),(Var 2)]),(Comb (FuncPartCall 2) ("Prelude","_impl#max#Prelude.Ord#(,)") [(Var 1),(Var 2)])]))),(Func ("Prelude","_impl#compare#Prelude.Ord#(,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TVar 1)]) (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TVar 1)]) (TCons ("Prelude","Ordering") []))))) (Rule [1,2,3,4] (Case Flex (Var 3) [(Branch (Pattern ("Prelude","(,)") [5,6]) (Case Flex (Var 4) [(Branch (Pattern ("Prelude","(,)") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","compare") [(Var 1)]),(Var 5)]),(Var 7)]) [(Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","LT") [])),(Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","GT") [])),(Branch (Pattern ("Prelude","EQ") []) (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","compare") [(Var 2)]),(Var 6)]),(Var 8)]))]))]))]))),(Func ("Prelude","_impl#<=#Prelude.Ord#(,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TVar 1)]) (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TVar 1)]) (TCons ("Prelude","Bool") []))))) (Rule [1,2,3,4] (Case Rigid (Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,)") [(Var 1),(Var 2),(Var 3),(Var 4)]) [(Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") [])),(Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") [])),(Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") []))]))),(Func ("Prelude","_impl#>=#Prelude.Ord#(,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TVar 1)]) (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TVar 1)]) (TCons ("Prelude","Bool") []))))) (Rule [1,2,3,4] (Case Rigid (Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,)") [(Var 1),(Var 2),(Var 3),(Var 4)]) [(Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") [])),(Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") []))]))),(Func ("Prelude","_impl#<#Prelude.Ord#(,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TVar 1)]) (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TVar 1)]) (TCons ("Prelude","Bool") []))))) (Rule [1,2,3,4] (Case Rigid (Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,)") [(Var 1),(Var 2),(Var 3),(Var 4)]) [(Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") [])),(Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") []))]))),(Func ("Prelude","_impl#>#Prelude.Ord#(,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TVar 1)]) (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TVar 1)]) (TCons ("Prelude","Bool") []))))) (Rule [1,2,3,4] (Case Rigid (Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,)") [(Var 1),(Var 2),(Var 3),(Var 4)]) [(Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") []))]))),(Func ("Prelude","_impl#min#Prelude.Ord#(,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TVar 1)]) (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TVar 1)]) (TCons ("Prelude","(,)") [(TVar 0),(TVar 1)]))))) (Rule [1,2,3,4] (Case Rigid (Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#(,)") [(Var 1),(Var 2),(Var 3),(Var 4)]) [(Branch (Pattern ("Prelude","True") []) (Var 3)),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Var 4)),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))),(Func ("Prelude","_impl#max#Prelude.Ord#(,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TVar 1)]) (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TVar 1)]) (TCons ("Prelude","(,)") [(TVar 0),(TVar 1)]))))) (Rule [1,2,3,4] (Case Rigid (Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#(,)") [(Var 1),(Var 2),(Var 3),(Var 4)]) [(Branch (Pattern ("Prelude","True") []) (Var 3)),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Var 4)),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))),(Func ("Prelude","_inst#Prelude.Ord#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 2)]) (TCons ("Prelude","_Dict#Ord") [(TCons ("Prelude","(,,)") [(TVar 0),(TVar 1),(TVar 2)])])))) (Rule [1,2,3] (Comb ConsCall ("Prelude","_Dict#Ord") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#(,,)") [(Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [(Var 1)]),(Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [(Var 2)]),(Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [(Var 3)])]),(Comb (FuncPartCall 2) ("Prelude","_impl#compare#Prelude.Ord#(,,)") [(Var 1),(Var 2),(Var 3)]),(Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#(,,)") [(Var 1),(Var 2),(Var 3)]),(Comb (FuncPartCall 2) ("Prelude","_impl#>=#Prelude.Ord#(,,)") [(Var 1),(Var 2),(Var 3)]),(Comb (FuncPartCall 2) ("Prelude","_impl#<#Prelude.Ord#(,,)") [(Var 1),(Var 2),(Var 3)]),(Comb (FuncPartCall 2) ("Prelude","_impl#>#Prelude.Ord#(,,)") [(Var 1),(Var 2),(Var 3)]),(Comb (FuncPartCall 2) ("Prelude","_impl#min#Prelude.Ord#(,,)") [(Var 1),(Var 2),(Var 3)]),(Comb (FuncPartCall 2) ("Prelude","_impl#max#Prelude.Ord#(,,)") [(Var 1),(Var 2),(Var 3)])]))),(Func ("Prelude","_impl#compare#Prelude.Ord#(,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 2)]) (FuncType (TCons ("Prelude","(,,)") [(TVar 0),(TVar 1),(TVar 2)]) (FuncType (TCons ("Prelude","(,,)") [(TVar 0),(TVar 1),(TVar 2)]) (TCons ("Prelude","Ordering") [])))))) (Rule [1,2,3,4,5] (Case Flex (Var 4) [(Branch (Pattern ("Prelude","(,,)") [6,7,8]) (Case Flex (Var 5) [(Branch (Pattern ("Prelude","(,,)") [9,10,11]) (Case Rigid (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","compare") [(Var 1)]),(Var 6)]),(Var 9)]) [(Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","LT") [])),(Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","GT") [])),(Branch (Pattern ("Prelude","EQ") []) (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,)") [(Var 2),(Var 3)]),(Comb ConsCall ("Prelude","(,)") [(Var 7),(Var 8)])]),(Comb ConsCall ("Prelude","(,)") [(Var 10),(Var 11)])]))]))]))]))),(Func ("Prelude","_impl#<=#Prelude.Ord#(,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 2)]) (FuncType (TCons ("Prelude","(,,)") [(TVar 0),(TVar 1),(TVar 2)]) (FuncType (TCons ("Prelude","(,,)") [(TVar 0),(TVar 1),(TVar 2)]) (TCons ("Prelude","Bool") [])))))) (Rule [1,2,3,4,5] (Case Rigid (Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5)]) [(Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") [])),(Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") [])),(Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") []))]))),(Func ("Prelude","_impl#>=#Prelude.Ord#(,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 2)]) (FuncType (TCons ("Prelude","(,,)") [(TVar 0),(TVar 1),(TVar 2)]) (FuncType (TCons ("Prelude","(,,)") [(TVar 0),(TVar 1),(TVar 2)]) (TCons ("Prelude","Bool") [])))))) (Rule [1,2,3,4,5] (Case Rigid (Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5)]) [(Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") [])),(Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") []))]))),(Func ("Prelude","_impl#<#Prelude.Ord#(,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 2)]) (FuncType (TCons ("Prelude","(,,)") [(TVar 0),(TVar 1),(TVar 2)]) (FuncType (TCons ("Prelude","(,,)") [(TVar 0),(TVar 1),(TVar 2)]) (TCons ("Prelude","Bool") [])))))) (Rule [1,2,3,4,5] (Case Rigid (Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5)]) [(Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") [])),(Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") []))]))),(Func ("Prelude","_impl#>#Prelude.Ord#(,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 2)]) (FuncType (TCons ("Prelude","(,,)") [(TVar 0),(TVar 1),(TVar 2)]) (FuncType (TCons ("Prelude","(,,)") [(TVar 0),(TVar 1),(TVar 2)]) (TCons ("Prelude","Bool") [])))))) (Rule [1,2,3,4,5] (Case Rigid (Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5)]) [(Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") []))]))),(Func ("Prelude","_impl#min#Prelude.Ord#(,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 2)]) (FuncType (TCons ("Prelude","(,,)") [(TVar 0),(TVar 1),(TVar 2)]) (FuncType (TCons ("Prelude","(,,)") [(TVar 0),(TVar 1),(TVar 2)]) (TCons ("Prelude","(,,)") [(TVar 0),(TVar 1),(TVar 2)])))))) (Rule [1,2,3,4,5] (Case Rigid (Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#(,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5)]) [(Branch (Pattern ("Prelude","True") []) (Var 4)),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Var 5)),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))),(Func ("Prelude","_impl#max#Prelude.Ord#(,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 2)]) (FuncType (TCons ("Prelude","(,,)") [(TVar 0),(TVar 1),(TVar 2)]) (FuncType (TCons ("Prelude","(,,)") [(TVar 0),(TVar 1),(TVar 2)]) (TCons ("Prelude","(,,)") [(TVar 0),(TVar 1),(TVar 2)])))))) (Rule [1,2,3,4,5] (Case Rigid (Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#(,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5)]) [(Branch (Pattern ("Prelude","True") []) (Var 4)),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Var 5)),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))),(Func ("Prelude","_inst#Prelude.Ord#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 3)]) (TCons ("Prelude","_Dict#Ord") [(TCons ("Prelude","(,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3)])]))))) (Rule [1,2,3,4] (Comb ConsCall ("Prelude","_Dict#Ord") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#(,,,)") [(Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [(Var 1)]),(Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [(Var 2)]),(Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [(Var 3)]),(Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [(Var 4)])]),(Comb (FuncPartCall 2) ("Prelude","_impl#compare#Prelude.Ord#(,,,)") [(Var 1),(Var 2),(Var 3),(Var 4)]),(Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#(,,,)") [(Var 1),(Var 2),(Var 3),(Var 4)]),(Comb (FuncPartCall 2) ("Prelude","_impl#>=#Prelude.Ord#(,,,)") [(Var 1),(Var 2),(Var 3),(Var 4)]),(Comb (FuncPartCall 2) ("Prelude","_impl#<#Prelude.Ord#(,,,)") [(Var 1),(Var 2),(Var 3),(Var 4)]),(Comb (FuncPartCall 2) ("Prelude","_impl#>#Prelude.Ord#(,,,)") [(Var 1),(Var 2),(Var 3),(Var 4)]),(Comb (FuncPartCall 2) ("Prelude","_impl#min#Prelude.Ord#(,,,)") [(Var 1),(Var 2),(Var 3),(Var 4)]),(Comb (FuncPartCall 2) ("Prelude","_impl#max#Prelude.Ord#(,,,)") [(Var 1),(Var 2),(Var 3),(Var 4)])]))),(Func ("Prelude","_impl#compare#Prelude.Ord#(,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 3)]) (FuncType (TCons ("Prelude","(,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3)]) (FuncType (TCons ("Prelude","(,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3)]) (TCons ("Prelude","Ordering") []))))))) (Rule [1,2,3,4,5,6] (Case Flex (Var 5) [(Branch (Pattern ("Prelude","(,,,)") [7,8,9,10]) (Case Flex (Var 6) [(Branch (Pattern ("Prelude","(,,,)") [11,12,13,14]) (Case Rigid (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","compare") [(Var 1)]),(Var 7)]),(Var 11)]) [(Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","LT") [])),(Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","GT") [])),(Branch (Pattern ("Prelude","EQ") []) (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,)") [(Var 2),(Var 3),(Var 4)]),(Comb ConsCall ("Prelude","(,,)") [(Var 8),(Var 9),(Var 10)])]),(Comb ConsCall ("Prelude","(,,)") [(Var 12),(Var 13),(Var 14)])]))]))]))]))),(Func ("Prelude","_impl#<=#Prelude.Ord#(,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 3)]) (FuncType (TCons ("Prelude","(,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3)]) (FuncType (TCons ("Prelude","(,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3)]) (TCons ("Prelude","Bool") []))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5),(Var 6)]) [(Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") [])),(Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") [])),(Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") []))]))),(Func ("Prelude","_impl#>=#Prelude.Ord#(,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 3)]) (FuncType (TCons ("Prelude","(,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3)]) (FuncType (TCons ("Prelude","(,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3)]) (TCons ("Prelude","Bool") []))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5),(Var 6)]) [(Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") [])),(Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") []))]))),(Func ("Prelude","_impl#<#Prelude.Ord#(,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 3)]) (FuncType (TCons ("Prelude","(,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3)]) (FuncType (TCons ("Prelude","(,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3)]) (TCons ("Prelude","Bool") []))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5),(Var 6)]) [(Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") [])),(Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") []))]))),(Func ("Prelude","_impl#>#Prelude.Ord#(,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 3)]) (FuncType (TCons ("Prelude","(,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3)]) (FuncType (TCons ("Prelude","(,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3)]) (TCons ("Prelude","Bool") []))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5),(Var 6)]) [(Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") []))]))),(Func ("Prelude","_impl#min#Prelude.Ord#(,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 3)]) (FuncType (TCons ("Prelude","(,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3)]) (FuncType (TCons ("Prelude","(,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3)]) (TCons ("Prelude","(,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3)]))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#(,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5),(Var 6)]) [(Branch (Pattern ("Prelude","True") []) (Var 5)),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Var 6)),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))),(Func ("Prelude","_impl#max#Prelude.Ord#(,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 3)]) (FuncType (TCons ("Prelude","(,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3)]) (FuncType (TCons ("Prelude","(,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3)]) (TCons ("Prelude","(,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3)]))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#(,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5),(Var 6)]) [(Branch (Pattern ("Prelude","True") []) (Var 5)),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Var 6)),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))),(Func ("Prelude","_inst#Prelude.Ord#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 4)]) (TCons ("Prelude","_Dict#Ord") [(TCons ("Prelude","(,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4)])])))))) (Rule [1,2,3,4,5] (Comb ConsCall ("Prelude","_Dict#Ord") [(Comb FuncCall ("Prelude","_inst#Prelude.Eq#(,,,,)") [(Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [(Var 1)]),(Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [(Var 2)]),(Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [(Var 3)]),(Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [(Var 4)]),(Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [(Var 5)])]),(Comb (FuncPartCall 2) ("Prelude","_impl#compare#Prelude.Ord#(,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5)]),(Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#(,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5)]),(Comb (FuncPartCall 2) ("Prelude","_impl#>=#Prelude.Ord#(,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5)]),(Comb (FuncPartCall 2) ("Prelude","_impl#<#Prelude.Ord#(,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5)]),(Comb (FuncPartCall 2) ("Prelude","_impl#>#Prelude.Ord#(,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5)]),(Comb (FuncPartCall 2) ("Prelude","_impl#min#Prelude.Ord#(,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5)]),(Comb (FuncPartCall 2) ("Prelude","_impl#max#Prelude.Ord#(,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5)])]))),(Func ("Prelude","_impl#compare#Prelude.Ord#(,,,,)") 7 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 4)]) (FuncType (TCons ("Prelude","(,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4)]) (FuncType (TCons ("Prelude","(,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4)]) (TCons ("Prelude","Ordering") [])))))))) (Rule [1,2,3,4,5,6,7] (Case Flex (Var 6) [(Branch (Pattern ("Prelude","(,,,,)") [8,9,10,11,12]) (Case Flex (Var 7) [(Branch (Pattern ("Prelude","(,,,,)") [13,14,15,16,17]) (Case Rigid (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","compare") [(Var 1)]),(Var 8)]),(Var 13)]) [(Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","LT") [])),(Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","GT") [])),(Branch (Pattern ("Prelude","EQ") []) (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,,)") [(Var 2),(Var 3),(Var 4),(Var 5)]),(Comb ConsCall ("Prelude","(,,,)") [(Var 9),(Var 10),(Var 11),(Var 12)])]),(Comb ConsCall ("Prelude","(,,,)") [(Var 14),(Var 15),(Var 16),(Var 17)])]))]))]))]))),(Func ("Prelude","_impl#<=#Prelude.Ord#(,,,,)") 7 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 4)]) (FuncType (TCons ("Prelude","(,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4)]) (FuncType (TCons ("Prelude","(,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4)]) (TCons ("Prelude","Bool") [])))))))) (Rule [1,2,3,4,5,6,7] (Case Rigid (Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5),(Var 6),(Var 7)]) [(Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") [])),(Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") [])),(Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") []))]))),(Func ("Prelude","_impl#>=#Prelude.Ord#(,,,,)") 7 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 4)]) (FuncType (TCons ("Prelude","(,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4)]) (FuncType (TCons ("Prelude","(,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4)]) (TCons ("Prelude","Bool") [])))))))) (Rule [1,2,3,4,5,6,7] (Case Rigid (Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5),(Var 6),(Var 7)]) [(Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") [])),(Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") []))]))),(Func ("Prelude","_impl#<#Prelude.Ord#(,,,,)") 7 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 4)]) (FuncType (TCons ("Prelude","(,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4)]) (FuncType (TCons ("Prelude","(,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4)]) (TCons ("Prelude","Bool") [])))))))) (Rule [1,2,3,4,5,6,7] (Case Rigid (Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5),(Var 6),(Var 7)]) [(Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") [])),(Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") []))]))),(Func ("Prelude","_impl#>#Prelude.Ord#(,,,,)") 7 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 4)]) (FuncType (TCons ("Prelude","(,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4)]) (FuncType (TCons ("Prelude","(,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4)]) (TCons ("Prelude","Bool") [])))))))) (Rule [1,2,3,4,5,6,7] (Case Rigid (Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5),(Var 6),(Var 7)]) [(Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") [])),(Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") []))]))),(Func ("Prelude","_impl#min#Prelude.Ord#(,,,,)") 7 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 4)]) (FuncType (TCons ("Prelude","(,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4)]) (FuncType (TCons ("Prelude","(,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4)]) (TCons ("Prelude","(,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4)])))))))) (Rule [1,2,3,4,5,6,7] (Case Rigid (Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#(,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5),(Var 6),(Var 7)]) [(Branch (Pattern ("Prelude","True") []) (Var 6)),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Var 7)),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))),(Func ("Prelude","_impl#max#Prelude.Ord#(,,,,)") 7 Public (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Ord") [(TVar 4)]) (FuncType (TCons ("Prelude","(,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4)]) (FuncType (TCons ("Prelude","(,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4)]) (TCons ("Prelude","(,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4)])))))))) (Rule [1,2,3,4,5,6,7] (Case Rigid (Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#(,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5),(Var 6),(Var 7)]) [(Branch (Pattern ("Prelude","True") []) (Var 6)),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Var 7)),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))),(Func ("Prelude","_inst#Prelude.Read#()") 0 Public (TCons ("Prelude","_Dict#Read") [(TCons ("Prelude","()") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [(Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#()") []),(Comb FuncCall ("Prelude","_impl#readList#Prelude.Read#()") [])]))),(Func ("Prelude","_impl#readsPrec#Prelude.Read#()") 1 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","()") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1] (Comb FuncCall ("Prelude","readParen") [(Comb ConsCall ("Prelude","False") []),(Comb (FuncPartCall 1) ("Prelude","readsUnit") [])]))),(Func ("Prelude","_impl#readList#Prelude.Read#()") 0 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","()") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [(Comb FuncCall ("Prelude","_inst#Prelude.Read#()") [])]))),(Func ("Prelude","_inst#Prelude.Read#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 1)]) (TCons ("Prelude","_Dict#Read") [(TCons ("Prelude","(,)") [(TVar 0),(TVar 1)])]))) (Rule [1,2] (Comb ConsCall ("Prelude","_Dict#Read") [(Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#(,)") [(Var 1),(Var 2)]),(Comb FuncCall ("Prelude","_impl#readList#Prelude.Read#(,)") [(Var 1),(Var 2)])]))),(Func ("Prelude","_impl#readsPrec#Prelude.Read#(,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 1)]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","(,)") [(TVar 0),(TVar 1)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))))) (Rule [1,2,3] (Comb FuncCall ("Prelude","readParen") [(Comb ConsCall ("Prelude","False") []),(Comb (FuncPartCall 1) ("Prelude","readsLParen") [(Comb (FuncPartCall 1) ("Prelude","readsVal_2") [(Var 1),(Var 2)])])]))),(Func ("Prelude","_impl#readList#Prelude.Read#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 1)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TVar 1)])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])))) (Rule [1,2] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [(Comb FuncCall ("Prelude","_inst#Prelude.Read#(,)") [(Var 1),(Var 2)])]))),(Func ("Prelude","_inst#Prelude.Read#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 2)]) (TCons ("Prelude","_Dict#Read") [(TCons ("Prelude","(,,)") [(TVar 0),(TVar 1),(TVar 2)])])))) (Rule [1,2,3] (Comb ConsCall ("Prelude","_Dict#Read") [(Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#(,,)") [(Var 1),(Var 2),(Var 3)]),(Comb FuncCall ("Prelude","_impl#readList#Prelude.Read#(,,)") [(Var 1),(Var 2),(Var 3)])]))),(Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 2)]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","(,,)") [(TVar 0),(TVar 1),(TVar 2)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","readParen") [(Comb ConsCall ("Prelude","False") []),(Comb (FuncPartCall 1) ("Prelude","readsLParen") [(Comb (FuncPartCall 1) ("Prelude","readsVal_3") [(Var 1),(Var 2),(Var 3)])])]))),(Func ("Prelude","_impl#readList#Prelude.Read#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 2)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","(,,)") [(TVar 0),(TVar 1),(TVar 2)])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))))) (Rule [1,2,3] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [(Comb FuncCall ("Prelude","_inst#Prelude.Read#(,,)") [(Var 1),(Var 2),(Var 3)])]))),(Func ("Prelude","_inst#Prelude.Read#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 3)]) (TCons ("Prelude","_Dict#Read") [(TCons ("Prelude","(,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3)])]))))) (Rule [1,2,3,4] (Comb ConsCall ("Prelude","_Dict#Read") [(Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)") [(Var 1),(Var 2),(Var 3),(Var 4)]),(Comb FuncCall ("Prelude","_impl#readList#Prelude.Read#(,,,)") [(Var 1),(Var 2),(Var 3),(Var 4)])]))),(Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 3)]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","(,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude","readParen") [(Comb ConsCall ("Prelude","False") []),(Comb (FuncPartCall 1) ("Prelude","readsLParen") [(Comb (FuncPartCall 1) ("Prelude","readsVal_4") [(Var 1),(Var 2),(Var 3),(Var 4)])])]))),(Func ("Prelude","_impl#readList#Prelude.Read#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 3)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","(,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3)])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [(Comb FuncCall ("Prelude","_inst#Prelude.Read#(,,,)") [(Var 1),(Var 2),(Var 3),(Var 4)])]))),(Func ("Prelude","_inst#Prelude.Read#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 4)]) (TCons ("Prelude","_Dict#Read") [(TCons ("Prelude","(,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4)])])))))) (Rule [1,2,3,4,5] (Comb ConsCall ("Prelude","_Dict#Read") [(Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5)]),(Comb FuncCall ("Prelude","_impl#readList#Prelude.Read#(,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5)])]))),(Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 4)]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","(,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])))))))) (Rule [1,2,3,4,5,6] (Comb FuncCall ("Prelude","readParen") [(Comb ConsCall ("Prelude","False") []),(Comb (FuncPartCall 1) ("Prelude","readsLParen") [(Comb (FuncPartCall 1) ("Prelude","readsVal_5") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5)])])]))),(Func ("Prelude","_impl#readList#Prelude.Read#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 4)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","(,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4)])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [(Comb FuncCall ("Prelude","_inst#Prelude.Read#(,,,,)") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 5)])]))),(Func ("Prelude","c2") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [(TVar 1),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","(,)") [(TCons ("Prelude","(,)") [(TVar 0),(TVar 1)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]))) (Rule [1,2] (Case Flex (Var 2) [(Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude","(,)") [(Var 1),(Var 3)]),(Var 4)]))]))),(Func ("Prelude","c3") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","(,)") [(TVar 1),(TVar 2)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","(,)") [(TCons ("Prelude","(,,)") [(TVar 0),(TVar 1),(TVar 2)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]))) (Rule [1,2] (Case Flex (Var 2) [(Branch (Pattern ("Prelude","(,)") [3,4]) (Case Flex (Var 3) [(Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude","(,,)") [(Var 1),(Var 5),(Var 6)]),(Var 4)]))]))]))),(Func ("Prelude","c4") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","(,,)") [(TVar 1),(TVar 2),(TVar 3)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","(,)") [(TCons ("Prelude","(,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]))) (Rule [1,2] (Case Flex (Var 2) [(Branch (Pattern ("Prelude","(,)") [3,4]) (Case Flex (Var 3) [(Branch (Pattern ("Prelude","(,,)") [5,6,7]) (Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude","(,,,)") [(Var 1),(Var 5),(Var 6),(Var 7)]),(Var 4)]))]))]))),(Func ("Prelude","c5") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","(,,,)") [(TVar 1),(TVar 2),(TVar 3),(TVar 4)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","(,)") [(TCons ("Prelude","(,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]))) (Rule [1,2] (Case Flex (Var 2) [(Branch (Pattern ("Prelude","(,)") [3,4]) (Case Flex (Var 3) [(Branch (Pattern ("Prelude","(,,,)") [5,6,7,8]) (Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude","(,,,,)") [(Var 1),(Var 5),(Var 6),(Var 7),(Var 8)]),(Var 4)]))]))]))),(Func ("Prelude","readsLParen") 2 Public (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","dropWhile") [(Comb (FuncPartCall 1) ("Prelude","isSpace") []),(Var 2)]) [(Branch (Pattern ("Prelude",":") [3,4]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 3),(Lit (Charc '('))]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [(Var 1),(Var 4)])),(Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") []))])),(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []))]))),(Func ("Prelude","readsVal_5") 6 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 3)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 4)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","(,,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3),(TVar 4)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))))))) (Rule [1,2,3,4,5,6] (Comb FuncCall ("Prelude","_impl#>>=#Prelude.Monad#[]") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","reads") [(Var 1)]),(Var 6)]),(Comb (FuncPartCall 1) ("Prelude","readsComma_4") [(Var 2),(Var 3),(Var 4),(Var 5)])]))),(Func ("Prelude","readsComma_4") 5 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 3)]) (FuncType (TCons ("Prelude","(,)") [(TVar 4),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","(,,,,)") [(TVar 4),(TVar 0),(TVar 1),(TVar 2),(TVar 3)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])))))) (Rule [1,2,3,4,5] (Case Flex (Var 5) [(Branch (Pattern ("Prelude","(,)") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","dropWhile") [(Comb (FuncPartCall 1) ("Prelude","isSpace") []),(Var 7)]) [(Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 8),(Lit (Charc ','))]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [(Comb (FuncPartCall 1) ("Prelude","c5") [(Var 6)]),(Comb FuncCall ("Prelude","readsVal_4") [(Var 1),(Var 2),(Var 3),(Var 4),(Var 9)])])),(Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") []))])),(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []))]))]))),(Func ("Prelude","readsVal_4") 5 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 2)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 3)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","(,,,)") [(TVar 0),(TVar 1),(TVar 2),(TVar 3)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude","_impl#>>=#Prelude.Monad#[]") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","reads") [(Var 1)]),(Var 5)]),(Comb (FuncPartCall 1) ("Prelude","readsComma_3") [(Var 2),(Var 3),(Var 4)])]))),(Func ("Prelude","readsComma_3") 4 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 2)]) (FuncType (TCons ("Prelude","(,)") [(TVar 3),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","(,,,)") [(TVar 3),(TVar 0),(TVar 1),(TVar 2)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))))) (Rule [1,2,3,4] (Case Flex (Var 4) [(Branch (Pattern ("Prelude","(,)") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","dropWhile") [(Comb (FuncPartCall 1) ("Prelude","isSpace") []),(Var 6)]) [(Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 7),(Lit (Charc ','))]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [(Comb (FuncPartCall 1) ("Prelude","c4") [(Var 5)]),(Comb FuncCall ("Prelude","readsVal_3") [(Var 1),(Var 2),(Var 3),(Var 8)])])),(Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") []))])),(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []))]))]))),(Func ("Prelude","readsVal_3") 4 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 1)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 2)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","(,,)") [(TVar 0),(TVar 1),(TVar 2)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","_impl#>>=#Prelude.Monad#[]") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","reads") [(Var 1)]),(Var 4)]),(Comb (FuncPartCall 1) ("Prelude","readsComma_2") [(Var 2),(Var 3)])]))),(Func ("Prelude","readsComma_2") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 1)]) (FuncType (TCons ("Prelude","(,)") [(TVar 2),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","(,,)") [(TVar 2),(TVar 0),(TVar 1)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])))) (Rule [1,2,3] (Case Flex (Var 3) [(Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Comb FuncCall ("Prelude","dropWhile") [(Comb (FuncPartCall 1) ("Prelude","isSpace") []),(Var 5)]) [(Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 6),(Lit (Charc ','))]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [(Comb (FuncPartCall 1) ("Prelude","c3") [(Var 4)]),(Comb FuncCall ("Prelude","readsVal_2") [(Var 1),(Var 2),(Var 7)])])),(Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") []))])),(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []))]))]))),(Func ("Prelude","readsVal_2") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 1)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","(,)") [(TVar 0),(TVar 1)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","_impl#>>=#Prelude.Monad#[]") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","reads") [(Var 1)]),(Var 3)]),(Comb (FuncPartCall 1) ("Prelude","readsComma_1") [(Var 2)])]))),(Func ("Prelude","readsComma_1") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","(,)") [(TVar 1),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","(,)") [(TVar 1),(TVar 0)]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1,2] (Case Flex (Var 2) [(Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Comb FuncCall ("Prelude","dropWhile") [(Comb (FuncPartCall 1) ("Prelude","isSpace") []),(Var 4)]) [(Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 5),(Lit (Charc ','))]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [(Comb (FuncPartCall 1) ("Prelude","c2") [(Var 3)]),(Comb FuncCall ("Prelude","readsVal_1") [(Var 1),(Var 6)])])),(Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") []))])),(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []))]))]))),(Func ("Prelude","readsVal_1") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) (Rule [1,2] (Comb FuncCall ("Prelude","_impl#>>=#Prelude.Monad#[]") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","reads") [(Var 1)]),(Var 2)]),(Comb (FuncPartCall 1) ("Prelude","readsRParen") [])]))),(Func ("Prelude","readsRParen") 1 Public (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","(,)") [2,3]) (Case Rigid (Comb FuncCall ("Prelude","dropWhile") [(Comb (FuncPartCall 1) ("Prelude","isSpace") []),(Var 3)]) [(Branch (Pattern ("Prelude",":") [4,5]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 4),(Lit (Charc ')'))]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Var 2),(Var 5)]),(Comb ConsCall ("Prelude","[]") [])])),(Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") []))])),(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []))]))]))),(Func ("Prelude","readsUnit") 1 Public (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","()") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","dropWhile") [(Comb (FuncPartCall 1) ("Prelude","isSpace") []),(Var 1)]) [(Branch (Pattern ("Prelude",":") [2,3]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 2),(Lit (Charc '('))]) [(Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("Prelude","dropWhile") [(Comb (FuncPartCall 1) ("Prelude","isSpace") []),(Var 3)]) [(Branch (Pattern ("Prelude",":") [4,5]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [(Var 4),(Lit (Charc ')'))]) [(Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [(Comb ConsCall ("Prelude","(,)") [(Comb ConsCall ("Prelude","()") []),(Var 5)]),(Comb ConsCall ("Prelude","[]") [])])),(Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") []))])),(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []))])),(Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") []))])),(Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []))]))),(Func ("Prelude","zip") 2 Public (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 1)]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TVar 1)])]))) (Rule [1,2] (Comb FuncCall ("Prelude","build") [(Comb (FuncPartCall 2) ("Prelude","zip_build") [(Var 1),(Var 2)])]))),(Func ("Prelude","zip_build") 4 Public (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 1)]) (FuncType (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TVar 1)]) (FuncType (TVar 2) (TVar 2))) (FuncType (TVar 2) (TVar 2))))) (Rule [1,2,3,4] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","[]") []) (Case Flex (Var 2) [(Branch (Pattern ("Prelude","[]") []) (Var 4)),(Branch (Pattern ("Prelude",":") [5,6]) (Var 4))])),(Branch (Pattern ("Prelude",":") [7,8]) (Case Flex (Var 2) [(Branch (Pattern ("Prelude","[]") []) (Var 4)),(Branch (Pattern ("Prelude",":") [9,10]) (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Var 3),(Comb ConsCall ("Prelude","(,)") [(Var 7),(Var 9)])]),(Comb FuncCall ("Prelude","zip_build") [(Var 8),(Var 10),(Var 3),(Var 4)])]))]))]))),(Func ("Prelude","zipWith") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 2))) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 1)]) (TCons ("Prelude","[]") [(TVar 2)])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","build") [(Comb (FuncPartCall 2) ("Prelude","zipWith_build") [(Var 1),(Var 2),(Var 3)])]))),(Func ("Prelude","zipWith_build") 5 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 2))) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 1)]) (FuncType (FuncType (TVar 2) (FuncType (TVar 3) (TVar 3))) (FuncType (TVar 3) (TVar 3)))))) (Rule [1,2,3,4,5] (Case Flex (Var 2) [(Branch (Pattern ("Prelude","[]") []) (Case Flex (Var 3) [(Branch (Pattern ("Prelude","[]") []) (Var 5)),(Branch (Pattern ("Prelude",":") [6,7]) (Var 5))])),(Branch (Pattern ("Prelude",":") [8,9]) (Case Flex (Var 3) [(Branch (Pattern ("Prelude","[]") []) (Var 5)),(Branch (Pattern ("Prelude",":") [10,11]) (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Var 4),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Var 1),(Var 8)]),(Var 10)])]),(Comb FuncCall ("Prelude","zipWith_build") [(Var 1),(Var 9),(Var 11),(Var 4),(Var 5)])]))]))])))] [])