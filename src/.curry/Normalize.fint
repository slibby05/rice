Prog "Normalize" ["Control.SetFunctions","FlatCurry.Types","FlatRewrite","Gas","Graph","Prelude","Util","Debug"] [] [Func ("Normalize","transform") 1 Public (FuncType (TCons ("FlatCurry.Types","Prog") []) (TCons ("FlatCurry.Types","Prog") [])) (Rule [] (Var 0)),Func ("Normalize","transform_ORGNDFUN") 1 Private (FuncType (TCons ("FlatCurry.Types","Prog") []) (TCons ("FlatCurry.Types","Prog") [])) (Rule [] (Var 0)),Func ("Normalize","transform_ORGNDFUN._#selFP7#fixes") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry.Types","FuncDecl") []],TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry.Types","FuncDecl") []])) (Rule [] (Var 0)),Func ("Normalize","transform_ORGNDFUN._#selFP8#c0") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry.Types","FuncDecl") []],TCons ("Prelude","Int") []]) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Normalize","transform_ORGNDFUN._#selFP5#flatFs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry.Types","FuncDecl") []],TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry.Types","FuncDecl") []])) (Rule [] (Var 0)),Func ("Normalize","transform_ORGNDFUN._#selFP6#c1") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry.Types","FuncDecl") []],TCons ("Prelude","Int") []]) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Normalize","transform_ORGNDFUN._#selFP4#caseFs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry.Types","FuncDecl") []],TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry.Types","FuncDecl") []])) (Rule [] (Var 0)),Func ("Normalize","nestedCont") 2 Public (FuncType (TCons ("FlatCurry.Types","FuncDecl") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("FlatCurry.Types","FuncDecl") []]))) (Rule [] (Var 0)),Func ("Normalize","redex_path") 1 Public (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry.Types","Expr") []]])) (Rule [] (Var 0)),Func ("Normalize","redex_path_ORGNDFUN") 1 Private (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry.Types","Expr") []]])) (Rule [] (Var 0)),Func ("Normalize","caseArg") 2 Public (FuncType (TCons ("FlatCurry.Types","FuncDecl") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("FlatCurry.Types","FuncDecl") []]))) (Rule [] (Var 0)),Func ("Normalize","caseArg._#selFP10#ct") 1 Private (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("FlatCurry.Types","CaseType") [])) (Rule [] (Var 0)),Func ("Normalize","caseArg._#selFP11#sel") 1 Private (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("FlatCurry.Types","Expr") [])) (Rule [] (Var 0)),Func ("Normalize","caseArg._#selFP12#br") 1 Private (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("Prelude","[]") [TCons ("FlatCurry.Types","BranchExpr") []])) (Rule [] (Var 0)),Func ("Normalize","getCaseArg") 1 Public (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry.Types","Expr") []]])) (Rule [] (Var 0)),Func ("Normalize","getCaseArg_ORGNDFUN") 1 Private (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry.Types","Expr") []]])) (Rule [] (Var 0)),Func ("Normalize","caseInCase") 2 Public (FuncType (TCons ("FlatCurry.Types","FuncDecl") []) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("FlatCurry.Types","FuncDecl") []]))) (Rule [] (Var 0)),Func ("Normalize","findCase") 1 Public (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry.Types","Expr") []]])) (Rule [] (Var 0)),Func ("Normalize","findCase_ORGNDFUN") 1 Private (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry.Types","Expr") []]])) (Rule [] (Var 0)),Func ("Normalize","repCase") 1 Public (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("Prelude","Maybe") [TCons ("FlatCurry.Types","Expr") []])) (Rule [] (Var 0)),Func ("Normalize","repCase_ORGNDFUN") 1 Private (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("Prelude","Maybe") [TCons ("FlatCurry.Types","Expr") []])) (Rule [] (Var 0)),Func ("Normalize","repCase_ORGNDFUN.foldCase.120") 3 Private (FuncType (TCons ("FlatCurry.Types","CaseType") []) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry.Types","BranchExpr") []]) (FuncType (TCons ("FlatCurry.Types","BranchExpr") []) (TCons ("FlatCurry.Types","BranchExpr") [])))) (Rule [] (Var 0)),Func ("Normalize","makeBlocks") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry.Types","Expr") []]]) (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("FlatCurry.Types","Expr") []))) (Rule [] (Var 0)),Func ("Normalize","makeBlocks.makeEdges.126") 1 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("FlatCurry.Types","Expr") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]])) (Rule [] (Var 0)),Func ("Normalize","makeBlocks.makeEdges.126._#lambda5") 2 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]))) (Rule [] (Var 0)),Func ("Normalize","makeBlocks.getExp.126") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 0,TVar 1]))) (Rule [] (Var 0)),Func ("Normalize","makeBlocks.makeBlock.126") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry.Types","Expr") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("FlatCurry.Types","Expr") [])))) (Rule [] (Var 0))] []