Prog "PreludeTuple" ["PreludeBase","PreludeCompare","PreludeNum","PreludeList","PreludeString","PreludeRead","PreludeMonad"] [] [Func ("Prelude","curry") 3 Public (FuncType (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TVar 2)) (FuncType (TVar 0) (FuncType (TVar 1) (TVar 2)))) (Rule [2,3,4] (Let [(5,Comb ConsCall ("Prelude","(,)") [Var 3,Var 4])] (Comb FuncCall ("Prelude","apply") [Var 2,Var 5]))),Func ("Prelude","uncurry") 2 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 2))) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TVar 2))) (Rule [2,-3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","apply") [Var 2,Var 4,Var 5])])),Func ("Prelude","zipWith") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 2))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","[]") [TVar 2])))) (Rule [2,3,4] (Let [(5,Comb (FuncPartCall 2) ("Prelude","zipWith_build") [Var 2,Var 3,Var 4])] (Comb FuncCall ("Prelude","build") [Var 5]))),Func ("Prelude","zip") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]))) (Rule [2,3] (Let [(4,Comb (FuncPartCall 2) ("Prelude","zip_build") [Var 2,Var 3])] (Comb FuncCall ("Prelude","build") [Var 4]))),Func ("Prelude","readsUnit") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","()") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [-2] (Let [(3,Comb (FuncPartCall 1) ("Prelude","isSpace") [])] (Let [(4,Comb FuncCall ("Prelude","dropWhile") [Var 3,Var 2])] (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Var 5) [Branch (Pattern ("","char") [7]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 7,Lit (Charc '(')]),Branch (Pattern ("Prelude","True") []) (Let [(8,Comb (FuncPartCall 1) ("Prelude","isSpace") [])] (Let [(9,Comb FuncCall ("Prelude","dropWhile") [Var 8,Var 6])] (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Var 10) [Branch (Pattern ("","char") [12]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 12,Lit (Charc ')')]),Branch (Pattern ("Prelude","True") []) (Let [(13,Comb ConsCall ("Prelude","()") [])] (Let [(14,Comb ConsCall ("Prelude","(,)") [Var 13,Var 11])] (Let [(15,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 14,Var 15])))),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])]),Branch (Pattern ("Prelude","[]") []) (Var 9)]))),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])]),Branch (Pattern ("Prelude","[]") []) (Var 4)])))),Func ("Prelude","readsRParen") 1 Public (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Let [(5,Comb (FuncPartCall 1) ("Prelude","isSpace") [])] (Let [(6,Comb FuncCall ("Prelude","dropWhile") [Var 5,Var 4])] (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Var 7) [Branch (Pattern ("","char") [9]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 9,Lit (Charc ')')]),Branch (Pattern ("Prelude","True") []) (Let [(10,Comb ConsCall ("Prelude","(,)") [Var 3,Var 8])] (Let [(11,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 10,Var 11]))),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])]),Branch (Pattern ("Prelude","[]") []) (Var 6)])))])),Func ("Prelude","readsVal_1") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","readsPrec") [Var 2])] (Let [(5,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(6,Comb FuncCall ("Prelude","apply") [Var 4,Var 5])] (Let [(7,Comb FuncCall ("Prelude","apply") [Var 6,Var 3])] (Let [(8,Comb (FuncPartCall 3) ("Prelude","readsVal_1#P0") [])] (Let [(9,Comb (FuncPartCall 1) ("Prelude","concatMap#P2") [])] (Comb FuncCall ("Prelude","build_fold") [Var 8,Var 9,Var 7])))))))),Func ("Prelude","readsVal_1#P0") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","readsRParen") [Var 3])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","_impl#>>=#Prelude.Monad#[]#P15#P16") [Var 2])] (Comb FuncCall ("Prelude","foldr") [Var 6,Var 4,Var 5])))),Func ("Prelude","readsLParen") 2 Public (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [2,-3] (Let [(4,Comb (FuncPartCall 1) ("Prelude","isSpace") [])] (Let [(5,Comb FuncCall ("Prelude","dropWhile") [Var 4,Var 3])] (Case Rigid (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Var 6) [Branch (Pattern ("","char") [8]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 8,Lit (Charc '(')]),Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Var 2,Var 7]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])]),Branch (Pattern ("Prelude","[]") []) (Var 5)])))),Func ("Prelude","c5") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 1,TVar 2,TVar 3,TVar 4],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [2,-3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Flex (Var 4) [Branch (Pattern ("Prelude","(,,,)") [6,7,8,9]) (Let [(10,Comb ConsCall ("Prelude","(,,,,)") [Var 2,Var 6,Var 7,Var 8,Var 9])] (Comb ConsCall ("Prelude","(,)") [Var 10,Var 5]))])])),Func ("Prelude","c4") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 1,TVar 2,TVar 3],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [2,-3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Flex (Var 4) [Branch (Pattern ("Prelude","(,,)") [6,7,8]) (Let [(9,Comb ConsCall ("Prelude","(,,,)") [Var 2,Var 6,Var 7,Var 8])] (Comb ConsCall ("Prelude","(,)") [Var 9,Var 5]))])])),Func ("Prelude","c3") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 1,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [2,-3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Let [(8,Comb ConsCall ("Prelude","(,,)") [Var 2,Var 6,Var 7])] (Comb ConsCall ("Prelude","(,)") [Var 8,Var 5]))])])),Func ("Prelude","c2") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [2,-3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Let [(6,Comb ConsCall ("Prelude","(,)") [Var 2,Var 4])] (Comb ConsCall ("Prelude","(,)") [Var 6,Var 5]))])),Func ("Prelude","readsComma_1") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [2,-3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Let [(6,Comb (FuncPartCall 1) ("Prelude","isSpace") [])] (Let [(7,Comb FuncCall ("Prelude","dropWhile") [Var 6,Var 5])] (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Var 8) [Branch (Pattern ("","char") [10]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 10,Lit (Charc ',')]),Branch (Pattern ("Prelude","True") []) (Let [(11,Comb FuncCall ("Prelude","readsPrec") [Var 2])] (Let [(12,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(13,Comb FuncCall ("Prelude","apply") [Var 11,Var 12])] (Let [(14,Comb FuncCall ("Prelude","apply") [Var 13,Var 9])] (Let [(15,Comb (FuncPartCall 3) ("Prelude","readsComma_1#P1") [Var 4])] (Let [(16,Comb (FuncPartCall 1) ("Prelude","readsComma_1#P2") [])] (Comb FuncCall ("Prelude","build_fold") [Var 15,Var 16,Var 14]))))))),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])]),Branch (Pattern ("Prelude","[]") []) (Var 7)])))])),Func ("Prelude","readsComma_1#P2") 1 Public (TVar 0) (Rule [2] (Var 2)),Func ("Prelude","readsComma_1#P1") 4 Public (TVar 0) (Rule [2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","readsRParen") [Var 4])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","readsComma_1#P1#P3") [Var 2,Var 3])] (Comb FuncCall ("Prelude","foldr") [Var 7,Var 5,Var 6])))),Func ("Prelude","readsComma_1#P1#P3") 4 Public (TVar 0) (Rule [2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","c2") [Var 2,Var 4])] (Comb FuncCall ("Prelude","apply") [Var 3,Var 6,Var 5]))),Func ("Prelude","readsVal_2") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","readsPrec") [Var 2])] (Let [(6,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(7,Comb FuncCall ("Prelude","apply") [Var 5,Var 6])] (Let [(8,Comb FuncCall ("Prelude","apply") [Var 7,Var 4])] (Let [(9,Comb (FuncPartCall 3) ("Prelude","readsVal_2#P4") [Var 3])] (Let [(10,Comb (FuncPartCall 1) ("Prelude","concatMap#P2") [])] (Comb FuncCall ("Prelude","build_fold") [Var 9,Var 10,Var 8])))))))),Func ("Prelude","readsVal_2#P4") 4 Public (TVar 0) (Rule [2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","readsComma_1") [Var 2,Var 4])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","_impl#>>=#Prelude.Monad#[]#P15#P16") [Var 3])] (Comb FuncCall ("Prelude","foldr") [Var 7,Var 5,Var 6])))),Func ("Prelude","readsComma_2") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 2,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 2,TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [2,3,-4] (Case Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [5,6]) (Let [(7,Comb (FuncPartCall 1) ("Prelude","isSpace") [])] (Let [(8,Comb FuncCall ("Prelude","dropWhile") [Var 7,Var 6])] (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Var 9) [Branch (Pattern ("","char") [11]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 11,Lit (Charc ',')]),Branch (Pattern ("Prelude","True") []) (Let [(12,Comb FuncCall ("Prelude","readsPrec") [Var 2])] (Let [(13,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(14,Comb FuncCall ("Prelude","apply") [Var 12,Var 13])] (Let [(15,Comb FuncCall ("Prelude","apply") [Var 14,Var 10])] (Let [(16,Comb (FuncPartCall 3) ("Prelude","readsComma_2#P5") [Var 3,Var 5])] (Let [(17,Comb (FuncPartCall 1) ("Prelude","readsComma_2#P6") [])] (Comb FuncCall ("Prelude","build_fold") [Var 16,Var 17,Var 15]))))))),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])]),Branch (Pattern ("Prelude","[]") []) (Var 8)])))])),Func ("Prelude","readsComma_2#P6") 1 Public (TVar 0) (Rule [2] (Var 2)),Func ("Prelude","readsComma_2#P5") 5 Public (TVar 0) (Rule [2,3,4,5,6] (Let [(7,Comb FuncCall ("Prelude","readsComma_1") [Var 2,Var 5])] (Let [(8,Comb (FuncPartCall 2) ("Prelude","readsComma_2#P5#P7") [Var 3,Var 4])] (Comb FuncCall ("Prelude","foldr") [Var 8,Var 6,Var 7])))),Func ("Prelude","readsComma_2#P5#P7") 4 Public (TVar 0) (Rule [2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","c3") [Var 2,Var 4])] (Comb FuncCall ("Prelude","apply") [Var 3,Var 6,Var 5]))),Func ("Prelude","readsVal_3") 4 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","readsPrec") [Var 2])] (Let [(7,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(8,Comb FuncCall ("Prelude","apply") [Var 6,Var 7])] (Let [(9,Comb FuncCall ("Prelude","apply") [Var 8,Var 5])] (Let [(10,Comb (FuncPartCall 3) ("Prelude","readsVal_3#P8") [Var 3,Var 4])] (Let [(11,Comb (FuncPartCall 1) ("Prelude","concatMap#P2") [])] (Comb FuncCall ("Prelude","build_fold") [Var 10,Var 11,Var 9])))))))),Func ("Prelude","readsVal_3#P8") 5 Public (TVar 0) (Rule [2,3,4,5,6] (Let [(7,Comb FuncCall ("Prelude","readsComma_2") [Var 2,Var 3,Var 5])] (Let [(8,Comb (FuncPartCall 2) ("Prelude","_impl#>>=#Prelude.Monad#[]#P15#P16") [Var 4])] (Comb FuncCall ("Prelude","foldr") [Var 8,Var 6,Var 7])))),Func ("Prelude","readsComma_3") 4 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","(,)") [TVar 3,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 3,TVar 0,TVar 1,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [2,3,4,-5] (Case Flex (Var 5) [Branch (Pattern ("Prelude","(,)") [6,7]) (Let [(8,Comb (FuncPartCall 1) ("Prelude","isSpace") [])] (Let [(9,Comb FuncCall ("Prelude","dropWhile") [Var 8,Var 7])] (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Var 10) [Branch (Pattern ("","char") [12]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 12,Lit (Charc ',')]),Branch (Pattern ("Prelude","True") []) (Let [(13,Comb FuncCall ("Prelude","readsPrec") [Var 2])] (Let [(14,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(15,Comb FuncCall ("Prelude","apply") [Var 13,Var 14])] (Let [(16,Comb FuncCall ("Prelude","apply") [Var 15,Var 11])] (Let [(17,Comb (FuncPartCall 3) ("Prelude","readsComma_3#P9") [Var 3,Var 4,Var 6])] (Let [(18,Comb (FuncPartCall 1) ("Prelude","readsComma_3#P10") [])] (Comb FuncCall ("Prelude","build_fold") [Var 17,Var 18,Var 16]))))))),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])]),Branch (Pattern ("Prelude","[]") []) (Var 9)])))])),Func ("Prelude","readsComma_3#P10") 1 Public (TVar 0) (Rule [2] (Var 2)),Func ("Prelude","readsComma_3#P9") 6 Public (TVar 0) (Rule [2,3,4,5,6,7] (Let [(8,Comb FuncCall ("Prelude","readsComma_2") [Var 2,Var 3,Var 6])] (Let [(9,Comb (FuncPartCall 2) ("Prelude","readsComma_3#P9#P11") [Var 4,Var 5])] (Comb FuncCall ("Prelude","foldr") [Var 9,Var 7,Var 8])))),Func ("Prelude","readsComma_3#P9#P11") 4 Public (TVar 0) (Rule [2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","c4") [Var 2,Var 4])] (Comb FuncCall ("Prelude","apply") [Var 3,Var 6,Var 5]))),Func ("Prelude","readsVal_4") 5 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [2,3,4,5,6] (Let [(7,Comb FuncCall ("Prelude","readsPrec") [Var 2])] (Let [(8,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(9,Comb FuncCall ("Prelude","apply") [Var 7,Var 8])] (Let [(10,Comb FuncCall ("Prelude","apply") [Var 9,Var 6])] (Let [(11,Comb (FuncPartCall 3) ("Prelude","readsVal_4#P12") [Var 3,Var 4,Var 5])] (Let [(12,Comb (FuncPartCall 1) ("Prelude","concatMap#P2") [])] (Comb FuncCall ("Prelude","build_fold") [Var 11,Var 12,Var 10])))))))),Func ("Prelude","readsVal_4#P12") 6 Public (TVar 0) (Rule [2,3,4,5,6,7] (Let [(8,Comb FuncCall ("Prelude","readsComma_3") [Var 2,Var 3,Var 4,Var 6])] (Let [(9,Comb (FuncPartCall 2) ("Prelude","_impl#>>=#Prelude.Monad#[]#P15#P16") [Var 5])] (Comb FuncCall ("Prelude","foldr") [Var 9,Var 7,Var 8])))),Func ("Prelude","readsComma_4") 5 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","(,)") [TVar 4,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 0,TVar 1,TVar 2,TVar 3],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [2,3,4,5,-6] (Case Flex (Var 6) [Branch (Pattern ("Prelude","(,)") [7,8]) (Let [(9,Comb (FuncPartCall 1) ("Prelude","isSpace") [])] (Let [(10,Comb FuncCall ("Prelude","dropWhile") [Var 9,Var 8])] (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Var 11) [Branch (Pattern ("","char") [13]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqChar") [Var 13,Lit (Charc ',')]),Branch (Pattern ("Prelude","True") []) (Let [(14,Comb FuncCall ("Prelude","readsPrec") [Var 2])] (Let [(15,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(16,Comb FuncCall ("Prelude","apply") [Var 14,Var 15])] (Let [(17,Comb FuncCall ("Prelude","apply") [Var 16,Var 12])] (Let [(18,Comb (FuncPartCall 3) ("Prelude","readsComma_4#P13") [Var 3,Var 4,Var 5,Var 7])] (Let [(19,Comb (FuncPartCall 1) ("Prelude","readsComma_4#P14") [])] (Comb FuncCall ("Prelude","build_fold") [Var 18,Var 19,Var 17]))))))),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])]),Branch (Pattern ("Prelude","[]") []) (Var 10)])))])),Func ("Prelude","readsComma_4#P14") 1 Public (TVar 0) (Rule [2] (Var 2)),Func ("Prelude","readsComma_4#P13") 7 Public (TVar 0) (Rule [2,3,4,5,6,7,8] (Let [(9,Comb FuncCall ("Prelude","readsComma_3") [Var 2,Var 3,Var 4,Var 7])] (Let [(10,Comb (FuncPartCall 2) ("Prelude","readsComma_4#P13#P15") [Var 5,Var 6])] (Comb FuncCall ("Prelude","foldr") [Var 10,Var 8,Var 9])))),Func ("Prelude","readsComma_4#P13#P15") 4 Public (TVar 0) (Rule [2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","c5") [Var 2,Var 4])] (Comb FuncCall ("Prelude","apply") [Var 3,Var 6,Var 5]))),Func ("Prelude","readsVal_5") 6 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 4]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [2,3,4,5,6,7] (Let [(8,Comb FuncCall ("Prelude","readsPrec") [Var 2])] (Let [(9,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(10,Comb FuncCall ("Prelude","apply") [Var 8,Var 9])] (Let [(11,Comb FuncCall ("Prelude","apply") [Var 10,Var 7])] (Let [(12,Comb (FuncPartCall 3) ("Prelude","readsVal_5#P16") [Var 3,Var 4,Var 5,Var 6])] (Let [(13,Comb (FuncPartCall 1) ("Prelude","concatMap#P2") [])] (Comb FuncCall ("Prelude","build_fold") [Var 12,Var 13,Var 11])))))))),Func ("Prelude","readsVal_5#P16") 7 Public (TVar 0) (Rule [2,3,4,5,6,7,8] (Let [(9,Comb FuncCall ("Prelude","readsComma_4") [Var 2,Var 3,Var 4,Var 5,Var 7])] (Let [(10,Comb (FuncPartCall 2) ("Prelude","_impl#>>=#Prelude.Monad#[]#P15#P16") [Var 6])] (Comb FuncCall ("Prelude","foldr") [Var 10,Var 8,Var 9])))),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)") 7 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 4]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [2,3,4,5,6,7,8] (Let [(9,Comb (FuncPartCall 1) ("Prelude","readsVal_5") [Var 2,Var 3,Var 4,Var 5,Var 6])] (Let [(10,Comb FuncCall ("Prelude","readsLParen") [Var 9,Var 7])] (Let [(11,Comb FuncCall ("Prelude","lex") [Var 7])] (Let [(12,Comb (FuncPartCall 1) ("Prelude","readsVal_5") [Var 2,Var 3,Var 4,Var 5,Var 6])] (Let [(13,Comb (FuncPartCall 1) ("Prelude","readsLParen") [Var 12])] (Let [(14,Comb (FuncPartCall 2) ("Prelude","readParen.mandatory.470._#lambda334") [Var 13])] (Let [(15,Comb ConsCall ("Prelude","[]") [])] (Let [(16,Comb FuncCall ("Prelude","foldr") [Var 14,Var 15,Var 11])] (Let [(17,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 10,Var 16])] (Comb FuncCall ("Prelude","build") [Var 17]))))))))))),Func ("Prelude","_inst#Prelude.Read#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 4]) (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]])))))) (Rule [2,3,4,5,6] (Let [(7,Comb (FuncPartCall 1) ("Prelude","_impl#readList#Prelude.Read#(,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6])] (Let [(8,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6])] (Comb ConsCall ("Prelude","_Dict#Read") [Var 8,Var 7])))),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [2,3,4,5,6,7] (Let [(8,Comb (FuncPartCall 1) ("Prelude","readsVal_4") [Var 2,Var 3,Var 4,Var 5])] (Let [(9,Comb FuncCall ("Prelude","readsLParen") [Var 8,Var 6])] (Let [(10,Comb FuncCall ("Prelude","lex") [Var 6])] (Let [(11,Comb (FuncPartCall 1) ("Prelude","readsVal_4") [Var 2,Var 3,Var 4,Var 5])] (Let [(12,Comb (FuncPartCall 1) ("Prelude","readsLParen") [Var 11])] (Let [(13,Comb (FuncPartCall 2) ("Prelude","readParen.mandatory.470._#lambda334") [Var 12])] (Let [(14,Comb ConsCall ("Prelude","[]") [])] (Let [(15,Comb FuncCall ("Prelude","foldr") [Var 13,Var 14,Var 10])] (Let [(16,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 9,Var 15])] (Comb FuncCall ("Prelude","build") [Var 16]))))))))))),Func ("Prelude","_inst#Prelude.Read#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]]))))) (Rule [2,3,4,5] (Let [(6,Comb (FuncPartCall 1) ("Prelude","_impl#readList#Prelude.Read#(,,,)") [Var 2,Var 3,Var 4,Var 5])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)") [Var 2,Var 3,Var 4,Var 5])] (Comb ConsCall ("Prelude","_Dict#Read") [Var 7,Var 6])))),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [2,3,4,5,6] (Let [(7,Comb (FuncPartCall 1) ("Prelude","readsVal_3") [Var 2,Var 3,Var 4])] (Let [(8,Comb FuncCall ("Prelude","readsLParen") [Var 7,Var 5])] (Let [(9,Comb FuncCall ("Prelude","lex") [Var 5])] (Let [(10,Comb (FuncPartCall 1) ("Prelude","readsVal_3") [Var 2,Var 3,Var 4])] (Let [(11,Comb (FuncPartCall 1) ("Prelude","readsLParen") [Var 10])] (Let [(12,Comb (FuncPartCall 2) ("Prelude","readParen.mandatory.470._#lambda334") [Var 11])] (Let [(13,Comb ConsCall ("Prelude","[]") [])] (Let [(14,Comb FuncCall ("Prelude","foldr") [Var 12,Var 13,Var 9])] (Let [(15,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 8,Var 14])] (Comb FuncCall ("Prelude","build") [Var 15]))))))))))),Func ("Prelude","_inst#Prelude.Read#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]])))) (Rule [2,3,4] (Let [(5,Comb (FuncPartCall 1) ("Prelude","_impl#readList#Prelude.Read#(,,)") [Var 2,Var 3,Var 4])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#(,,)") [Var 2,Var 3,Var 4])] (Comb ConsCall ("Prelude","_Dict#Read") [Var 6,Var 5])))),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [2,3,4,5] (Let [(6,Comb (FuncPartCall 1) ("Prelude","readsVal_2") [Var 2,Var 3])] (Let [(7,Comb FuncCall ("Prelude","readsLParen") [Var 6,Var 4])] (Let [(8,Comb FuncCall ("Prelude","lex") [Var 4])] (Let [(9,Comb (FuncPartCall 1) ("Prelude","readsVal_2") [Var 2,Var 3])] (Let [(10,Comb (FuncPartCall 1) ("Prelude","readsLParen") [Var 9])] (Let [(11,Comb (FuncPartCall 2) ("Prelude","readParen.mandatory.470._#lambda334") [Var 10])] (Let [(12,Comb ConsCall ("Prelude","[]") [])] (Let [(13,Comb FuncCall ("Prelude","foldr") [Var 11,Var 12,Var 8])] (Let [(14,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 7,Var 13])] (Comb FuncCall ("Prelude","build") [Var 14]))))))))))),Func ("Prelude","_inst#Prelude.Read#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]))) (Rule [2,3] (Let [(4,Comb (FuncPartCall 1) ("Prelude","_impl#readList#Prelude.Read#(,)") [Var 2,Var 3])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#(,)") [Var 2,Var 3])] (Comb ConsCall ("Prelude","_Dict#Read") [Var 5,Var 4])))),Func ("Prelude","_impl#readsPrec#Prelude.Read#()") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","()") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","readsUnit") [Var 2])] (Let [(5,Comb FuncCall ("Prelude","lex") [Var 2])] (Let [(6,Comb (FuncPartCall 1) ("Prelude","readsUnit") [])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","readParen.mandatory.470._#lambda334") [Var 6])] (Let [(8,Comb ConsCall ("Prelude","[]") [])] (Let [(9,Comb FuncCall ("Prelude","foldr") [Var 7,Var 8,Var 5])] (Let [(10,Comb (FuncPartCall 2) ("Prelude","++#P0") [Var 4,Var 9])] (Comb FuncCall ("Prelude","build") [Var 10]))))))))),Func ("Prelude","_inst#Prelude.Read#()") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","()") []]) (Rule [] (Let [(2,Comb (FuncPartCall 1) ("Prelude","_impl#readList#Prelude.Read#()") [])] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#()") [])] (Comb ConsCall ("Prelude","_Dict#Read") [Var 3,Var 2])))),Func ("Prelude","_impl#compare#Prelude.Ord#(,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","Ordering") []))))) (Rule [2,3,-4,-5] (Case Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Case Flex (Var 5) [Branch (Pattern ("Prelude","(,)") [8,9]) (Let [(10,Comb FuncCall ("Prelude","compare") [Var 2])] (Let [(11,Comb FuncCall ("Prelude","apply") [Var 10,Var 6,Var 8])] (Case Rigid (Var 11) [Branch (Pattern ("Prelude","LT") []) (Var 11),Branch (Pattern ("Prelude","GT") []) (Var 11),Branch (Pattern ("Prelude","EQ") []) (Let [(12,Comb FuncCall ("Prelude","compare") [Var 3])] (Comb FuncCall ("Prelude","apply") [Var 12,Var 7,Var 9]))])))])])),Func ("Prelude","_impl#compare#Prelude.Ord#(,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","Ordering") [])))))) (Rule [2,3,4,-5,-6] (Case Flex (Var 5) [Branch (Pattern ("Prelude","(,,)") [7,8,9]) (Case Flex (Var 6) [Branch (Pattern ("Prelude","(,,)") [10,11,12]) (Let [(13,Comb FuncCall ("Prelude","compare") [Var 2])] (Let [(14,Comb FuncCall ("Prelude","apply") [Var 13,Var 7,Var 10])] (Case Rigid (Var 14) [Branch (Pattern ("Prelude","LT") []) (Var 14),Branch (Pattern ("Prelude","GT") []) (Var 14),Branch (Pattern ("Prelude","EQ") []) (Let [(15,Comb FuncCall ("Prelude","compare") [Var 3])] (Let [(16,Comb FuncCall ("Prelude","apply") [Var 15,Var 8,Var 11])] (Case Rigid (Var 16) [Branch (Pattern ("Prelude","LT") []) (Var 16),Branch (Pattern ("Prelude","GT") []) (Var 16),Branch (Pattern ("Prelude","EQ") []) (Let [(17,Comb FuncCall ("Prelude","compare") [Var 4])] (Comb FuncCall ("Prelude","apply") [Var 17,Var 9,Var 12]))])))])))])])),Func ("Prelude","_impl#compare#Prelude.Ord#(,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","Ordering") []))))))) (Rule [2,3,4,5,-6,-7] (Case Flex (Var 6) [Branch (Pattern ("Prelude","(,,,)") [8,9,10,11]) (Case Flex (Var 7) [Branch (Pattern ("Prelude","(,,,)") [12,13,14,15]) (Let [(16,Comb FuncCall ("Prelude","compare") [Var 2])] (Let [(17,Comb FuncCall ("Prelude","apply") [Var 16,Var 8,Var 12])] (Case Rigid (Var 17) [Branch (Pattern ("Prelude","LT") []) (Var 17),Branch (Pattern ("Prelude","GT") []) (Var 17),Branch (Pattern ("Prelude","EQ") []) (Let [(18,Comb ConsCall ("Prelude","(,,)") [Var 9,Var 10,Var 11])] (Let [(19,Comb ConsCall ("Prelude","(,,)") [Var 13,Var 14,Var 15])] (Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,)") [Var 3,Var 4,Var 5,Var 18,Var 19])))])))])])),Func ("Prelude","_impl#compare#Prelude.Ord#(,,,,)") 7 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","Ordering") [])))))))) (Rule [2,3,4,5,6,-7,-8] (Case Flex (Var 7) [Branch (Pattern ("Prelude","(,,,,)") [9,10,11,12,13]) (Case Flex (Var 8) [Branch (Pattern ("Prelude","(,,,,)") [14,15,16,17,18]) (Let [(19,Comb FuncCall ("Prelude","compare") [Var 2])] (Let [(20,Comb FuncCall ("Prelude","apply") [Var 19,Var 9,Var 14])] (Case Rigid (Var 20) [Branch (Pattern ("Prelude","LT") []) (Var 20),Branch (Pattern ("Prelude","GT") []) (Var 20),Branch (Pattern ("Prelude","EQ") []) (Let [(21,Comb FuncCall ("Prelude","compare") [Var 3])] (Let [(22,Comb FuncCall ("Prelude","apply") [Var 21,Var 10,Var 15])] (Case Rigid (Var 22) [Branch (Pattern ("Prelude","LT") []) (Var 22),Branch (Pattern ("Prelude","GT") []) (Var 22),Branch (Pattern ("Prelude","EQ") []) (Let [(23,Comb ConsCall ("Prelude","(,,)") [Var 11,Var 12,Var 13])] (Let [(24,Comb ConsCall ("Prelude","(,,)") [Var 16,Var 17,Var 18])] (Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,)") [Var 4,Var 5,Var 6,Var 23,Var 24])))])))])))])])),Func ("Prelude","_impl#>#Prelude.Ord#(,,,,)") 7 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","Bool") [])))))))) (Rule [2,3,4,5,6,-7,-8] (Let [(-9,Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8])] (Case Rigid (Var (-9)) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") [])]))),Func ("Prelude","_impl#<#Prelude.Ord#(,,,,)") 7 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","Bool") [])))))))) (Rule [2,3,4,5,6,-7,-8] (Let [(-9,Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8])] (Case Rigid (Var (-9)) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") [])]))),Func ("Prelude","_impl#>=#Prelude.Ord#(,,,,)") 7 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","Bool") [])))))))) (Rule [2,3,4,5,6,-7,-8] (Let [(-9,Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8])] (Case Rigid (Var (-9)) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") [])]))),Func ("Prelude","_impl#<=#Prelude.Ord#(,,,,)") 7 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","Bool") [])))))))) (Rule [2,3,4,5,6,-7,-8] (Let [(-9,Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8])] (Case Rigid (Var (-9)) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") [])]))),Func ("Prelude","_impl#max#Prelude.Ord#(,,,,)") 7 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4])))))))) (Rule [2,3,4,5,6,-7,-8] (Let [(-9,Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8])] (Case Rigid (Var (-9)) [Branch (Pattern ("Prelude","LT") []) (Var 7),Branch (Pattern ("Prelude","EQ") []) (Var 7),Branch (Pattern ("Prelude","GT") []) (Var 8)]))),Func ("Prelude","_impl#min#Prelude.Ord#(,,,,)") 7 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4])))))))) (Rule [2,3,4,5,6,-7,-8] (Let [(-9,Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8])] (Case Rigid (Var (-9)) [Branch (Pattern ("Prelude","LT") []) (Var 7),Branch (Pattern ("Prelude","EQ") []) (Var 7),Branch (Pattern ("Prelude","GT") []) (Var 8)]))),Func ("Prelude","_impl#>#Prelude.Ord#(,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","Bool") []))))))) (Rule [2,3,4,5,-6,-7] (Case Flex (Var 6) [Branch (Pattern ("Prelude","(,,,)") [8,9,10,11]) (Case Flex (Var 7) [Branch (Pattern ("Prelude","(,,,)") [12,13,14,15]) (Let [(16,Comb FuncCall ("Prelude","compare") [Var 2])] (Let [(17,Comb FuncCall ("Prelude","apply") [Var 16,Var 8,Var 12])] (Case Rigid (Var 17) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","EQ") []) (Let [(18,Comb ConsCall ("Prelude","(,,)") [Var 9,Var 10,Var 11])] (Let [(19,Comb ConsCall ("Prelude","(,,)") [Var 13,Var 14,Var 15])] (Let [(-20,Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,)") [Var 3,Var 4,Var 5,Var 18,Var 19])] (Case Rigid (Var (-20)) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") [])]))))])))])])),Func ("Prelude","_impl#<#Prelude.Ord#(,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","Bool") []))))))) (Rule [2,3,4,5,-6,-7] (Case Flex (Var 6) [Branch (Pattern ("Prelude","(,,,)") [8,9,10,11]) (Case Flex (Var 7) [Branch (Pattern ("Prelude","(,,,)") [12,13,14,15]) (Let [(16,Comb FuncCall ("Prelude","compare") [Var 2])] (Let [(17,Comb FuncCall ("Prelude","apply") [Var 16,Var 8,Var 12])] (Case Rigid (Var 17) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","EQ") []) (Let [(18,Comb ConsCall ("Prelude","(,,)") [Var 9,Var 10,Var 11])] (Let [(19,Comb ConsCall ("Prelude","(,,)") [Var 13,Var 14,Var 15])] (Let [(-20,Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,)") [Var 3,Var 4,Var 5,Var 18,Var 19])] (Case Rigid (Var (-20)) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") [])]))))])))])])),Func ("Prelude","_impl#>=#Prelude.Ord#(,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","Bool") []))))))) (Rule [2,3,4,5,-6,-7] (Case Flex (Var 6) [Branch (Pattern ("Prelude","(,,,)") [8,9,10,11]) (Case Flex (Var 7) [Branch (Pattern ("Prelude","(,,,)") [12,13,14,15]) (Let [(16,Comb FuncCall ("Prelude","compare") [Var 2])] (Let [(17,Comb FuncCall ("Prelude","apply") [Var 16,Var 8,Var 12])] (Case Rigid (Var 17) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","EQ") []) (Let [(18,Comb ConsCall ("Prelude","(,,)") [Var 9,Var 10,Var 11])] (Let [(19,Comb ConsCall ("Prelude","(,,)") [Var 13,Var 14,Var 15])] (Let [(-20,Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,)") [Var 3,Var 4,Var 5,Var 18,Var 19])] (Case Rigid (Var (-20)) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") [])]))))])))])])),Func ("Prelude","_impl#<=#Prelude.Ord#(,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","Bool") []))))))) (Rule [2,3,4,5,-6,-7] (Case Flex (Var 6) [Branch (Pattern ("Prelude","(,,,)") [8,9,10,11]) (Case Flex (Var 7) [Branch (Pattern ("Prelude","(,,,)") [12,13,14,15]) (Let [(16,Comb FuncCall ("Prelude","compare") [Var 2])] (Let [(17,Comb FuncCall ("Prelude","apply") [Var 16,Var 8,Var 12])] (Case Rigid (Var 17) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","EQ") []) (Let [(18,Comb ConsCall ("Prelude","(,,)") [Var 9,Var 10,Var 11])] (Let [(19,Comb ConsCall ("Prelude","(,,)") [Var 13,Var 14,Var 15])] (Let [(-20,Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,)") [Var 3,Var 4,Var 5,Var 18,Var 19])] (Case Rigid (Var (-20)) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") [])]))))])))])])),Func ("Prelude","_impl#max#Prelude.Ord#(,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]))))))) (Rule [2,3,4,5,-6,-7] (Case Flex (Var 6) [Branch (Pattern ("Prelude","(,,,)") [8,9,10,11]) (Case Flex (Var 7) [Branch (Pattern ("Prelude","(,,,)") [12,13,14,15]) (Let [(16,Comb FuncCall ("Prelude","compare") [Var 2])] (Let [(17,Comb FuncCall ("Prelude","apply") [Var 16,Var 8,Var 12])] (Case Rigid (Var 17) [Branch (Pattern ("Prelude","LT") []) (Var 6),Branch (Pattern ("Prelude","GT") []) (Var 7),Branch (Pattern ("Prelude","EQ") []) (Let [(18,Comb ConsCall ("Prelude","(,,)") [Var 9,Var 10,Var 11])] (Let [(19,Comb ConsCall ("Prelude","(,,)") [Var 13,Var 14,Var 15])] (Let [(-20,Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,)") [Var 3,Var 4,Var 5,Var 18,Var 19])] (Case Rigid (Var (-20)) [Branch (Pattern ("Prelude","LT") []) (Var 6),Branch (Pattern ("Prelude","EQ") []) (Var 6),Branch (Pattern ("Prelude","GT") []) (Var 7)]))))])))])])),Func ("Prelude","_impl#min#Prelude.Ord#(,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]))))))) (Rule [2,3,4,5,-6,-7] (Case Flex (Var 6) [Branch (Pattern ("Prelude","(,,,)") [8,9,10,11]) (Case Flex (Var 7) [Branch (Pattern ("Prelude","(,,,)") [12,13,14,15]) (Let [(16,Comb FuncCall ("Prelude","compare") [Var 2])] (Let [(17,Comb FuncCall ("Prelude","apply") [Var 16,Var 8,Var 12])] (Case Rigid (Var 17) [Branch (Pattern ("Prelude","LT") []) (Var 6),Branch (Pattern ("Prelude","GT") []) (Var 7),Branch (Pattern ("Prelude","EQ") []) (Let [(18,Comb ConsCall ("Prelude","(,,)") [Var 9,Var 10,Var 11])] (Let [(19,Comb ConsCall ("Prelude","(,,)") [Var 13,Var 14,Var 15])] (Let [(-20,Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,)") [Var 3,Var 4,Var 5,Var 18,Var 19])] (Case Rigid (Var (-20)) [Branch (Pattern ("Prelude","LT") []) (Var 6),Branch (Pattern ("Prelude","EQ") []) (Var 6),Branch (Pattern ("Prelude","GT") []) (Var 7)]))))])))])])),Func ("Prelude","_impl#>#Prelude.Ord#(,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","Bool") [])))))) (Rule [2,3,4,-5,-6] (Let [(-7,Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,)") [Var 2,Var 3,Var 4,Var 5,Var 6])] (Case Rigid (Var (-7)) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") [])]))),Func ("Prelude","_impl#<#Prelude.Ord#(,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","Bool") [])))))) (Rule [2,3,4,-5,-6] (Let [(-7,Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,)") [Var 2,Var 3,Var 4,Var 5,Var 6])] (Case Rigid (Var (-7)) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") [])]))),Func ("Prelude","_impl#>=#Prelude.Ord#(,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","Bool") [])))))) (Rule [2,3,4,-5,-6] (Let [(-7,Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,)") [Var 2,Var 3,Var 4,Var 5,Var 6])] (Case Rigid (Var (-7)) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") [])]))),Func ("Prelude","_impl#<=#Prelude.Ord#(,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","Bool") [])))))) (Rule [2,3,4,-5,-6] (Let [(-7,Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,)") [Var 2,Var 3,Var 4,Var 5,Var 6])] (Case Rigid (Var (-7)) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") [])]))),Func ("Prelude","_impl#max#Prelude.Ord#(,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2])))))) (Rule [2,3,4,-5,-6] (Let [(-7,Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,)") [Var 2,Var 3,Var 4,Var 5,Var 6])] (Case Rigid (Var (-7)) [Branch (Pattern ("Prelude","LT") []) (Var 5),Branch (Pattern ("Prelude","EQ") []) (Var 5),Branch (Pattern ("Prelude","GT") []) (Var 6)]))),Func ("Prelude","_impl#min#Prelude.Ord#(,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2])))))) (Rule [2,3,4,-5,-6] (Let [(-7,Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,)") [Var 2,Var 3,Var 4,Var 5,Var 6])] (Case Rigid (Var (-7)) [Branch (Pattern ("Prelude","LT") []) (Var 5),Branch (Pattern ("Prelude","EQ") []) (Var 5),Branch (Pattern ("Prelude","GT") []) (Var 6)]))),Func ("Prelude","_impl#>#Prelude.Ord#(,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [2,3,-4,-5] (Case Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Case Flex (Var 5) [Branch (Pattern ("Prelude","(,)") [8,9]) (Let [(10,Comb FuncCall ("Prelude","compare") [Var 2])] (Let [(11,Comb FuncCall ("Prelude","apply") [Var 10,Var 6,Var 8])] (Case Rigid (Var 11) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","EQ") []) (Let [(12,Comb FuncCall ("Prelude","compare") [Var 3])] (Let [(13,Comb FuncCall ("Prelude","apply") [Var 12,Var 7,Var 9])] (Case Rigid (Var 13) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") [])])))])))])])),Func ("Prelude","_impl#<#Prelude.Ord#(,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [2,3,-4,-5] (Case Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Case Flex (Var 5) [Branch (Pattern ("Prelude","(,)") [8,9]) (Let [(10,Comb FuncCall ("Prelude","compare") [Var 2])] (Let [(11,Comb FuncCall ("Prelude","apply") [Var 10,Var 6,Var 8])] (Case Rigid (Var 11) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","EQ") []) (Let [(12,Comb FuncCall ("Prelude","compare") [Var 3])] (Let [(13,Comb FuncCall ("Prelude","apply") [Var 12,Var 7,Var 9])] (Case Rigid (Var 13) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") [])])))])))])])),Func ("Prelude","_impl#>=#Prelude.Ord#(,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [2,3,-4,-5] (Case Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Case Flex (Var 5) [Branch (Pattern ("Prelude","(,)") [8,9]) (Let [(10,Comb FuncCall ("Prelude","compare") [Var 2])] (Let [(11,Comb FuncCall ("Prelude","apply") [Var 10,Var 6,Var 8])] (Case Rigid (Var 11) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","EQ") []) (Let [(12,Comb FuncCall ("Prelude","compare") [Var 3])] (Let [(13,Comb FuncCall ("Prelude","apply") [Var 12,Var 7,Var 9])] (Case Rigid (Var 13) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") [])])))])))])])),Func ("Prelude","_impl#<=#Prelude.Ord#(,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [2,3,-4,-5] (Case Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Case Flex (Var 5) [Branch (Pattern ("Prelude","(,)") [8,9]) (Let [(10,Comb FuncCall ("Prelude","compare") [Var 2])] (Let [(11,Comb FuncCall ("Prelude","apply") [Var 10,Var 6,Var 8])] (Case Rigid (Var 11) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","EQ") []) (Let [(12,Comb FuncCall ("Prelude","compare") [Var 3])] (Let [(13,Comb FuncCall ("Prelude","apply") [Var 12,Var 7,Var 9])] (Case Rigid (Var 13) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") [])])))])))])])),Func ("Prelude","_impl#max#Prelude.Ord#(,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","(,)") [TVar 0,TVar 1]))))) (Rule [2,3,-4,-5] (Case Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Case Flex (Var 5) [Branch (Pattern ("Prelude","(,)") [8,9]) (Let [(10,Comb FuncCall ("Prelude","compare") [Var 2])] (Let [(11,Comb FuncCall ("Prelude","apply") [Var 10,Var 6,Var 8])] (Case Rigid (Var 11) [Branch (Pattern ("Prelude","LT") []) (Var 4),Branch (Pattern ("Prelude","GT") []) (Var 5),Branch (Pattern ("Prelude","EQ") []) (Let [(12,Comb FuncCall ("Prelude","compare") [Var 3])] (Let [(13,Comb FuncCall ("Prelude","apply") [Var 12,Var 7,Var 9])] (Case Rigid (Var 13) [Branch (Pattern ("Prelude","LT") []) (Var 4),Branch (Pattern ("Prelude","EQ") []) (Var 4),Branch (Pattern ("Prelude","GT") []) (Var 5)])))])))])])),Func ("Prelude","_impl#min#Prelude.Ord#(,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","(,)") [TVar 0,TVar 1]))))) (Rule [2,3,-4,-5] (Case Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Case Flex (Var 5) [Branch (Pattern ("Prelude","(,)") [8,9]) (Let [(10,Comb FuncCall ("Prelude","compare") [Var 2])] (Let [(11,Comb FuncCall ("Prelude","apply") [Var 10,Var 6,Var 8])] (Case Rigid (Var 11) [Branch (Pattern ("Prelude","LT") []) (Var 4),Branch (Pattern ("Prelude","GT") []) (Var 5),Branch (Pattern ("Prelude","EQ") []) (Let [(12,Comb FuncCall ("Prelude","compare") [Var 3])] (Let [(13,Comb FuncCall ("Prelude","apply") [Var 12,Var 7,Var 9])] (Case Rigid (Var 13) [Branch (Pattern ("Prelude","LT") []) (Var 4),Branch (Pattern ("Prelude","EQ") []) (Var 4),Branch (Pattern ("Prelude","GT") []) (Var 5)])))])))])])),Func ("Prelude","_impl#max#Prelude.Ord#()") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","()") []))) (Rule [2,3] (Comb ConsCall ("Prelude","()") [])),Func ("Prelude","_impl#min#Prelude.Ord#()") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","()") []))) (Rule [2,3] (Comb ConsCall ("Prelude","()") [])),Func ("Prelude","_impl#>#Prelude.Ord#()") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") []))) (Rule [2,3] (Comb ConsCall ("Prelude","False") [])),Func ("Prelude","_impl#<#Prelude.Ord#()") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") []))) (Rule [2,3] (Comb ConsCall ("Prelude","False") [])),Func ("Prelude","_impl#>=#Prelude.Ord#()") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") []))) (Rule [2,3] (Comb ConsCall ("Prelude","True") [])),Func ("Prelude","_impl#<=#Prelude.Ord#()") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") []))) (Rule [2,3] (Comb ConsCall ("Prelude","True") [])),Func ("Prelude","_impl#/=#Prelude.Eq#(,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [2,3,-4,-5] (Case Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Case Flex (Var 5) [Branch (Pattern ("Prelude","(,)") [8,9]) (Let [(10,Comb FuncCall ("Prelude","/=") [Var 2])] (Let [(11,Comb FuncCall ("Prelude","apply") [Var 10,Var 6,Var 8])] (Case Flex (Var 11) [Branch (Pattern ("Prelude","True") []) (Var 11),Branch (Pattern ("Prelude","False") []) (Let [(12,Comb FuncCall ("Prelude","/=") [Var 3])] (Comb FuncCall ("Prelude","apply") [Var 12,Var 7,Var 9]))])))])])),Func ("Prelude","_impl#/=#Prelude.Eq#(,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","Bool") [])))))) (Rule [2,3,4,-5,-6] (Case Flex (Var 5) [Branch (Pattern ("Prelude","(,,)") [7,8,9]) (Case Flex (Var 6) [Branch (Pattern ("Prelude","(,,)") [10,11,12]) (Let [(13,Comb FuncCall ("Prelude","/=") [Var 2])] (Let [(14,Comb FuncCall ("Prelude","apply") [Var 13,Var 7,Var 10])] (Case Flex (Var 14) [Branch (Pattern ("Prelude","True") []) (Var 14),Branch (Pattern ("Prelude","False") []) (Let [(15,Comb FuncCall ("Prelude","/=") [Var 3])] (Let [(16,Comb FuncCall ("Prelude","apply") [Var 15,Var 8,Var 11])] (Case Flex (Var 16) [Branch (Pattern ("Prelude","True") []) (Var 16),Branch (Pattern ("Prelude","False") []) (Let [(17,Comb FuncCall ("Prelude","/=") [Var 4])] (Comb FuncCall ("Prelude","apply") [Var 17,Var 9,Var 12]))])))])))])])),Func ("Prelude","_impl#/=#Prelude.Eq#(,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","Bool") []))))))) (Rule [2,3,4,5,-6,-7] (Case Flex (Var 6) [Branch (Pattern ("Prelude","(,,,)") [8,9,10,11]) (Case Flex (Var 7) [Branch (Pattern ("Prelude","(,,,)") [12,13,14,15]) (Let [(16,Comb FuncCall ("Prelude","/=") [Var 2])] (Let [(17,Comb FuncCall ("Prelude","apply") [Var 16,Var 8,Var 12])] (Case Flex (Var 17) [Branch (Pattern ("Prelude","True") []) (Var 17),Branch (Pattern ("Prelude","False") []) (Let [(18,Comb FuncCall ("Prelude","/=") [Var 3])] (Let [(19,Comb FuncCall ("Prelude","apply") [Var 18,Var 9,Var 13])] (Case Flex (Var 19) [Branch (Pattern ("Prelude","True") []) (Var 19),Branch (Pattern ("Prelude","False") []) (Let [(20,Comb FuncCall ("Prelude","/=") [Var 4])] (Let [(21,Comb FuncCall ("Prelude","apply") [Var 20,Var 10,Var 14])] (Case Flex (Var 21) [Branch (Pattern ("Prelude","True") []) (Var 21),Branch (Pattern ("Prelude","False") []) (Let [(22,Comb FuncCall ("Prelude","/=") [Var 5])] (Comb FuncCall ("Prelude","apply") [Var 22,Var 11,Var 15]))])))])))])))])])),Func ("Prelude","_impl#/=#Prelude.Eq#(,,,,)") 7 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","Bool") [])))))))) (Rule [2,3,4,5,6,-7,-8] (Case Flex (Var 7) [Branch (Pattern ("Prelude","(,,,,)") [9,10,11,12,13]) (Case Flex (Var 8) [Branch (Pattern ("Prelude","(,,,,)") [14,15,16,17,18]) (Let [(19,Comb FuncCall ("Prelude","/=") [Var 2])] (Let [(20,Comb FuncCall ("Prelude","apply") [Var 19,Var 9,Var 14])] (Case Flex (Var 20) [Branch (Pattern ("Prelude","True") []) (Var 20),Branch (Pattern ("Prelude","False") []) (Let [(21,Comb ConsCall ("Prelude","(,,,)") [Var 10,Var 11,Var 12,Var 13])] (Let [(22,Comb ConsCall ("Prelude","(,,,)") [Var 15,Var 16,Var 17,Var 18])] (Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#(,,,)") [Var 3,Var 4,Var 5,Var 6,Var 21,Var 22])))])))])])),Func ("Prelude","_impl#/=#Prelude.Eq#(,,,,,)") 8 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 5]) (FuncType (TCons ("Prelude","(,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5]) (FuncType (TCons ("Prelude","(,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5]) (TCons ("Prelude","Bool") []))))))))) (Rule [2,3,4,5,6,7,-8,-9] (Case Flex (Var 8) [Branch (Pattern ("Prelude","(,,,,,)") [10,11,12,13,14,15]) (Case Flex (Var 9) [Branch (Pattern ("Prelude","(,,,,,)") [16,17,18,19,20,21]) (Let [(22,Comb FuncCall ("Prelude","/=") [Var 2])] (Let [(23,Comb FuncCall ("Prelude","apply") [Var 22,Var 10,Var 16])] (Case Flex (Var 23) [Branch (Pattern ("Prelude","True") []) (Var 23),Branch (Pattern ("Prelude","False") []) (Let [(24,Comb FuncCall ("Prelude","/=") [Var 3])] (Let [(25,Comb FuncCall ("Prelude","apply") [Var 24,Var 11,Var 17])] (Case Flex (Var 25) [Branch (Pattern ("Prelude","True") []) (Var 25),Branch (Pattern ("Prelude","False") []) (Let [(26,Comb ConsCall ("Prelude","(,,,)") [Var 12,Var 13,Var 14,Var 15])] (Let [(27,Comb ConsCall ("Prelude","(,,,)") [Var 18,Var 19,Var 20,Var 21])] (Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#(,,,)") [Var 4,Var 5,Var 6,Var 7,Var 26,Var 27])))])))])))])])),Func ("Prelude","_impl#/=#Prelude.Eq#(,,,,,,)") 9 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 5]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 6]) (FuncType (TCons ("Prelude","(,,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 6,TVar 5]) (FuncType (TCons ("Prelude","(,,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 6,TVar 5]) (TCons ("Prelude","Bool") [])))))))))) (Rule [2,3,4,5,6,7,8,-9,-10] (Case Flex (Var 9) [Branch (Pattern ("Prelude","(,,,,,,)") [11,12,13,14,15,16,17]) (Case Flex (Var 10) [Branch (Pattern ("Prelude","(,,,,,,)") [18,19,20,21,22,23,24]) (Let [(25,Comb FuncCall ("Prelude","/=") [Var 2])] (Let [(26,Comb FuncCall ("Prelude","apply") [Var 25,Var 11,Var 18])] (Case Flex (Var 26) [Branch (Pattern ("Prelude","True") []) (Var 26),Branch (Pattern ("Prelude","False") []) (Let [(27,Comb ConsCall ("Prelude","(,,,,,)") [Var 12,Var 13,Var 14,Var 15,Var 16,Var 17])] (Let [(28,Comb ConsCall ("Prelude","(,,,,,)") [Var 19,Var 20,Var 21,Var 22,Var 23,Var 24])] (Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#(,,,,,)") [Var 3,Var 4,Var 5,Var 6,Var 8,Var 7,Var 27,Var 28])))])))])])),Func ("Prelude","_impl#==#Prelude.Eq#(,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [2,3,-4,-5] (Case Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Case Flex (Var 5) [Branch (Pattern ("Prelude","(,)") [8,9]) (Let [(10,Comb FuncCall ("Prelude","==") [Var 2])] (Let [(11,Comb FuncCall ("Prelude","apply") [Var 10,Var 6,Var 8])] (Case Flex (Var 11) [Branch (Pattern ("Prelude","True") []) (Let [(12,Comb FuncCall ("Prelude","==") [Var 3])] (Comb FuncCall ("Prelude","apply") [Var 12,Var 7,Var 9])),Branch (Pattern ("Prelude","False") []) (Var 11)])))])])),Func ("Prelude","_impl#==#Prelude.Eq#(,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","Bool") [])))))) (Rule [2,3,4,-5,-6] (Case Flex (Var 5) [Branch (Pattern ("Prelude","(,,)") [7,8,9]) (Case Flex (Var 6) [Branch (Pattern ("Prelude","(,,)") [10,11,12]) (Let [(13,Comb FuncCall ("Prelude","==") [Var 2])] (Let [(14,Comb FuncCall ("Prelude","apply") [Var 13,Var 7,Var 10])] (Case Flex (Var 14) [Branch (Pattern ("Prelude","True") []) (Let [(15,Comb FuncCall ("Prelude","==") [Var 3])] (Let [(16,Comb FuncCall ("Prelude","apply") [Var 15,Var 8,Var 11])] (Case Flex (Var 16) [Branch (Pattern ("Prelude","True") []) (Let [(17,Comb FuncCall ("Prelude","==") [Var 4])] (Comb FuncCall ("Prelude","apply") [Var 17,Var 9,Var 12])),Branch (Pattern ("Prelude","False") []) (Var 16)]))),Branch (Pattern ("Prelude","False") []) (Var 14)])))])])),Func ("Prelude","_impl#==#Prelude.Eq#(,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","Bool") []))))))) (Rule [2,3,4,5,-6,-7] (Case Flex (Var 6) [Branch (Pattern ("Prelude","(,,,)") [8,9,10,11]) (Case Flex (Var 7) [Branch (Pattern ("Prelude","(,,,)") [12,13,14,15]) (Let [(16,Comb FuncCall ("Prelude","==") [Var 2])] (Let [(17,Comb FuncCall ("Prelude","apply") [Var 16,Var 8,Var 12])] (Case Flex (Var 17) [Branch (Pattern ("Prelude","True") []) (Let [(18,Comb FuncCall ("Prelude","==") [Var 3])] (Let [(19,Comb FuncCall ("Prelude","apply") [Var 18,Var 9,Var 13])] (Case Flex (Var 19) [Branch (Pattern ("Prelude","True") []) (Let [(20,Comb FuncCall ("Prelude","==") [Var 4])] (Let [(21,Comb FuncCall ("Prelude","apply") [Var 20,Var 10,Var 14])] (Case Flex (Var 21) [Branch (Pattern ("Prelude","True") []) (Let [(22,Comb FuncCall ("Prelude","==") [Var 5])] (Comb FuncCall ("Prelude","apply") [Var 22,Var 11,Var 15])),Branch (Pattern ("Prelude","False") []) (Var 21)]))),Branch (Pattern ("Prelude","False") []) (Var 19)]))),Branch (Pattern ("Prelude","False") []) (Var 17)])))])])),Func ("Prelude","_impl#==#Prelude.Eq#(,,,,)") 7 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","Bool") [])))))))) (Rule [2,3,4,5,6,-7,-8] (Case Flex (Var 7) [Branch (Pattern ("Prelude","(,,,,)") [9,10,11,12,13]) (Case Flex (Var 8) [Branch (Pattern ("Prelude","(,,,,)") [14,15,16,17,18]) (Let [(19,Comb FuncCall ("Prelude","==") [Var 2])] (Let [(20,Comb FuncCall ("Prelude","apply") [Var 19,Var 9,Var 14])] (Case Flex (Var 20) [Branch (Pattern ("Prelude","True") []) (Let [(21,Comb ConsCall ("Prelude","(,,,)") [Var 10,Var 11,Var 12,Var 13])] (Let [(22,Comb ConsCall ("Prelude","(,,,)") [Var 15,Var 16,Var 17,Var 18])] (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#(,,,)") [Var 3,Var 4,Var 5,Var 6,Var 21,Var 22]))),Branch (Pattern ("Prelude","False") []) (Var 20)])))])])),Func ("Prelude","_impl#==#Prelude.Eq#(,,,,,)") 8 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 5]) (FuncType (TCons ("Prelude","(,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5]) (FuncType (TCons ("Prelude","(,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5]) (TCons ("Prelude","Bool") []))))))))) (Rule [2,3,4,5,6,7,-8,-9] (Case Flex (Var 8) [Branch (Pattern ("Prelude","(,,,,,)") [10,11,12,13,14,15]) (Case Flex (Var 9) [Branch (Pattern ("Prelude","(,,,,,)") [16,17,18,19,20,21]) (Let [(22,Comb FuncCall ("Prelude","==") [Var 2])] (Let [(23,Comb FuncCall ("Prelude","apply") [Var 22,Var 10,Var 16])] (Case Flex (Var 23) [Branch (Pattern ("Prelude","True") []) (Let [(24,Comb FuncCall ("Prelude","==") [Var 3])] (Let [(25,Comb FuncCall ("Prelude","apply") [Var 24,Var 11,Var 17])] (Case Flex (Var 25) [Branch (Pattern ("Prelude","True") []) (Let [(26,Comb ConsCall ("Prelude","(,,,)") [Var 12,Var 13,Var 14,Var 15])] (Let [(27,Comb ConsCall ("Prelude","(,,,)") [Var 18,Var 19,Var 20,Var 21])] (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#(,,,)") [Var 4,Var 5,Var 6,Var 7,Var 26,Var 27]))),Branch (Pattern ("Prelude","False") []) (Var 25)]))),Branch (Pattern ("Prelude","False") []) (Var 23)])))])])),Func ("Prelude","_impl#==#Prelude.Eq#(,,,,,,)") 9 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 5]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 6]) (FuncType (TCons ("Prelude","(,,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 6,TVar 5]) (FuncType (TCons ("Prelude","(,,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 6,TVar 5]) (TCons ("Prelude","Bool") [])))))))))) (Rule [2,3,4,5,6,7,8,-9,-10] (Case Flex (Var 9) [Branch (Pattern ("Prelude","(,,,,,,)") [11,12,13,14,15,16,17]) (Case Flex (Var 10) [Branch (Pattern ("Prelude","(,,,,,,)") [18,19,20,21,22,23,24]) (Let [(25,Comb FuncCall ("Prelude","==") [Var 2])] (Let [(26,Comb FuncCall ("Prelude","apply") [Var 25,Var 11,Var 18])] (Case Flex (Var 26) [Branch (Pattern ("Prelude","True") []) (Let [(27,Comb ConsCall ("Prelude","(,,,,,)") [Var 12,Var 13,Var 14,Var 15,Var 16,Var 17])] (Let [(28,Comb ConsCall ("Prelude","(,,,,,)") [Var 19,Var 20,Var 21,Var 22,Var 23,Var 24])] (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#(,,,,,)") [Var 3,Var 4,Var 5,Var 6,Var 8,Var 7,Var 27,Var 28]))),Branch (Pattern ("Prelude","False") []) (Var 26)])))])])),Func ("Prelude","_inst#Prelude.Eq#(,,,,,,)") 7 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 5]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 6]) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","(,,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6]])))))))) (Rule [2,3,4,5,6,7,8] (Let [(9,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#(,,,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8])] (Let [(10,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#(,,,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8])] (Comb ConsCall ("Prelude","_Dict#Eq") [Var 9,Var 10])))),Func ("Prelude","_inst#Prelude.Eq#(,,,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 5]) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","(,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5]]))))))) (Rule [2,3,4,5,6,7] (Let [(8,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#(,,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7])] (Let [(9,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#(,,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7])] (Comb ConsCall ("Prelude","_Dict#Eq") [Var 8,Var 9])))),Func ("Prelude","_inst#Prelude.Eq#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]])))))) (Rule [2,3,4,5,6] (Let [(7,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#(,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6])] (Let [(8,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#(,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6])] (Comb ConsCall ("Prelude","_Dict#Eq") [Var 7,Var 8])))),Func ("Prelude","_inst#Prelude.Ord#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]])))))) (Rule [2,3,4,5,6] (Let [(7,Comb FuncCall ("Prelude","_inst#Prelude.Ord#(,,,,)#A4") [Var 2])] (Let [(8,Comb FuncCall ("Prelude","_inst#Prelude.Ord#(,,,,)#A3") [Var 3])] (Let [(9,Comb FuncCall ("Prelude","_inst#Prelude.Ord#(,,,,)#A2") [Var 4])] (Let [(10,Comb FuncCall ("Prelude","_inst#Prelude.Ord#(,,,,)#A1") [Var 5])] (Let [(11,Comb FuncCall ("Prelude","_inst#Prelude.Ord#(,,,,)#A0") [Var 6])] (Let [(12,Comb FuncCall ("Prelude","_inst#Prelude.Eq#(,,,,)") [Var 7,Var 8,Var 9,Var 10,Var 11])] (Let [(13,Comb (FuncPartCall 2) ("Prelude","_impl#compare#Prelude.Ord#(,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6])] (Let [(14,Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#(,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6])] (Let [(15,Comb (FuncPartCall 2) ("Prelude","_impl#>=#Prelude.Ord#(,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6])] (Let [(16,Comb (FuncPartCall 2) ("Prelude","_impl#<#Prelude.Ord#(,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6])] (Let [(17,Comb (FuncPartCall 2) ("Prelude","_impl#>#Prelude.Ord#(,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6])] (Let [(18,Comb (FuncPartCall 2) ("Prelude","_impl#min#Prelude.Ord#(,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6])] (Let [(19,Comb (FuncPartCall 2) ("Prelude","_impl#max#Prelude.Ord#(,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6])] (Comb ConsCall ("Prelude","_Dict#Ord") [Var 12,Var 13,Var 14,Var 15,Var 16,Var 17,Var 18,Var 19]))))))))))))))),Func ("Prelude","_inst#Prelude.Ord#(,,,,)#A4") 1 Public (TVar 0) (Rule [2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Ord") [3,4,5,6,7,8,9,10]) (Var 3)])),Func ("Prelude","_inst#Prelude.Ord#(,,,,)#A3") 1 Public (TVar 0) (Rule [2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Ord") [3,4,5,6,7,8,9,10]) (Var 3)])),Func ("Prelude","_inst#Prelude.Ord#(,,,,)#A2") 1 Public (TVar 0) (Rule [2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Ord") [3,4,5,6,7,8,9,10]) (Var 3)])),Func ("Prelude","_inst#Prelude.Ord#(,,,,)#A1") 1 Public (TVar 0) (Rule [2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Ord") [3,4,5,6,7,8,9,10]) (Var 3)])),Func ("Prelude","_inst#Prelude.Ord#(,,,,)#A0") 1 Public (TVar 0) (Rule [2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Ord") [3,4,5,6,7,8,9,10]) (Var 3)])),Func ("Prelude","_inst#Prelude.Eq#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]]))))) (Rule [2,3,4,5] (Let [(6,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#(,,,)") [Var 2,Var 3,Var 4,Var 5])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#(,,,)") [Var 2,Var 3,Var 4,Var 5])] (Comb ConsCall ("Prelude","_Dict#Eq") [Var 6,Var 7])))),Func ("Prelude","_inst#Prelude.Ord#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]]))))) (Rule [2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","_inst#Prelude.Ord#(,,,)#A8") [Var 2])] (Let [(7,Comb FuncCall ("Prelude","_inst#Prelude.Ord#(,,,)#A7") [Var 3])] (Let [(8,Comb FuncCall ("Prelude","_inst#Prelude.Ord#(,,,)#A6") [Var 4])] (Let [(9,Comb FuncCall ("Prelude","_inst#Prelude.Ord#(,,,)#A5") [Var 5])] (Let [(10,Comb FuncCall ("Prelude","_inst#Prelude.Eq#(,,,)") [Var 6,Var 7,Var 8,Var 9])] (Let [(11,Comb (FuncPartCall 2) ("Prelude","_impl#compare#Prelude.Ord#(,,,)") [Var 2,Var 3,Var 4,Var 5])] (Let [(12,Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#(,,,)") [Var 2,Var 3,Var 4,Var 5])] (Let [(13,Comb (FuncPartCall 2) ("Prelude","_impl#>=#Prelude.Ord#(,,,)") [Var 2,Var 3,Var 4,Var 5])] (Let [(14,Comb (FuncPartCall 2) ("Prelude","_impl#<#Prelude.Ord#(,,,)") [Var 2,Var 3,Var 4,Var 5])] (Let [(15,Comb (FuncPartCall 2) ("Prelude","_impl#>#Prelude.Ord#(,,,)") [Var 2,Var 3,Var 4,Var 5])] (Let [(16,Comb (FuncPartCall 2) ("Prelude","_impl#min#Prelude.Ord#(,,,)") [Var 2,Var 3,Var 4,Var 5])] (Let [(17,Comb (FuncPartCall 2) ("Prelude","_impl#max#Prelude.Ord#(,,,)") [Var 2,Var 3,Var 4,Var 5])] (Comb ConsCall ("Prelude","_Dict#Ord") [Var 10,Var 11,Var 12,Var 13,Var 14,Var 15,Var 16,Var 17])))))))))))))),Func ("Prelude","_inst#Prelude.Ord#(,,,)#A8") 1 Public (TVar 0) (Rule [2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Ord") [3,4,5,6,7,8,9,10]) (Var 3)])),Func ("Prelude","_inst#Prelude.Ord#(,,,)#A7") 1 Public (TVar 0) (Rule [2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Ord") [3,4,5,6,7,8,9,10]) (Var 3)])),Func ("Prelude","_inst#Prelude.Ord#(,,,)#A6") 1 Public (TVar 0) (Rule [2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Ord") [3,4,5,6,7,8,9,10]) (Var 3)])),Func ("Prelude","_inst#Prelude.Ord#(,,,)#A5") 1 Public (TVar 0) (Rule [2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","_Dict#Ord") [3,4,5,6,7,8,9,10]) (Var 3)])),Func ("Prelude","_inst#Prelude.Eq#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]])))) (Rule [2,3,4] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#(,,)") [Var 2,Var 3,Var 4])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#(,,)") [Var 2,Var 3,Var 4])] (Comb ConsCall ("Prelude","_Dict#Eq") [Var 5,Var 6])))),Func ("Prelude","_inst#Prelude.Ord#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]])))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 2])] (Let [(6,Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 3])] (Let [(7,Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 4])] (Let [(8,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#(,,)") [Var 5,Var 6,Var 7])] (Let [(9,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#(,,)") [Var 5,Var 6,Var 7])] (Let [(10,Comb ConsCall ("Prelude","_Dict#Eq") [Var 8,Var 9])] (Let [(11,Comb (FuncPartCall 2) ("Prelude","_impl#compare#Prelude.Ord#(,,)") [Var 2,Var 3,Var 4])] (Let [(12,Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#(,,)") [Var 2,Var 3,Var 4])] (Let [(13,Comb (FuncPartCall 2) ("Prelude","_impl#>=#Prelude.Ord#(,,)") [Var 2,Var 3,Var 4])] (Let [(14,Comb (FuncPartCall 2) ("Prelude","_impl#<#Prelude.Ord#(,,)") [Var 2,Var 3,Var 4])] (Let [(15,Comb (FuncPartCall 2) ("Prelude","_impl#>#Prelude.Ord#(,,)") [Var 2,Var 3,Var 4])] (Let [(16,Comb (FuncPartCall 2) ("Prelude","_impl#min#Prelude.Ord#(,,)") [Var 2,Var 3,Var 4])] (Let [(17,Comb (FuncPartCall 2) ("Prelude","_impl#max#Prelude.Ord#(,,)") [Var 2,Var 3,Var 4])] (Comb ConsCall ("Prelude","_Dict#Ord") [Var 10,Var 11,Var 12,Var 13,Var 14,Var 15,Var 16,Var 17]))))))))))))))),Func ("Prelude","_inst#Prelude.Eq#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]))) (Rule [2,3] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#(,)") [Var 2,Var 3])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#(,)") [Var 2,Var 3])] (Comb ConsCall ("Prelude","_Dict#Eq") [Var 4,Var 5])))),Func ("Prelude","_inst#Prelude.Ord#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]))) (Rule [2,3] (Let [(4,Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 2])] (Let [(5,Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 3])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#(,)") [Var 4,Var 5])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#(,)") [Var 4,Var 5])] (Let [(8,Comb ConsCall ("Prelude","_Dict#Eq") [Var 6,Var 7])] (Let [(9,Comb (FuncPartCall 2) ("Prelude","_impl#compare#Prelude.Ord#(,)") [Var 2,Var 3])] (Let [(10,Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#(,)") [Var 2,Var 3])] (Let [(11,Comb (FuncPartCall 2) ("Prelude","_impl#>=#Prelude.Ord#(,)") [Var 2,Var 3])] (Let [(12,Comb (FuncPartCall 2) ("Prelude","_impl#<#Prelude.Ord#(,)") [Var 2,Var 3])] (Let [(13,Comb (FuncPartCall 2) ("Prelude","_impl#>#Prelude.Ord#(,)") [Var 2,Var 3])] (Let [(14,Comb (FuncPartCall 2) ("Prelude","_impl#min#Prelude.Ord#(,)") [Var 2,Var 3])] (Let [(15,Comb (FuncPartCall 2) ("Prelude","_impl#max#Prelude.Ord#(,)") [Var 2,Var 3])] (Comb ConsCall ("Prelude","_Dict#Ord") [Var 8,Var 9,Var 10,Var 11,Var 12,Var 13,Var 14,Var 15])))))))))))))),Func ("Prelude","_impl#/=#Prelude.Eq#()") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") []))) (Rule [-2,-3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","()") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","False") [])])])),Func ("Prelude","_impl#==#Prelude.Eq#()") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") []))) (Rule [-2,-3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","()") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("Prelude","_inst#Prelude.Eq#()") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","()") []]) (Rule [] (Let [(2,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#()") [])] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#()") [])] (Comb ConsCall ("Prelude","_Dict#Eq") [Var 2,Var 3])))),Func ("Prelude","_inst#Prelude.Ord#()") 0 Public (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","()") []]) (Rule [] (Let [(2,Comb (FuncPartCall 2) ("Prelude","_impl#compare#Prelude.Ord#()") [])] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#()") [])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#/=#Prelude.Eq#()") [])] (Let [(5,Comb ConsCall ("Prelude","_Dict#Eq") [Var 3,Var 4])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#()") [])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","_impl#>=#Prelude.Ord#()") [])] (Let [(8,Comb (FuncPartCall 2) ("Prelude","_impl#<#Prelude.Ord#()") [])] (Let [(9,Comb (FuncPartCall 2) ("Prelude","_impl#>#Prelude.Ord#()") [])] (Let [(10,Comb (FuncPartCall 2) ("Prelude","_impl#min#Prelude.Ord#()") [])] (Let [(11,Comb (FuncPartCall 2) ("Prelude","_impl#max#Prelude.Ord#()") [])] (Comb ConsCall ("Prelude","_Dict#Ord") [Var 5,Var 2,Var 6,Var 7,Var 8,Var 9,Var 10,Var 11])))))))))))),Func ("Prelude","showTuple._#lambda297") 3 Public (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,4] (Let [(5,Comb FuncCall ("Prelude","apply") [Var 3,Var 4])] (Let [(6,Comb ConsCall ("","char") [Lit (Charc ',')])] (Let [(7,Comb ConsCall ("Prelude",":") [Var 6,Var 5])] (Comb FuncCall ("Prelude","apply") [Var 2,Var 7]))))),Func ("Prelude","unzip3._#selFP15#zs") 1 Public (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 1],TCons ("Prelude","[]") [TVar 2]]) (TCons ("Prelude","[]") [TVar 2])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,,)") [3,4,5]) (Var 5)])),Func ("Prelude","unzip3._#selFP14#ys") 1 Public (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 1],TCons ("Prelude","[]") [TVar 2]]) (TCons ("Prelude","[]") [TVar 1])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,,)") [3,4,5]) (Var 4)])),Func ("Prelude","unzip3._#selFP13#xs") 1 Public (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 1],TCons ("Prelude","[]") [TVar 2]]) (TCons ("Prelude","[]") [TVar 0])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,,)") [3,4,5]) (Var 3)])),Func ("Prelude","unzip._#selFP11#ys") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 1]]) (TCons ("Prelude","[]") [TVar 1])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Var 4)])),Func ("Prelude","unzip._#selFP10#xs") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 1]]) (TCons ("Prelude","[]") [TVar 0])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Var 3)])),Func ("Prelude","_impl#maxBound#Prelude.Bounded#(,,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 4]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]))))))) (Rule [2,3,4,5,6,-7] (Case Flex (Var 7) [Branch (Pattern ("Prelude","()") []) (Let [(8,Comb FuncCall ("Prelude","maxBound") [Var 2])] (Let [(9,Var 7)] (Let [(10,Comb FuncCall ("Prelude","apply") [Var 8,Var 9])] (Let [(11,Comb FuncCall ("Prelude","maxBound") [Var 3])] (Let [(12,Var 7)] (Let [(13,Comb FuncCall ("Prelude","apply") [Var 11,Var 12])] (Let [(14,Comb FuncCall ("Prelude","maxBound") [Var 4])] (Let [(15,Var 7)] (Let [(16,Comb FuncCall ("Prelude","apply") [Var 14,Var 15])] (Let [(17,Comb FuncCall ("Prelude","maxBound") [Var 5])] (Let [(18,Var 7)] (Let [(19,Comb FuncCall ("Prelude","apply") [Var 17,Var 18])] (Let [(20,Comb FuncCall ("Prelude","maxBound") [Var 6])] (Let [(21,Var 7)] (Let [(22,Comb FuncCall ("Prelude","apply") [Var 20,Var 21])] (Comb ConsCall ("Prelude","(,,,,)") [Var 10,Var 13,Var 16,Var 19,Var 22]))))))))))))))))])),Func ("Prelude","_impl#minBound#Prelude.Bounded#(,,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 4]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]))))))) (Rule [2,3,4,5,6,-7] (Case Flex (Var 7) [Branch (Pattern ("Prelude","()") []) (Let [(8,Comb FuncCall ("Prelude","minBound") [Var 2])] (Let [(9,Var 7)] (Let [(10,Comb FuncCall ("Prelude","apply") [Var 8,Var 9])] (Let [(11,Comb FuncCall ("Prelude","minBound") [Var 3])] (Let [(12,Var 7)] (Let [(13,Comb FuncCall ("Prelude","apply") [Var 11,Var 12])] (Let [(14,Comb FuncCall ("Prelude","minBound") [Var 4])] (Let [(15,Var 7)] (Let [(16,Comb FuncCall ("Prelude","apply") [Var 14,Var 15])] (Let [(17,Comb FuncCall ("Prelude","minBound") [Var 5])] (Let [(18,Var 7)] (Let [(19,Comb FuncCall ("Prelude","apply") [Var 17,Var 18])] (Let [(20,Comb FuncCall ("Prelude","minBound") [Var 6])] (Let [(21,Var 7)] (Let [(22,Comb FuncCall ("Prelude","apply") [Var 20,Var 21])] (Comb ConsCall ("Prelude","(,,,,)") [Var 10,Var 13,Var 16,Var 19,Var 22]))))))))))))))))])),Func ("Prelude","_inst#Prelude.Bounded#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 4]) (TCons ("Prelude","_Dict#Bounded") [TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]])))))) (Rule [2,3,4,5,6] (Let [(7,Comb (FuncPartCall 1) ("Prelude","_impl#minBound#Prelude.Bounded#(,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6])] (Let [(8,Comb (FuncPartCall 1) ("Prelude","_impl#maxBound#Prelude.Bounded#(,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6])] (Comb ConsCall ("Prelude","_Dict#Bounded") [Var 7,Var 8])))),Func ("Prelude","_impl#maxBound#Prelude.Bounded#(,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 3]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3])))))) (Rule [2,3,4,5,-6] (Case Flex (Var 6) [Branch (Pattern ("Prelude","()") []) (Let [(7,Comb FuncCall ("Prelude","maxBound") [Var 2])] (Let [(8,Var 6)] (Let [(9,Comb FuncCall ("Prelude","apply") [Var 7,Var 8])] (Let [(10,Comb FuncCall ("Prelude","maxBound") [Var 3])] (Let [(11,Var 6)] (Let [(12,Comb FuncCall ("Prelude","apply") [Var 10,Var 11])] (Let [(13,Comb FuncCall ("Prelude","maxBound") [Var 4])] (Let [(14,Var 6)] (Let [(15,Comb FuncCall ("Prelude","apply") [Var 13,Var 14])] (Let [(16,Comb FuncCall ("Prelude","maxBound") [Var 5])] (Let [(17,Var 6)] (Let [(18,Comb FuncCall ("Prelude","apply") [Var 16,Var 17])] (Comb ConsCall ("Prelude","(,,,)") [Var 9,Var 12,Var 15,Var 18])))))))))))))])),Func ("Prelude","_impl#minBound#Prelude.Bounded#(,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 3]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3])))))) (Rule [2,3,4,5,-6] (Case Flex (Var 6) [Branch (Pattern ("Prelude","()") []) (Let [(7,Comb FuncCall ("Prelude","minBound") [Var 2])] (Let [(8,Var 6)] (Let [(9,Comb FuncCall ("Prelude","apply") [Var 7,Var 8])] (Let [(10,Comb FuncCall ("Prelude","minBound") [Var 3])] (Let [(11,Var 6)] (Let [(12,Comb FuncCall ("Prelude","apply") [Var 10,Var 11])] (Let [(13,Comb FuncCall ("Prelude","minBound") [Var 4])] (Let [(14,Var 6)] (Let [(15,Comb FuncCall ("Prelude","apply") [Var 13,Var 14])] (Let [(16,Comb FuncCall ("Prelude","minBound") [Var 5])] (Let [(17,Var 6)] (Let [(18,Comb FuncCall ("Prelude","apply") [Var 16,Var 17])] (Comb ConsCall ("Prelude","(,,,)") [Var 9,Var 12,Var 15,Var 18])))))))))))))])),Func ("Prelude","_inst#Prelude.Bounded#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 3]) (TCons ("Prelude","_Dict#Bounded") [TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]]))))) (Rule [2,3,4,5] (Let [(6,Comb (FuncPartCall 1) ("Prelude","_impl#minBound#Prelude.Bounded#(,,,)") [Var 2,Var 3,Var 4,Var 5])] (Let [(7,Comb (FuncPartCall 1) ("Prelude","_impl#maxBound#Prelude.Bounded#(,,,)") [Var 2,Var 3,Var 4,Var 5])] (Comb ConsCall ("Prelude","_Dict#Bounded") [Var 6,Var 7])))),Func ("Prelude","_impl#maxBound#Prelude.Bounded#(,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 2]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]))))) (Rule [2,3,4,-5] (Case Flex (Var 5) [Branch (Pattern ("Prelude","()") []) (Let [(6,Comb FuncCall ("Prelude","maxBound") [Var 2])] (Let [(7,Var 5)] (Let [(8,Comb FuncCall ("Prelude","apply") [Var 6,Var 7])] (Let [(9,Comb FuncCall ("Prelude","maxBound") [Var 3])] (Let [(10,Var 5)] (Let [(11,Comb FuncCall ("Prelude","apply") [Var 9,Var 10])] (Let [(12,Comb FuncCall ("Prelude","maxBound") [Var 4])] (Let [(13,Var 5)] (Let [(14,Comb FuncCall ("Prelude","apply") [Var 12,Var 13])] (Comb ConsCall ("Prelude","(,,)") [Var 8,Var 11,Var 14]))))))))))])),Func ("Prelude","_impl#minBound#Prelude.Bounded#(,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 2]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]))))) (Rule [2,3,4,-5] (Case Flex (Var 5) [Branch (Pattern ("Prelude","()") []) (Let [(6,Comb FuncCall ("Prelude","minBound") [Var 2])] (Let [(7,Var 5)] (Let [(8,Comb FuncCall ("Prelude","apply") [Var 6,Var 7])] (Let [(9,Comb FuncCall ("Prelude","minBound") [Var 3])] (Let [(10,Var 5)] (Let [(11,Comb FuncCall ("Prelude","apply") [Var 9,Var 10])] (Let [(12,Comb FuncCall ("Prelude","minBound") [Var 4])] (Let [(13,Var 5)] (Let [(14,Comb FuncCall ("Prelude","apply") [Var 12,Var 13])] (Comb ConsCall ("Prelude","(,,)") [Var 8,Var 11,Var 14]))))))))))])),Func ("Prelude","_inst#Prelude.Bounded#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 2]) (TCons ("Prelude","_Dict#Bounded") [TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]])))) (Rule [2,3,4] (Let [(5,Comb (FuncPartCall 1) ("Prelude","_impl#minBound#Prelude.Bounded#(,,)") [Var 2,Var 3,Var 4])] (Let [(6,Comb (FuncPartCall 1) ("Prelude","_impl#maxBound#Prelude.Bounded#(,,)") [Var 2,Var 3,Var 4])] (Comb ConsCall ("Prelude","_Dict#Bounded") [Var 5,Var 6])))),Func ("Prelude","_impl#maxBound#Prelude.Bounded#(,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 1]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","(,)") [TVar 0,TVar 1])))) (Rule [2,3,-4] (Case Flex (Var 4) [Branch (Pattern ("Prelude","()") []) (Let [(5,Comb FuncCall ("Prelude","maxBound") [Var 2])] (Let [(6,Var 4)] (Let [(7,Comb FuncCall ("Prelude","apply") [Var 5,Var 6])] (Let [(8,Comb FuncCall ("Prelude","maxBound") [Var 3])] (Let [(9,Var 4)] (Let [(10,Comb FuncCall ("Prelude","apply") [Var 8,Var 9])] (Comb ConsCall ("Prelude","(,)") [Var 7,Var 10])))))))])),Func ("Prelude","_impl#minBound#Prelude.Bounded#(,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 1]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","(,)") [TVar 0,TVar 1])))) (Rule [2,3,-4] (Case Flex (Var 4) [Branch (Pattern ("Prelude","()") []) (Let [(5,Comb FuncCall ("Prelude","minBound") [Var 2])] (Let [(6,Var 4)] (Let [(7,Comb FuncCall ("Prelude","apply") [Var 5,Var 6])] (Let [(8,Comb FuncCall ("Prelude","minBound") [Var 3])] (Let [(9,Var 4)] (Let [(10,Comb FuncCall ("Prelude","apply") [Var 8,Var 9])] (Comb ConsCall ("Prelude","(,)") [Var 7,Var 10])))))))])),Func ("Prelude","_inst#Prelude.Bounded#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 1]) (TCons ("Prelude","_Dict#Bounded") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]))) (Rule [2,3] (Let [(4,Comb (FuncPartCall 1) ("Prelude","_impl#minBound#Prelude.Bounded#(,)") [Var 2,Var 3])] (Let [(5,Comb (FuncPartCall 1) ("Prelude","_impl#maxBound#Prelude.Bounded#(,)") [Var 2,Var 3])] (Comb ConsCall ("Prelude","_Dict#Bounded") [Var 4,Var 5])))),Func ("Prelude","_impl#enumFromThenTo#Prelude.Enum#()") 3 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","[]") [TCons ("Prelude","()") []])))) (Rule [-2,-3,-4] (Case Flex (Var 2) [Branch (Pattern ("Prelude","()") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","()") []) (Case Flex (Var 4) [Branch (Pattern ("Prelude","()") []) (Let [(5,Var 4)] (Let [(6,Comb ConsCall ("Prelude",":") [Var 5,Var 6])] (Var 6)))])])])),Func ("Prelude","_impl#enumFromTo#Prelude.Enum#()") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","[]") [TCons ("Prelude","()") []]))) (Rule [-2,-3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","()") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","()") []) (Let [(4,Var 3)] (Let [(5,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 4,Var 5])))])])),Func ("Prelude","_impl#enumFromThen#Prelude.Enum#()") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","[]") [TCons ("Prelude","()") []]))) (Rule [-2,-3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","()") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","()") []) (Let [(4,Var 3)] (Let [(5,Comb ConsCall ("Prelude",":") [Var 4,Var 5])] (Var 5)))])])),Func ("Prelude","_impl#enumFrom#Prelude.Enum#()") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","[]") [TCons ("Prelude","()") []])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","()") []) (Let [(3,Var 2)] (Let [(4,Comb ConsCall ("Prelude","[]") [])] (Comb ConsCall ("Prelude",":") [Var 3,Var 4])))])),Func ("Prelude","_impl#fromEnum#Prelude.Enum#()") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Int") [])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("","int") [Lit (Intc 0)])])),Func ("Prelude","_impl#toEnum#Prelude.Enum#()") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","()") [])) (Rule [-2] (Case Rigid (Var 2) [Branch (Pattern ("","int") [3]) (Case Rigid (Comb FuncCall ("","primCond") []) [Branch (Pattern ("","primCond") []) (Comb FuncCall ("Prelude","primEqInt") [Var 3,Lit (Intc 0)]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","()") []),Branch (Pattern ("Prelude","False") []) (Let [(4,Comb (FuncPartCall 1) ("Prelude","prim_error") [])] (Let [(5,Comb ConsCall ("StringConst","Prelude.Enum.().toEnum: bad argument") [])] (Comb FuncCall ("Prelude","$##") [Var 4,Var 5])))])])),Func ("Prelude","_impl#pred#Prelude.Enum#()") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","()") [])) (Rule [2] (Let [(3,Comb (FuncPartCall 1) ("Prelude","prim_error") [])] (Let [(4,Comb ConsCall ("StringConst","Prelude.Enum.().pred: bad argument") [])] (Comb FuncCall ("Prelude","$##") [Var 3,Var 4])))),Func ("Prelude","_impl#succ#Prelude.Enum#()") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","()") [])) (Rule [2] (Let [(3,Comb (FuncPartCall 1) ("Prelude","prim_error") [])] (Let [(4,Comb ConsCall ("StringConst","Prelude.Enum.().succ: bad argument") [])] (Comb FuncCall ("Prelude","$##") [Var 3,Var 4])))),Func ("Prelude","_inst#Prelude.Enum#()") 0 Public (TCons ("Prelude","_Dict#Enum") [TCons ("Prelude","()") []]) (Rule [] (Let [(2,Comb (FuncPartCall 1) ("Prelude","_impl#succ#Prelude.Enum#()") [])] (Let [(3,Comb (FuncPartCall 1) ("Prelude","_impl#pred#Prelude.Enum#()") [])] (Let [(4,Comb (FuncPartCall 1) ("Prelude","_impl#toEnum#Prelude.Enum#()") [])] (Let [(5,Comb (FuncPartCall 1) ("Prelude","_impl#fromEnum#Prelude.Enum#()") [])] (Let [(6,Comb (FuncPartCall 1) ("Prelude","_impl#enumFrom#Prelude.Enum#()") [])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","_impl#enumFromThen#Prelude.Enum#()") [])] (Let [(8,Comb (FuncPartCall 2) ("Prelude","_impl#enumFromTo#Prelude.Enum#()") [])] (Let [(9,Comb (FuncPartCall 3) ("Prelude","_impl#enumFromThenTo#Prelude.Enum#()") [])] (Comb ConsCall ("Prelude","_Dict#Enum") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 9])))))))))),Func ("Prelude","_impl#maxBound#Prelude.Bounded#()") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","()") [])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","()") []) (Var 2)])),Func ("Prelude","_impl#minBound#Prelude.Bounded#()") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","()") [])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","()") []) (Var 2)])),Func ("Prelude","_inst#Prelude.Bounded#()") 0 Public (TCons ("Prelude","_Dict#Bounded") [TCons ("Prelude","()") []]) (Rule [] (Let [(2,Comb (FuncPartCall 1) ("Prelude","_impl#minBound#Prelude.Bounded#()") [])] (Let [(3,Comb (FuncPartCall 1) ("Prelude","_impl#maxBound#Prelude.Bounded#()") [])] (Comb ConsCall ("Prelude","_Dict#Bounded") [Var 2,Var 3])))),Func ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,,,,)") 10 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 5]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 6]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 7]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,,,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6,TVar 7]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))))))))) (Rule [2,3,4,5,6,7,8,9,10,-11] (Case Flex (Var 11) [Branch (Pattern ("Prelude","(,,,,,,,)") [12,13,14,15,16,17,18,19]) (Let [(20,Comb FuncCall ("Prelude","showsPrec") [Var 2])] (Let [(21,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(22,Comb FuncCall ("Prelude","apply") [Var 20,Var 21])] (Let [(23,Comb FuncCall ("Prelude","apply") [Var 22,Var 12])] (Let [(24,Comb FuncCall ("Prelude","showsPrec") [Var 3])] (Let [(25,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(26,Comb FuncCall ("Prelude","apply") [Var 24,Var 25])] (Let [(27,Comb FuncCall ("Prelude","apply") [Var 26,Var 13])] (Let [(28,Comb FuncCall ("Prelude","showsPrec") [Var 4])] (Let [(29,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(30,Comb FuncCall ("Prelude","apply") [Var 28,Var 29])] (Let [(31,Comb FuncCall ("Prelude","apply") [Var 30,Var 14])] (Let [(32,Comb FuncCall ("Prelude","showsPrec") [Var 5])] (Let [(33,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(34,Comb FuncCall ("Prelude","apply") [Var 32,Var 33])] (Let [(35,Comb FuncCall ("Prelude","apply") [Var 34,Var 15])] (Let [(36,Comb FuncCall ("Prelude","showsPrec") [Var 6])] (Let [(37,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(38,Comb FuncCall ("Prelude","apply") [Var 36,Var 37])] (Let [(39,Comb FuncCall ("Prelude","apply") [Var 38,Var 16])] (Let [(40,Comb FuncCall ("Prelude","showsPrec") [Var 7])] (Let [(41,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(42,Comb FuncCall ("Prelude","apply") [Var 40,Var 41])] (Let [(43,Comb FuncCall ("Prelude","apply") [Var 42,Var 17])] (Let [(44,Comb FuncCall ("Prelude","showsPrec") [Var 8])] (Let [(45,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(46,Comb FuncCall ("Prelude","apply") [Var 44,Var 45])] (Let [(47,Comb FuncCall ("Prelude","apply") [Var 46,Var 18])] (Let [(48,Comb FuncCall ("Prelude","showsPrec") [Var 9])] (Let [(49,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(50,Comb FuncCall ("Prelude","apply") [Var 48,Var 49])] (Let [(51,Comb FuncCall ("Prelude","apply") [Var 50,Var 19])] (Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,,,,)#P17") [Var 51,Var 47,Var 43,Var 39,Var 35,Var 31,Var 27,Var 23])))))))))))))))))))))))))))))))))])),Func ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,,,,)#P17") 9 Public (TVar 0) (Rule [2,3,4,5,6,7,8,9,10] (Let [(11,Comb (FuncPartCall 3) ("Prelude","showTuple._#lambda297") [])] (Let [(12,Comb ConsCall ("Prelude","[]") [])] (Let [(13,Comb ConsCall ("Prelude",":") [Var 2,Var 12])] (Let [(14,Comb ConsCall ("Prelude",":") [Var 3,Var 13])] (Let [(15,Comb ConsCall ("Prelude",":") [Var 4,Var 14])] (Let [(16,Comb ConsCall ("Prelude",":") [Var 5,Var 15])] (Let [(17,Comb ConsCall ("Prelude",":") [Var 6,Var 16])] (Let [(18,Comb ConsCall ("Prelude",":") [Var 7,Var 17])] (Let [(19,Comb ConsCall ("Prelude",":") [Var 8,Var 18])] (Let [(20,Comb ConsCall ("Prelude",":") [Var 9,Var 19])] (Let [(21,Comb FuncCall ("Prelude","foldr1") [Var 11,Var 20])] (Let [(22,Comb ConsCall ("","char") [Lit (Charc ')')])] (Let [(23,Comb ConsCall ("Prelude",":") [Var 22,Var 10])] (Let [(24,Comb FuncCall ("Prelude","apply") [Var 21,Var 23])] (Let [(25,Comb ConsCall ("","char") [Lit (Charc '(')])] (Comb ConsCall ("Prelude",":") [Var 25,Var 24]))))))))))))))))),Func ("Prelude","_inst#Prelude.Show#(,,,,,,,)") 8 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 5]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 6]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 7]) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","(,,,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6,TVar 7]]))))))))) (Rule [2,3,4,5,6,7,8,9] (Let [(10,Comb (FuncPartCall 1) ("Prelude","_impl#show#Prelude.Show#(,,,,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 9])] (Let [(11,Comb (FuncPartCall 2) ("Prelude","_impl#showList#Prelude.Show#(,,,,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 9])] (Let [(12,Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 9])] (Comb ConsCall ("Prelude","_Dict#Show") [Var 10,Var 12,Var 11]))))),Func ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,,,)") 9 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 5]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 6]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))))) (Rule [2,3,4,5,6,7,8,9,-10] (Case Flex (Var 10) [Branch (Pattern ("Prelude","(,,,,,,)") [11,12,13,14,15,16,17]) (Let [(18,Comb FuncCall ("Prelude","showsPrec") [Var 2])] (Let [(19,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(20,Comb FuncCall ("Prelude","apply") [Var 18,Var 19])] (Let [(21,Comb FuncCall ("Prelude","apply") [Var 20,Var 11])] (Let [(22,Comb FuncCall ("Prelude","showsPrec") [Var 3])] (Let [(23,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(24,Comb FuncCall ("Prelude","apply") [Var 22,Var 23])] (Let [(25,Comb FuncCall ("Prelude","apply") [Var 24,Var 12])] (Let [(26,Comb FuncCall ("Prelude","showsPrec") [Var 4])] (Let [(27,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(28,Comb FuncCall ("Prelude","apply") [Var 26,Var 27])] (Let [(29,Comb FuncCall ("Prelude","apply") [Var 28,Var 13])] (Let [(30,Comb FuncCall ("Prelude","showsPrec") [Var 5])] (Let [(31,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(32,Comb FuncCall ("Prelude","apply") [Var 30,Var 31])] (Let [(33,Comb FuncCall ("Prelude","apply") [Var 32,Var 14])] (Let [(34,Comb FuncCall ("Prelude","showsPrec") [Var 6])] (Let [(35,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(36,Comb FuncCall ("Prelude","apply") [Var 34,Var 35])] (Let [(37,Comb FuncCall ("Prelude","apply") [Var 36,Var 15])] (Let [(38,Comb FuncCall ("Prelude","showsPrec") [Var 7])] (Let [(39,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(40,Comb FuncCall ("Prelude","apply") [Var 38,Var 39])] (Let [(41,Comb FuncCall ("Prelude","apply") [Var 40,Var 16])] (Let [(42,Comb FuncCall ("Prelude","showsPrec") [Var 8])] (Let [(43,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(44,Comb FuncCall ("Prelude","apply") [Var 42,Var 43])] (Let [(45,Comb FuncCall ("Prelude","apply") [Var 44,Var 17])] (Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,,,)#P18") [Var 45,Var 41,Var 37,Var 33,Var 29,Var 25,Var 21])))))))))))))))))))))))))))))])),Func ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,,,)#P18") 8 Public (TVar 0) (Rule [2,3,4,5,6,7,8,9] (Let [(10,Comb (FuncPartCall 3) ("Prelude","showTuple._#lambda297") [])] (Let [(11,Comb ConsCall ("Prelude","[]") [])] (Let [(12,Comb ConsCall ("Prelude",":") [Var 2,Var 11])] (Let [(13,Comb ConsCall ("Prelude",":") [Var 3,Var 12])] (Let [(14,Comb ConsCall ("Prelude",":") [Var 4,Var 13])] (Let [(15,Comb ConsCall ("Prelude",":") [Var 5,Var 14])] (Let [(16,Comb ConsCall ("Prelude",":") [Var 6,Var 15])] (Let [(17,Comb ConsCall ("Prelude",":") [Var 7,Var 16])] (Let [(18,Comb ConsCall ("Prelude",":") [Var 8,Var 17])] (Let [(19,Comb FuncCall ("Prelude","foldr1") [Var 10,Var 18])] (Let [(20,Comb ConsCall ("","char") [Lit (Charc ')')])] (Let [(21,Comb ConsCall ("Prelude",":") [Var 20,Var 9])] (Let [(22,Comb FuncCall ("Prelude","apply") [Var 19,Var 21])] (Let [(23,Comb ConsCall ("","char") [Lit (Charc '(')])] (Comb ConsCall ("Prelude",":") [Var 23,Var 22])))))))))))))))),Func ("Prelude","_inst#Prelude.Show#(,,,,,,)") 7 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 5]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 6]) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","(,,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6]])))))))) (Rule [2,3,4,5,6,7,8] (Let [(9,Comb (FuncPartCall 1) ("Prelude","_impl#show#Prelude.Show#(,,,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8])] (Let [(10,Comb (FuncPartCall 2) ("Prelude","_impl#showList#Prelude.Show#(,,,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8])] (Let [(11,Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8])] (Comb ConsCall ("Prelude","_Dict#Show") [Var 9,Var 11,Var 10]))))),Func ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,,)") 8 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 5]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))))))) (Rule [2,3,4,5,6,7,8,-9] (Case Flex (Var 9) [Branch (Pattern ("Prelude","(,,,,,)") [10,11,12,13,14,15]) (Let [(16,Comb FuncCall ("Prelude","showsPrec") [Var 2])] (Let [(17,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(18,Comb FuncCall ("Prelude","apply") [Var 16,Var 17])] (Let [(19,Comb FuncCall ("Prelude","apply") [Var 18,Var 10])] (Let [(20,Comb FuncCall ("Prelude","showsPrec") [Var 3])] (Let [(21,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(22,Comb FuncCall ("Prelude","apply") [Var 20,Var 21])] (Let [(23,Comb FuncCall ("Prelude","apply") [Var 22,Var 11])] (Let [(24,Comb FuncCall ("Prelude","showsPrec") [Var 4])] (Let [(25,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(26,Comb FuncCall ("Prelude","apply") [Var 24,Var 25])] (Let [(27,Comb FuncCall ("Prelude","apply") [Var 26,Var 12])] (Let [(28,Comb FuncCall ("Prelude","showsPrec") [Var 5])] (Let [(29,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(30,Comb FuncCall ("Prelude","apply") [Var 28,Var 29])] (Let [(31,Comb FuncCall ("Prelude","apply") [Var 30,Var 13])] (Let [(32,Comb FuncCall ("Prelude","showsPrec") [Var 6])] (Let [(33,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(34,Comb FuncCall ("Prelude","apply") [Var 32,Var 33])] (Let [(35,Comb FuncCall ("Prelude","apply") [Var 34,Var 14])] (Let [(36,Comb FuncCall ("Prelude","showsPrec") [Var 7])] (Let [(37,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(38,Comb FuncCall ("Prelude","apply") [Var 36,Var 37])] (Let [(39,Comb FuncCall ("Prelude","apply") [Var 38,Var 15])] (Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,,)#P19") [Var 39,Var 35,Var 31,Var 27,Var 23,Var 19])))))))))))))))))))))))))])),Func ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,,)#P19") 7 Public (TVar 0) (Rule [2,3,4,5,6,7,8] (Let [(9,Comb (FuncPartCall 3) ("Prelude","showTuple._#lambda297") [])] (Let [(10,Comb ConsCall ("Prelude","[]") [])] (Let [(11,Comb ConsCall ("Prelude",":") [Var 2,Var 10])] (Let [(12,Comb ConsCall ("Prelude",":") [Var 3,Var 11])] (Let [(13,Comb ConsCall ("Prelude",":") [Var 4,Var 12])] (Let [(14,Comb ConsCall ("Prelude",":") [Var 5,Var 13])] (Let [(15,Comb ConsCall ("Prelude",":") [Var 6,Var 14])] (Let [(16,Comb ConsCall ("Prelude",":") [Var 7,Var 15])] (Let [(17,Comb FuncCall ("Prelude","foldr1") [Var 9,Var 16])] (Let [(18,Comb ConsCall ("","char") [Lit (Charc ')')])] (Let [(19,Comb ConsCall ("Prelude",":") [Var 18,Var 8])] (Let [(20,Comb FuncCall ("Prelude","apply") [Var 17,Var 19])] (Let [(21,Comb ConsCall ("","char") [Lit (Charc '(')])] (Comb ConsCall ("Prelude",":") [Var 21,Var 20]))))))))))))))),Func ("Prelude","_inst#Prelude.Show#(,,,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 5]) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","(,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5]]))))))) (Rule [2,3,4,5,6,7] (Let [(8,Comb (FuncPartCall 1) ("Prelude","_impl#show#Prelude.Show#(,,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7])] (Let [(9,Comb (FuncPartCall 2) ("Prelude","_impl#showList#Prelude.Show#(,,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7])] (Let [(10,Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7])] (Comb ConsCall ("Prelude","_Dict#Show") [Var 8,Var 10,Var 9]))))),Func ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,)") 7 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 4]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (Rule [2,3,4,5,6,7,-8] (Case Flex (Var 8) [Branch (Pattern ("Prelude","(,,,,)") [9,10,11,12,13]) (Let [(14,Comb FuncCall ("Prelude","showsPrec") [Var 2])] (Let [(15,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(16,Comb FuncCall ("Prelude","apply") [Var 14,Var 15])] (Let [(17,Comb FuncCall ("Prelude","apply") [Var 16,Var 9])] (Let [(18,Comb FuncCall ("Prelude","showsPrec") [Var 3])] (Let [(19,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(20,Comb FuncCall ("Prelude","apply") [Var 18,Var 19])] (Let [(21,Comb FuncCall ("Prelude","apply") [Var 20,Var 10])] (Let [(22,Comb FuncCall ("Prelude","showsPrec") [Var 4])] (Let [(23,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(24,Comb FuncCall ("Prelude","apply") [Var 22,Var 23])] (Let [(25,Comb FuncCall ("Prelude","apply") [Var 24,Var 11])] (Let [(26,Comb FuncCall ("Prelude","showsPrec") [Var 5])] (Let [(27,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(28,Comb FuncCall ("Prelude","apply") [Var 26,Var 27])] (Let [(29,Comb FuncCall ("Prelude","apply") [Var 28,Var 12])] (Let [(30,Comb FuncCall ("Prelude","showsPrec") [Var 6])] (Let [(31,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(32,Comb FuncCall ("Prelude","apply") [Var 30,Var 31])] (Let [(33,Comb FuncCall ("Prelude","apply") [Var 32,Var 13])] (Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,)#P20") [Var 33,Var 29,Var 25,Var 21,Var 17])))))))))))))))))))))])),Func ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,)#P20") 6 Public (TVar 0) (Rule [2,3,4,5,6,7] (Let [(8,Comb (FuncPartCall 3) ("Prelude","showTuple._#lambda297") [])] (Let [(9,Comb ConsCall ("Prelude","[]") [])] (Let [(10,Comb ConsCall ("Prelude",":") [Var 2,Var 9])] (Let [(11,Comb ConsCall ("Prelude",":") [Var 3,Var 10])] (Let [(12,Comb ConsCall ("Prelude",":") [Var 4,Var 11])] (Let [(13,Comb ConsCall ("Prelude",":") [Var 5,Var 12])] (Let [(14,Comb ConsCall ("Prelude",":") [Var 6,Var 13])] (Let [(15,Comb FuncCall ("Prelude","foldr1") [Var 8,Var 14])] (Let [(16,Comb ConsCall ("","char") [Lit (Charc ')')])] (Let [(17,Comb ConsCall ("Prelude",":") [Var 16,Var 7])] (Let [(18,Comb FuncCall ("Prelude","apply") [Var 15,Var 17])] (Let [(19,Comb ConsCall ("","char") [Lit (Charc '(')])] (Comb ConsCall ("Prelude",":") [Var 19,Var 18])))))))))))))),Func ("Prelude","_inst#Prelude.Show#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 4]) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]])))))) (Rule [2,3,4,5,6] (Let [(7,Comb (FuncPartCall 1) ("Prelude","_impl#show#Prelude.Show#(,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6])] (Let [(8,Comb (FuncPartCall 2) ("Prelude","_impl#showList#Prelude.Show#(,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6])] (Let [(9,Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6])] (Comb ConsCall ("Prelude","_Dict#Show") [Var 7,Var 9,Var 8]))))),Func ("Prelude","_impl#showsPrec#Prelude.Show#(,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 3]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))))) (Rule [2,3,4,5,6,-7] (Case Flex (Var 7) [Branch (Pattern ("Prelude","(,,,)") [8,9,10,11]) (Let [(12,Comb FuncCall ("Prelude","showsPrec") [Var 2])] (Let [(13,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(14,Comb FuncCall ("Prelude","apply") [Var 12,Var 13])] (Let [(15,Comb FuncCall ("Prelude","apply") [Var 14,Var 8])] (Let [(16,Comb FuncCall ("Prelude","showsPrec") [Var 3])] (Let [(17,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(18,Comb FuncCall ("Prelude","apply") [Var 16,Var 17])] (Let [(19,Comb FuncCall ("Prelude","apply") [Var 18,Var 9])] (Let [(20,Comb FuncCall ("Prelude","showsPrec") [Var 4])] (Let [(21,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(22,Comb FuncCall ("Prelude","apply") [Var 20,Var 21])] (Let [(23,Comb FuncCall ("Prelude","apply") [Var 22,Var 10])] (Let [(24,Comb FuncCall ("Prelude","showsPrec") [Var 5])] (Let [(25,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(26,Comb FuncCall ("Prelude","apply") [Var 24,Var 25])] (Let [(27,Comb FuncCall ("Prelude","apply") [Var 26,Var 11])] (Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#(,,,)#P21") [Var 27,Var 23,Var 19,Var 15])))))))))))))))))])),Func ("Prelude","_impl#showsPrec#Prelude.Show#(,,,)#P21") 5 Public (TVar 0) (Rule [2,3,4,5,6] (Let [(7,Comb (FuncPartCall 3) ("Prelude","showTuple._#lambda297") [])] (Let [(8,Comb ConsCall ("Prelude","[]") [])] (Let [(9,Comb ConsCall ("Prelude",":") [Var 2,Var 8])] (Let [(10,Comb ConsCall ("Prelude",":") [Var 3,Var 9])] (Let [(11,Comb ConsCall ("Prelude",":") [Var 4,Var 10])] (Let [(12,Comb ConsCall ("Prelude",":") [Var 5,Var 11])] (Let [(13,Comb FuncCall ("Prelude","foldr1") [Var 7,Var 12])] (Let [(14,Comb ConsCall ("","char") [Lit (Charc ')')])] (Let [(15,Comb ConsCall ("Prelude",":") [Var 14,Var 6])] (Let [(16,Comb FuncCall ("Prelude","apply") [Var 13,Var 15])] (Let [(17,Comb ConsCall ("","char") [Lit (Charc '(')])] (Comb ConsCall ("Prelude",":") [Var 17,Var 16]))))))))))))),Func ("Prelude","_inst#Prelude.Show#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 3]) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]]))))) (Rule [2,3,4,5] (Let [(6,Comb (FuncPartCall 1) ("Prelude","_impl#show#Prelude.Show#(,,,)") [Var 2,Var 3,Var 4,Var 5])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","_impl#showList#Prelude.Show#(,,,)") [Var 2,Var 3,Var 4,Var 5])] (Let [(8,Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#(,,,)") [Var 2,Var 3,Var 4,Var 5])] (Comb ConsCall ("Prelude","_Dict#Show") [Var 6,Var 8,Var 7]))))),Func ("Prelude","_impl#showsPrec#Prelude.Show#(,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))) (Rule [2,3,4,5,-6] (Case Flex (Var 6) [Branch (Pattern ("Prelude","(,,)") [7,8,9]) (Let [(10,Comb FuncCall ("Prelude","showsPrec") [Var 2])] (Let [(11,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(12,Comb FuncCall ("Prelude","apply") [Var 10,Var 11])] (Let [(13,Comb FuncCall ("Prelude","apply") [Var 12,Var 7])] (Let [(14,Comb FuncCall ("Prelude","showsPrec") [Var 3])] (Let [(15,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(16,Comb FuncCall ("Prelude","apply") [Var 14,Var 15])] (Let [(17,Comb FuncCall ("Prelude","apply") [Var 16,Var 8])] (Let [(18,Comb FuncCall ("Prelude","showsPrec") [Var 4])] (Let [(19,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(20,Comb FuncCall ("Prelude","apply") [Var 18,Var 19])] (Let [(21,Comb FuncCall ("Prelude","apply") [Var 20,Var 9])] (Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#(,,)#P22") [Var 21,Var 17,Var 13])))))))))))))])),Func ("Prelude","_impl#showsPrec#Prelude.Show#(,,)#P22") 4 Public (TVar 0) (Rule [2,3,4,5] (Let [(6,Comb (FuncPartCall 3) ("Prelude","showTuple._#lambda297") [])] (Let [(7,Comb ConsCall ("Prelude","[]") [])] (Let [(8,Comb ConsCall ("Prelude",":") [Var 2,Var 7])] (Let [(9,Comb ConsCall ("Prelude",":") [Var 3,Var 8])] (Let [(10,Comb ConsCall ("Prelude",":") [Var 4,Var 9])] (Let [(11,Comb FuncCall ("Prelude","foldr1") [Var 6,Var 10])] (Let [(12,Comb ConsCall ("","char") [Lit (Charc ')')])] (Let [(13,Comb ConsCall ("Prelude",":") [Var 12,Var 5])] (Let [(14,Comb FuncCall ("Prelude","apply") [Var 11,Var 13])] (Let [(15,Comb ConsCall ("","char") [Lit (Charc '(')])] (Comb ConsCall ("Prelude",":") [Var 15,Var 14])))))))))))),Func ("Prelude","_inst#Prelude.Show#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]])))) (Rule [2,3,4] (Let [(5,Comb (FuncPartCall 1) ("Prelude","_impl#show#Prelude.Show#(,,)") [Var 2,Var 3,Var 4])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","_impl#showList#Prelude.Show#(,,)") [Var 2,Var 3,Var 4])] (Let [(7,Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#(,,)") [Var 2,Var 3,Var 4])] (Comb ConsCall ("Prelude","_Dict#Show") [Var 5,Var 7,Var 6]))))),Func ("Prelude","_impl#showsPrec#Prelude.Show#(,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [2,3,4,-5] (Case Flex (Var 5) [Branch (Pattern ("Prelude","(,)") [6,7]) (Let [(8,Comb FuncCall ("Prelude","showsPrec") [Var 2])] (Let [(9,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(10,Comb FuncCall ("Prelude","apply") [Var 8,Var 9])] (Let [(11,Comb FuncCall ("Prelude","apply") [Var 10,Var 6])] (Let [(12,Comb FuncCall ("Prelude","showsPrec") [Var 3])] (Let [(13,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(14,Comb FuncCall ("Prelude","apply") [Var 12,Var 13])] (Let [(15,Comb FuncCall ("Prelude","apply") [Var 14,Var 7])] (Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#(,)#P23") [Var 15,Var 11])))))))))])),Func ("Prelude","_impl#showsPrec#Prelude.Show#(,)#P23") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb (FuncPartCall 3) ("Prelude","showTuple._#lambda297") [])] (Let [(6,Comb ConsCall ("Prelude","[]") [])] (Let [(7,Comb ConsCall ("Prelude",":") [Var 2,Var 6])] (Let [(8,Comb ConsCall ("Prelude",":") [Var 3,Var 7])] (Let [(9,Comb FuncCall ("Prelude","foldr1") [Var 5,Var 8])] (Let [(10,Comb ConsCall ("","char") [Lit (Charc ')')])] (Let [(11,Comb ConsCall ("Prelude",":") [Var 10,Var 4])] (Let [(12,Comb FuncCall ("Prelude","apply") [Var 9,Var 11])] (Let [(13,Comb ConsCall ("","char") [Lit (Charc '(')])] (Comb ConsCall ("Prelude",":") [Var 13,Var 12]))))))))))),Func ("Prelude","_inst#Prelude.Show#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]))) (Rule [2,3] (Let [(4,Comb (FuncPartCall 1) ("Prelude","_impl#show#Prelude.Show#(,)") [Var 2,Var 3])] (Let [(5,Comb (FuncPartCall 2) ("Prelude","_impl#showList#Prelude.Show#(,)") [Var 2,Var 3])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#(,)") [Var 2,Var 3])] (Comb ConsCall ("Prelude","_Dict#Show") [Var 4,Var 6,Var 5]))))),Func ("Prelude","_impl#showsPrec#Prelude.Show#()") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,-3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","()") []) (Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#()#P24") [])])),Func ("Prelude","_impl#showsPrec#Prelude.Show#()#P24") 1 Public (TVar 0) (Rule [2] (Let [(3,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Let [(4,Comb ConsCall ("StringConst","()") [])] (Comb FuncCall ("Prelude","foldr") [Var 3,Var 2,Var 4])))),Func ("Prelude","_inst#Prelude.Show#()") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","()") []]) (Rule [] (Let [(2,Comb (FuncPartCall 1) ("Prelude","_impl#show#Prelude.Show#()") [])] (Let [(3,Comb (FuncPartCall 2) ("Prelude","_impl#showList#Prelude.Show#()") [])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#()") [])] (Comb ConsCall ("Prelude","_Dict#Show") [Var 2,Var 4,Var 3]))))),Func ("Prelude","zipWith_build") 5 Private (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 2))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (FuncType (FuncType (TVar 2) (FuncType (TVar 3) (TVar 3))) (FuncType (TVar 3) (TVar 3)))))) (Rule [2,-3,-4,5,6] (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Case Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Var 6),Branch (Pattern ("Prelude",":") [7,8]) (Var 6)]),Branch (Pattern ("Prelude",":") [9,10]) (Case Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Var 6),Branch (Pattern ("Prelude",":") [11,12]) (Let [(13,Comb FuncCall ("Prelude","apply") [Var 2,Var 9,Var 11])] (Let [(14,Comb FuncCall ("Prelude","zipWith_build") [Var 2,Var 10,Var 12,Var 5,Var 6])] (Comb FuncCall ("Prelude","apply") [Var 5,Var 13,Var 14])))])])),Func ("Prelude","zip_build") 4 Private (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (FuncType (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TVar 2) (TVar 2))) (FuncType (TVar 2) (TVar 2))))) (Rule [-2,-3,4,5] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Var 5),Branch (Pattern ("Prelude",":") [6,7]) (Var 5)]),Branch (Pattern ("Prelude",":") [8,9]) (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Var 5),Branch (Pattern ("Prelude",":") [10,11]) (Let [(12,Comb FuncCall ("Prelude","zip_build") [Var 9,Var 11,Var 4,Var 5])] (Let [(13,Comb ConsCall ("Prelude","(,)") [Var 8,Var 10])] (Comb FuncCall ("Prelude","apply") [Var 4,Var 13,Var 12])))])])),Func ("Prelude","_impl#readList#Prelude.Read#(,,,,)") 6 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 4]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [2,3,4,5,6,7] (Let [(8,Comb FuncCall ("Prelude","_inst#Prelude.Read#(,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6])] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Var 8,Var 7]))),Func ("Prelude","_impl#readList#Prelude.Read#(,,,)") 5 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [2,3,4,5,6] (Let [(7,Comb FuncCall ("Prelude","_inst#Prelude.Read#(,,,)") [Var 2,Var 3,Var 4,Var 5])] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Var 7,Var 6]))),Func ("Prelude","_impl#readList#Prelude.Read#(,,)") 4 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","_inst#Prelude.Read#(,,)") [Var 2,Var 3,Var 4])] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Var 6,Var 5]))),Func ("Prelude","_impl#readList#Prelude.Read#(,)") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [2,3,4] (Let [(5,Comb (FuncPartCall 1) ("Prelude","_impl#readList#Prelude.Read#(,)") [Var 2,Var 3])] (Let [(6,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#(,)") [Var 2,Var 3])] (Let [(7,Comb ConsCall ("Prelude","_Dict#Read") [Var 6,Var 5])] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Var 7,Var 4]))))),Func ("Prelude","_impl#readList#Prelude.Read#()") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [2] (Let [(3,Comb (FuncPartCall 1) ("Prelude","_impl#readList#Prelude.Read#()") [])] (Let [(4,Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#()") [])] (Let [(5,Comb ConsCall ("Prelude","_Dict#Read") [Var 4,Var 3])] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Var 5,Var 2]))))),Func ("Prelude","_impl#compare#Prelude.Ord#()") 2 Private (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Ordering") []))) (Rule [2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","()") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","EQ") [])])])),Func ("Prelude","unzip3") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]]) (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 1],TCons ("Prelude","[]") [TVar 2]])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Let [(3,Var 2)] (Let [(4,Var 2)] (Let [(5,Var 2)] (Comb ConsCall ("Prelude","(,,)") [Var 3,Var 4,Var 5])))),Branch (Pattern ("Prelude",":") [6,7]) (Case Flex (Var 6) [Branch (Pattern ("Prelude","(,,)") [8,9,10]) (Let [(11,Comb FuncCall ("Prelude","unzip3") [Var 7])] (Let [(12,Comb FuncCall ("Prelude","unzip3._#selFP15#zs") [Var 11])] (Let [(13,Comb FuncCall ("Prelude","unzip3._#selFP14#ys") [Var 11])] (Let [(14,Comb FuncCall ("Prelude","unzip3._#selFP13#xs") [Var 11])] (Let [(15,Comb ConsCall ("Prelude",":") [Var 8,Var 14])] (Let [(16,Comb ConsCall ("Prelude",":") [Var 9,Var 13])] (Let [(17,Comb ConsCall ("Prelude",":") [Var 10,Var 12])] (Comb ConsCall ("Prelude","(,,)") [Var 15,Var 16,Var 17]))))))))])])),Func ("Prelude","unzip") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 1]])) (Rule [-2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Let [(3,Var 2)] (Let [(4,Var 2)] (Comb ConsCall ("Prelude","(,)") [Var 3,Var 4]))),Branch (Pattern ("Prelude",":") [5,6]) (Case Flex (Var 5) [Branch (Pattern ("Prelude","(,)") [7,8]) (Let [(9,Comb FuncCall ("Prelude","unzip") [Var 6])] (Let [(10,Comb FuncCall ("Prelude","unzip._#selFP11#ys") [Var 9])] (Let [(11,Comb FuncCall ("Prelude","unzip._#selFP10#xs") [Var 9])] (Let [(12,Comb ConsCall ("Prelude",":") [Var 7,Var 11])] (Let [(13,Comb ConsCall ("Prelude",":") [Var 8,Var 10])] (Comb ConsCall ("Prelude","(,)") [Var 12,Var 13]))))))])])),Func ("Prelude","zipWith3") 4 Private (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (TVar 3)))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TVar 2]) (TCons ("Prelude","[]") [TVar 3]))))) (Rule [2,-3,4,5] (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Var 3),Branch (Pattern ("Prelude",":") [6,7]) (Case Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Var 4),Branch (Pattern ("Prelude",":") [8,9]) (Case Flex (Var 5) [Branch (Pattern ("Prelude","[]") []) (Var 5),Branch (Pattern ("Prelude",":") [10,11]) (Let [(12,Comb FuncCall ("Prelude","apply") [Var 2,Var 6,Var 8,Var 10])] (Let [(13,Comb FuncCall ("Prelude","zipWith3") [Var 2,Var 7,Var 9,Var 11])] (Comb ConsCall ("Prelude",":") [Var 12,Var 13])))])])])),Func ("Prelude","zip3") 3 Private (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TVar 2]) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]])))) (Rule [-2,3,4] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Var 2),Branch (Pattern ("Prelude",":") [5,6]) (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Var 3),Branch (Pattern ("Prelude",":") [7,8]) (Case Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Var 4),Branch (Pattern ("Prelude",":") [9,10]) (Let [(11,Comb FuncCall ("Prelude","zip3") [Var 6,Var 8,Var 10])] (Let [(12,Comb ConsCall ("Prelude","(,,)") [Var 5,Var 7,Var 9])] (Comb ConsCall ("Prelude",":") [Var 12,Var 11])))])])])),Func ("Prelude","_impl#showList#Prelude.Show#(,,,,,,,)") 10 Private (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 5]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 6]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 7]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,,,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6,TVar 7]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))))) (Rule [2,3,4,5,6,7,8,9,10,11] (Case Flex (Var 10) [Branch (Pattern ("Prelude","[]") []) (Let [(12,Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show#P49") [Var 11])] (Comb FuncCall ("Prelude","build") [Var 12])),Branch (Pattern ("Prelude",":") [13,14]) (Let [(15,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(16,Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 9,Var 15])] (Let [(17,Comb FuncCall ("Prelude","showList'.showl.429") [Var 11,Var 16,Var 14])] (Let [(18,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(19,Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 9,Var 18,Var 13])] (Let [(20,Comb FuncCall ("Prelude","apply") [Var 19,Var 17])] (Let [(21,Comb ConsCall ("","char") [Lit (Charc '[')])] (Comb ConsCall ("Prelude",":") [Var 21,Var 20]))))))))])),Func ("Prelude","_impl#show#Prelude.Show#(,,,,,,,)") 9 Private (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 5]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 6]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 7]) (FuncType (TCons ("Prelude","(,,,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6,TVar 7]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))))))) (Rule [2,3,4,5,6,7,8,9,10] (Let [(11,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(12,Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 9,Var 11,Var 10])] (Let [(13,Comb ConsCall ("Prelude","[]") [])] (Comb FuncCall ("Prelude","apply") [Var 12,Var 13]))))),Func ("Prelude","_impl#showList#Prelude.Show#(,,,,,,)") 9 Private (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 5]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 6]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))))))) (Rule [2,3,4,5,6,7,8,9,10] (Case Flex (Var 9) [Branch (Pattern ("Prelude","[]") []) (Let [(11,Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show#P49") [Var 10])] (Comb FuncCall ("Prelude","build") [Var 11])),Branch (Pattern ("Prelude",":") [12,13]) (Let [(14,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(15,Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 14])] (Let [(16,Comb FuncCall ("Prelude","showList'.showl.429") [Var 10,Var 15,Var 13])] (Let [(17,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(18,Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 17,Var 12])] (Let [(19,Comb FuncCall ("Prelude","apply") [Var 18,Var 16])] (Let [(20,Comb ConsCall ("","char") [Lit (Charc '[')])] (Comb ConsCall ("Prelude",":") [Var 20,Var 19]))))))))])),Func ("Prelude","_impl#show#Prelude.Show#(,,,,,,)") 8 Private (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 5]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 6]) (FuncType (TCons ("Prelude","(,,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (Rule [2,3,4,5,6,7,8,9] (Let [(10,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(11,Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 10,Var 9])] (Let [(12,Comb ConsCall ("Prelude","[]") [])] (Comb FuncCall ("Prelude","apply") [Var 11,Var 12]))))),Func ("Prelude","_impl#showList#Prelude.Show#(,,,,,)") 8 Private (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 5]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (Rule [2,3,4,5,6,7,8,9] (Case Flex (Var 8) [Branch (Pattern ("Prelude","[]") []) (Let [(10,Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show#P49") [Var 9])] (Comb FuncCall ("Prelude","build") [Var 10])),Branch (Pattern ("Prelude",":") [11,12]) (Let [(13,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(14,Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 13])] (Let [(15,Comb FuncCall ("Prelude","showList'.showl.429") [Var 9,Var 14,Var 12])] (Let [(16,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(17,Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 16,Var 11])] (Let [(18,Comb FuncCall ("Prelude","apply") [Var 17,Var 15])] (Let [(19,Comb ConsCall ("","char") [Lit (Charc '[')])] (Comb ConsCall ("Prelude",":") [Var 19,Var 18]))))))))])),Func ("Prelude","_impl#show#Prelude.Show#(,,,,,)") 7 Private (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 5]) (FuncType (TCons ("Prelude","(,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))))) (Rule [2,3,4,5,6,7,8] (Let [(9,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(10,Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 7,Var 9,Var 8])] (Let [(11,Comb ConsCall ("Prelude","[]") [])] (Comb FuncCall ("Prelude","apply") [Var 10,Var 11]))))),Func ("Prelude","_impl#showList#Prelude.Show#(,,,,)") 7 Private (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 4]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))))) (Rule [2,3,4,5,6,7,8] (Case Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Let [(9,Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show#P49") [Var 8])] (Comb FuncCall ("Prelude","build") [Var 9])),Branch (Pattern ("Prelude",":") [10,11]) (Let [(12,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(13,Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 12])] (Let [(14,Comb FuncCall ("Prelude","showList'.showl.429") [Var 8,Var 13,Var 11])] (Let [(15,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(16,Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 15,Var 10])] (Let [(17,Comb FuncCall ("Prelude","apply") [Var 16,Var 14])] (Let [(18,Comb ConsCall ("","char") [Lit (Charc '[')])] (Comb ConsCall ("Prelude",":") [Var 18,Var 17]))))))))])),Func ("Prelude","_impl#show#Prelude.Show#(,,,,)") 6 Private (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))) (Rule [2,3,4,5,6,7] (Let [(8,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(9,Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,)") [Var 2,Var 3,Var 4,Var 5,Var 6,Var 8,Var 7])] (Let [(10,Comb ConsCall ("Prelude","[]") [])] (Comb FuncCall ("Prelude","apply") [Var 9,Var 10]))))),Func ("Prelude","_impl#showList#Prelude.Show#(,,,)") 6 Private (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 3]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))) (Rule [2,3,4,5,6,7] (Case Flex (Var 6) [Branch (Pattern ("Prelude","[]") []) (Let [(8,Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show#P49") [Var 7])] (Comb FuncCall ("Prelude","build") [Var 8])),Branch (Pattern ("Prelude",":") [9,10]) (Let [(11,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(12,Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#(,,,)") [Var 2,Var 3,Var 4,Var 5,Var 11])] (Let [(13,Comb FuncCall ("Prelude","showList'.showl.429") [Var 7,Var 12,Var 10])] (Let [(14,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(15,Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#(,,,)") [Var 2,Var 3,Var 4,Var 5,Var 14,Var 9])] (Let [(16,Comb FuncCall ("Prelude","apply") [Var 15,Var 13])] (Let [(17,Comb ConsCall ("","char") [Lit (Charc '[')])] (Comb ConsCall ("Prelude",":") [Var 17,Var 16]))))))))])),Func ("Prelude","_impl#show#Prelude.Show#(,,,)") 5 Private (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [2,3,4,5,6] (Let [(7,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(8,Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#(,,,)") [Var 2,Var 3,Var 4,Var 5,Var 7,Var 6])] (Let [(9,Comb ConsCall ("Prelude","[]") [])] (Comb FuncCall ("Prelude","apply") [Var 8,Var 9]))))),Func ("Prelude","_impl#showList#Prelude.Show#(,,)") 5 Private (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [2,3,4,5,6] (Case Flex (Var 5) [Branch (Pattern ("Prelude","[]") []) (Let [(7,Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show#P49") [Var 6])] (Comb FuncCall ("Prelude","build") [Var 7])),Branch (Pattern ("Prelude",":") [8,9]) (Let [(10,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(11,Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#(,,)") [Var 2,Var 3,Var 4,Var 10])] (Let [(12,Comb FuncCall ("Prelude","showList'.showl.429") [Var 6,Var 11,Var 9])] (Let [(13,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(14,Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#(,,)") [Var 2,Var 3,Var 4,Var 13,Var 8])] (Let [(15,Comb FuncCall ("Prelude","apply") [Var 14,Var 12])] (Let [(16,Comb ConsCall ("","char") [Lit (Charc '[')])] (Comb ConsCall ("Prelude",":") [Var 16,Var 15]))))))))])),Func ("Prelude","_impl#show#Prelude.Show#(,,)") 4 Private (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [2,3,4,5] (Let [(6,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(7,Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#(,,)") [Var 2,Var 3,Var 4,Var 6,Var 5])] (Let [(8,Comb ConsCall ("Prelude","[]") [])] (Comb FuncCall ("Prelude","apply") [Var 7,Var 8]))))),Func ("Prelude","_impl#showList#Prelude.Show#(,)") 4 Private (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [2,3,4,5] (Case Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Let [(6,Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show#P49") [Var 5])] (Comb FuncCall ("Prelude","build") [Var 6])),Branch (Pattern ("Prelude",":") [7,8]) (Let [(9,Comb (FuncPartCall 1) ("Prelude","_impl#showList#Prelude.Show#(,)#P25") [Var 2,Var 3])] (Let [(10,Comb FuncCall ("Prelude","showList'.showl.429") [Var 5,Var 9,Var 8])] (Let [(11,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(12,Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#(,)") [Var 2,Var 3,Var 11,Var 7])] (Let [(13,Comb FuncCall ("Prelude","apply") [Var 12,Var 10])] (Let [(14,Comb ConsCall ("","char") [Lit (Charc '[')])] (Comb ConsCall ("Prelude",":") [Var 14,Var 13])))))))])),Func ("Prelude","_impl#showList#Prelude.Show#(,)#P25") 3 Public (TVar 0) (Rule [2,3,4] (Case Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [5,6]) (Let [(7,Comb FuncCall ("Prelude","showsPrec") [Var 2])] (Let [(8,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(9,Comb FuncCall ("Prelude","apply") [Var 7,Var 8])] (Let [(10,Comb FuncCall ("Prelude","apply") [Var 9,Var 5])] (Let [(11,Comb FuncCall ("Prelude","showsPrec") [Var 3])] (Let [(12,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(13,Comb FuncCall ("Prelude","apply") [Var 11,Var 12])] (Let [(14,Comb FuncCall ("Prelude","apply") [Var 13,Var 6])] (Comb (FuncPartCall 1) ("Prelude","_impl#showList#Prelude.Show#(,)#P25#P26") [Var 10,Var 14])))))))))])),Func ("Prelude","_impl#showList#Prelude.Show#(,)#P25#P26") 3 Public (TVar 0) (Rule [2,3,4] (Let [(5,Comb (FuncPartCall 3) ("Prelude","showTuple._#lambda297") [])] (Let [(6,Comb ConsCall ("Prelude","[]") [])] (Let [(7,Comb ConsCall ("Prelude",":") [Var 3,Var 6])] (Let [(8,Comb ConsCall ("Prelude",":") [Var 2,Var 7])] (Let [(9,Comb FuncCall ("Prelude","foldr1") [Var 5,Var 8])] (Let [(10,Comb ConsCall ("","char") [Lit (Charc ')')])] (Let [(11,Comb ConsCall ("Prelude",":") [Var 10,Var 4])] (Let [(12,Comb FuncCall ("Prelude","apply") [Var 9,Var 11])] (Let [(13,Comb ConsCall ("","char") [Lit (Charc '(')])] (Comb ConsCall ("Prelude",":") [Var 13,Var 12]))))))))))),Func ("Prelude","_impl#show#Prelude.Show#(,)") 3 Private (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [2,3,4] (Let [(5,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(6,Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#(,)") [Var 2,Var 3,Var 5,Var 4])] (Let [(7,Comb ConsCall ("Prelude","[]") [])] (Comb FuncCall ("Prelude","apply") [Var 6,Var 7]))))),Func ("Prelude","_impl#showList#Prelude.Show#()") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","()") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Let [(4,Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show#P49") [Var 3])] (Comb FuncCall ("Prelude","build") [Var 4])),Branch (Pattern ("Prelude",":") [5,6]) (Let [(7,Comb (FuncPartCall 1) ("Prelude","_impl#showList#Prelude.Show#()#P27") [])] (Let [(8,Comb FuncCall ("Prelude","showList'.showl.429") [Var 3,Var 7,Var 6])] (Let [(9,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(10,Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#()") [Var 9,Var 5])] (Let [(11,Comb FuncCall ("Prelude","apply") [Var 10,Var 8])] (Let [(12,Comb ConsCall ("","char") [Lit (Charc '[')])] (Comb ConsCall ("Prelude",":") [Var 12,Var 11])))))))])),Func ("Prelude","_impl#showList#Prelude.Show#()#P27") 1 Public (TVar 0) (Rule [2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","()") []) (Comb (FuncPartCall 1) ("Prelude","_impl#showList#Prelude.Show#()#P27#P28") [])])),Func ("Prelude","_impl#showList#Prelude.Show#()#P27#P28") 1 Public (TVar 0) (Rule [2] (Let [(3,Comb (FuncPartCall 2) ("Prelude","showChar") [])] (Let [(4,Comb ConsCall ("StringConst","()") [])] (Comb FuncCall ("Prelude","foldr") [Var 3,Var 2,Var 4])))),Func ("Prelude","_impl#show#Prelude.Show#()") 1 Private (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [2] (Let [(3,Comb ConsCall ("","int") [Lit (Intc 0)])] (Let [(4,Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#()") [Var 3,Var 2])] (Let [(5,Comb ConsCall ("Prelude","[]") [])] (Comb FuncCall ("Prelude","apply") [Var 4,Var 5])))))] []