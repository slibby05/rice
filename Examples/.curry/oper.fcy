Prog "oper" ["Prelude"] [] [Func ("oper","!!!") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (TVar 0))) (Rule [1,2] (Free [3,4] (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:<=") [Comb FuncCall ("Prelude","++") [Var 3,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","unknown") []]],Var 1],Case Rigid (Comb FuncCall ("Prelude","=:=") [Var 2,Comb FuncCall ("Prelude","length") [Var 3]]) [Branch (Pattern ("Prelude","True") []) (Var 4),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])]]))),Func ("oper","indexOf") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TVar 0) (TCons ("Prelude","Int") []))) (Rule [1,2] (Free [3] (Case Rigid (Comb FuncCall ("Prelude","=:=") [Comb FuncCall ("oper","!!!") [Var 1,Var 3],Var 2]) [Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])]))),Func ("oper","main") 0 Public (TCons ("Prelude","Int") []) (Rule [] (Comb FuncCall ("oper","indexOf") [Comb ConsCall ("Prelude",":") [Lit (Intc 1),Comb ConsCall ("Prelude",":") [Lit (Intc 2),Comb ConsCall ("Prelude",":") [Lit (Intc 4),Comb ConsCall ("Prelude",":") [Lit (Intc 8),Comb ConsCall ("Prelude",":") [Lit (Intc 16),Comb ConsCall ("Prelude","[]") []]]]]],Lit (Intc 4)]))] []