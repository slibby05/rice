Prog "variables" ["Prelude"] [] [Func ("variables","fa") 3 Public (FuncType (TVar 0) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","(,)") [TVar 0,TVar 0])))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Var 1,Var 2]),Branch (Pattern ("Prelude",":") [4,5]) (Comb ConsCall ("Prelude","(,)") [Var 2,Var 1])])),Func ("variables","fb") 3 Public (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","(,)") [TVar 0,TVar 1])))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Var 1,Var 2]),Branch (Pattern ("Prelude",":") [4,5]) (Comb ConsCall ("Prelude","(,)") [Var 1,Var 4])])),Func ("variables","main") 3 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Num") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Num") [TVar 2]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 0,TVar 0],TCons ("Prelude","(,)") [TVar 1,TVar 2]])))) (Rule [1,2,3] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("variables","fa") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 1)],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 2)],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("variables","fb") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 2],Lit (Intc 3)],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 3],Lit (Intc 4)],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 3],Lit (Intc 5)],Comb ConsCall ("Prelude","[]") []]]]))] []