Prog "builder" ["Prelude"] [] [Func ("builder","loop") 0 Public (TVar 0) (Rule [] (Comb FuncCall ("builder","loop") [])),Func ("builder","build") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Or (Case Flex (Var 1) [Branch (LPattern (Intc 0)) (Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Var 2,Lit (Intc 1)])]) (Case Flex (Var 2) [Branch (LPattern (Intc 0)) (Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Var 1,Lit (Intc 2)])]))),Func ("builder","test_build") 0 Public (TCons ("Prelude","Int") []) (Rule [] (Comb FuncCall ("builder","build") [Lit (Intc 0),Comb FuncCall ("builder","loop") []])),Func ("builder","other") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Comb FuncCall ("Prelude","?") [Comb FuncCall ("builder","f1") [Comb FuncCall ("Prelude","_inst#Prelude.Num#Prelude.Int") [],Var 1,Var 2],Comb FuncCall ("builder","f2") [Comb FuncCall ("Prelude","_inst#Prelude.Num#Prelude.Int") [],Var 1,Var 2]])),Func ("builder","f1") 3 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TVar 0)))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (LPattern (Intc 0)) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","+") [Var 1],Var 3],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 1)]])])),Func ("builder","f2") 3 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (FuncType (TCons ("Prelude","Int") []) (TVar 0)))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (LPattern (Intc 0)) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","+") [Var 1],Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 2)]])])),Func ("builder","test_other") 0 Public (TCons ("Prelude","Int") []) (Rule [] (Comb FuncCall ("builder","build") [Lit (Intc 0),Comb FuncCall ("builder","loop") []]))] []