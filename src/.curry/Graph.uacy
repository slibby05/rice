{- AbstractCurry 2.0 -}
CurryProg "Graph"
["Prelude","Data.Map"]
Nothing
 []
 []
 [CTypeSyn ("Graph","Set") Public [(0,"a")] (CTApply (CTApply (CTCons ("Data.Map","Map")) (CTVar (0,"a"))) (CTCons ("Prelude","()"))),
  CTypeSyn ("Graph","Vertex") Public [] (CTCons ("Prelude","Int")),
  CTypeSyn ("Graph","Edge") Public [] (CTApply (CTApply (CTCons ("Prelude","(,)")) (CTCons ("Graph","Vertex"))) (CTCons ("Graph","Vertex"))),
  CTypeSyn ("Graph","Table") Public [(0,"a")] (CTApply (CTApply (CTCons ("Data.Map","Map")) (CTCons ("Graph","Vertex"))) (CTVar (0,"a"))),
  CTypeSyn ("Graph","Graph") Public [] (CTApply (CTCons ("Graph","Table")) (CTApply (CTCons ("Prelude","[]")) (CTCons ("Graph","Vertex")))),
  CType ("Graph","Tree") Public [(0,"a")] [CCons [] (CContext []) ("Graph","Node") Public [CTVar (0,"a"),CTApply (CTCons ("Prelude","[]")) (CTApply (CTCons ("Graph","Tree")) (CTVar (0,"a")))]] [],
  CTypeSyn ("Graph","Forrest") Public [(0,"a")] (CTApply (CTCons ("Prelude","[]")) (CTApply (CTCons ("Graph","Tree")) (CTVar (0,"a"))))]
 [CFunc ("Graph","!") 2 Public (CQualType (CContext []) (CFuncType (CTCons ("Graph","Graph")) (CFuncType (CTCons ("Graph","Vertex")) (CTApply (CTCons ("Prelude","[]")) (CTCons ("Graph","Vertex")))))) [CRule [CPVar (0,"g"),CPVar (1,"v")] (CSimpleRhs (CApply (CApply (CApply (CSymbol ("Data.Map","findWithDefault")) (CSymbol ("Prelude","[]"))) (CVar (1,"v"))) (CVar (0,"g"))) [])],
  CFunc ("Graph","vertices") 0 Public (CQualType (CContext []) (CFuncType (CTCons ("Graph","Graph")) (CTApply (CTCons ("Prelude","[]")) (CTCons ("Graph","Vertex"))))) [CRule [] (CSimpleRhs (CSymbol ("Data.Map","keys")) [])],
  CFunc ("Graph","edges") 1 Public (CQualType (CContext []) (CFuncType (CTCons ("Graph","Graph")) (CTApply (CTCons ("Prelude","[]")) (CTCons ("Graph","Edge"))))) [CRule [CPVar (0,"g")] (CSimpleRhs (CListComp (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (1,"u"))) (CVar (2,"v"))) [CSPat (CPVar (1,"u")) (CApply (CSymbol ("Graph","vertices")) (CVar (0,"g"))),CSPat (CPVar (2,"v")) (CApply (CApply (CSymbol ("Graph","!")) (CVar (0,"g"))) (CVar (1,"u")))]) [])],
  CFunc ("Graph","mapT") 0 Public (CQualType (CContext []) (CFuncType (CFuncType (CTCons ("Graph","Vertex")) (CFuncType (CTVar (0,"a")) (CTVar (1,"b")))) (CFuncType (CTApply (CTCons ("Graph","Table")) (CTVar (0,"a"))) (CTApply (CTCons ("Graph","Table")) (CTVar (1,"b")))))) [CRule [] (CSimpleRhs (CSymbol ("Data.Map","mapWithKey")) [])],
  CFunc ("Graph","buildG") 1 Public (CQualType (CContext []) (CFuncType (CTApply (CTCons ("Prelude","[]")) (CTCons ("Graph","Edge"))) (CTCons ("Graph","Graph")))) [CRule [CPVar (0,"es")] (CSimpleRhs (CApply (CApply (CApply (CSymbol ("Data.Map","insertListWith")) (CSymbol ("Prelude","++"))) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CSymbol ("","mapSnd")) (CApply (CApply (CSymbol ("Prelude","flip")) (CSymbol ("Prelude",":"))) (CSymbol ("Prelude","[]"))))) (CVar (0,"es")))) (CSymbol ("Data.Map","empty"))) [CLocalFunc (CFunc ("","mapSnd") 2 Private (CQualType (CContext []) (CTCons ("Prelude","untyped"))) [CRule [CPVar (1,"f"),CPComb ("Prelude","(,)") [CPVar (2,"a"),CPVar (3,"b")]] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (2,"a"))) (CApply (CVar (1,"f")) (CVar (3,"b")))) [])])])],
  CFunc ("Graph","undirected") 1 Public (CQualType (CContext []) (CFuncType (CTCons ("Graph","Graph")) (CTCons ("Graph","Graph")))) [CRule [CPVar (0,"g")] (CSimpleRhs (CApply (CSymbol ("Graph","buildG")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Graph","edges")) (CVar (0,"g")))) (CApply (CSymbol ("Graph","reverseE")) (CVar (0,"g"))))) [])],
  CFunc ("Graph","transposeG") 0 Public (CQualType (CContext []) (CFuncType (CTCons ("Graph","Graph")) (CTCons ("Graph","Graph")))) [CRule [] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Graph","buildG"))) (CSymbol ("Graph","reverseE"))) [])],
  CFunc ("Graph","reverseE") 1 Public (CQualType (CContext []) (CFuncType (CTCons ("Graph","Graph")) (CTApply (CTCons ("Prelude","[]")) (CTCons ("Graph","Edge"))))) [CRule [CPVar (0,"g")] (CSimpleRhs (CListComp (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (2,"v"))) (CVar (1,"u"))) [CSPat (CPComb ("Prelude","(,)") [CPVar (1,"u"),CPVar (2,"v")]) (CApply (CSymbol ("Graph","edges")) (CVar (0,"g")))]) [])],
  CFunc ("Graph","outdegree") 1 Public (CQualType (CContext []) (CFuncType (CTCons ("Graph","Graph")) (CTApply (CTCons ("Graph","Table")) (CTCons ("Prelude","Int"))))) [CRule [CPVar (0,"g")] (CSimpleRhs (CApply (CApply (CSymbol ("Graph","mapT")) (CSymbol ("","numEdges"))) (CVar (0,"g"))) [CLocalFunc (CFunc ("","numEdges") 2 Private (CQualType (CContext []) (CTCons ("Prelude","untyped"))) [CRule [CPVar (1,"_"),CPVar (2,"ws")] (CSimpleRhs (CApply (CSymbol ("Prelude","length")) (CVar (2,"ws"))) [])])])],
  CFunc ("Graph","indegree") 0 Public (CQualType (CContext []) (CFuncType (CTCons ("Graph","Graph")) (CTApply (CTCons ("Graph","Table")) (CTCons ("Prelude","Int"))))) [CRule [] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Graph","outdegree"))) (CSymbol ("Graph","transposeG"))) [])],
  CFunc ("Graph","dfs") 2 Public (CQualType (CContext []) (CFuncType (CTCons ("Graph","Graph")) (CFuncType (CTApply (CTCons ("Prelude","[]")) (CTCons ("Graph","Vertex"))) (CTApply (CTCons ("Graph","Forrest")) (CTCons ("Graph","Vertex")))))) [CRule [CPVar (0,"g"),CPVar (1,"vs")] (CSimpleRhs (CApply (CSymbol ("Graph","prune")) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CSymbol ("Graph","generate")) (CVar (0,"g")))) (CVar (1,"vs")))) [])],
  CFunc ("Graph","generate") 2 Public (CQualType (CContext []) (CFuncType (CTCons ("Graph","Graph")) (CFuncType (CTCons ("Graph","Vertex")) (CTApply (CTCons ("Graph","Tree")) (CTCons ("Graph","Vertex")))))) [CRule [CPVar (0,"g"),CPVar (1,"v")] (CSimpleRhs (CApply (CApply (CSymbol ("Graph","Node")) (CVar (1,"v"))) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CSymbol ("Graph","generate")) (CVar (0,"g")))) (CApply (CApply (CSymbol ("Graph","!")) (CVar (0,"g"))) (CVar (1,"v"))))) [])],
  CFunc ("Graph","prune") 0 Public (CQualType (CContext []) (CFuncType (CTApply (CTCons ("Graph","Forrest")) (CTCons ("Graph","Vertex"))) (CTApply (CTCons ("Graph","Forrest")) (CTCons ("Graph","Vertex"))))) [CRule [] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","snd"))) (CApply (CSymbol ("Graph","chop")) (CSymbol ("Data.Map","empty")))) [])],
  CFunc ("Graph","chop") 2 Public (CQualType (CContext []) (CFuncType (CTApply (CTCons ("Graph","Set")) (CTCons ("Graph","Vertex"))) (CFuncType (CTApply (CTCons ("Graph","Forrest")) (CTCons ("Graph","Vertex"))) (CTApply (CTApply (CTCons ("Prelude","(,)")) (CTApply (CTCons ("Graph","Set")) (CTCons ("Graph","Vertex")))) (CTApply (CTCons ("Graph","Forrest")) (CTCons ("Graph","Vertex"))))))) [CRule [CPVar (0,"seen"),CPComb ("Prelude","[]") []] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (0,"seen"))) (CSymbol ("Prelude","[]"))) []),CRule [CPVar (1,"seen"),CPComb ("Prelude",":") [CPComb ("Graph","Node") [CPVar (2,"v"),CPVar (3,"ts")],CPVar (4,"us")]] (CGuardedRhs [(CApply (CApply (CSymbol ("Data.Map","member")) (CVar (2,"v"))) (CVar (1,"seen")),CApply (CApply (CSymbol ("Graph","chop")) (CVar (1,"seen"))) (CVar (4,"us"))),(CSymbol ("Prelude","otherwise"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (5,"seen1"),CPVar (6,"as")]) (CSimpleRhs (CApply (CApply (CSymbol ("Graph","chop")) (CApply (CApply (CApply (CSymbol ("Data.Map","insert")) (CVar (2,"v"))) (CSymbol ("Prelude","()"))) (CVar (1,"seen")))) (CVar (3,"ts"))) []),CLocalPat (CPComb ("Prelude","(,)") [CPVar (7,"seen2"),CPVar (8,"bs")]) (CSimpleRhs (CApply (CApply (CSymbol ("Graph","chop")) (CVar (5,"seen1"))) (CVar (4,"us"))) [])] (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (7,"seen2"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Graph","Node")) (CVar (2,"v"))) (CVar (6,"as")))) (CVar (8,"bs")))))] [])],
  CFunc ("Graph","dff") 1 Public (CQualType (CContext []) (CFuncType (CTCons ("Graph","Graph")) (CTApply (CTCons ("Graph","Forrest")) (CTCons ("Graph","Vertex"))))) [CRule [CPVar (0,"g")] (CSimpleRhs (CApply (CApply (CSymbol ("Graph","dfs")) (CVar (0,"g"))) (CApply (CSymbol ("Graph","vertices")) (CVar (0,"g")))) [])],
  CFunc ("Graph","preorder") 1 Public (CQualType (CContext []) (CFuncType (CTApply (CTCons ("Graph","Tree")) (CTVar (0,"a"))) (CTApply (CTCons ("Prelude","[]")) (CTVar (0,"a"))))) [CRule [CPComb ("Graph","Node") [CPVar (0,"a"),CPVar (1,"fs")]] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"a"))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Graph","flatten")) (CSymbol ("Graph","preorder"))) (CVar (1,"fs")))) [])],
  CFunc ("Graph","postorder") 1 Public (CQualType (CContext []) (CFuncType (CTApply (CTCons ("Graph","Tree")) (CTVar (0,"a"))) (CTApply (CTCons ("Prelude","[]")) (CTVar (0,"a"))))) [CRule [CPComb ("Graph","Node") [CPVar (0,"a"),CPVar (1,"fs")]] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Graph","flatten")) (CSymbol ("Graph","postorder"))) (CVar (1,"fs")))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"a"))) (CSymbol ("Prelude","[]")))) [])],
  CFunc ("Graph","flatten") 1 Public (CQualType (CContext []) (CFuncType (CFuncType (CTApply (CTCons ("Graph","Tree")) (CTVar (0,"a"))) (CTApply (CTCons ("Prelude","[]")) (CTVar (0,"a")))) (CFuncType (CTApply (CTCons ("Graph","Forrest")) (CTVar (0,"a"))) (CTApply (CTCons ("Prelude","[]")) (CTVar (0,"a")))))) [CRule [CPVar (0,"f")] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","concat"))) (CApply (CSymbol ("Prelude","map")) (CVar (0,"f")))) [])],
  CFunc ("Graph","preOrd") 0 Public (CQualType (CContext []) (CFuncType (CTCons ("Graph","Graph")) (CTApply (CTCons ("Prelude","[]")) (CTCons ("Graph","Vertex"))))) [CRule [] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("Graph","flatten")) (CSymbol ("Graph","preorder")))) (CSymbol ("Graph","dff"))) [])],
  CFunc ("Graph","postOrd") 0 Public (CQualType (CContext []) (CFuncType (CTCons ("Graph","Graph")) (CTApply (CTCons ("Prelude","[]")) (CTCons ("Graph","Vertex"))))) [CRule [] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("Graph","flatten")) (CSymbol ("Graph","postorder")))) (CSymbol ("Graph","dff"))) [])],
  CFunc ("Graph","preArr") 1 Public (CQualType (CContext []) (CFuncType (CTApply (CTCons ("Graph","Forrest")) (CTCons ("Graph","Vertex"))) (CTApply (CTCons ("Graph","Table")) (CTCons ("Prelude","Int"))))) [CRule [CPVar (0,"ts")] (CSimpleRhs (CApply (CSymbol ("Data.Map","fromList")) (CApply (CApply (CSymbol ("Prelude","zip")) (CApply (CApply (CSymbol ("Graph","flatten")) (CSymbol ("Graph","preorder"))) (CVar (0,"ts")))) (CApply (CSymbol ("Prelude","enumFrom")) (CLit (CIntc 1))))) [])],
  CFunc ("Graph","topSort") 0 Public (CQualType (CContext []) (CFuncType (CTCons ("Graph","Graph")) (CTApply (CTCons ("Prelude","[]")) (CTCons ("Graph","Vertex"))))) [CRule [] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","reverse"))) (CSymbol ("Graph","postOrd"))) [])],
  CFunc ("Graph","components") 0 Public (CQualType (CContext []) (CFuncType (CTCons ("Graph","Graph")) (CTApply (CTCons ("Graph","Forrest")) (CTCons ("Graph","Vertex"))))) [CRule [] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Graph","dff"))) (CSymbol ("Graph","undirected"))) [])],
  CFunc ("Graph","scc") 1 Public (CQualType (CContext []) (CFuncType (CTCons ("Graph","Graph")) (CTApply (CTCons ("Graph","Forrest")) (CTCons ("Graph","Vertex"))))) [CRule [CPVar (0,"g")] (CSimpleRhs (CApply (CApply (CSymbol ("Graph","dfs")) (CVar (0,"g"))) (CApply (CSymbol ("Prelude","reverse")) (CApply (CSymbol ("Graph","postOrd")) (CApply (CSymbol ("Graph","transposeG")) (CVar (0,"g")))))) [])],
  CFunc ("Graph","reachable") 2 Public (CQualType (CContext []) (CFuncType (CTCons ("Graph","Graph")) (CFuncType (CTCons ("Graph","Vertex")) (CTApply (CTCons ("Prelude","[]")) (CTCons ("Graph","Vertex")))))) [CRule [CPVar (0,"g"),CPVar (1,"v")] (CSimpleRhs (CApply (CApply (CSymbol ("Graph","flatten")) (CSymbol ("Graph","preorder"))) (CApply (CApply (CSymbol ("Graph","dfs")) (CVar (0,"g"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"v"))) (CSymbol ("Prelude","[]"))))) [])],
  CFunc ("Graph","path") 3 Public (CQualType (CContext []) (CFuncType (CTCons ("Graph","Graph")) (CFuncType (CTCons ("Graph","Vertex")) (CFuncType (CTCons ("Graph","Vertex")) (CTCons ("Prelude","Bool")))))) [CRule [CPVar (0,"g"),CPVar (1,"u"),CPVar (2,"v")] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude","elem")) (CVar (2,"v"))) (CApply (CApply (CSymbol ("Graph","reachable")) (CVar (0,"g"))) (CVar (1,"u")))) [])]]
 []
