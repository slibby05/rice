{- AbstractCurry 2.0 -}
CurryProg "Gas"
["Prelude","FlatCurry.Types","FlatRewrite","Util","Debug"]
Nothing
 []
 []
 []
 [CFunc ("Gas","loop") 3 Public (CQualType (CContext []) (CFuncType (CFuncType (CTCons ("FlatCurry.Types","FuncDecl")) (CFuncType (CTCons ("Prelude","Int")) (CTApply (CTCons ("Prelude","[]")) (CTCons ("FlatCurry.Types","FuncDecl"))))) (CFuncType (CTApply (CTCons ("Prelude","[]")) (CTCons ("FlatCurry.Types","FuncDecl"))) (CFuncType (CTCons ("Prelude","Int")) (CTApply (CTApply (CTCons ("Prelude","(,)")) (CTApply (CTCons ("Prelude","[]")) (CTCons ("FlatCurry.Types","FuncDecl")))) (CTCons ("Prelude","Int"))))))) [CRule [CPVar (0,"opt"),CPComb ("Prelude","[]") [],CPVar (1,"n")] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","[]"))) (CVar (1,"n"))) []),CRule [CPVar (2,"opt"),CPComb ("Prelude",":") [CPVar (3,"f"),CPVar (4,"fs")],CPVar (5,"n")] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Debug","trace")) (CApply (CApply (CSymbol ("Prelude","++")) (CLit (CStringc "FUNCTION: "))) (CApply (CSymbol ("","fname")) (CVar (3,"f")))))) (CCase CFlex (CApply (CApply (CVar (2,"opt")) (CVar (3,"f"))) (CVar (5,"n"))) [(CPComb ("Prelude","[]") [],CSimpleRhs (CApply (CApply (CSymbol ("Util","mapFst")) (CApply (CSymbol ("Prelude",":")) (CVar (3,"f")))) (CApply (CApply (CApply (CSymbol ("Gas","loop")) (CVar (2,"opt"))) (CVar (4,"fs"))) (CVar (5,"n")))) []),(CPAs (6,"y") (CPComb ("Prelude",":") [CPVar (7,"_"),CPVar (8,"_")]),CSimpleRhs (CApply (CApply (CApply (CSymbol ("Gas","loop")) (CVar (2,"opt"))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (6,"y"))) (CVar (4,"fs")))) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (5,"n"))) (CApply (CSymbol ("Prelude","length")) (CVar (6,"y"))))) [])])) [CLocalFunc (CFunc ("","fname") 1 Private (CQualType (CContext []) (CTCons ("Prelude","untyped"))) [CRule [CPComb ("FlatCurry.Types","Func") [CPVar (9,"q"),CPVar (10,"_"),CPVar (11,"_"),CPVar (12,"_"),CPVar (13,"_")]] (CSimpleRhs (CApply (CSymbol ("Prelude","snd")) (CVar (9,"q"))) [])])])],
  CFunc ("Gas","start") 1 Public (CQualType (CContext []) (CFuncType (CTCons ("FlatCurry.Types","Expr")) (CTApply (CTCons ("Prelude","Maybe")) (CTApply (CTApply (CTCons ("Prelude","(,)")) (CTCons ("FlatRewrite","Path"))) (CTCons ("FlatCurry.Types","Expr")))))) [CRule [CPVar (0,"e")] (CSimpleRhs (CApply (CSymbol ("Prelude","Just")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","[]"))) (CVar (0,"e")))) [])],
  CFunc ("Gas","~~") 2 Public (CQualType (CContext []) (CFuncType (CTApply (CTCons ("Prelude","Maybe")) (CTApply (CTApply (CTCons ("Prelude","(,)")) (CTCons ("FlatRewrite","Path"))) (CTCons ("FlatCurry.Types","Expr")))) (CFuncType (CTCons ("FlatCurry.Types","Expr")) (CTApply (CTCons ("Prelude","Maybe")) (CTApply (CTApply (CTCons ("Prelude","(,)")) (CTCons ("FlatRewrite","Path"))) (CTCons ("FlatCurry.Types","Expr"))))))) [CRule [CPComb ("Prelude","Just") [CPComb ("Prelude","(,)") [CPVar (0,"p"),CPVar (1,"e")]],CPVar (2,"a")] (CGuardedRhs [(CApply (CApply (CSymbol ("Prelude","==")) (CApply (CSymbol ("FlatRewrite","subexpr")) (CVar (1,"e")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (3,"x"))) (CSymbol ("Prelude","[]")))) (CVar (2,"a"))),CApply (CSymbol ("Prelude","Just")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"p"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (3,"x"))) (CSymbol ("Prelude","[]"))))) (CVar (2,"a"))))] [CLocalVars [(3,"x")]])],
  CFunc ("Gas","~>") 2 Public (CQualType (CContext []) (CFuncType (CTApply (CTCons ("Prelude","Maybe")) (CTApply (CTApply (CTCons ("Prelude","(,)")) (CTCons ("FlatRewrite","Path"))) (CTCons ("FlatCurry.Types","Expr")))) (CFuncType (CTCons ("FlatCurry.Types","Expr")) (CTApply (CTCons ("Prelude","Maybe")) (CTApply (CTApply (CTCons ("Prelude","(,)")) (CTCons ("FlatRewrite","Path"))) (CTCons ("FlatCurry.Types","Expr"))))))) [CRule [CPComb ("Prelude","Just") [CPComb ("Prelude","(,)") [CPVar (0,"p"),CPVar (1,"e")]],CPVar (2,"a")] (CGuardedRhs [(CApply (CApply (CSymbol ("Prelude","==")) (CApply (CSymbol ("FlatRewrite","subexpr")) (CVar (1,"e")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (3,"q"))) (CVar (2,"a"))),CApply (CSymbol ("Prelude","Just")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"p"))) (CVar (3,"q")))) (CVar (2,"a"))))] [CLocalVars [(3,"q")]])],
  CFunc ("Gas","~~>") 2 Public (CQualType (CContext []) (CFuncType (CTApply (CTCons ("Prelude","Maybe")) (CTApply (CTApply (CTCons ("Prelude","(,)")) (CTCons ("FlatRewrite","Path"))) (CTCons ("FlatCurry.Types","Expr")))) (CFuncType (CTCons ("FlatCurry.Types","Expr")) (CTApply (CTCons ("Prelude","Maybe")) (CTApply (CTApply (CTCons ("Prelude","(,)")) (CTCons ("FlatRewrite","Path"))) (CTCons ("FlatCurry.Types","Expr"))))))) [CRule [CPVar (0,"e"),CPVar (1,"a")] (CSimpleRhs (CApply (CApply (CSymbol ("Gas","~>")) (CApply (CApply (CSymbol ("Gas","~~")) (CVar (0,"e"))) (CSymbol ("","_")))) (CVar (1,"a"))) [])],
  CFunc ("Gas","satisfies") 2 Public (CQualType (CContext []) (CFuncType (CTApply (CTCons ("Prelude","Maybe")) (CTApply (CTApply (CTCons ("Prelude","(,)")) (CTCons ("FlatRewrite","Path"))) (CTCons ("FlatCurry.Types","Expr")))) (CFuncType (CFuncType (CTCons ("FlatCurry.Types","Expr")) (CTCons ("Prelude","Bool"))) (CTApply (CTCons ("Prelude","Maybe")) (CTApply (CTApply (CTCons ("Prelude","(,)")) (CTCons ("FlatRewrite","Path"))) (CTCons ("FlatCurry.Types","Expr"))))))) [CRule [CPAs (0,"a") (CPComb ("Prelude","Just") [CPComb ("Prelude","(,)") [CPVar (1,"_"),CPVar (2,"e")]]),CPVar (3,"p")] (CGuardedRhs [(CApply (CVar (3,"p")) (CVar (2,"e")),CVar (0,"a"))] [])],
  CFunc ("Gas","clet") 0 Public (CQualType (CContext []) (CTCons ("FlatCurry.Types","Expr"))) [CRule [] (CSimpleRhs (CApply (CApply (CSymbol ("FlatCurry.Types","Let")) (CSymbol ("","_"))) (CSymbol ("","_"))) [])],
  CFunc ("Gas","ccase") 0 Public (CQualType (CContext []) (CTCons ("FlatCurry.Types","Expr"))) [CRule [] (CSimpleRhs (CApply (CApply (CApply (CSymbol ("FlatCurry.Types","Case")) (CSymbol ("","_"))) (CSymbol ("","_"))) (CSymbol ("","_"))) [])],
  CFunc ("Gas","ccomb") 0 Public (CQualType (CContext []) (CTCons ("FlatCurry.Types","Expr"))) [CRule [] (CSimpleRhs (CApply (CApply (CApply (CSymbol ("FlatCurry.Types","Comb")) (CSymbol ("","_"))) (CSymbol ("","_"))) (CSymbol ("","_"))) [])],
  CFunc ("Gas","cor") 0 Public (CQualType (CContext []) (CTCons ("FlatCurry.Types","Expr"))) [CRule [] (CSimpleRhs (CApply (CApply (CSymbol ("FlatCurry.Types","Or")) (CSymbol ("","_"))) (CSymbol ("","_"))) [])],
  CFunc ("Gas","cfree") 0 Public (CQualType (CContext []) (CTCons ("FlatCurry.Types","Expr"))) [CRule [] (CSimpleRhs (CApply (CApply (CSymbol ("FlatCurry.Types","Free")) (CSymbol ("","_"))) (CSymbol ("","_"))) [])],
  CFunc ("Gas","ctype") 0 Public (CQualType (CContext []) (CTCons ("FlatCurry.Types","Expr"))) [CRule [] (CSimpleRhs (CApply (CApply (CSymbol ("FlatCurry.Types","Typed")) (CSymbol ("","_"))) (CSymbol ("","_"))) [])]]
 []
