Prog "test" ["Prelude"] [] [Func ("test","t2") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (Rule [] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("test","t2._#lambda1") [],Comb ConsCall ("Prelude",":") [Lit (Intc 1),Comb ConsCall ("Prelude",":") [Lit (Intc 2),Comb ConsCall ("Prelude",":") [Lit (Intc 3),Comb ConsCall ("Prelude","[]") []]]]])),Func ("test","t2._#lambda1") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Var 1)),Func ("test","t3") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (Rule [] (Case Rigid (Comb ConsCall ("Prelude","True") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Intc 1),Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])),Func ("test","t4") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (Rule [] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("test","t4._#lambda2") []],Comb ConsCall ("Prelude",":") [Lit (Intc 1),Comb ConsCall ("Prelude",":") [Lit (Intc 2),Comb ConsCall ("Prelude",":") [Lit (Intc 3),Comb ConsCall ("Prelude","[]") []]]]])),Func ("test","t4._#lambda2") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("test","t4._#lambda2._#lambda3") [Var 1],Comb ConsCall ("Prelude",":") [Lit (Intc 4),Comb ConsCall ("Prelude",":") [Lit (Intc 5),Comb ConsCall ("Prelude",":") [Lit (Intc 6),Comb ConsCall ("Prelude","[]") []]]]])),Func ("test","t4._#lambda2._#lambda3") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Var 1,Var 2]))] []