interface paths where {
import Prelude;
data Nat = Zero | Succ Nat;
clen 1 :: Prelude.Num b => [a] -> b;
f 3 :: Nat -> Nat -> a -> (Nat, a);
g 2 :: Nat -> (Nat, Nat) -> [a];
h 1 :: Prelude.Num a => [a] -> Prelude.Bool;
notyet 0 :: Prelude.Num a => a;
hiding class Prelude.Num a;
hiding data Prelude.Bool;
instance Prelude.Num Prelude.Float {
  fromInt 1;
  signum 1;
  abs 1;
  negate 1;
  (*) 2;
  (-) 2;
  (+) 2
} {-# MODULE Prelude #-};
instance Prelude.Num Prelude.Int {
  fromInt 1;
  signum 1;
  abs 1;
  negate 1;
  (*) 2;
  (-) 2;
  (+) 2
} {-# MODULE Prelude #-};
hiding data Prelude.Float;
hiding data Prelude.Int
}