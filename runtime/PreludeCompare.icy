IProg "PreludeCompare" ["PreludeBase"] [] [IFunction ("Prelude","<",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Ord",0) 8 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10] [IVarAssign 10 (IVarAccess 2 [0]),IVarAssign 9 (IVarAccess 2 [1]),IVarAssign 8 (IVarAccess 2 [2]),IVarAssign 7 (IVarAccess 2 [3]),IVarAssign 6 (IVarAccess 2 [4]),IVarAssign 5 (IVarAccess 2 [5]),IVarAssign 4 (IVarAccess 2 [6]),IVarAssign 3 (IVarAccess 2 [7])] (IReturn (IVar 7)))]))),IFunction ("Prelude",">",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Ord",0) 8 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10] [IVarAssign 10 (IVarAccess 2 [0]),IVarAssign 9 (IVarAccess 2 [1]),IVarAssign 8 (IVarAccess 2 [2]),IVarAssign 7 (IVarAccess 2 [3]),IVarAssign 6 (IVarAccess 2 [4]),IVarAssign 5 (IVarAccess 2 [5]),IVarAssign 4 (IVarAccess 2 [6]),IVarAssign 3 (IVarAccess 2 [7])] (IReturn (IVar 8)))]))),IFunction ("Prelude","min",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Ord",0) 8 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10] [IVarAssign 10 (IVarAccess 2 [0]),IVarAssign 9 (IVarAccess 2 [1]),IVarAssign 8 (IVarAccess 2 [2]),IVarAssign 7 (IVarAccess 2 [3]),IVarAssign 6 (IVarAccess 2 [4]),IVarAssign 5 (IVarAccess 2 [5]),IVarAssign 4 (IVarAccess 2 [6]),IVarAssign 3 (IVarAccess 2 [7])] (IReturn (IVar 9)))]))),IFunction ("Prelude","max",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Ord",0) 8 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10] [IVarAssign 10 (IVarAccess 2 [0]),IVarAssign 9 (IVarAccess 2 [1]),IVarAssign 8 (IVarAccess 2 [2]),IVarAssign 7 (IVarAccess 2 [3]),IVarAssign 6 (IVarAccess 2 [4]),IVarAssign 5 (IVarAccess 2 [5]),IVarAssign 4 (IVarAccess 2 [6]),IVarAssign 3 (IVarAccess 2 [7])] (IReturn (IVar 10)))]))),IFunction ("Prelude","_impl#max#Prelude.Ord#Prelude.Bool",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IVar 2))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (IVar 3)))]))),IFunction ("Prelude","_impl#min#Prelude.Ord#Prelude.Bool",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IVar 3))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (IVar 2)))]))),IFunction ("Prelude","_impl#>#Prelude.Ord#Prelude.Bool",0) 2 Public [1] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 3 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (IVar 2)))]))),IFunction ("Prelude","_impl#<#Prelude.Ord#Prelude.Bool",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (IVar 3)))]))),IFunction ("Prelude","_impl#>=#Prelude.Ord#Prelude.Bool",0) 2 Public [1] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 3 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IVar 2))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) [])))]))),IFunction ("Prelude","_impl#<=#Prelude.Ord#Prelude.Bool",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IVar 3))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) [])))]))),IFunction ("Prelude","_impl#compare#Prelude.Ord#Prelude.Bool",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (ICaseCons 3 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","EQ",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","GT",0) [])))])),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons 3 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","LT",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","EQ",0) [])))]))]))),IFunction ("Prelude","_impl#max#Prelude.Ord#Prelude.Char",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 3 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 4,IVar 5]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IVar 3))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (IVar 2)))]))]))]))),IFunction ("Prelude","_impl#min#Prelude.Ord#Prelude.Char",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 3 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 4,IVar 5]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IVar 2))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (IVar 3)))]))]))]))),IFunction ("Prelude","_impl#>#Prelude.Ord#Prelude.Char",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 3 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 4,IVar 5]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) [])))]))]))]))),IFunction ("Prelude","_impl#<#Prelude.Ord#Prelude.Char",0) 2 Public [1] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 3 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 3 [0])] (ICaseCons 2 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 2 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 4,IVar 5]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) [])))]))]))]))),IFunction ("Prelude","_impl#>=#Prelude.Ord#Prelude.Char",0) 2 Public [1] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 3 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 3 [0])] (ICaseCons 2 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 2 [0])] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 4,IVar 5])))]))]))),IFunction ("Prelude","_impl#<=#Prelude.Ord#Prelude.Char",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 3 [0])] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 4,IVar 5])))]))]))),IFunction ("Prelude","_impl#compare#Prelude.Ord#Prelude.Char",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 3 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqChar",0) [IVar 4,IVar 5]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","EQ",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqChar",0) [IVar 4,IVar 5]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","LT",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","GT",0) [])))]))]))]))]))),IFunction ("Prelude","_impl#max#Prelude.Ord#Prelude.Float",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 3 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqFloat",0) [IVar 4,IVar 5]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IVar 3))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (IVar 2)))]))]))]))),IFunction ("Prelude","_impl#min#Prelude.Ord#Prelude.Float",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 3 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqFloat",0) [IVar 4,IVar 5]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IVar 2))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (IVar 3)))]))]))]))),IFunction ("Prelude","_impl#>#Prelude.Ord#Prelude.Float",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 3 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqFloat",0) [IVar 4,IVar 5]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) [])))]))]))]))),IFunction ("Prelude","_impl#<#Prelude.Ord#Prelude.Float",0) 2 Public [1] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 3 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 3 [0])] (ICaseCons 2 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 2 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqFloat",0) [IVar 4,IVar 5]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) [])))]))]))]))),IFunction ("Prelude","_impl#>=#Prelude.Ord#Prelude.Float",0) 2 Public [1] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 3 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 3 [0])] (ICaseCons 2 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 2 [0])] (IReturn (IFCall ("Prelude","primLtEqFloat",0) [IVar 4,IVar 5])))]))]))),IFunction ("Prelude","_impl#<=#Prelude.Ord#Prelude.Float",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 3 [0])] (IReturn (IFCall ("Prelude","primLtEqFloat",0) [IVar 4,IVar 5])))]))]))),IFunction ("Prelude","_impl#compare#Prelude.Ord#Prelude.Float",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 3 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqFloat",0) [IVar 4,IVar 5]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","EQ",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqFloat",0) [IVar 4,IVar 5]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","LT",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","GT",0) [])))]))]))]))]))),IFunction ("Prelude","_impl#max#Prelude.Ord#Prelude.Int",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 3 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqInt",0) [IVar 4,IVar 5]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IVar 3))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (IVar 2)))]))]))]))),IFunction ("Prelude","_impl#min#Prelude.Ord#Prelude.Int",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 3 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqInt",0) [IVar 4,IVar 5]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IVar 2))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (IVar 3)))]))]))]))),IFunction ("Prelude","_impl#>#Prelude.Ord#Prelude.Int",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 3 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqInt",0) [IVar 4,IVar 5]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) [])))]))]))]))),IFunction ("Prelude","_impl#<#Prelude.Ord#Prelude.Int",0) 2 Public [1] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 3 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 3 [0])] (ICaseCons 2 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 2 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqInt",0) [IVar 4,IVar 5]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) [])))]))]))]))),IFunction ("Prelude","_impl#>=#Prelude.Ord#Prelude.Int",0) 2 Public [1] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 3 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 3 [0])] (ICaseCons 2 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 2 [0])] (IReturn (IFCall ("Prelude","primLtEqInt",0) [IVar 4,IVar 5])))]))]))),IFunction ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 3 [0])] (IReturn (IFCall ("Prelude","primLtEqInt",0) [IVar 4,IVar 5])))]))]))),IFunction ("Prelude","_impl#compare#Prelude.Ord#Prelude.Int",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 3 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqInt",0) [IVar 4,IVar 5]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","EQ",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primLtEqInt",0) [IVar 4,IVar 5]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","LT",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","GT",0) [])))]))]))]))]))),IFunction ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 3 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqChar",0) [IVar 4,IVar 5]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) [])))]))]))]))),IFunction ("Prelude","_impl#==#Prelude.Eq#Prelude.Char",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","char",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 3 [0])] (IReturn (IFCall ("Prelude","primEqChar",0) [IVar 4,IVar 5])))]))]))),IFunction ("Prelude","_inst#Prelude.Eq#Prelude.Char",0) 0 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 2 (IFPCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char",0) 2 []),IVarAssign 3 (IFPCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char",0) 2 [])] (IReturn (ICCall ("Prelude","_Dict#Eq",0) [IVar 2,IVar 3])))),IFunction ("Prelude","_inst#Prelude.Ord#Prelude.Char",0) 0 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10,IVarDecl 11] [IVarAssign 2 (IFPCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char",0) 2 []),IVarAssign 3 (IFPCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char",0) 2 []),IVarAssign 4 (ICCall ("Prelude","_Dict#Eq",0) [IVar 2,IVar 3]),IVarAssign 5 (IFPCall ("Prelude","_impl#compare#Prelude.Ord#Prelude.Char",0) 2 []),IVarAssign 6 (IFPCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Char",0) 2 []),IVarAssign 7 (IFPCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Char",0) 2 []),IVarAssign 8 (IFPCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Char",0) 2 []),IVarAssign 9 (IFPCall ("Prelude","_impl#>#Prelude.Ord#Prelude.Char",0) 2 []),IVarAssign 10 (IFPCall ("Prelude","_impl#min#Prelude.Ord#Prelude.Char",0) 2 []),IVarAssign 11 (IFPCall ("Prelude","_impl#max#Prelude.Ord#Prelude.Char",0) 2 [])] (IReturn (ICCall ("Prelude","_Dict#Ord",0) [IVar 4,IVar 5,IVar 6,IVar 7,IVar 8,IVar 9,IVar 10,IVar 11])))),IFunction ("Prelude","_impl#/=#Prelude.Eq#Prelude.Float",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 3 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqFloat",0) [IVar 4,IVar 5]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) [])))]))]))]))),IFunction ("Prelude","_impl#==#Prelude.Eq#Prelude.Float",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","float",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 3 [0])] (IReturn (IFCall ("Prelude","primEqFloat",0) [IVar 4,IVar 5])))]))]))),IFunction ("Prelude","_inst#Prelude.Eq#Prelude.Float",0) 0 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 2 (IFPCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Float",0) 2 []),IVarAssign 3 (IFPCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.Float",0) 2 [])] (IReturn (ICCall ("Prelude","_Dict#Eq",0) [IVar 2,IVar 3])))),IFunction ("Prelude","_inst#Prelude.Ord#Prelude.Float",0) 0 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10,IVarDecl 11] [IVarAssign 2 (IFPCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Float",0) 2 []),IVarAssign 3 (IFPCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.Float",0) 2 []),IVarAssign 4 (ICCall ("Prelude","_Dict#Eq",0) [IVar 2,IVar 3]),IVarAssign 5 (IFPCall ("Prelude","_impl#compare#Prelude.Ord#Prelude.Float",0) 2 []),IVarAssign 6 (IFPCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Float",0) 2 []),IVarAssign 7 (IFPCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Float",0) 2 []),IVarAssign 8 (IFPCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Float",0) 2 []),IVarAssign 9 (IFPCall ("Prelude","_impl#>#Prelude.Ord#Prelude.Float",0) 2 []),IVarAssign 10 (IFPCall ("Prelude","_impl#min#Prelude.Ord#Prelude.Float",0) 2 []),IVarAssign 11 (IFPCall ("Prelude","_impl#max#Prelude.Ord#Prelude.Float",0) 2 [])] (IReturn (ICCall ("Prelude","_Dict#Ord",0) [IVar 4,IVar 5,IVar 6,IVar 7,IVar 8,IVar 9,IVar 10,IVar 11])))),IFunction ("Prelude","_impl#/=#Prelude.Eq#Prelude.Int",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 3 [0])] (ICaseCons (-1) [IConsBranch ("","primCond",-1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","primEqInt",0) [IVar 4,IVar 5]))),IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) [])))]))]))]))),IFunction ("Prelude","_impl#==#Prelude.Eq#Prelude.Int",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0])] (ICaseCons 3 [IConsBranch ("","int",0) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 3 [0])] (IReturn (IFCall ("Prelude","primEqInt",0) [IVar 4,IVar 5])))]))]))),IFunction ("Prelude","_inst#Prelude.Eq#Prelude.Int",0) 0 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 2 (IFPCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int",0) 2 []),IVarAssign 3 (IFPCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.Int",0) 2 [])] (IReturn (ICCall ("Prelude","_Dict#Eq",0) [IVar 2,IVar 3])))),IFunction ("Prelude","_inst#Prelude.Ord#Prelude.Int",0) 0 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10,IVarDecl 11] [IVarAssign 2 (IFPCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int",0) 2 []),IVarAssign 3 (IFPCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.Int",0) 2 []),IVarAssign 4 (ICCall ("Prelude","_Dict#Eq",0) [IVar 2,IVar 3]),IVarAssign 5 (IFPCall ("Prelude","_impl#compare#Prelude.Ord#Prelude.Int",0) 2 []),IVarAssign 6 (IFPCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int",0) 2 []),IVarAssign 7 (IFPCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Int",0) 2 []),IVarAssign 8 (IFPCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int",0) 2 []),IVarAssign 9 (IFPCall ("Prelude","_impl#>#Prelude.Ord#Prelude.Int",0) 2 []),IVarAssign 10 (IFPCall ("Prelude","_impl#min#Prelude.Ord#Prelude.Int",0) 2 []),IVarAssign 11 (IFPCall ("Prelude","_impl#max#Prelude.Ord#Prelude.Int",0) 2 [])] (IReturn (ICCall ("Prelude","_Dict#Ord",0) [IVar 4,IVar 5,IVar 6,IVar 7,IVar 8,IVar 9,IVar 10,IVar 11])))),IFunction ("Prelude","_impl#/=#Prelude.Eq#Prelude.Bool",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (ICaseCons 3 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (IVar 2)))])),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons 3 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IVar 3))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (IVar 3)))]))]))),IFunction ("Prelude","_impl#==#Prelude.Eq#Prelude.Bool",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IVar 3))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons 3 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IVar 2))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) [])))]))]))),IFunction ("Prelude","_inst#Prelude.Eq#Prelude.Bool",0) 0 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 2 (IFPCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Bool",0) 2 []),IVarAssign 3 (IFPCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.Bool",0) 2 [])] (IReturn (ICCall ("Prelude","_Dict#Eq",0) [IVar 2,IVar 3])))),IFunction ("Prelude","_inst#Prelude.Ord#Prelude.Bool",0) 0 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10,IVarDecl 11] [IVarAssign 2 (IFPCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Bool",0) 2 []),IVarAssign 3 (IFPCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.Bool",0) 2 []),IVarAssign 4 (ICCall ("Prelude","_Dict#Eq",0) [IVar 2,IVar 3]),IVarAssign 5 (IFPCall ("Prelude","_impl#compare#Prelude.Ord#Prelude.Bool",0) 2 []),IVarAssign 6 (IFPCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Bool",0) 2 []),IVarAssign 7 (IFPCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Bool",0) 2 []),IVarAssign 8 (IFPCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Bool",0) 2 []),IVarAssign 9 (IFPCall ("Prelude","_impl#>#Prelude.Ord#Prelude.Bool",0) 2 []),IVarAssign 10 (IFPCall ("Prelude","_impl#min#Prelude.Ord#Prelude.Bool",0) 2 []),IVarAssign 11 (IFPCall ("Prelude","_impl#max#Prelude.Ord#Prelude.Bool",0) 2 [])] (IReturn (ICCall ("Prelude","_Dict#Ord",0) [IVar 4,IVar 5,IVar 6,IVar 7,IVar 8,IVar 9,IVar 10,IVar 11])))),IFunction ("Prelude",">=",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Ord",0) 8 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10] [IVarAssign 10 (IVarAccess 2 [0]),IVarAssign 9 (IVarAccess 2 [1]),IVarAssign 8 (IVarAccess 2 [2]),IVarAssign 7 (IVarAccess 2 [3]),IVarAssign 6 (IVarAccess 2 [4]),IVarAssign 5 (IVarAccess 2 [5]),IVarAssign 4 (IVarAccess 2 [6]),IVarAssign 3 (IVarAccess 2 [7])] (IReturn (IVar 6)))]))),IFunction ("Prelude","<=",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Ord",0) 8 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10] [IVarAssign 10 (IVarAccess 2 [0]),IVarAssign 9 (IVarAccess 2 [1]),IVarAssign 8 (IVarAccess 2 [2]),IVarAssign 7 (IVarAccess 2 [3]),IVarAssign 6 (IVarAccess 2 [4]),IVarAssign 5 (IVarAccess 2 [5]),IVarAssign 4 (IVarAccess 2 [6]),IVarAssign 3 (IVarAccess 2 [7])] (IReturn (IVar 5)))]))),IFunction ("Prelude","compare",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Ord",0) 8 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10] [IVarAssign 10 (IVarAccess 2 [0]),IVarAssign 9 (IVarAccess 2 [1]),IVarAssign 8 (IVarAccess 2 [2]),IVarAssign 7 (IVarAccess 2 [3]),IVarAssign 6 (IVarAccess 2 [4]),IVarAssign 5 (IVarAccess 2 [5]),IVarAssign 4 (IVarAccess 2 [6]),IVarAssign 3 (IVarAccess 2 [7])] (IReturn (IVar 4)))]))),IFunction ("Prelude","_def#<=#Prelude.Ord",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFCall ("Prelude","compare",0) [IVar 2]),IVarAssign 6 (IFCall ("Prelude","apply",0) [IVar 5,IVar 3,IVar 4])] (ICaseCons 6 [IConsBranch ("Prelude","LT",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) []))),IConsBranch ("Prelude","GT",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","EQ",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) [])))]))),IFunction ("Prelude","_super#Prelude.Ord#Prelude.Eq",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Ord",0) 8 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10] [IVarAssign 10 (IVarAccess 2 [0]),IVarAssign 9 (IVarAccess 2 [1]),IVarAssign 8 (IVarAccess 2 [2]),IVarAssign 7 (IVarAccess 2 [3]),IVarAssign 6 (IVarAccess 2 [4]),IVarAssign 5 (IVarAccess 2 [5]),IVarAssign 4 (IVarAccess 2 [6]),IVarAssign 3 (IVarAccess 2 [7])] (IReturn (IVar 3)))]))),IFunction ("Prelude","/=",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Eq",0) 2 (IBlock [IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0]),IVarAssign 3 (IVarAccess 2 [1])] (IReturn (IVar 4)))]))),IFunction ("Prelude","_def#==#Prelude.Eq",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFCall ("Prelude","/=",0) [IVar 2]),IVarAssign 6 (IFCall ("Prelude","apply",0) [IVar 5,IVar 3,IVar 4])] (ICaseCons 6 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) [])))]))),IFunction ("Prelude","==",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Eq",0) 2 (IBlock [IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 2 [0]),IVarAssign 3 (IVarAccess 2 [1])] (IReturn (IVar 3)))]))),IFunction ("Prelude","_impl#<=#Prelude.Ord#Prelude.Either",0) 4 Public [2] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5] [IVarAssign 5 (IVarAccess 0 [0]),IVarAssign 4 (IVarAccess 0 [1]),IVarAssign 3 (IVarAccess 0 [2]),IVarAssign 2 (IVarAccess 0 [3])] (ICaseCons 4 [IConsBranch ("Prelude","Right",0) 1 (IBlock [IVarDecl 10] [IVarAssign 10 (IVarAccess 4 [0])] (ICaseCons 5 [IConsBranch ("Prelude","Right",0) 1 (IBlock [IVarDecl 12,IVarDecl 13] [IVarAssign 12 (IVarAccess 5 [0]),IVarAssign 13 (IFCall ("Prelude","<=",0) [IVar 3])] (IReturn (IFCall ("Prelude","apply",0) [IVar 13,IVar 10,IVar 12]))),IConsBranch ("Prelude","Left",1) 1 (IBlock [IVarDecl 11] [IVarAssign 11 (IVarAccess 5 [0])] (IReturn (ICCall ("Prelude","False",0) [])))])),IConsBranch ("Prelude","Left",1) 1 (IBlock [IVarDecl 6] [IVarAssign 6 (IVarAccess 4 [0])] (ICaseCons 5 [IConsBranch ("Prelude","Right",0) 1 (IBlock [IVarDecl 9] [IVarAssign 9 (IVarAccess 5 [0])] (IReturn (ICCall ("Prelude","True",0) []))),IConsBranch ("Prelude","Left",1) 1 (IBlock [IVarDecl 7,IVarDecl 8] [IVarAssign 7 (IVarAccess 5 [0]),IVarAssign 8 (IFCall ("Prelude","<=",0) [IVar 2])] (IReturn (IFCall ("Prelude","apply",0) [IVar 8,IVar 6,IVar 7])))]))]))),IFunction ("Prelude","_impl#==#Prelude.Eq#Prelude.Either",0) 4 Public [2] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5] [IVarAssign 5 (IVarAccess 0 [0]),IVarAssign 4 (IVarAccess 0 [1]),IVarAssign 3 (IVarAccess 0 [2]),IVarAssign 2 (IVarAccess 0 [3])] (ICaseCons 4 [IConsBranch ("Prelude","Right",0) 1 (IBlock [IVarDecl 10] [IVarAssign 10 (IVarAccess 4 [0])] (ICaseCons 5 [IConsBranch ("Prelude","Right",0) 1 (IBlock [IVarDecl 12,IVarDecl 13] [IVarAssign 12 (IVarAccess 5 [0]),IVarAssign 13 (IFCall ("Prelude","==",0) [IVar 3])] (IReturn (IFCall ("Prelude","apply",0) [IVar 13,IVar 10,IVar 12]))),IConsBranch ("Prelude","Left",1) 1 (IBlock [IVarDecl 11] [IVarAssign 11 (IVarAccess 5 [0])] (IReturn (ICCall ("Prelude","False",0) [])))])),IConsBranch ("Prelude","Left",1) 1 (IBlock [IVarDecl 6] [IVarAssign 6 (IVarAccess 4 [0])] (ICaseCons 5 [IConsBranch ("Prelude","Right",0) 1 (IBlock [IVarDecl 9] [IVarAssign 9 (IVarAccess 5 [0])] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","Left",1) 1 (IBlock [IVarDecl 7,IVarDecl 8] [IVarAssign 7 (IVarAccess 5 [0]),IVarAssign 8 (IFCall ("Prelude","==",0) [IVar 2])] (IReturn (IFCall ("Prelude","apply",0) [IVar 8,IVar 6,IVar 7])))]))]))),IFunction ("Prelude","_impl#<=#Prelude.Ord#Prelude.Maybe",0) 3 Public [1] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2])] (ICaseCons 3 [IConsBranch ("Prelude","Nothing",0) 0 (IBlock [] [] (ICaseCons 4 [IConsBranch ("Prelude","Nothing",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) []))),IConsBranch ("Prelude","Just",1) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 4 [0])] (IReturn (ICCall ("Prelude","True",0) [])))])),IConsBranch ("Prelude","Just",1) 1 (IBlock [IVarDecl 6] [IVarAssign 6 (IVarAccess 3 [0])] (ICaseCons 4 [IConsBranch ("Prelude","Nothing",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","Just",1) 1 (IBlock [IVarDecl 7,IVarDecl 8] [IVarAssign 7 (IVarAccess 4 [0]),IVarAssign 8 (IFCall ("Prelude","<=",0) [IVar 2])] (IReturn (IFCall ("Prelude","apply",0) [IVar 8,IVar 6,IVar 7])))]))]))),IFunction ("Prelude","_impl#==#Prelude.Eq#Prelude.Maybe",0) 3 Public [1] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2])] (ICaseCons 3 [IConsBranch ("Prelude","Nothing",0) 0 (IBlock [] [] (ICaseCons 4 [IConsBranch ("Prelude","Nothing",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) []))),IConsBranch ("Prelude","Just",1) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 4 [0])] (IReturn (ICCall ("Prelude","False",0) [])))])),IConsBranch ("Prelude","Just",1) 1 (IBlock [IVarDecl 6] [IVarAssign 6 (IVarAccess 3 [0])] (ICaseCons 4 [IConsBranch ("Prelude","Nothing",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","Just",1) 1 (IBlock [IVarDecl 7,IVarDecl 8] [IVarAssign 7 (IVarAccess 4 [0]),IVarAssign 8 (IFCall ("Prelude","==",0) [IVar 2])] (IReturn (IFCall ("Prelude","apply",0) [IVar 8,IVar 6,IVar 7])))]))]))),IFunction ("Prelude","_impl#<=#Prelude.Ord#Prelude.Ordering",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("Prelude","LT",0) 0 (IBlock [] [] (ICaseCons 3 [IConsBranch ("Prelude","LT",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) []))),IConsBranch ("Prelude","GT",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) []))),IConsBranch ("Prelude","EQ",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) [])))])),IConsBranch ("Prelude","GT",1) 0 (IBlock [] [] (ICaseCons 3 [IConsBranch ("Prelude","LT",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","GT",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) []))),IConsBranch ("Prelude","EQ",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))])),IConsBranch ("Prelude","EQ",2) 0 (IBlock [] [] (ICaseCons 3 [IConsBranch ("Prelude","LT",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","GT",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) []))),IConsBranch ("Prelude","EQ",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) [])))]))]))),IFunction ("Prelude","_impl#==#Prelude.Eq#Prelude.Ordering",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("Prelude","LT",0) 0 (IBlock [] [] (ICaseCons 3 [IConsBranch ("Prelude","LT",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) []))),IConsBranch ("Prelude","GT",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","EQ",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))])),IConsBranch ("Prelude","GT",1) 0 (IBlock [] [] (ICaseCons 3 [IConsBranch ("Prelude","LT",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","GT",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) []))),IConsBranch ("Prelude","EQ",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))])),IConsBranch ("Prelude","EQ",2) 0 (IBlock [] [] (ICaseCons 3 [IConsBranch ("Prelude","LT",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","GT",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","EQ",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) [])))]))]))),IFunction ("Prelude","_def#max#Prelude.Ord",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFCall ("Prelude",">=",0) [IVar 2]),IVarAssign 6 (IFCall ("Prelude","apply",0) [IVar 5,IVar 3,IVar 4])] (ICaseCons 6 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IVar 3))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (IVar 4)))]))),IFunction ("Prelude","_def#min#Prelude.Ord",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFCall ("Prelude","<=",0) [IVar 2]),IVarAssign 6 (IFCall ("Prelude","apply",0) [IVar 5,IVar 3,IVar 4])] (ICaseCons 6 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IVar 3))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (IVar 4)))]))),IFunction ("Prelude","_def#>#Prelude.Ord",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFCall ("Prelude","<=",0) [IVar 2]),IVarAssign 6 (IFCall ("Prelude","apply",0) [IVar 5,IVar 3,IVar 4])] (ICaseCons 6 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) [])))]))),IFunction ("Prelude","_def#<#Prelude.Ord",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFCall ("Prelude","<=",0) [IVar 2]),IVarAssign 6 (IFCall ("Prelude","apply",0) [IVar 5,IVar 3,IVar 4])] (ICaseCons 6 [IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 7,IVarDecl 8] [IVarAssign 7 (IFCall ("Prelude","_def#<#Prelude.Ord#A0",0) [IVar 2]),IVarAssign 8 (IFCall ("Prelude","/=",0) [IVar 7])] (IReturn (IFCall ("Prelude","apply",0) [IVar 8,IVar 3,IVar 4]))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (IVar 6)))]))),IFunction ("Prelude","_def#<#Prelude.Ord#A0",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Ord",0) 8 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10] [IVarAssign 10 (IVarAccess 2 [0]),IVarAssign 9 (IVarAccess 2 [1]),IVarAssign 8 (IVarAccess 2 [2]),IVarAssign 7 (IVarAccess 2 [3]),IVarAssign 6 (IVarAccess 2 [4]),IVarAssign 5 (IVarAccess 2 [5]),IVarAssign 4 (IVarAccess 2 [6]),IVarAssign 3 (IVarAccess 2 [7])] (IReturn (IVar 3)))]))),IFunction ("Prelude","_def#>=#Prelude.Ord",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFCall ("Prelude","<=",0) [IVar 2])] (IReturn (IFCall ("Prelude","apply",0) [IVar 5,IVar 4,IVar 3])))),IFunction ("Prelude","_def#compare#Prelude.Ord",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFCall ("Prelude","_def#compare#Prelude.Ord#A1",0) [IVar 2]),IVarAssign 6 (IFCall ("Prelude","==",0) [IVar 5]),IVarAssign 7 (IFCall ("Prelude","apply",0) [IVar 6,IVar 3,IVar 4])] (ICaseCons 7 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","EQ",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 8,IVarDecl 9] [IVarAssign 8 (IFCall ("Prelude","<=",0) [IVar 2]),IVarAssign 9 (IFCall ("Prelude","apply",0) [IVar 8,IVar 3,IVar 4])] (ICaseCons 9 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","LT",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","GT",0) [])))]))]))),IFunction ("Prelude","_def#compare#Prelude.Ord#A1",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Ord",0) 8 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10] [IVarAssign 10 (IVarAccess 2 [0]),IVarAssign 9 (IVarAccess 2 [1]),IVarAssign 8 (IVarAccess 2 [2]),IVarAssign 7 (IVarAccess 2 [3]),IVarAssign 6 (IVarAccess 2 [4]),IVarAssign 5 (IVarAccess 2 [5]),IVarAssign 4 (IVarAccess 2 [6]),IVarAssign 3 (IVarAccess 2 [7])] (IReturn (IVar 3)))]))),IFunction ("Prelude","_def#/=#Prelude.Eq",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFCall ("Prelude","==",0) [IVar 2]),IVarAssign 6 (IFCall ("Prelude","apply",0) [IVar 5,IVar 3,IVar 4])] (ICaseCons 6 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) [])))]))),IFunction ("Prelude","_impl#/=#Prelude.Eq#Prelude.Either",0) 4 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8] [IVarAssign 5 (IVarAccess 0 [0]),IVarAssign 4 (IVarAccess 0 [1]),IVarAssign 3 (IVarAccess 0 [2]),IVarAssign 2 (IVarAccess 0 [3]),IVarAssign 6 (IFCall ("Prelude","_inst#Prelude.Eq#Prelude.Either",0) [IVar 2,IVar 3]),IVarAssign 7 (IFCall ("Prelude","==",0) [IVar 6]),IVarAssign 8 (IFCall ("Prelude","apply",0) [IVar 7,IVar 4,IVar 5])] (ICaseCons 8 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) [])))]))),IFunction ("Prelude","_inst#Prelude.Ord#Prelude.Either",0) 2 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10,IVarDecl 11,IVarDecl 12,IVarDecl 13] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1]),IVarAssign 4 (IFCall ("Prelude","_super#Prelude.Ord#Prelude.Eq",0) [IVar 2]),IVarAssign 5 (IFCall ("Prelude","_super#Prelude.Ord#Prelude.Eq",0) [IVar 3]),IVarAssign 6 (IFCall ("Prelude","_inst#Prelude.Eq#Prelude.Either",0) [IVar 4,IVar 5]),IVarAssign 7 (IFPCall ("Prelude","_impl#compare#Prelude.Ord#Prelude.Either",0) 2 [IVar 2,IVar 3]),IVarAssign 8 (IFPCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Either",0) 2 [IVar 2,IVar 3]),IVarAssign 9 (IFPCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Either",0) 2 [IVar 2,IVar 3]),IVarAssign 10 (IFPCall ("Prelude","_impl#>#Prelude.Ord#Prelude.Either",0) 2 [IVar 2,IVar 3]),IVarAssign 11 (IFPCall ("Prelude","_impl#min#Prelude.Ord#Prelude.Either",0) 2 [IVar 2,IVar 3]),IVarAssign 12 (IFPCall ("Prelude","_impl#max#Prelude.Ord#Prelude.Either",0) 2 [IVar 2,IVar 3]),IVarAssign 13 (IFPCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Either",0) 2 [IVar 2,IVar 3])] (IReturn (ICCall ("Prelude","_Dict#Ord",0) [IVar 6,IVar 7,IVar 13,IVar 8,IVar 9,IVar 10,IVar 11,IVar 12])))),IFunction ("Prelude","_impl#/=#Prelude.Eq#Prelude.Maybe",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFCall ("Prelude","_inst#Prelude.Eq#Prelude.Maybe",0) [IVar 2]),IVarAssign 6 (IFCall ("Prelude","==",0) [IVar 5]),IVarAssign 7 (IFCall ("Prelude","apply",0) [IVar 6,IVar 3,IVar 4])] (ICaseCons 7 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) [])))]))),IFunction ("Prelude","_inst#Prelude.Ord#Prelude.Maybe",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10,IVarDecl 11] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFCall ("Prelude","_super#Prelude.Ord#Prelude.Eq",0) [IVar 2]),IVarAssign 4 (IFCall ("Prelude","_inst#Prelude.Eq#Prelude.Maybe",0) [IVar 3]),IVarAssign 5 (IFPCall ("Prelude","_impl#compare#Prelude.Ord#Prelude.Maybe",0) 2 [IVar 2]),IVarAssign 6 (IFPCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Maybe",0) 2 [IVar 2]),IVarAssign 7 (IFPCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Maybe",0) 2 [IVar 2]),IVarAssign 8 (IFPCall ("Prelude","_impl#>#Prelude.Ord#Prelude.Maybe",0) 2 [IVar 2]),IVarAssign 9 (IFPCall ("Prelude","_impl#min#Prelude.Ord#Prelude.Maybe",0) 2 [IVar 2]),IVarAssign 10 (IFPCall ("Prelude","_impl#max#Prelude.Ord#Prelude.Maybe",0) 2 [IVar 2]),IVarAssign 11 (IFPCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Maybe",0) 2 [IVar 2])] (IReturn (ICCall ("Prelude","_Dict#Ord",0) [IVar 4,IVar 5,IVar 11,IVar 6,IVar 7,IVar 8,IVar 9,IVar 10])))),IFunction ("Prelude","_impl#/=#Prelude.Eq#Prelude.Ordering",0) 2 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1]),IVarAssign 4 (IFCall ("Prelude","_inst#Prelude.Eq#Prelude.Ordering",0) []),IVarAssign 5 (IFCall ("Prelude","==",0) [IVar 4]),IVarAssign 6 (IFCall ("Prelude","apply",0) [IVar 5,IVar 2,IVar 3])] (ICaseCons 6 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) [])))]))),IFunction ("Prelude","_inst#Prelude.Ord#Prelude.Ordering",0) 0 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9] [IVarAssign 2 (IFCall ("Prelude","_inst#Prelude.Eq#Prelude.Ordering",0) []),IVarAssign 3 (IFPCall ("Prelude","_impl#compare#Prelude.Ord#Prelude.Ordering",0) 2 []),IVarAssign 4 (IFPCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Ordering",0) 2 []),IVarAssign 5 (IFPCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Ordering",0) 2 []),IVarAssign 6 (IFPCall ("Prelude","_impl#>#Prelude.Ord#Prelude.Ordering",0) 2 []),IVarAssign 7 (IFPCall ("Prelude","_impl#min#Prelude.Ord#Prelude.Ordering",0) 2 []),IVarAssign 8 (IFPCall ("Prelude","_impl#max#Prelude.Ord#Prelude.Ordering",0) 2 []),IVarAssign 9 (IFPCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Ordering",0) 2 [])] (IReturn (ICCall ("Prelude","_Dict#Ord",0) [IVar 2,IVar 3,IVar 9,IVar 4,IVar 5,IVar 6,IVar 7,IVar 8])))),IFunction ("Prelude","_inst#Prelude.Eq#Prelude.Either",0) 2 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1]),IVarAssign 4 (IFPCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Either",0) 2 [IVar 2,IVar 3]),IVarAssign 5 (IFPCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.Either",0) 2 [IVar 2,IVar 3])] (IReturn (ICCall ("Prelude","_Dict#Eq",0) [IVar 4,IVar 5])))),IFunction ("Prelude","_impl#min#Prelude.Ord#Prelude.Either",0) 4 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8] [IVarAssign 5 (IVarAccess 0 [0]),IVarAssign 4 (IVarAccess 0 [1]),IVarAssign 3 (IVarAccess 0 [2]),IVarAssign 2 (IVarAccess 0 [3]),IVarAssign 6 (IFCall ("Prelude","_inst#Prelude.Ord#Prelude.Either",0) [IVar 2,IVar 3]),IVarAssign 7 (IFCall ("Prelude","<=",0) [IVar 6]),IVarAssign 8 (IFCall ("Prelude","apply",0) [IVar 7,IVar 4,IVar 5])] (ICaseCons 8 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IVar 4))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (IVar 5)))]))),IFunction ("Prelude","_impl#max#Prelude.Ord#Prelude.Either",0) 4 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8] [IVarAssign 5 (IVarAccess 0 [0]),IVarAssign 4 (IVarAccess 0 [1]),IVarAssign 3 (IVarAccess 0 [2]),IVarAssign 2 (IVarAccess 0 [3]),IVarAssign 6 (IFCall ("Prelude","_inst#Prelude.Ord#Prelude.Either",0) [IVar 2,IVar 3]),IVarAssign 7 (IFCall ("Prelude",">=",0) [IVar 6]),IVarAssign 8 (IFCall ("Prelude","apply",0) [IVar 7,IVar 4,IVar 5])] (ICaseCons 8 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IVar 4))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (IVar 5)))]))),IFunction ("Prelude","_impl#compare#Prelude.Ord#Prelude.Either",0) 4 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9] [IVarAssign 5 (IVarAccess 0 [0]),IVarAssign 4 (IVarAccess 0 [1]),IVarAssign 3 (IVarAccess 0 [2]),IVarAssign 2 (IVarAccess 0 [3]),IVarAssign 6 (IFCall ("Prelude","_inst#Prelude.Ord#Prelude.Either",0) [IVar 2,IVar 3]),IVarAssign 7 (IFCall ("Prelude","_impl#compare#Prelude.Ord#Prelude.Either#A2",0) [IVar 6]),IVarAssign 8 (IFCall ("Prelude","==",0) [IVar 7]),IVarAssign 9 (IFCall ("Prelude","apply",0) [IVar 8,IVar 4,IVar 5])] (ICaseCons 9 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","EQ",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [IVarDecl 10,IVarDecl 11] [IVarAssign 10 (IFCall ("Prelude","<=",0) [IVar 6]),IVarAssign 11 (IFCall ("Prelude","apply",0) [IVar 10,IVar 4,IVar 5])] (ICaseCons 11 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","LT",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","GT",0) [])))]))]))),IFunction ("Prelude","_impl#compare#Prelude.Ord#Prelude.Either#A2",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Ord",0) 8 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10] [IVarAssign 10 (IVarAccess 2 [0]),IVarAssign 9 (IVarAccess 2 [1]),IVarAssign 8 (IVarAccess 2 [2]),IVarAssign 7 (IVarAccess 2 [3]),IVarAssign 6 (IVarAccess 2 [4]),IVarAssign 5 (IVarAccess 2 [5]),IVarAssign 4 (IVarAccess 2 [6]),IVarAssign 3 (IVarAccess 2 [7])] (IReturn (IVar 3)))]))),IFunction ("Prelude","_impl#>=#Prelude.Ord#Prelude.Either",0) 4 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7] [IVarAssign 5 (IVarAccess 0 [0]),IVarAssign 4 (IVarAccess 0 [1]),IVarAssign 3 (IVarAccess 0 [2]),IVarAssign 2 (IVarAccess 0 [3]),IVarAssign 6 (IFCall ("Prelude","_inst#Prelude.Ord#Prelude.Either",0) [IVar 2,IVar 3]),IVarAssign 7 (IFCall ("Prelude","<=",0) [IVar 6])] (IReturn (IFCall ("Prelude","apply",0) [IVar 7,IVar 5,IVar 4])))),IFunction ("Prelude","_impl#>#Prelude.Ord#Prelude.Either",0) 4 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8] [IVarAssign 5 (IVarAccess 0 [0]),IVarAssign 4 (IVarAccess 0 [1]),IVarAssign 3 (IVarAccess 0 [2]),IVarAssign 2 (IVarAccess 0 [3]),IVarAssign 6 (IFCall ("Prelude","_inst#Prelude.Ord#Prelude.Either",0) [IVar 2,IVar 3]),IVarAssign 7 (IFCall ("Prelude","<=",0) [IVar 6]),IVarAssign 8 (IFCall ("Prelude","apply",0) [IVar 7,IVar 4,IVar 5])] (ICaseCons 8 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) [])))]))),IFunction ("Prelude","_impl#<#Prelude.Ord#Prelude.Either",0) 4 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8] [IVarAssign 5 (IVarAccess 0 [0]),IVarAssign 4 (IVarAccess 0 [1]),IVarAssign 3 (IVarAccess 0 [2]),IVarAssign 2 (IVarAccess 0 [3]),IVarAssign 6 (IFCall ("Prelude","_inst#Prelude.Ord#Prelude.Either",0) [IVar 2,IVar 3]),IVarAssign 7 (IFCall ("Prelude","<=",0) [IVar 6]),IVarAssign 8 (IFCall ("Prelude","apply",0) [IVar 7,IVar 4,IVar 5])] (ICaseCons 8 [IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 9,IVarDecl 10] [IVarAssign 9 (IFCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Either#A3",0) [IVar 6]),IVarAssign 10 (IFCall ("Prelude","/=",0) [IVar 9])] (IReturn (IFCall ("Prelude","apply",0) [IVar 10,IVar 4,IVar 5]))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (IVar 8)))]))),IFunction ("Prelude","_impl#<#Prelude.Ord#Prelude.Either#A3",0) 1 Public [0] (IFuncBody (IBlock [IVarDecl 2] [IVarAssign 2 (IVarAccess 0 [0])] (ICaseCons 2 [IConsBranch ("Prelude","_Dict#Ord",0) 8 (IBlock [IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9,IVarDecl 10] [IVarAssign 10 (IVarAccess 2 [0]),IVarAssign 9 (IVarAccess 2 [1]),IVarAssign 8 (IVarAccess 2 [2]),IVarAssign 7 (IVarAccess 2 [3]),IVarAssign 6 (IVarAccess 2 [4]),IVarAssign 5 (IVarAccess 2 [5]),IVarAssign 4 (IVarAccess 2 [6]),IVarAssign 3 (IVarAccess 2 [7])] (IReturn (IVar 3)))]))),IFunction ("Prelude","_inst#Prelude.Eq#Prelude.Maybe",0) 1 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 2 (IVarAccess 0 [0]),IVarAssign 3 (IFPCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Maybe",0) 2 [IVar 2]),IVarAssign 4 (IFPCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.Maybe",0) 2 [IVar 2])] (IReturn (ICCall ("Prelude","_Dict#Eq",0) [IVar 3,IVar 4])))),IFunction ("Prelude","_impl#min#Prelude.Ord#Prelude.Maybe",0) 3 Public [1] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2])] (ICaseCons 3 [IConsBranch ("Prelude","Nothing",0) 0 (IBlock [] [] (ICaseCons 4 [IConsBranch ("Prelude","Nothing",0) 0 (IBlock [] [] (IReturn (IVar 4))),IConsBranch ("Prelude","Just",1) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 4 [0])] (IReturn (IVar 3)))])),IConsBranch ("Prelude","Just",1) 1 (IBlock [IVarDecl 6] [IVarAssign 6 (IVarAccess 3 [0])] (ICaseCons 4 [IConsBranch ("Prelude","Nothing",0) 0 (IBlock [] [] (IReturn (IVar 4))),IConsBranch ("Prelude","Just",1) 1 (IBlock [IVarDecl 7,IVarDecl 8,IVarDecl 9] [IVarAssign 7 (IVarAccess 4 [0]),IVarAssign 8 (IFCall ("Prelude","<=",0) [IVar 2]),IVarAssign 9 (IFCall ("Prelude","apply",0) [IVar 8,IVar 6,IVar 7])] (ICaseCons 9 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IVar 3))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (IVar 4)))]))]))]))),IFunction ("Prelude","_impl#max#Prelude.Ord#Prelude.Maybe",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFPCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Maybe",0) 2 [IVar 2]),IVarAssign 6 (IFCall ("Prelude","apply",0) [IVar 5,IVar 3,IVar 4])] (ICaseCons 6 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IVar 3))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (IVar 4)))]))),IFunction ("Prelude","_impl#compare#Prelude.Ord#Prelude.Maybe",0) 3 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2]),IVarAssign 5 (IFCall ("Prelude","_super#Prelude.Ord#Prelude.Eq",0) [IVar 2]),IVarAssign 6 (IFCall ("Prelude","_inst#Prelude.Eq#Prelude.Maybe",0) [IVar 5]),IVarAssign 7 (IFCall ("Prelude","==",0) [IVar 6]),IVarAssign 8 (IFCall ("Prelude","apply",0) [IVar 7,IVar 3,IVar 4])] (ICaseCons 8 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","EQ",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons 3 [IConsBranch ("Prelude","Nothing",0) 0 (IBlock [] [] (ICaseCons 4 [IConsBranch ("Prelude","Nothing",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","LT",0) []))),IConsBranch ("Prelude","Just",1) 1 (IBlock [IVarDecl 9] [IVarAssign 9 (IVarAccess 4 [0])] (IReturn (ICCall ("Prelude","LT",0) [])))])),IConsBranch ("Prelude","Just",1) 1 (IBlock [IVarDecl 10] [IVarAssign 10 (IVarAccess 3 [0])] (ICaseCons 4 [IConsBranch ("Prelude","Nothing",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","GT",0) []))),IConsBranch ("Prelude","Just",1) 1 (IBlock [IVarDecl 11,IVarDecl 12,IVarDecl 13] [IVarAssign 11 (IVarAccess 4 [0]),IVarAssign 12 (IFCall ("Prelude","<=",0) [IVar 2]),IVarAssign 13 (IFCall ("Prelude","apply",0) [IVar 12,IVar 10,IVar 11])] (ICaseCons 13 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","LT",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","GT",0) [])))]))]))]))]))),IFunction ("Prelude","_impl#>=#Prelude.Ord#Prelude.Maybe",0) 3 Public [2] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2])] (ICaseCons 4 [IConsBranch ("Prelude","Nothing",0) 0 (IBlock [] [] (ICaseCons 3 [IConsBranch ("Prelude","Nothing",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) []))),IConsBranch ("Prelude","Just",1) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 3 [0])] (IReturn (ICCall ("Prelude","True",0) [])))])),IConsBranch ("Prelude","Just",1) 1 (IBlock [IVarDecl 6] [IVarAssign 6 (IVarAccess 4 [0])] (ICaseCons 3 [IConsBranch ("Prelude","Nothing",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","Just",1) 1 (IBlock [IVarDecl 7,IVarDecl 8] [IVarAssign 7 (IVarAccess 3 [0]),IVarAssign 8 (IFCall ("Prelude","<=",0) [IVar 2])] (IReturn (IFCall ("Prelude","apply",0) [IVar 8,IVar 6,IVar 7])))]))]))),IFunction ("Prelude","_impl#>#Prelude.Ord#Prelude.Maybe",0) 3 Public [1] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2])] (ICaseCons 3 [IConsBranch ("Prelude","Nothing",0) 0 (IBlock [] [] (ICaseCons 4 [IConsBranch ("Prelude","Nothing",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","Just",1) 1 (IBlock [IVarDecl 5] [IVarAssign 5 (IVarAccess 4 [0])] (IReturn (ICCall ("Prelude","False",0) [])))])),IConsBranch ("Prelude","Just",1) 1 (IBlock [IVarDecl 6] [IVarAssign 6 (IVarAccess 3 [0])] (ICaseCons 4 [IConsBranch ("Prelude","Nothing",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) []))),IConsBranch ("Prelude","Just",1) 1 (IBlock [IVarDecl 7,IVarDecl 8,IVarDecl 9] [IVarAssign 7 (IVarAccess 4 [0]),IVarAssign 8 (IFCall ("Prelude","<=",0) [IVar 2]),IVarAssign 9 (IFCall ("Prelude","apply",0) [IVar 8,IVar 6,IVar 7])] (ICaseCons 9 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) [])))]))]))]))),IFunction ("Prelude","_impl#<#Prelude.Ord#Prelude.Maybe",0) 3 Public [1] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4] [IVarAssign 4 (IVarAccess 0 [0]),IVarAssign 3 (IVarAccess 0 [1]),IVarAssign 2 (IVarAccess 0 [2])] (ICaseCons 3 [IConsBranch ("Prelude","Nothing",0) 0 (IBlock [] [] (ICaseCons 4 [IConsBranch ("Prelude","Nothing",0) 0 (IBlock [IVarDecl 5,IVarDecl 6,IVarDecl 7,IVarDecl 8,IVarDecl 9] [IVarAssign 5 (IFCall ("Prelude","_super#Prelude.Ord#Prelude.Eq",0) [IVar 2]),IVarAssign 6 (IFCall ("Prelude","_inst#Prelude.Eq#Prelude.Maybe",0) [IVar 5]),IVarAssign 7 (IFCall ("Prelude","/=",0) [IVar 6]),IVarAssign 8 (IVar 4),IVarAssign 9 (IVar 4)] (IReturn (IFCall ("Prelude","apply",0) [IVar 7,IVar 8,IVar 9]))),IConsBranch ("Prelude","Just",1) 1 (IBlock [IVarDecl 10,IVarDecl 11,IVarDecl 12,IVarDecl 13,IVarDecl 14,IVarDecl 15] [IVarAssign 10 (IVarAccess 4 [0]),IVarAssign 11 (IFCall ("Prelude","_super#Prelude.Ord#Prelude.Eq",0) [IVar 2]),IVarAssign 12 (IFCall ("Prelude","_inst#Prelude.Eq#Prelude.Maybe",0) [IVar 11]),IVarAssign 13 (IFCall ("Prelude","/=",0) [IVar 12]),IVarAssign 14 (IVar 3),IVarAssign 15 (IVar 4)] (IReturn (IFCall ("Prelude","apply",0) [IVar 13,IVar 14,IVar 15])))])),IConsBranch ("Prelude","Just",1) 1 (IBlock [IVarDecl 16] [IVarAssign 16 (IVarAccess 3 [0])] (ICaseCons 4 [IConsBranch ("Prelude","Nothing",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","Just",1) 1 (IBlock [IVarDecl 17,IVarDecl 18,IVarDecl 19] [IVarAssign 17 (IVarAccess 4 [0]),IVarAssign 18 (IFCall ("Prelude","<=",0) [IVar 2]),IVarAssign 19 (IFCall ("Prelude","apply",0) [IVar 18,IVar 16,IVar 17])] (ICaseCons 19 [IConsBranch ("Prelude","True",0) 0 (IBlock [IVarDecl 20,IVarDecl 21,IVarDecl 22,IVarDecl 23,IVarDecl 24] [IVarAssign 20 (IFCall ("Prelude","_super#Prelude.Ord#Prelude.Eq",0) [IVar 2]),IVarAssign 21 (IFCall ("Prelude","_inst#Prelude.Eq#Prelude.Maybe",0) [IVar 20]),IVarAssign 22 (IFCall ("Prelude","/=",0) [IVar 21]),IVarAssign 23 (IVar 3),IVarAssign 24 (IVar 4)] (IReturn (IFCall ("Prelude","apply",0) [IVar 22,IVar 23,IVar 24]))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (IVar 19)))]))]))]))),IFunction ("Prelude","_inst#Prelude.Eq#Prelude.Ordering",0) 0 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 2 (IFPCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Ordering",0) 2 []),IVarAssign 3 (IFPCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.Ordering",0) 2 [])] (IReturn (ICCall ("Prelude","_Dict#Eq",0) [IVar 2,IVar 3])))),IFunction ("Prelude","_impl#min#Prelude.Ord#Prelude.Ordering",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("Prelude","LT",0) 0 (IBlock [] [] (ICaseCons 3 [IConsBranch ("Prelude","LT",0) 0 (IBlock [] [] (IReturn (IVar 3))),IConsBranch ("Prelude","GT",1) 0 (IBlock [] [] (IReturn (IVar 2))),IConsBranch ("Prelude","EQ",2) 0 (IBlock [] [] (IReturn (IVar 2)))])),IConsBranch ("Prelude","GT",1) 0 (IBlock [] [] (ICaseCons 3 [IConsBranch ("Prelude","LT",0) 0 (IBlock [] [] (IReturn (IVar 3))),IConsBranch ("Prelude","GT",1) 0 (IBlock [] [] (IReturn (IVar 3))),IConsBranch ("Prelude","EQ",2) 0 (IBlock [] [] (IReturn (IVar 3)))])),IConsBranch ("Prelude","EQ",2) 0 (IBlock [] [] (ICaseCons 3 [IConsBranch ("Prelude","LT",0) 0 (IBlock [] [] (IReturn (IVar 3))),IConsBranch ("Prelude","GT",1) 0 (IBlock [] [] (IReturn (IVar 2))),IConsBranch ("Prelude","EQ",2) 0 (IBlock [] [] (IReturn (IVar 3)))]))]))),IFunction ("Prelude","_impl#max#Prelude.Ord#Prelude.Ordering",0) 2 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1]),IVarAssign 4 (IFPCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Ordering",0) 2 []),IVarAssign 5 (IFCall ("Prelude","apply",0) [IVar 4,IVar 2,IVar 3])] (ICaseCons 5 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (IVar 2))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (IReturn (IVar 3)))]))),IFunction ("Prelude","_impl#compare#Prelude.Ord#Prelude.Ordering",0) 2 Public [] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3,IVarDecl 4,IVarDecl 5,IVarDecl 6] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1]),IVarAssign 4 (IFCall ("Prelude","_inst#Prelude.Eq#Prelude.Ordering",0) []),IVarAssign 5 (IFCall ("Prelude","==",0) [IVar 4]),IVarAssign 6 (IFCall ("Prelude","apply",0) [IVar 5,IVar 2,IVar 3])] (ICaseCons 6 [IConsBranch ("Prelude","True",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","EQ",0) []))),IConsBranch ("Prelude","False",1) 0 (IBlock [] [] (ICaseCons 2 [IConsBranch ("Prelude","LT",0) 0 (IBlock [] [] (ICaseCons 3 [IConsBranch ("Prelude","LT",0) 0 (IBlock [] [] (IReturn (IVar 3))),IConsBranch ("Prelude","GT",1) 0 (IBlock [] [] (IReturn (IVar 2))),IConsBranch ("Prelude","EQ",2) 0 (IBlock [] [] (IReturn (IVar 2)))])),IConsBranch ("Prelude","GT",1) 0 (IBlock [] [] (ICaseCons 3 [IConsBranch ("Prelude","LT",0) 0 (IBlock [] [] (IReturn (IVar 2))),IConsBranch ("Prelude","GT",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","LT",0) []))),IConsBranch ("Prelude","EQ",2) 0 (IBlock [] [] (IReturn (IVar 2)))])),IConsBranch ("Prelude","EQ",2) 0 (IBlock [] [] (ICaseCons 3 [IConsBranch ("Prelude","LT",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","GT",0) []))),IConsBranch ("Prelude","GT",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","LT",0) []))),IConsBranch ("Prelude","EQ",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","LT",0) [])))]))]))]))),IFunction ("Prelude","_impl#>=#Prelude.Ord#Prelude.Ordering",0) 2 Public [1] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 3 [IConsBranch ("Prelude","LT",0) 0 (IBlock [] [] (ICaseCons 2 [IConsBranch ("Prelude","LT",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) []))),IConsBranch ("Prelude","GT",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) []))),IConsBranch ("Prelude","EQ",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) [])))])),IConsBranch ("Prelude","GT",1) 0 (IBlock [] [] (ICaseCons 2 [IConsBranch ("Prelude","LT",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","GT",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) []))),IConsBranch ("Prelude","EQ",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))])),IConsBranch ("Prelude","EQ",2) 0 (IBlock [] [] (ICaseCons 2 [IConsBranch ("Prelude","LT",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","GT",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) []))),IConsBranch ("Prelude","EQ",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) [])))]))]))),IFunction ("Prelude","_impl#>#Prelude.Ord#Prelude.Ordering",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("Prelude","LT",0) 0 (IBlock [] [] (ICaseCons 3 [IConsBranch ("Prelude","LT",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","GT",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","EQ",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))])),IConsBranch ("Prelude","GT",1) 0 (IBlock [] [] (ICaseCons 3 [IConsBranch ("Prelude","LT",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) []))),IConsBranch ("Prelude","GT",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","EQ",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) [])))])),IConsBranch ("Prelude","EQ",2) 0 (IBlock [] [] (ICaseCons 3 [IConsBranch ("Prelude","LT",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",0) []))),IConsBranch ("Prelude","GT",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","EQ",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))]))]))),IFunction ("Prelude","_impl#<#Prelude.Ord#Prelude.Ordering",0) 2 Public [0] (IFuncBody (IBlock [IVarDecl 2,IVarDecl 3] [IVarAssign 3 (IVarAccess 0 [0]),IVarAssign 2 (IVarAccess 0 [1])] (ICaseCons 2 [IConsBranch ("Prelude","LT",0) 0 (IBlock [] [] (ICaseCons 3 [IConsBranch ("Prelude","LT",0) 0 (IBlock [IVarDecl 4,IVarDecl 5,IVarDecl 6,IVarDecl 7] [IVarAssign 4 (IFCall ("Prelude","_inst#Prelude.Eq#Prelude.Ordering",0) []),IVarAssign 5 (IFCall ("Prelude","/=",0) [IVar 4]),IVarAssign 6 (IVar 3),IVarAssign 7 (IVar 3)] (IReturn (IFCall ("Prelude","apply",0) [IVar 5,IVar 6,IVar 7]))),IConsBranch ("Prelude","GT",1) 0 (IBlock [IVarDecl 12,IVarDecl 13,IVarDecl 14,IVarDecl 15] [IVarAssign 12 (IFCall ("Prelude","_inst#Prelude.Eq#Prelude.Ordering",0) []),IVarAssign 13 (IFCall ("Prelude","/=",0) [IVar 12]),IVarAssign 14 (IVar 2),IVarAssign 15 (IVar 3)] (IReturn (IFCall ("Prelude","apply",0) [IVar 13,IVar 14,IVar 15]))),IConsBranch ("Prelude","EQ",2) 0 (IBlock [IVarDecl 8,IVarDecl 9,IVarDecl 10,IVarDecl 11] [IVarAssign 8 (IFCall ("Prelude","_inst#Prelude.Eq#Prelude.Ordering",0) []),IVarAssign 9 (IFCall ("Prelude","/=",0) [IVar 8]),IVarAssign 10 (IVar 2),IVarAssign 11 (IVar 3)] (IReturn (IFCall ("Prelude","apply",0) [IVar 9,IVar 10,IVar 11])))])),IConsBranch ("Prelude","GT",1) 0 (IBlock [] [] (ICaseCons 3 [IConsBranch ("Prelude","LT",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","GT",1) 0 (IBlock [IVarDecl 24,IVarDecl 25,IVarDecl 26,IVarDecl 27] [IVarAssign 24 (IFCall ("Prelude","_inst#Prelude.Eq#Prelude.Ordering",0) []),IVarAssign 25 (IFCall ("Prelude","/=",0) [IVar 24]),IVarAssign 26 (IVar 3),IVarAssign 27 (IVar 3)] (IReturn (IFCall ("Prelude","apply",0) [IVar 25,IVar 26,IVar 27]))),IConsBranch ("Prelude","EQ",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))])),IConsBranch ("Prelude","EQ",2) 0 (IBlock [] [] (ICaseCons 3 [IConsBranch ("Prelude","LT",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))),IConsBranch ("Prelude","GT",1) 0 (IBlock [IVarDecl 20,IVarDecl 21,IVarDecl 22,IVarDecl 23] [IVarAssign 20 (IFCall ("Prelude","_inst#Prelude.Eq#Prelude.Ordering",0) []),IVarAssign 21 (IFCall ("Prelude","/=",0) [IVar 20]),IVarAssign 22 (IVar 2),IVarAssign 23 (IVar 3)] (IReturn (IFCall ("Prelude","apply",0) [IVar 21,IVar 22,IVar 23]))),IConsBranch ("Prelude","EQ",2) 0 (IBlock [IVarDecl 16,IVarDecl 17,IVarDecl 18,IVarDecl 19] [IVarAssign 16 (IFCall ("Prelude","_inst#Prelude.Eq#Prelude.Ordering",0) []),IVarAssign 17 (IFCall ("Prelude","/=",0) [IVar 16]),IVarAssign 18 (IVar 3),IVarAssign 19 (IVar 3)] (IReturn (IFCall ("Prelude","apply",0) [IVar 17,IVar 18,IVar 19])))]))])))]