interface incompl where {
import Prelude;
data Color = Black | White;
data MyList a = Nil | Cons a (MyList a);
comp_dark 1 :: Color -> Prelude.Bool;
comp_head 1 :: MyList a -> a;
incomp_dark 1 :: Color -> Prelude.Bool;
incomp_head 1 :: MyList a -> a;
length 1 :: Prelude.Num b => MyList a -> b;
main
0
::
(Prelude.Num b, Prelude.Num c) => (Prelude.Bool, Prelude.Bool, a,
                                   b, c);
rev_length 1 :: Prelude.Num b => MyList a -> b;
hiding data Prelude.Bool;
hiding class Prelude.Num a;
instance Prelude.Num Prelude.Float {
  fromInt 1;
  signum 1;
  abs 1;
  negate 1;
  (*) 2;
  (-) 2;
  (+) 2
} {-# MODULE Prelude #-};
instance Prelude.Num Prelude.Int {
  fromInt 1;
  signum 1;
  abs 1;
  negate 1;
  (*) 2;
  (-) 2;
  (+) 2
} {-# MODULE Prelude #-};
hiding data Prelude.Float;
hiding data Prelude.Int
}