Prog "replace" ["Prelude"] [TypeSyn ("replace","RepBool") Public [] (TCons ("Prelude","Bool") []),TypeSyn ("replace","RepInt") Public [] (TCons ("Prelude","Int") []),TypeSyn ("replace","RepFloat") Public [] (TCons ("Prelude","Float") []),TypeSyn ("replace","RepChar") Public [] (TCons ("Prelude","Char") []),TypeSyn ("replace","RepList") Public [0] (TCons ("Prelude","[]") [TVar 0]),TypeSyn ("replace","RepUnit") Public [] (TCons ("Prelude","()") []),TypeSyn ("replace","RepT2") Public [0,1] (TCons ("Prelude","(,)") [TVar 0,TVar 1]),TypeSyn ("replace","RepT3") Public [0,1,2] (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]),TypeSyn ("replace","RepT4") Public [0,1,2,3] (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]),TypeSyn ("replace","RepT5") Public [0,1,2,3,4] (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]),TypeSyn ("replace","RepT6") Public [0,1,2,3,4,5] (TCons ("Prelude","(,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5]),TypeSyn ("replace","RepT7") Public [0,1,2,3,4,5,6] (TCons ("Prelude","(,,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 6,TVar 5]),Type ("replace","Maybe") Public [0] [Cons ("replace","Nothing") 0 Public [],Cons ("replace","Just") 1 Public [TVar 0]],Type ("replace","Either") Public [0,1] [Cons ("replace","Left") 1 Public [TVar 0],Cons ("replace","Right") 1 Public [TVar 1]],Type ("replace","IOError") Public [] [Cons ("replace","IOError") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("replace","UserError") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("replace","FailError") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("replace","NondetError") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]] [Func ("replace","_inst#Prelude.Num#replace.RepInt") 0 Public (TCons ("Prelude","_Dict#Num") [TCons ("replace","RepInt") []]) (Rule [] (Var 0)),Func ("replace","_impl#+#Prelude.Num#replace.RepInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("replace","_impl#-#Prelude.Num#replace.RepInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("replace","_impl#*#Prelude.Num#replace.RepInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("replace","_impl#negate#Prelude.Num#replace.RepInt") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("replace","_impl#abs#Prelude.Num#replace.RepInt") 1 Public (FuncType (TCons ("replace","RepInt") []) (TCons ("replace","RepInt") [])) (Rule [] (Var 0)),Func ("replace","_impl#signum#Prelude.Num#replace.RepInt") 1 Public (FuncType (TCons ("replace","RepInt") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("replace","_impl#fromInt#Prelude.Num#replace.RepInt") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("replace","_inst#Prelude.Real#replace.RepInt") 0 Public (TCons ("Prelude","_Dict#Real") [TCons ("replace","RepInt") []]) (Rule [] (Var 0)),Func ("replace","_inst#Prelude.Integral#replace.RepInt") 0 Public (TCons ("Prelude","_Dict#Integral") [TCons ("replace","RepInt") []]) (Rule [] (Var 0)),Func ("replace","_impl#div#Prelude.Integral#replace.RepInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("replace","_impl#mod#Prelude.Integral#replace.RepInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("replace","_impl#quot#Prelude.Integral#replace.RepInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("replace","_impl#rem#Prelude.Integral#replace.RepInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("replace","_impl#divMod#Prelude.Integral#replace.RepInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("replace","RepInt") [],TCons ("replace","RepInt") []]))) (Rule [] (Var 0)),Func ("replace","_impl#quotRem#Prelude.Integral#replace.RepInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("replace","RepInt") [],TCons ("replace","RepInt") []]))) (Rule [] (Var 0)),Func ("replace","_inst#Prelude.Eq#replace.RepBool") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("replace","RepBool") []]) (Rule [] (Var 0)),Func ("replace","_impl#==#Prelude.Eq#replace.RepBool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","_impl#/=#Prelude.Eq#replace.RepBool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","_inst#Prelude.Eq#replace.RepInt") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("replace","RepInt") []]) (Rule [] (Var 0)),Func ("replace","_impl#==#Prelude.Eq#replace.RepInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","_impl#/=#Prelude.Eq#replace.RepInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","_inst#Prelude.Eq#replace.RepFloat") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("replace","RepFloat") []]) (Rule [] (Var 0)),Func ("replace","_impl#==#Prelude.Eq#replace.RepFloat") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","_impl#/=#Prelude.Eq#replace.RepFloat") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","_inst#Prelude.Eq#replace.RepChar") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("replace","RepChar") []]) (Rule [] (Var 0)),Func ("replace","_impl#==#Prelude.Eq#replace.RepChar") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","_impl#/=#Prelude.Eq#replace.RepChar") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","_inst#Prelude.Eq#replace.RepList") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TCons ("replace","RepList") [TVar 0]])) (Rule [] (Var 0)),Func ("replace","_impl#==#Prelude.Eq#replace.RepList") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("replace","_impl#/=#Prelude.Eq#replace.RepList") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("replace","RepList") [TVar 0]) (FuncType (TCons ("replace","RepList") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("replace","_inst#Prelude.Eq#replace.RepUnit") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("replace","RepUnit") []]) (Rule [] (Var 0)),Func ("replace","_impl#==#Prelude.Eq#replace.RepUnit") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","_impl#/=#Prelude.Eq#replace.RepUnit") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","_inst#Prelude.Eq#replace.RepT2") 2 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (TCons ("Prelude","_Dict#Eq") [TCons ("replace","RepT2") [TVar 0,TVar 1]]))) (Rule [] (Var 0)),Func ("replace","_impl#==#Prelude.Eq#replace.RepT2") 4 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("replace","_impl#/=#Prelude.Eq#replace.RepT2") 4 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("replace","_inst#Prelude.Eq#replace.RepT3") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (TCons ("Prelude","_Dict#Eq") [TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2]])))) (Rule [] (Var 0)),Func ("replace","_impl#==#Prelude.Eq#replace.RepT3") 5 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","Bool") [])))))) (Rule [] (Var 0)),Func ("replace","_impl#/=#Prelude.Eq#replace.RepT3") 5 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","Bool") [])))))) (Rule [] (Var 0)),Func ("replace","_inst#Prelude.Eq#replace.RepT4") 4 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (TCons ("Prelude","_Dict#Eq") [TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3]]))))) (Rule [] (Var 0)),Func ("replace","_impl#==#Prelude.Eq#replace.RepT4") 6 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","Bool") []))))))) (Rule [] (Var 0)),Func ("replace","_impl#/=#Prelude.Eq#replace.RepT4") 6 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","Bool") []))))))) (Rule [] (Var 0)),Func ("replace","_inst#Prelude.Eq#replace.RepT5") 5 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (TCons ("Prelude","_Dict#Eq") [TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]])))))) (Rule [] (Var 0)),Func ("replace","_impl#==#Prelude.Eq#replace.RepT5") 7 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","Bool") [])))))))) (Rule [] (Var 0)),Func ("replace","_impl#/=#Prelude.Eq#replace.RepT5") 7 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","Bool") [])))))))) (Rule [] (Var 0)),Func ("replace","_inst#Prelude.Eq#replace.RepT6") 6 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 5]) (TCons ("Prelude","_Dict#Eq") [TCons ("replace","RepT6") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5]]))))))) (Rule [] (Var 0)),Func ("replace","_impl#==#Prelude.Eq#replace.RepT6") 8 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 5]) (FuncType (TCons ("Prelude","(,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5]) (FuncType (TCons ("Prelude","(,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5]) (TCons ("Prelude","Bool") []))))))))) (Rule [] (Var 0)),Func ("replace","_impl#/=#Prelude.Eq#replace.RepT6") 8 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 5]) (FuncType (TCons ("Prelude","(,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5]) (FuncType (TCons ("Prelude","(,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5]) (TCons ("Prelude","Bool") []))))))))) (Rule [] (Var 0)),Func ("replace","_inst#Prelude.Eq#replace.RepT7") 7 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 5]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 6]) (TCons ("Prelude","_Dict#Eq") [TCons ("replace","RepT7") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6]])))))))) (Rule [] (Var 0)),Func ("replace","_impl#==#Prelude.Eq#replace.RepT7") 9 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 5]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 6]) (FuncType (TCons ("Prelude","(,,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 6,TVar 5]) (FuncType (TCons ("Prelude","(,,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 6,TVar 5]) (TCons ("Prelude","Bool") [])))))))))) (Rule [] (Var 0)),Func ("replace","_impl#/=#Prelude.Eq#replace.RepT7") 9 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 5]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 6]) (FuncType (TCons ("Prelude","(,,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 6,TVar 5]) (FuncType (TCons ("Prelude","(,,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 6,TVar 5]) (TCons ("Prelude","Bool") [])))))))))) (Rule [] (Var 0)),Func ("replace","_inst#Prelude.Ord#replace.RepInt") 0 Public (TCons ("Prelude","_Dict#Ord") [TCons ("replace","RepInt") []]) (Rule [] (Var 0)),Func ("replace","_impl#compare#Prelude.Ord#replace.RepInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Var 0)),Func ("replace","_impl#<=#Prelude.Ord#replace.RepInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","_impl#>=#Prelude.Ord#replace.RepInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","_impl#<#Prelude.Ord#replace.RepInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","_impl#>#Prelude.Ord#replace.RepInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","_impl#min#Prelude.Ord#replace.RepInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("replace","_impl#max#Prelude.Ord#replace.RepInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("replace","_inst#Prelude.Ord#replace.RepFloat") 0 Public (TCons ("Prelude","_Dict#Ord") [TCons ("replace","RepFloat") []]) (Rule [] (Var 0)),Func ("replace","_impl#compare#Prelude.Ord#replace.RepFloat") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Var 0)),Func ("replace","_impl#<=#Prelude.Ord#replace.RepFloat") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","_impl#>=#Prelude.Ord#replace.RepFloat") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","_impl#<#Prelude.Ord#replace.RepFloat") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","_impl#>#Prelude.Ord#replace.RepFloat") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","_impl#min#Prelude.Ord#replace.RepFloat") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [] (Var 0)),Func ("replace","_impl#max#Prelude.Ord#replace.RepFloat") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [] (Var 0)),Func ("replace","_inst#Prelude.Ord#replace.RepChar") 0 Public (TCons ("Prelude","_Dict#Ord") [TCons ("replace","RepChar") []]) (Rule [] (Var 0)),Func ("replace","_impl#compare#Prelude.Ord#replace.RepChar") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Var 0)),Func ("replace","_impl#<=#Prelude.Ord#replace.RepChar") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","_impl#>=#Prelude.Ord#replace.RepChar") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","_impl#<#Prelude.Ord#replace.RepChar") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","_impl#>#Prelude.Ord#replace.RepChar") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","_impl#min#Prelude.Ord#replace.RepChar") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Char") []))) (Rule [] (Var 0)),Func ("replace","_impl#max#Prelude.Ord#replace.RepChar") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Char") []))) (Rule [] (Var 0)),Func ("replace","_inst#Prelude.Ord#replace.RepList") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (TCons ("Prelude","_Dict#Ord") [TCons ("replace","RepList") [TVar 0]])) (Rule [] (Var 0)),Func ("replace","_impl#compare#Prelude.Ord#replace.RepList") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Ordering") [])))) (Rule [] (Var 0)),Func ("replace","_impl#<=#Prelude.Ord#replace.RepList") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("replace","RepList") [TVar 0]) (FuncType (TCons ("replace","RepList") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("replace","_impl#>=#Prelude.Ord#replace.RepList") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("replace","RepList") [TVar 0]) (FuncType (TCons ("replace","RepList") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("replace","_impl#<#Prelude.Ord#replace.RepList") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("replace","RepList") [TVar 0]) (FuncType (TCons ("replace","RepList") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("replace","_impl#>#Prelude.Ord#replace.RepList") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("replace","RepList") [TVar 0]) (FuncType (TCons ("replace","RepList") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("replace","_impl#min#Prelude.Ord#replace.RepList") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("replace","RepList") [TVar 0]) (FuncType (TCons ("replace","RepList") [TVar 0]) (TCons ("replace","RepList") [TVar 0])))) (Rule [] (Var 0)),Func ("replace","_impl#max#Prelude.Ord#replace.RepList") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("replace","RepList") [TVar 0]) (FuncType (TCons ("replace","RepList") [TVar 0]) (TCons ("replace","RepList") [TVar 0])))) (Rule [] (Var 0)),Func ("replace","_inst#Prelude.Ord#replace.RepBool") 0 Public (TCons ("Prelude","_Dict#Ord") [TCons ("replace","RepBool") []]) (Rule [] (Var 0)),Func ("replace","_impl#compare#Prelude.Ord#replace.RepBool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Var 0)),Func ("replace","_impl#<=#Prelude.Ord#replace.RepBool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","_impl#>=#Prelude.Ord#replace.RepBool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","_impl#<#Prelude.Ord#replace.RepBool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","_impl#>#Prelude.Ord#replace.RepBool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","_impl#min#Prelude.Ord#replace.RepBool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","_impl#max#Prelude.Ord#replace.RepBool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","_inst#Prelude.Ord#replace.RepUnit") 0 Public (TCons ("Prelude","_Dict#Ord") [TCons ("replace","RepUnit") []]) (Rule [] (Var 0)),Func ("replace","_impl#compare#Prelude.Ord#replace.RepUnit") 0 Public (FuncType (TCons ("replace","RepUnit") []) (FuncType (TCons ("replace","RepUnit") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Var 0)),Func ("replace","_impl#<=#Prelude.Ord#replace.RepUnit") 2 Public (FuncType (TCons ("replace","RepUnit") []) (FuncType (TCons ("replace","RepUnit") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","_impl#>=#Prelude.Ord#replace.RepUnit") 2 Public (FuncType (TCons ("replace","RepUnit") []) (FuncType (TCons ("replace","RepUnit") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","_impl#<#Prelude.Ord#replace.RepUnit") 2 Public (FuncType (TCons ("replace","RepUnit") []) (FuncType (TCons ("replace","RepUnit") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","_impl#>#Prelude.Ord#replace.RepUnit") 2 Public (FuncType (TCons ("replace","RepUnit") []) (FuncType (TCons ("replace","RepUnit") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","_impl#min#Prelude.Ord#replace.RepUnit") 2 Public (FuncType (TCons ("replace","RepUnit") []) (FuncType (TCons ("replace","RepUnit") []) (TCons ("Prelude","()") []))) (Rule [] (Var 0)),Func ("replace","_impl#max#Prelude.Ord#replace.RepUnit") 2 Public (FuncType (TCons ("replace","RepUnit") []) (FuncType (TCons ("replace","RepUnit") []) (TCons ("Prelude","()") []))) (Rule [] (Var 0)),Func ("replace","_inst#Prelude.Ord#replace.RepT2") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (TCons ("Prelude","_Dict#Ord") [TCons ("replace","RepT2") [TVar 0,TVar 1]]))) (Rule [] (Var 0)),Func ("replace","_impl#compare#Prelude.Ord#replace.RepT2") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","Ordering") []))))) (Rule [] (Var 0)),Func ("replace","_impl#<=#Prelude.Ord#replace.RepT2") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("replace","RepT2") [TVar 0,TVar 1]) (FuncType (TCons ("replace","RepT2") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("replace","_impl#>=#Prelude.Ord#replace.RepT2") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("replace","RepT2") [TVar 0,TVar 1]) (FuncType (TCons ("replace","RepT2") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("replace","_impl#<#Prelude.Ord#replace.RepT2") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("replace","RepT2") [TVar 0,TVar 1]) (FuncType (TCons ("replace","RepT2") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("replace","_impl#>#Prelude.Ord#replace.RepT2") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("replace","RepT2") [TVar 0,TVar 1]) (FuncType (TCons ("replace","RepT2") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("replace","_impl#min#Prelude.Ord#replace.RepT2") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("replace","RepT2") [TVar 0,TVar 1]) (FuncType (TCons ("replace","RepT2") [TVar 0,TVar 1]) (TCons ("replace","RepT2") [TVar 0,TVar 1]))))) (Rule [] (Var 0)),Func ("replace","_impl#max#Prelude.Ord#replace.RepT2") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("replace","RepT2") [TVar 0,TVar 1]) (FuncType (TCons ("replace","RepT2") [TVar 0,TVar 1]) (TCons ("replace","RepT2") [TVar 0,TVar 1]))))) (Rule [] (Var 0)),Func ("replace","_inst#Prelude.Ord#replace.RepT3") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (TCons ("Prelude","_Dict#Ord") [TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2]])))) (Rule [] (Var 0)),Func ("replace","_impl#compare#Prelude.Ord#replace.RepT3") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","Ordering") [])))))) (Rule [] (Var 0)),Func ("replace","_impl#<=#Prelude.Ord#replace.RepT3") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","Bool") [])))))) (Rule [] (Var 0)),Func ("replace","_impl#>=#Prelude.Ord#replace.RepT3") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","Bool") [])))))) (Rule [] (Var 0)),Func ("replace","_impl#<#Prelude.Ord#replace.RepT3") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","Bool") [])))))) (Rule [] (Var 0)),Func ("replace","_impl#>#Prelude.Ord#replace.RepT3") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","Bool") [])))))) (Rule [] (Var 0)),Func ("replace","_impl#min#Prelude.Ord#replace.RepT3") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2]) (TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2])))))) (Rule [] (Var 0)),Func ("replace","_impl#max#Prelude.Ord#replace.RepT3") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2]) (TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2])))))) (Rule [] (Var 0)),Func ("replace","_inst#Prelude.Ord#replace.RepT4") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (TCons ("Prelude","_Dict#Ord") [TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3]]))))) (Rule [] (Var 0)),Func ("replace","_impl#compare#Prelude.Ord#replace.RepT4") 6 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","Ordering") []))))))) (Rule [] (Var 0)),Func ("replace","_impl#<=#Prelude.Ord#replace.RepT4") 6 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","Bool") []))))))) (Rule [] (Var 0)),Func ("replace","_impl#>=#Prelude.Ord#replace.RepT4") 6 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","Bool") []))))))) (Rule [] (Var 0)),Func ("replace","_impl#<#Prelude.Ord#replace.RepT4") 6 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","Bool") []))))))) (Rule [] (Var 0)),Func ("replace","_impl#>#Prelude.Ord#replace.RepT4") 6 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","Bool") []))))))) (Rule [] (Var 0)),Func ("replace","_impl#min#Prelude.Ord#replace.RepT4") 6 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3]))))))) (Rule [] (Var 0)),Func ("replace","_impl#max#Prelude.Ord#replace.RepT4") 6 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3]))))))) (Rule [] (Var 0)),Func ("replace","_inst#Prelude.Ord#replace.RepT5") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (TCons ("Prelude","_Dict#Ord") [TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]])))))) (Rule [] (Var 0)),Func ("replace","_impl#compare#Prelude.Ord#replace.RepT5") 7 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","Ordering") [])))))))) (Rule [] (Var 0)),Func ("replace","_impl#<=#Prelude.Ord#replace.RepT5") 7 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (FuncType (TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","Bool") [])))))))) (Rule [] (Var 0)),Func ("replace","_impl#>=#Prelude.Ord#replace.RepT5") 7 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (FuncType (TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","Bool") [])))))))) (Rule [] (Var 0)),Func ("replace","_impl#<#Prelude.Ord#replace.RepT5") 7 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (FuncType (TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","Bool") [])))))))) (Rule [] (Var 0)),Func ("replace","_impl#>#Prelude.Ord#replace.RepT5") 7 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (FuncType (TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","Bool") [])))))))) (Rule [] (Var 0)),Func ("replace","_impl#min#Prelude.Ord#replace.RepT5") 7 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (FuncType (TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4])))))))) (Rule [] (Var 0)),Func ("replace","_impl#max#Prelude.Ord#replace.RepT5") 7 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (FuncType (TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4])))))))) (Rule [] (Var 0)),Func ("replace","_inst#Prelude.Read#replace.RepUnit") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("replace","RepUnit") []]) (Rule [] (Var 0)),Func ("replace","_impl#readsPrec#Prelude.Read#replace.RepUnit") 1 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","RepUnit") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("replace","_impl#readList#Prelude.Read#replace.RepUnit") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("replace","RepUnit") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("replace","_inst#Prelude.Read#replace.RepT2") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (TCons ("Prelude","_Dict#Read") [TCons ("replace","RepT2") [TVar 0,TVar 1]]))) (Rule [] (Var 0)),Func ("replace","_impl#readsPrec#Prelude.Read#replace.RepT2") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","RepT2") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("replace","_impl#readList#Prelude.Read#replace.RepT2") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("replace","RepT2") [TVar 0,TVar 1]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("replace","_inst#Prelude.Read#replace.RepT3") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (TCons ("Prelude","_Dict#Read") [TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2]])))) (Rule [] (Var 0)),Func ("replace","_impl#readsPrec#Prelude.Read#replace.RepT3") 4 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("replace","_impl#readList#Prelude.Read#replace.RepT3") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("replace","_inst#Prelude.Read#replace.RepT4") 4 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (TCons ("Prelude","_Dict#Read") [TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3]]))))) (Rule [] (Var 0)),Func ("replace","_impl#readsPrec#Prelude.Read#replace.RepT4") 5 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("replace","_impl#readList#Prelude.Read#replace.RepT4") 4 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("replace","_inst#Prelude.Read#replace.RepT5") 5 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 4]) (TCons ("Prelude","_Dict#Read") [TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]])))))) (Rule [] (Var 0)),Func ("replace","_impl#readsPrec#Prelude.Read#replace.RepT5") 6 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 4]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [] (Var 0)),Func ("replace","_impl#readList#Prelude.Read#replace.RepT5") 5 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 4]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("replace","_inst#Prelude.Read#replace.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (TCons ("Prelude","_Dict#Read") [TCons ("replace","Either") [TVar 0,TVar 1]]))) (Rule [] (Var 0)),Func ("replace","_impl#readsPrec#Prelude.Read#replace.Either") 4 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","Either") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("replace","_impl#readList#Prelude.Read#replace.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("replace","Either") [TVar 0,TVar 1]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("replace","_inst#Prelude.Read#replace.RepBool") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("replace","RepBool") []]) (Rule [] (Var 0)),Func ("replace","_impl#readsPrec#Prelude.Read#replace.RepBool") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","RepBool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("replace","_impl#readList#Prelude.Read#replace.RepBool") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("replace","RepBool") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("replace","_inst#Prelude.Read#replace.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (TCons ("Prelude","_Dict#Read") [TCons ("replace","Maybe") [TVar 0]])) (Rule [] (Var 0)),Func ("replace","_impl#readsPrec#Prelude.Read#replace.Maybe") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("replace","_impl#readList#Prelude.Read#replace.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("replace","Maybe") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("replace","_inst#Prelude.Read#replace.IOError") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("replace","IOError") []]) (Rule [] (Var 0)),Func ("replace","_impl#readsPrec#Prelude.Read#replace.IOError") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("replace","_impl#readList#Prelude.Read#replace.IOError") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("replace","IOError") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("replace","_inst#Prelude.Show#replace.IOError") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("replace","IOError") []]) (Rule [] (Var 0)),Func ("replace","_impl#show#Prelude.Show#replace.IOError") 0 Public (FuncType (TCons ("replace","IOError") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("replace","_impl#showsPrec#Prelude.Show#replace.IOError") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("replace","IOError") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("replace","_impl#showList#Prelude.Show#replace.IOError") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("replace","IOError") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("replace","div_") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("replace","mod_") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("replace","quot_") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("replace","rem_") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("replace","+$") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("replace","-$") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("replace","*$") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("replace","eqInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","eqFloat") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","eqChar") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","ltEqInt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","ltEqFloat") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","ltEqChar") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("replace","isDigit") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("replace","isAlpha") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("replace","isBinDigit") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("replace","isHexDigit") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("replace","isOctDigit") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("replace","isUpper") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("replace","isAlphaNum") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("replace","lexDigits") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("replace","cond") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TVar 0) (TVar 0))) (Rule [] (Var 0)),Func ("replace","failed") 0 Public (TVar 0) (Rule [] (Var 0)),Func ("replace","loop") 0 Public (TVar 0) (Rule [] (Var 0)),Func ("replace","!!") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (TVar 0))) (Rule [] (Var 0)),Func ("replace","def_Ord_LtEq") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("replace","c2") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("replace","RepT2") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [] (Var 0)),Func ("replace","c3") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("replace","RepT2") [TVar 1,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [] (Var 0)),Func ("replace","c4") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("replace","RepT3") [TVar 1,TVar 2,TVar 3],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [] (Var 0)),Func ("replace","c5") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("replace","RepT4") [TVar 1,TVar 2,TVar 3,TVar 4],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [] (Var 0)),Func ("replace","readsLParen") 2 Public (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("replace","readsVal_5") 6 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 4]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","RepT5") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("replace","readsComma_4") 5 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","(,)") [TVar 4,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","RepT5") [TVar 4,TVar 0,TVar 1,TVar 2,TVar 3],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("replace","readsVal_4") 5 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","RepT4") [TVar 0,TVar 1,TVar 2,TVar 3],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("replace","readsComma_3") 4 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","(,)") [TVar 3,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","RepT4") [TVar 3,TVar 0,TVar 1,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("replace","readsVal_3") 4 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","RepT3") [TVar 0,TVar 1,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("replace","readsComma_2") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 2,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","RepT3") [TVar 2,TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("replace","readsVal_2") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","RepT2") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("replace","readsComma_1") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","RepT2") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("replace","readsVal_1") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("replace","readsRParen") 1 Public (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("replace","readsUnit") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","RepUnit") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("replace","readStringLiteral") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("replace","readNatLiteral") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("replace","readNat") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [] (Var 0)),Func ("replace","readCharLiteral") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("replace","readFloatLiteral") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("replace","readPosFloat") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("replace","readDotNat") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("replace","readDotNat1") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Var 0)),Func ("replace","readENat") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("replace","pow") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Float") []))) (Rule [] (Var 0)),Func ("replace","powaux") 3 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Float") [])))) (Rule [] (Var 0)),Func ("replace","halve") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("replace","square") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("replace","lexLitChar") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("replace","lexLitChar_lexEsc") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("replace","lexLitChar_runEsc") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("replace","lexLitChar_runEsc_1") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("replace","lexLitChar_runEsc_2") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("replace","lexLitChar_runEsc_3") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("replace","lexLitChar_runEsc_4") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("replace","lexLitChar_runEsc_5") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("replace","lexLitChar_runEsc_6") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("replace","lexLitChar_isAt") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("replace","lexLitChar_isCharName") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("replace","lexLitChar_lexPrefix") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TVar 1]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TVar 1]))) (Rule [] (Var 0)),Func ("replace","lex") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("replace","lex_lexSingleQuote") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Var 0)),Func ("replace","lex_filterSingleQuote") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("replace","lex_lexDoubleQuote") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TVar 0])) (Rule [] (Var 0)),Func ("replace","lex_else") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("replace","lex_else_frac") 3 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TVar 1]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TVar 1])))) (Rule [] (Var 0)),Func ("replace","lex_isSingle") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("replace","lex_isSym") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("replace","lex_isIdChar") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("replace","lex_lexFracExp") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("replace","lex_lexFracExp_dot") 1 Public (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Var 0)),Func ("replace","lex_lexFracExp_exp") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("replace","makeTriple") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 2]) (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]))) (Rule [] (Var 0)),Func ("replace","lex_lexExp") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("replace","lex_lexPMExp") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("replace","lex_lexPMExp_sgn") 3 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])))) (Rule [] (Var 0)),Func ("replace","lex_lexString") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("replace","lex_lexString_build") 1 Public (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Var 0)),Func ("replace","lex_lexString_string") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("replace","lex_lexStrItem") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("replace","take") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("replace","splitAt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]))) (Rule [] (Var 0)),Func ("replace","span") 2 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]))) (Rule [] (Var 0)),Func ("replace","lines") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Var 0)),Func ("replace","splitline") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Var 0)),Func ("replace","words") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Var 0)),Func ("replace","isSpace") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("replace","readLeft") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","Either") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("replace","makeLeft") 1 Public (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("replace","Either") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Var 0)),Func ("replace","readRight") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","Either") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("replace","makeRight") 1 Public (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("replace","Either") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Var 0)),Func ("replace","readTrue") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","RepBool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("replace","readFalse") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","RepBool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("replace","readNothing") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("replace","readJust") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("replace","makeJust") 1 Public (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("replace","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Var 0)),Func ("replace","readIOError") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("replace","makeIOError") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("replace","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Var 0)),Func ("replace","readUserError") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("replace","makeUserError") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("replace","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Var 0)),Func ("replace","readFailError") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("replace","makeFailError") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("replace","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Var 0)),Func ("replace","readNondetError") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("replace","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("replace","makeNondetError") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("replace","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Var 0))] []