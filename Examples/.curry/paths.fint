Prog "paths" ["Prelude"] [Type ("paths","Nat") Public [] [Cons ("paths","Zero") 0 Public [],Cons ("paths","Succ") 1 Public [TCons ("paths","Nat") []]]] [Func ("paths","f") 3 Public (FuncType (TCons ("paths","Nat") []) (FuncType (TCons ("paths","Nat") []) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TCons ("paths","Nat") [],TVar 0])))) (Rule [] (Var 0)),Func ("paths","g") 2 Public (FuncType (TCons ("paths","Nat") []) (FuncType (TCons ("Prelude","(,)") [TCons ("paths","Nat") [],TCons ("paths","Nat") []]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("paths","clen") 2 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TVar 0))) (Rule [] (Var 0)),Func ("paths","notyet") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (TVar 0)) (Rule [] (Var 0)),Func ("paths","h") 2 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0))] []