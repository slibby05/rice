solving: showTest.main
showTest.main
Prelude.++(apply(showTest._impl#show#Prelude.Show#showTest.Color: showTest.Red), apply(showTest._impl#show#Prelude.Show#showTest.Color: showTest.Green))
apply
apply high
apply FUNCTION
showTest._impl#show#Prelude.Show#showTest.Color
apply PART
apply: Prelude._def#show#Prelude.Show(showTest._inst#Prelude.Show#showTest.Color, *)
/1
equal args (1/1)
Prelude._def#show#Prelude.Show(showTest._inst#Prelude.Show#showTest.Color, *)
BEG_OUT: Prelude._def#show#Prelude.Show(showTest._inst#Prelude.Show#showTest.Color, showTest.Red)

Prelude._def#show#Prelude.Show(showTest._inst#Prelude.Show#showTest.Color, showTest.Red)
apply
apply high
apply FUNCTION
Prelude.shows(showTest._inst#Prelude.Show#showTest.Color)
apply
apply high
apply FUNCTION
Prelude.showsPrec(showTest._inst#Prelude.Show#showTest.Color)
showTest._inst#Prelude.Show#showTest.Color
apply PART
apply: showTest._impl#showsPrec#Prelude.Show#showTest.Color(*, *)
/1
too few args (2/1)
showTest._impl#showsPrec#Prelude.Show#showTest.Color(*, *)
int(0)
1
apply PART
apply: showTest._impl#showsPrec#Prelude.Show#showTest.Color(int(0), *)
/2
too many args (1/2)
showTest._impl#showsPrec#Prelude.Show#showTest.Color(int(0), *)
showTest._impl#showsPrec#Prelude.Show#showTest.Color(int(0), *)
showTest._impl#showsPrec#Prelude.Show#showTest.Color(int(0), *)
showTest._impl#showsPrec#Prelude.Show#showTest.Color(int(0), showTest.Red)
end too many args (1/1)
Prelude.showString(Prelude.:(char(R), Prelude.:(char(e), Prelude.:(char(d), Prelude.[]))), *)
apply FUNCTION
apply PART
apply: Prelude.showString(Prelude.:(char(R), Prelude.:(char(e), Prelude.:(char(d), Prelude.[]))), *)
/1
equal args (1/1)
Prelude.showString(Prelude.:(char(R), Prelude.:(char(e), Prelude.:(char(d), Prelude.[]))), *)
BEG_OUT: Prelude.showString(Prelude.:(char(R), Prelude.:(char(e), Prelude.:(char(d), Prelude.[]))), Prelude.[])

Prelude.showString(Prelude.:(char(R), Prelude.:(char(e), Prelude.:(char(d), Prelude.[]))), Prelude.[])
Prelude.foldr(Prelude.showChar(*, *), Prelude.[], Prelude.:(char(R), Prelude.:(char(e), Prelude.:(char(d), Prelude.[]))))
apply
apply high
apply PART
apply: Prelude.showChar(*, *)
/2
equal args (2/2)
Prelude.showChar(*, *)
BEG_OUT: Prelude.showChar(char(R), Prelude.foldr(Prelude.showChar(*, *), Prelude.[], Prelude.:(char(e), Prelude.:(char(d), Prelude.[]))))

Prelude.showChar(char(R), Prelude.foldr(Prelude.showChar(*, *), Prelude.[], Prelude.:(char(e), Prelude.:(char(d), Prelude.[]))))
END_OUT: Prelude.:(char(R), Prelude.foldr(Prelude.showChar(*, *), Prelude.[], Prelude.:(char(e), Prelude.:(char(d), Prelude.[]))))

END_OUT: Prelude.:(char(R), Prelude.foldr(Prelude.showChar(*, *), Prelude.[], Prelude.:(char(e), Prelude.:(char(d), Prelude.[]))))

END_OUT: Prelude.:(char(R), Prelude.foldr(Prelude.showChar(*, *), Prelude.[], Prelude.:(char(e), Prelude.:(char(d), Prelude.[]))))

HNF: Prelude.:(char(R), Prelude.++(Prelude.foldr(Prelude.showChar(*, *), Prelude.[], Prelude.:(char(e), Prelude.:(char(d), Prelude.[]))), apply(showTest._impl#show#Prelude.Show#showTest.Color: showTest.Green)))
solving: char(R)
char(R)
HNF: char(R)
solving: Prelude.++(Prelude.foldr(Prelude.showChar(*, *), Prelude.[], Prelude.:(char(e), Prelude.:(char(d), Prelude.[]))), apply(showTest._impl#show#Prelude.Show#showTest.Color: showTest.Green))
Prelude.++(Prelude.foldr(Prelude.showChar(*, *), Prelude.[], Prelude.:(char(e), Prelude.:(char(d), Prelude.[]))), apply(showTest._impl#show#Prelude.Show#showTest.Color: showTest.Green))
Prelude.foldr(Prelude.showChar(*, *), Prelude.[], Prelude.:(char(e), Prelude.:(char(d), Prelude.[])))
apply
apply high
apply PART
apply: Prelude.showChar(*, *)
/2
equal args (2/2)
Prelude.showChar(*, *)
BEG_OUT: Prelude.showChar(char(e), Prelude.foldr(Prelude.showChar(*, *), Prelude.[], Prelude.:(char(d), Prelude.[])))

Prelude.showChar(char(e), Prelude.foldr(Prelude.showChar(*, *), Prelude.[], Prelude.:(char(d), Prelude.[])))
END_OUT: Prelude.:(char(e), Prelude.foldr(Prelude.showChar(*, *), Prelude.[], Prelude.:(char(d), Prelude.[])))

HNF: Prelude.:(char(e), Prelude.++(Prelude.foldr(Prelude.showChar(*, *), Prelude.[], Prelude.:(char(d), Prelude.[])), apply(showTest._impl#show#Prelude.Show#showTest.Color: showTest.Green)))
solving: char(e)
char(e)
HNF: char(e)
solving: Prelude.++(Prelude.foldr(Prelude.showChar(*, *), Prelude.[], Prelude.:(char(d), Prelude.[])), apply(showTest._impl#show#Prelude.Show#showTest.Color: showTest.Green))
Prelude.++(Prelude.foldr(Prelude.showChar(*, *), Prelude.[], Prelude.:(char(d), Prelude.[])), apply(showTest._impl#show#Prelude.Show#showTest.Color: showTest.Green))
Prelude.foldr(Prelude.showChar(*, *), Prelude.[], Prelude.:(char(d), Prelude.[]))
apply
apply high
apply PART
apply: Prelude.showChar(*, *)
/2
equal args (2/2)
Prelude.showChar(*, *)
BEG_OUT: Prelude.showChar(char(d), Prelude.foldr(Prelude.showChar(*, *), Prelude.[], Prelude.[]))

Prelude.showChar(char(d), Prelude.foldr(Prelude.showChar(*, *), Prelude.[], Prelude.[]))
END_OUT: Prelude.:(char(d), Prelude.foldr(Prelude.showChar(*, *), Prelude.[], Prelude.[]))

HNF: Prelude.:(char(d), Prelude.++(Prelude.foldr(Prelude.showChar(*, *), Prelude.[], Prelude.[]), apply(showTest._impl#show#Prelude.Show#showTest.Color: showTest.Green)))
solving: char(d)
char(d)
HNF: char(d)
solving: Prelude.++(Prelude.foldr(Prelude.showChar(*, *), Prelude.[], Prelude.[]), apply(showTest._impl#show#Prelude.Show#showTest.Color: showTest.Green))
Prelude.++(Prelude.foldr(Prelude.showChar(*, *), Prelude.[], Prelude.[]), apply(showTest._impl#show#Prelude.Show#showTest.Color: showTest.Green))
Prelude.foldr(Prelude.showChar(*, *), Prelude.[], Prelude.[])
HNF: apply(showTest._impl#show#Prelude.Show#showTest.Color: showTest.Green)
[]
SOLUTION: Prelude.:(char(R), Prelude.:(char(e), Prelude.:(char(d), apply)))
