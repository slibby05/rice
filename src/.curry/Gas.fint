Prog "Gas" ["Debug","FlatCurry.Types","FlatRewrite","Prelude","Util"] [] [Func ("Gas","loop") 3 Public (FuncType (FuncType (TCons ("FlatCurry.Types","FuncDecl") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("FlatCurry.Types","FuncDecl") []]))) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry.Types","FuncDecl") []]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry.Types","FuncDecl") []],TCons ("Prelude","Int") []])))) (Rule [] (Var 0)),Func ("Gas","loop.fname.4") 1 Private (FuncType (TCons ("FlatCurry.Types","FuncDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Gas","start") 1 Public (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry.Types","Expr") []]])) (Rule [] (Var 0)),Func ("Gas","~~") 2 Public (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry.Types","Expr") []]]) (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry.Types","Expr") []]]))) (Rule [] (Var 0)),Func ("Gas","~>") 2 Public (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry.Types","Expr") []]]) (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry.Types","Expr") []]]))) (Rule [] (Var 0)),Func ("Gas","~~>") 2 Public (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry.Types","Expr") []]]) (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry.Types","Expr") []]]))) (Rule [] (Var 0)),Func ("Gas","satisfies") 2 Public (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry.Types","Expr") []]]) (FuncType (FuncType (TCons ("FlatCurry.Types","Expr") []) (TCons ("Prelude","Bool") [])) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry.Types","Expr") []]]))) (Rule [] (Var 0)),Func ("Gas","clet") 0 Public (TCons ("FlatCurry.Types","Expr") []) (Rule [] (Var 0)),Func ("Gas","ccase") 0 Public (TCons ("FlatCurry.Types","Expr") []) (Rule [] (Var 0)),Func ("Gas","ccomb") 0 Public (TCons ("FlatCurry.Types","Expr") []) (Rule [] (Var 0)),Func ("Gas","cor") 0 Public (TCons ("FlatCurry.Types","Expr") []) (Rule [] (Var 0)),Func ("Gas","cfree") 0 Public (TCons ("FlatCurry.Types","Expr") []) (Rule [] (Var 0)),Func ("Gas","ctype") 0 Public (TCons ("FlatCurry.Types","Expr") []) (Rule [] (Var 0))] []