Prog "Main" ["FlatCurry.Pretty","FlatCurry.Read","FlatCurry.Types","GetOpt","List","Normalize","Prelude","System","Text.Pretty","Text.PrettyImpl","FlatCurry.Goodies","Control.SetFunctions"] [Type ("Main","FileType") Public [] [Cons ("Main","SFlat") 0 Public [],Cons ("Main","STransformed") 0 Public [],Cons ("Main","SICurry") 0 Public [],Cons ("Main","SC") 0 Public []]] [Func ("Main","_inst#Prelude.Show#Main.FileType") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Main","FileType") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Main","_impl#show#Prelude.Show#Main.FileType") [],Comb (FuncPartCall 2) ("Main","_impl#showsPrec#Prelude.Show#Main.FileType") [],Comb FuncCall ("Main","_impl#showList#Prelude.Show#Main.FileType") []])),Func ("Main","_impl#show#Prelude.Show#Main.FileType") 0 Public (FuncType (TCons ("Main","FileType") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Main","_inst#Prelude.Show#Main.FileType") []])),Func ("Main","_impl#showsPrec#Prelude.Show#Main.FileType") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Main","FileType") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Main","SFlat") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'S'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("Main","STransformed") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'S'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]),Branch (Pattern ("Main","SICurry") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'S'),Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude","[]") []]]]]]]]]),Branch (Pattern ("Main","SC") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'S'),Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude","[]") []]]])])),Func ("Main","_impl#showList#Prelude.Show#Main.FileType") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Main","FileType") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Main","_inst#Prelude.Show#Main.FileType") []])),Func ("Main","_inst#Prelude.Eq#Main.FileType") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Main","FileType") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Main","_impl#==#Prelude.Eq#Main.FileType") [],Comb FuncCall ("Main","_impl#/=#Prelude.Eq#Main.FileType") []])),Func ("Main","_impl#==#Prelude.Eq#Main.FileType") 2 Public (FuncType (TCons ("Main","FileType") []) (FuncType (TCons ("Main","FileType") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Main","SFlat") []) (Case Flex (Var 2) [Branch (Pattern ("Main","SFlat") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Main","STransformed") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Main","SICurry") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Main","SC") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Main","STransformed") []) (Case Flex (Var 2) [Branch (Pattern ("Main","SFlat") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Main","STransformed") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Main","SICurry") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Main","SC") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Main","SICurry") []) (Case Flex (Var 2) [Branch (Pattern ("Main","SFlat") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Main","STransformed") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Main","SICurry") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Main","SC") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Main","SC") []) (Case Flex (Var 2) [Branch (Pattern ("Main","SFlat") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Main","STransformed") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Main","SICurry") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Main","SC") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("Main","_impl#/=#Prelude.Eq#Main.FileType") 0 Public (FuncType (TCons ("Main","FileType") []) (FuncType (TCons ("Main","FileType") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Main","_inst#Prelude.Eq#Main.FileType") []])),Func ("Main","rewrite") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry.Types","Expr") []]])) (Rule [1] (Comb FuncCall ("Prelude","_impl#>>=#Prelude.Monad#Prelude.IO") [Comb FuncCall ("FlatCurry.Read","readFlatCurryWithImports") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","_impl#return#Prelude.Monad#Prelude.IO") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Main","rewrite.f.2") [],Comb (FuncPartCall 1) ("Prelude","head") []]]])),Func ("Main","rewrite.j.2") 1 Private (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TVar 0)) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","Just") [2]) (Var 2)])),Func ("Main","rewrite.f.2") 1 Private (FuncType (TCons ("FlatCurry.Types","Prog") []) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry.Types","Expr") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("FlatCurry.Types","Prog") [2,3,4,5,6]) (Case Flex (Var 5) [Branch (Pattern ("Prelude",":") [7,8]) (Case Flex (Var 7) [Branch (Pattern ("FlatCurry.Types","Func") [9,10,11,12,13]) (Case Flex (Var 13) [Branch (Pattern ("FlatCurry.Types","Rule") [14,15]) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Main","rewrite.j.2") [],Comb FuncCall ("Normalize","redex_path") [Var 15]])])])])])),Func ("Main","main") 0 Public (TCons ("Prelude","IO") [TCons ("Prelude","()") []]) (Rule [] (Comb FuncCall ("Prelude","_impl#>>=#Prelude.Monad#Prelude.IO") [Comb FuncCall ("System","getArgs") [],Comb (FuncPartCall 1) ("Main","main._#lambda3") []])),Func ("Main","main.writeOpt.18") 5 Private (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Main","FileType") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Main","FileType") []]]) (FuncType (FuncType (TVar 0) (TCons ("Text.PrettyImpl","Doc") [])) (FuncType (TVar 0) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))))) (Rule [1,2,3,4,5] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("List","find") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Main","_impl#==#Prelude.Eq#Main.FileType") [],Var 2],Comb (FuncPartCall 1) ("Prelude","snd") []]],Var 3]) [Branch (Pattern ("Prelude","Nothing") []) (Comb FuncCall ("Prelude","_impl#return#Prelude.Monad#Prelude.IO") [Comb ConsCall ("Prelude","()") []]),Branch (Pattern ("Prelude","Just") [6]) (Case Rigid (Var 6) [Branch (Pattern ("Prelude","(,)") [7,8]) (Case Rigid (Var 7) [Branch (Pattern ("Prelude","Nothing") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Text.Pretty","pPrint") [],Comb FuncCall ("Prelude","apply") [Var 4,Var 5]]]),Branch (Pattern ("Prelude","Just") [9]) (Comb FuncCall ("Prelude","writeFile") [Var 9,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Text.Pretty","pPrint") [],Comb FuncCall ("Prelude","apply") [Var 4,Var 5]]])])])])),Func ("Main","main._#lambda3") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [1] (Let [(2,Var 1),(3,Comb FuncCall ("GetOpt","getOpt") [Comb ConsCall ("GetOpt","RequireOrder") [],Comb FuncCall ("Main","optDescrs") [],Var 2]),(4,Comb FuncCall ("Main","main._#lambda3._#selFP2#opts") [Var 3]),(5,Comb FuncCall ("Main","main._#lambda3._#selFP3#files") [Var 3]),(6,Comb FuncCall ("Main","main._#lambda3._#selFP4#errors'") [Var 3]),(7,Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Comb FuncCall ("Prelude","length") [Var 5]],Lit (Intc 1)]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc 'M'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]],Var 6]),Branch (Pattern ("Prelude","False") []) (Var 6)])] (Case Rigid (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","not") [],Comb FuncCall ("Prelude","null") [Var 7]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","mapM_") [Comb FuncCall ("Prelude","_inst#Prelude.Monad#Prelude.IO") [],Comb (FuncPartCall 1) ("Prelude","putStrLn") []],Var 7]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","_impl#>>=#Prelude.Monad#Prelude.IO") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("FlatCurry.Read","readFlatCurryWithImports") [],Comb FuncCall ("Prelude","head") [Var 5]],Comb (FuncPartCall 1) ("Main","main._#lambda3._#lambda6") [Var 4]])]))),Func ("Main","main._#lambda3._#selFP2#opts") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Main","FileType") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Main","FileType") []]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 2)])),Func ("Main","main._#lambda3._#selFP3#files") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Main","FileType") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 3)])),Func ("Main","main._#lambda3._#selFP4#errors'") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Main","FileType") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 4)])),Func ("Main","main._#lambda3._#lambda6") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Main","FileType") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry.Types","Prog") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Case Rigid (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("Prelude","_impl#>>#Prelude.Monad#Prelude.IO") [Comb FuncCall ("Prelude","putStrLn") [Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'L'),Comb ConsCall ("Prelude",":") [Lit (Charc 'A'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'U'),Comb ConsCall ("Prelude",":") [Lit (Charc 'R'),Comb ConsCall ("Prelude",":") [Lit (Charc 'R'),Comb ConsCall ("Prelude",":") [Lit (Charc 'Y'),Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","_impl#>>#Prelude.Monad#Prelude.IO") [Comb FuncCall ("Main","main.writeOpt.18") [Comb FuncCall ("FlatCurry.Types","_inst#Prelude.Show#FlatCurry.Types.Prog") [],Comb ConsCall ("Main","SFlat") [],Var 1,Comb (FuncPartCall 1) ("FlatCurry.Pretty","ppProg") [Comb FuncCall ("FlatCurry.Pretty","defaultOptions") []],Var 3],Let [(5,Comb FuncCall ("Normalize","transform") [Var 3])] (Comb FuncCall ("Prelude","_impl#>>#Prelude.Monad#Prelude.IO") [Comb FuncCall ("Prelude","putStrLn") [Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'R'),Comb ConsCall ("Prelude",":") [Lit (Charc 'A'),Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'S'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'O'),Comb ConsCall ("Prelude",":") [Lit (Charc 'R'),Comb ConsCall ("Prelude",":") [Lit (Charc 'M'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'D'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'L'),Comb ConsCall ("Prelude",":") [Lit (Charc 'A'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'U'),Comb ConsCall ("Prelude",":") [Lit (Charc 'R'),Comb ConsCall ("Prelude",":") [Lit (Charc 'R'),Comb ConsCall ("Prelude",":") [Lit (Charc 'Y'),Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Main","main.writeOpt.18") [Comb FuncCall ("FlatCurry.Types","_inst#Prelude.Show#FlatCurry.Types.Prog") [],Comb ConsCall ("Main","STransformed") [],Var 1,Comb (FuncPartCall 1) ("FlatCurry.Pretty","ppProg") [Comb FuncCall ("FlatCurry.Pretty","defaultOptions") []],Var 5]])]]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#fail#Prelude.Monad#Prelude.IO") [],Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc '!'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]])])),Func ("Main","optDescrs") 0 Public (TCons ("Prelude","[]") [TCons ("GetOpt","OptDescr") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Main","FileType") []]]]) (Rule [] (Comb ConsCall ("Prelude",":") [Comb ConsCall ("GetOpt","Option") [Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("GetOpt","OptArg") [Comb (FuncPartCall 1) ("Main","optDescrs._#lambda8") [],Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'L'),Comb ConsCall ("Prelude",":") [Lit (Charc 'A'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'U'),Comb ConsCall ("Prelude",":") [Lit (Charc 'R'),Comb ConsCall ("Prelude",":") [Lit (Charc 'R'),Comb ConsCall ("Prelude",":") [Lit (Charc 'Y'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc 'w'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("GetOpt","Option") [Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("GetOpt","OptArg") [Comb (FuncPartCall 1) ("Main","optDescrs._#lambda9") [],Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'R'),Comb ConsCall ("Prelude",":") [Lit (Charc 'A'),Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'S'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'O'),Comb ConsCall ("Prelude",":") [Lit (Charc 'R'),Comb ConsCall ("Prelude",":") [Lit (Charc 'M'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'D'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc 'w'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("GetOpt","Option") [Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("GetOpt","OptArg") [Comb (FuncPartCall 1) ("Main","optDescrs._#lambda10") [],Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'U'),Comb ConsCall ("Prelude",":") [Lit (Charc 'R'),Comb ConsCall ("Prelude",":") [Lit (Charc 'R'),Comb ConsCall ("Prelude",":") [Lit (Charc 'Y'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc 'w'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("GetOpt","Option") [Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("GetOpt","OptArg") [Comb (FuncPartCall 1) ("Main","optDescrs._#lambda11") [],Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Lit (Charc 'w'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude","[]") []]]]])),Func ("Main","optDescrs._#lambda8") 1 Private (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Main","FileType") []])) (Rule [1] (Comb ConsCall ("Prelude","(,)") [Var 1,Comb ConsCall ("Main","SFlat") []])),Func ("Main","optDescrs._#lambda9") 1 Private (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Main","FileType") []])) (Rule [1] (Comb ConsCall ("Prelude","(,)") [Var 1,Comb ConsCall ("Main","STransformed") []])),Func ("Main","optDescrs._#lambda10") 1 Private (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Main","FileType") []])) (Rule [1] (Comb ConsCall ("Prelude","(,)") [Var 1,Comb ConsCall ("Main","SICurry") []])),Func ("Main","optDescrs._#lambda11") 1 Private (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Main","FileType") []])) (Rule [1] (Comb ConsCall ("Prelude","(,)") [Var 1,Comb ConsCall ("Main","SC") []]))] []