(Prog "PreludeNum" ["PreludeBase","PreludeCompare"] [] [(Func ("Prelude","_def#+#Prelude.Num") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1] (Comb FuncCall ("Prelude","error") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'N')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'h')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'p')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '`')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '+')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '\'')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])]))),(Func ("Prelude","_def#-#Prelude.Num") 3 Public (FuncType (TCons ("Prelude","_Dict#Num") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","+") [(Var 1)]),(Var 2)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","negate") [(Var 1)]),(Var 3)])]))),(Func ("Prelude","_def#*#Prelude.Num") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1] (Comb FuncCall ("Prelude","error") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'N')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'h')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'p')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '`')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '*')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '\'')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])]))),(Func ("Prelude","_def#negate#Prelude.Num") 2 Public (FuncType (TCons ("Prelude","_Dict#Num") [(TVar 0)]) (FuncType (TVar 0) (TVar 0))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","-") [(Var 1)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","fromInt") [(Var 1)]),(Lit (Intc 0))])]),(Var 2)]))),(Func ("Prelude","_def#abs#Prelude.Num") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [(TVar 0)]) (FuncType (TVar 0) (TVar 0))) (Rule [1] (Comb FuncCall ("Prelude","error") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'N')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'h')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'p')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '`')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'b')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '\'')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])]))),(Func ("Prelude","_def#signum#Prelude.Num") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [(TVar 0)]) (FuncType (TVar 0) (TVar 0))) (Rule [1] (Comb FuncCall ("Prelude","error") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'N')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'h')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'p')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '`')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'g')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '\'')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])]))),(Func ("Prelude","_def#fromInt#Prelude.Num") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [(TVar 0)]) (FuncType (TCons ("Prelude","Int") []) (TVar 0))) (Rule [1] (Comb FuncCall ("Prelude","error") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'N')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'h')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'p')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '`')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'I')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '\'')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])]))),(Func ("Prelude","_inst#Prelude.Num#Prelude.Float") 0 Public (TCons ("Prelude","_Dict#Num") [(TCons ("Prelude","Float") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Num") [(Comb (FuncPartCall 2) ("Prelude","_impl#+#Prelude.Num#Prelude.Float") []),(Comb (FuncPartCall 2) ("Prelude","_impl#-#Prelude.Num#Prelude.Float") []),(Comb (FuncPartCall 2) ("Prelude","_impl#*#Prelude.Num#Prelude.Float") []),(Comb (FuncPartCall 1) ("Prelude","_impl#negate#Prelude.Num#Prelude.Float") []),(Comb (FuncPartCall 1) ("Prelude","_impl#abs#Prelude.Num#Prelude.Float") []),(Comb (FuncPartCall 1) ("Prelude","_impl#signum#Prelude.Num#Prelude.Float") []),(Comb (FuncPartCall 1) ("Prelude","_impl#fromInt#Prelude.Num#Prelude.Float") [])]))),(Func ("Prelude","_impl#+#Prelude.Num#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [1,2] (Comb FuncCall ("Prelude","+.") [(Var 1),(Var 2)]))),(Func ("Prelude","_impl#-#Prelude.Num#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [1,2] (Comb FuncCall ("Prelude","-.") [(Var 1),(Var 2)]))),(Func ("Prelude","_impl#*#Prelude.Num#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [1,2] (Comb FuncCall ("Prelude","*.") [(Var 1),(Var 2)]))),(Func ("Prelude","_impl#negate#Prelude.Num#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [1] (Comb FuncCall ("Prelude","negateFloat") [(Var 1)]))),(Func ("Prelude","_impl#abs#Prelude.Num#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Float") []),(Var 1)]),(Lit (Floatc 0.0))]) [(Branch (Pattern ("Prelude","True") []) (Var 1)),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","_impl#negate#Prelude.Num#Prelude.Float") [(Var 1)])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))),(Func ("Prelude","_impl#signum#Prelude.Num#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#>#Prelude.Ord#Prelude.Float") []),(Var 1)]),(Lit (Floatc 0.0))]) [(Branch (Pattern ("Prelude","True") []) (Lit (Floatc 1.0))),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Float") [(Var 1),(Lit (Floatc 0.0))]) [(Branch (Pattern ("Prelude","True") []) (Lit (Floatc 0.0))),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","_impl#negate#Prelude.Num#Prelude.Float") [(Lit (Floatc 1.0))])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))]))),(Func ("Prelude","_impl#fromInt#Prelude.Num#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Float") [])) (Rule [1] (Comb FuncCall ("Prelude","i2f") [(Var 1)]))),(Func ("Prelude","_def#/#Prelude.Fractional") 3 Public (FuncType (TCons ("Prelude","_Dict#Fractional") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","*") [(Comb FuncCall ("Prelude","_super#Prelude.Fractional#Prelude.Num") [(Var 1)])]),(Var 2)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","recip") [(Var 1)]),(Var 3)])]))),(Func ("Prelude","_def#recip#Prelude.Fractional") 2 Public (FuncType (TCons ("Prelude","_Dict#Fractional") [(TVar 0)]) (FuncType (TVar 0) (TVar 0))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","/") [(Var 1)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","fromInt") [(Comb FuncCall ("Prelude","_super#Prelude.Fractional#Prelude.Num") [(Var 1)])]),(Lit (Intc 1))])]),(Var 2)]))),(Func ("Prelude","_def#fromFloat#Prelude.Fractional") 1 Public (FuncType (TCons ("Prelude","_Dict#Fractional") [(TVar 0)]) (FuncType (TCons ("Prelude","Float") []) (TVar 0))) (Rule [1] (Comb FuncCall ("Prelude","error") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'N')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'h')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'p')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '`')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'F')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '\'')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])]))),(Func ("Prelude","_inst#Prelude.Fractional#Prelude.Float") 0 Public (TCons ("Prelude","_Dict#Fractional") [(TCons ("Prelude","Float") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Fractional") [(Comb FuncCall ("Prelude","_inst#Prelude.Num#Prelude.Float") []),(Comb (FuncPartCall 2) ("Prelude","_impl#/#Prelude.Fractional#Prelude.Float") []),(Comb (FuncPartCall 1) ("Prelude","_impl#recip#Prelude.Fractional#Prelude.Float") []),(Comb (FuncPartCall 1) ("Prelude","_impl#fromFloat#Prelude.Fractional#Prelude.Float") [])]))),(Func ("Prelude","_impl#/#Prelude.Fractional#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [1,2] (Comb FuncCall ("Prelude","/.") [(Var 1),(Var 2)]))),(Func ("Prelude","_impl#recip#Prelude.Fractional#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [1] (Comb FuncCall ("Prelude","_impl#/#Prelude.Fractional#Prelude.Float") [(Lit (Floatc 1.0)),(Var 1)]))),(Func ("Prelude","_impl#fromFloat#Prelude.Fractional#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [1] (Var 1))),(Func ("Prelude","_def#div#Prelude.Integral") 3 Public (FuncType (TCons ("Prelude","_Dict#Integral") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1,2,3] (Let [(4,(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","divMod") [(Var 1)]),(Var 2)]),(Var 3)]))] (Comb FuncCall ("Prelude","_def#div#Prelude.Integral._#selFP2#q") [(Var 4)])))),(Func ("Prelude","_def#div#Prelude.Integral._#selFP2#q") 1 Private (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TVar 0)]) (TVar 0)) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2))]))),(Func ("Prelude","_def#mod#Prelude.Integral") 3 Public (FuncType (TCons ("Prelude","_Dict#Integral") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1,2,3] (Let [(4,(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","divMod") [(Var 1)]),(Var 2)]),(Var 3)]))] (Comb FuncCall ("Prelude","_def#mod#Prelude.Integral._#selFP4#r") [(Var 4)])))),(Func ("Prelude","_def#mod#Prelude.Integral._#selFP4#r") 1 Private (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TVar 0)]) (TVar 0)) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3))]))),(Func ("Prelude","_def#quot#Prelude.Integral") 3 Public (FuncType (TCons ("Prelude","_Dict#Integral") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1,2,3] (Let [(4,(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","quotRem") [(Var 1)]),(Var 2)]),(Var 3)]))] (Comb FuncCall ("Prelude","_def#quot#Prelude.Integral._#selFP6#q") [(Var 4)])))),(Func ("Prelude","_def#quot#Prelude.Integral._#selFP6#q") 1 Private (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TVar 0)]) (TVar 0)) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2))]))),(Func ("Prelude","_def#rem#Prelude.Integral") 3 Public (FuncType (TCons ("Prelude","_Dict#Integral") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1,2,3] (Let [(4,(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","quotRem") [(Var 1)]),(Var 2)]),(Var 3)]))] (Comb FuncCall ("Prelude","_def#rem#Prelude.Integral._#selFP8#r") [(Var 4)])))),(Func ("Prelude","_def#rem#Prelude.Integral._#selFP8#r") 1 Private (FuncType (TCons ("Prelude","(,)") [(TVar 0),(TVar 0)]) (TVar 0)) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3))]))),(Func ("Prelude","_def#divMod#Prelude.Integral") 1 Public (FuncType (TCons ("Prelude","_Dict#Integral") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","(,)") [(TVar 0),(TVar 0)])))) (Rule [1] (Comb FuncCall ("Prelude","error") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'N')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'h')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'p')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '`')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'v')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'M')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '\'')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])]))),(Func ("Prelude","_def#quotRem#Prelude.Integral") 1 Public (FuncType (TCons ("Prelude","_Dict#Integral") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","(,)") [(TVar 0),(TVar 0)])))) (Rule [1] (Comb FuncCall ("Prelude","error") [(Comb ConsCall ("Prelude",":") [(Lit (Charc 'N')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'h')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'd')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'f')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'c')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'l')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 's')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'p')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'r')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'a')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'i')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'n')),(Comb ConsCall ("Prelude",":") [(Lit (Charc ' ')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '`')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'q')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'u')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'o')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 't')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'R')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'e')),(Comb ConsCall ("Prelude",":") [(Lit (Charc 'm')),(Comb ConsCall ("Prelude",":") [(Lit (Charc '\'')),(Comb ConsCall ("Prelude","[]") [])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])]))),(Func ("Prelude","_inst#Prelude.Real#Prelude.Float") 0 Public (TCons ("Prelude","_Dict#Real") [(TCons ("Prelude","Float") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Real") [(Comb FuncCall ("Prelude","_inst#Prelude.Num#Prelude.Float") []),(Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Float") [])]))),(Func ("Prelude","divMod_") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [(TCons ("Prelude","Int") []),(TCons ("Prelude","Int") [])]))) (Rule [1,2] (Comb ConsCall ("Prelude","(,)") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#div#Prelude.Integral#Prelude.Int") []),(Var 1)]),(Var 2)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#mod#Prelude.Integral#Prelude.Int") []),(Var 1)]),(Var 2)])]))),(Func ("Prelude","quotRem_") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [(TCons ("Prelude","Int") []),(TCons ("Prelude","Int") [])]))) (Rule [1,2] (Comb ConsCall ("Prelude","(,)") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#quot#Prelude.Integral#Prelude.Int") []),(Var 1)]),(Var 2)]),(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#rem#Prelude.Integral#Prelude.Int") []),(Var 1)]),(Var 2)])]))),(Func ("Prelude","negate_") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [(Lit (Intc 0)),(Var 1)]))),(Func ("Prelude","+") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Num") [2,3,4,5,6,7,8]) (Var 2))]))),(Func ("Prelude","-") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Num") [2,3,4,5,6,7,8]) (Var 3))]))),(Func ("Prelude","*") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Num") [2,3,4,5,6,7,8]) (Var 4))]))),(Func ("Prelude","negate") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [(TVar 0)]) (FuncType (TVar 0) (TVar 0))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Num") [2,3,4,5,6,7,8]) (Var 5))]))),(Func ("Prelude","abs") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [(TVar 0)]) (FuncType (TVar 0) (TVar 0))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Num") [2,3,4,5,6,7,8]) (Var 6))]))),(Func ("Prelude","signum") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [(TVar 0)]) (FuncType (TVar 0) (TVar 0))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Num") [2,3,4,5,6,7,8]) (Var 7))]))),(Func ("Prelude","fromInt") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [(TVar 0)]) (FuncType (TCons ("Prelude","Int") []) (TVar 0))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Num") [2,3,4,5,6,7,8]) (Var 8))]))),(Func ("Prelude","_super#Prelude.Fractional#Prelude.Num") 1 Public (FuncType (TCons ("Prelude","_Dict#Fractional") [(TVar 0)]) (TCons ("Prelude","_Dict#Num") [(TVar 0)])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Fractional") [2,3,4,5]) (Var 2))]))),(Func ("Prelude","/") 1 Public (FuncType (TCons ("Prelude","_Dict#Fractional") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Fractional") [2,3,4,5]) (Var 3))]))),(Func ("Prelude","recip") 1 Public (FuncType (TCons ("Prelude","_Dict#Fractional") [(TVar 0)]) (FuncType (TVar 0) (TVar 0))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Fractional") [2,3,4,5]) (Var 4))]))),(Func ("Prelude","fromFloat") 1 Public (FuncType (TCons ("Prelude","_Dict#Fractional") [(TVar 0)]) (FuncType (TCons ("Prelude","Float") []) (TVar 0))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Fractional") [2,3,4,5]) (Var 5))]))),(Func ("Prelude","_super#Prelude.Real#Prelude.Num") 1 Public (FuncType (TCons ("Prelude","_Dict#Real") [(TVar 0)]) (TCons ("Prelude","_Dict#Num") [(TVar 0)])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Real") [2,3]) (Var 2))]))),(Func ("Prelude","_super#Prelude.Real#Prelude.Ord") 1 Public (FuncType (TCons ("Prelude","_Dict#Real") [(TVar 0)]) (TCons ("Prelude","_Dict#Ord") [(TVar 0)])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Real") [2,3]) (Var 3))]))),(Func ("Prelude","_super#Prelude.Integral#Prelude.Real") 1 Public (FuncType (TCons ("Prelude","_Dict#Integral") [(TVar 0)]) (TCons ("Prelude","_Dict#Real") [(TVar 0)])) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Integral") [2,3,4,5,6,7,8]) (Var 2))]))),(Func ("Prelude","div") 1 Public (FuncType (TCons ("Prelude","_Dict#Integral") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Integral") [2,3,4,5,6,7,8]) (Var 3))]))),(Func ("Prelude","mod") 1 Public (FuncType (TCons ("Prelude","_Dict#Integral") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Integral") [2,3,4,5,6,7,8]) (Var 4))]))),(Func ("Prelude","quot") 1 Public (FuncType (TCons ("Prelude","_Dict#Integral") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Integral") [2,3,4,5,6,7,8]) (Var 5))]))),(Func ("Prelude","rem") 1 Public (FuncType (TCons ("Prelude","_Dict#Integral") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Integral") [2,3,4,5,6,7,8]) (Var 6))]))),(Func ("Prelude","divMod") 1 Public (FuncType (TCons ("Prelude","_Dict#Integral") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","(,)") [(TVar 0),(TVar 0)])))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Integral") [2,3,4,5,6,7,8]) (Var 7))]))),(Func ("Prelude","quotRem") 1 Public (FuncType (TCons ("Prelude","_Dict#Integral") [(TVar 0)]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","(,)") [(TVar 0),(TVar 0)])))) (Rule [1] (Case Flex (Var 1) [(Branch (Pattern ("Prelude","_Dict#Integral") [2,3,4,5,6,7,8]) (Var 8))]))),(Func ("Prelude","i2f") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Float") [])) (Rule [1] (Case Rigid (Var 1) [(Branch (Pattern ([],"int") [2]) (Comb ConsCall ([],"float") [(Comb FuncCall ("Prelude","primI2F") [(Var 2)])]))]))),(Func ("Prelude","+$") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Case Rigid (Var 1) [(Branch (Pattern ([],"int") [3]) (Case Rigid (Var 2) [(Branch (Pattern ([],"int") [4]) (Comb ConsCall ([],"int") [(Comb FuncCall ("Prelude","primAddInt") [(Var 3),(Var 4)])]))]))]))),(Func ("Prelude","-$") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Case Rigid (Var 1) [(Branch (Pattern ([],"int") [3]) (Case Rigid (Var 2) [(Branch (Pattern ([],"int") [4]) (Comb ConsCall ([],"int") [(Comb FuncCall ("Prelude","primSubInt") [(Var 3),(Var 4)])]))]))]))),(Func ("Prelude","*$") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Case Rigid (Var 1) [(Branch (Pattern ([],"int") [3]) (Case Rigid (Var 2) [(Branch (Pattern ([],"int") [4]) (Comb ConsCall ([],"int") [(Comb FuncCall ("Prelude","primMulInt") [(Var 3),(Var 4)])]))]))]))),(Func ("Prelude","div_") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Case Rigid (Var 1) [(Branch (Pattern ([],"int") [3]) (Case Rigid (Var 2) [(Branch (Pattern ([],"int") [4]) (Comb ConsCall ([],"int") [(Comb FuncCall ("Prelude","primDivInt") [(Var 3),(Var 4)])]))]))]))),(Func ("Prelude","mod_") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Case Rigid (Var 1) [(Branch (Pattern ([],"int") [3]) (Case Rigid (Var 2) [(Branch (Pattern ([],"int") [4]) (Comb ConsCall ([],"int") [(Comb FuncCall ("Prelude","primModInt") [(Var 3),(Var 4)])]))]))]))),(Func ("Prelude","quot_") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Case Rigid (Var 1) [(Branch (Pattern ([],"int") [3]) (Case Rigid (Var 2) [(Branch (Pattern ([],"int") [4]) (Comb ConsCall ([],"int") [(Comb FuncCall ("Prelude","primQuotInt") [(Var 3),(Var 4)])]))]))]))),(Func ("Prelude","rem_") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Case Rigid (Var 1) [(Branch (Pattern ([],"int") [3]) (Case Rigid (Var 2) [(Branch (Pattern ([],"int") [4]) (Comb ConsCall ([],"int") [(Comb FuncCall ("Prelude","primRemInt") [(Var 3),(Var 4)])]))]))]))),(Func ("Prelude","negateFloat") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [1] (Case Rigid (Var 1) [(Branch (Pattern ([],"float") [2]) (Comb ConsCall ([],"float") [(Comb FuncCall ("Prelude","primNegateFloat") [(Var 2)])]))]))),(Func ("Prelude","+.") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [1,2] (Case Rigid (Var 1) [(Branch (Pattern ([],"float") [3]) (Case Rigid (Var 2) [(Branch (Pattern ([],"float") [4]) (Comb ConsCall ([],"float") [(Comb FuncCall ("Prelude","primAddFloat") [(Var 3),(Var 4)])]))]))]))),(Func ("Prelude","-.") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [1,2] (Case Rigid (Var 1) [(Branch (Pattern ([],"float") [3]) (Case Rigid (Var 2) [(Branch (Pattern ([],"float") [4]) (Comb ConsCall ([],"float") [(Comb FuncCall ("Prelude","primSubFloat") [(Var 3),(Var 4)])]))]))]))),(Func ("Prelude","*.") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [1,2] (Case Rigid (Var 1) [(Branch (Pattern ([],"float") [3]) (Case Rigid (Var 2) [(Branch (Pattern ([],"float") [4]) (Comb ConsCall ([],"float") [(Comb FuncCall ("Prelude","primMulFloat") [(Var 3),(Var 4)])]))]))]))),(Func ("Prelude","/.") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [1,2] (Case Rigid (Var 1) [(Branch (Pattern ([],"float") [3]) (Case Rigid (Var 2) [(Branch (Pattern ([],"float") [4]) (Comb ConsCall ([],"float") [(Comb FuncCall ("Prelude","primDivFloat") [(Var 3),(Var 4)])]))]))]))),(Func ("Prelude","_inst#Prelude.Num#Prelude.Int") 0 Public (TCons ("Prelude","_Dict#Num") [(TCons ("Prelude","Int") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Num") [(Comb (FuncPartCall 2) ("Prelude","_impl#+#Prelude.Num#Prelude.Int") []),(Comb (FuncPartCall 2) ("Prelude","_impl#-#Prelude.Num#Prelude.Int") []),(Comb (FuncPartCall 2) ("Prelude","_impl#*#Prelude.Num#Prelude.Int") []),(Comb (FuncPartCall 1) ("Prelude","_impl#negate#Prelude.Num#Prelude.Int") []),(Comb (FuncPartCall 1) ("Prelude","_impl#abs#Prelude.Num#Prelude.Int") []),(Comb (FuncPartCall 1) ("Prelude","_impl#signum#Prelude.Num#Prelude.Int") []),(Comb (FuncPartCall 1) ("Prelude","_impl#fromInt#Prelude.Num#Prelude.Int") [])]))),(Func ("Prelude","_impl#+#Prelude.Num#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Comb FuncCall ("Prelude","+$") [(Var 1),(Var 2)]))),(Func ("Prelude","_impl#-#Prelude.Num#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Comb FuncCall ("Prelude","-$") [(Var 1),(Var 2)]))),(Func ("Prelude","_impl#*#Prelude.Num#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Comb FuncCall ("Prelude","*$") [(Var 1),(Var 2)]))),(Func ("Prelude","_impl#negate#Prelude.Num#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Comb FuncCall ("Prelude","-$") [(Lit (Intc 0)),(Var 1)]))),(Func ("Prelude","_impl#abs#Prelude.Num#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Int") [(Var 1),(Comb FuncCall ("Prelude","_impl#fromInt#Prelude.Num#Prelude.Int") [(Lit (Intc 0))])]) [(Branch (Pattern ("Prelude","True") []) (Var 1)),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","_impl#negate#Prelude.Num#Prelude.Int") [(Var 1)])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))),(Func ("Prelude","_impl#signum#Prelude.Num#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","_impl#>#Prelude.Ord#Prelude.Int") [(Var 1),(Comb FuncCall ("Prelude","_impl#fromInt#Prelude.Num#Prelude.Int") [(Lit (Intc 0))])]) [(Branch (Pattern ("Prelude","True") []) (Lit (Intc 1))),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") [(Var 1),(Comb FuncCall ("Prelude","_impl#fromInt#Prelude.Num#Prelude.Int") [(Lit (Intc 0))])]) [(Branch (Pattern ("Prelude","True") []) (Lit (Intc 0))),(Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","_impl#negate#Prelude.Num#Prelude.Int") [(Lit (Intc 1))])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") []))]))]))]))),(Func ("Prelude","_impl#fromInt#Prelude.Num#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Var 1))),(Func ("Prelude","_inst#Prelude.Real#Prelude.Int") 0 Public (TCons ("Prelude","_Dict#Real") [(TCons ("Prelude","Int") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Real") [(Comb FuncCall ("Prelude","_inst#Prelude.Num#Prelude.Int") []),(Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Int") [])]))),(Func ("Prelude","_inst#Prelude.Integral#Prelude.Int") 0 Public (TCons ("Prelude","_Dict#Integral") [(TCons ("Prelude","Int") [])]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Integral") [(Comb FuncCall ("Prelude","_inst#Prelude.Real#Prelude.Int") []),(Comb (FuncPartCall 2) ("Prelude","_impl#div#Prelude.Integral#Prelude.Int") []),(Comb (FuncPartCall 2) ("Prelude","_impl#mod#Prelude.Integral#Prelude.Int") []),(Comb (FuncPartCall 2) ("Prelude","_impl#quot#Prelude.Integral#Prelude.Int") []),(Comb (FuncPartCall 2) ("Prelude","_impl#rem#Prelude.Integral#Prelude.Int") []),(Comb (FuncPartCall 2) ("Prelude","_impl#divMod#Prelude.Integral#Prelude.Int") []),(Comb (FuncPartCall 2) ("Prelude","_impl#quotRem#Prelude.Integral#Prelude.Int") [])]))),(Func ("Prelude","_impl#div#Prelude.Integral#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Comb FuncCall ("Prelude","div_") [(Var 1),(Var 2)]))),(Func ("Prelude","_impl#mod#Prelude.Integral#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Comb FuncCall ("Prelude","mod_") [(Var 1),(Var 2)]))),(Func ("Prelude","_impl#quot#Prelude.Integral#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Comb FuncCall ("Prelude","quot_") [(Var 1),(Var 2)]))),(Func ("Prelude","_impl#rem#Prelude.Integral#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Comb FuncCall ("Prelude","rem_") [(Var 1),(Var 2)]))),(Func ("Prelude","_impl#divMod#Prelude.Integral#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [(TCons ("Prelude","Int") []),(TCons ("Prelude","Int") [])]))) (Rule [1,2] (Comb ConsCall ("Prelude","(,)") [(Comb FuncCall ("Prelude","div_") [(Var 1),(Var 2)]),(Comb FuncCall ("Prelude","mod_") [(Var 1),(Var 2)])]))),(Func ("Prelude","_impl#quotRem#Prelude.Integral#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [(TCons ("Prelude","Int") []),(TCons ("Prelude","Int") [])]))) (Rule [1,2] (Comb ConsCall ("Prelude","(,)") [(Comb FuncCall ("Prelude","quot_") [(Var 1),(Var 2)]),(Comb FuncCall ("Prelude","rem_") [(Var 1),(Var 2)])]))),(Func ("Prelude","pow") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Float") []))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") []),(Var 2)]),(Lit (Intc 0))]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","_impl#/#Prelude.Fractional#Prelude.Float") [(Lit (Floatc 1.0)),(Comb FuncCall ("Prelude","powaux") [(Lit (Floatc 1.0)),(Var 1),(Comb FuncCall ("Prelude","_impl#negate#Prelude.Num#Prelude.Int") [(Var 2)])])])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","powaux") [(Lit (Floatc 1.0)),(Var 1),(Var 2)]))]))),(Func ("Prelude","powaux") 3 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Float") [])))) (Rule [1,2,3] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") [(Var 3),(Lit (Intc 0))]) [(Branch (Pattern ("Prelude","True") []) (Var 1)),(Branch (Pattern ("Prelude","False") []) (Let [(4,(Comb FuncCall ("Prelude","square") [(Var 2)])),(5,(Comb FuncCall ("Prelude","halve") [(Var 3)]))] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#mod#Prelude.Integral#Prelude.Int") []),(Var 3)]),(Lit (Intc 2))]),(Lit (Intc 1))]) [(Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","powaux") [(Comb FuncCall ("Prelude","_impl#*#Prelude.Num#Prelude.Float") [(Var 1),(Var 2)]),(Var 4),(Var 5)])),(Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","powaux") [(Var 1),(Var 4),(Var 5)]))])))]))),(Func ("Prelude","halve") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","apply") [(Comb FuncCall ("Prelude","_impl#div#Prelude.Integral#Prelude.Int") []),(Var 1)]),(Lit (Intc 2))]))),(Func ("Prelude","square") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [1] (Comb FuncCall ("Prelude","_impl#*#Prelude.Num#Prelude.Float") [(Var 1),(Var 1)])))] [])